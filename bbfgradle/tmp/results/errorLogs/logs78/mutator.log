2021-03-12 04:36:11,295 [main:66] - Compilation checking started
2021-03-12 04:36:12,529 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:12,726 [main:45] - Trying to change 3 nodes
2021-03-12 04:36:12,734 [main:53] - replacing (foo(), Int)
2021-03-12 04:36:12,734 [main:50] - replacing foo() Int
2021-03-12 04:36:12,734 [main:54] - Getting value of type Int
2021-03-12 04:36:12,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:12,822 [main:58] - GENERATED VALUE OF TYPE Int = 524984506
2021-03-12 04:36:12,823 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:13,825 [main:67] - randomType = Collection<Function1<ULong, A?>>
2021-03-12 04:36:13,826 [main:106] - GETTING Int from Int
2021-03-12 04:36:13,995 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d8c2de8]]
2021-03-12 04:36:13,995 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d8c2de8]
2021-03-12 04:36:13,997 [main:117] - GENERATED CALL = (A().x()).takeLowestOneBit()
2021-03-12 04:36:13,997 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@756e526], public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6dcb0640]]
2021-03-12 04:36:13,997 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@756e526]
2021-03-12 04:36:13,998 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6dcb0640]
2021-03-12 04:36:13,999 [main:117] - GENERATED CALL = (A().x()).toDouble().toInt()
2021-03-12 04:36:13,999 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]]
2021-03-12 04:36:13,999 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:14,123 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:14,124 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]
2021-03-12 04:36:14,126 [main:117] - GENERATED CALL = (A().x()).compareTo(-657956803).inc()
2021-03-12 04:36:14,126 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3897209]]
2021-03-12 04:36:14,126 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3897209]
2021-03-12 04:36:14,234 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:14,236 [main:117] - GENERATED CALL = (A().x()).plus(69)
2021-03-12 04:36:14,237 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]]
2021-03-12 04:36:14,237 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]
2021-03-12 04:36:14,238 [main:117] - GENERATED CALL = (A().x()).inc()
2021-03-12 04:36:14,239 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]]
2021-03-12 04:36:14,239 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:14,239 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]
2021-03-12 04:36:14,241 [main:117] - GENERATED CALL = (A().x()).toInt().coerceIn(x, x)
2021-03-12 04:36:14,242 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8d4a94]]
2021-03-12 04:36:14,242 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:14,355 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:14,357 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8d4a94]
2021-03-12 04:36:14,358 [main:117] - GENERATED CALL = (A().x()).compareTo(2114878726).rotateRight(x)
2021-03-12 04:36:14,359 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]]
2021-03-12 04:36:14,359 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:14,439 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:14,440 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]
2021-03-12 04:36:14,442 [main:117] - GENERATED CALL = (A().x()).compareTo(-98833345).coerceIn(x, A().x())
2021-03-12 04:36:14,443 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@607f76a1]]
2021-03-12 04:36:14,443 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:14,443 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@607f76a1]
2021-03-12 04:36:14,445 [main:117] - GENERATED CALL = (A().x()).toInt().toInt()
2021-03-12 04:36:14,445 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:36:14,445 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:14,445 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:36:14,447 [main:117] - GENERATED CALL = (A().x()).toInt().unaryPlus()
2021-03-12 04:36:14,447 [main:61] - replacement of foo() of type Int is (A().x()).compareTo(-98833345).coerceIn(x, A().x())
2021-03-12 04:36:14,547 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:14,547 [main:66] - Compilation checking started
2021-03-12 04:36:14,951 [main:49] - Result = false
Text:
open class A {
    open fun x(x: Int = (A().x()).compareTo(-98833345).coerceIn(x, A().x())) = x
    private fun foo() = 42
}
2021-03-12 04:36:14,953 [main:53] - replacing (x, Int)
2021-03-12 04:36:14,953 [main:50] - replacing x Int
2021-03-12 04:36:14,954 [main:54] - Getting value of type Int
2021-03-12 04:36:15,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:15,044 [main:58] - GENERATED VALUE OF TYPE Int = -800549157
2021-03-12 04:36:15,044 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:15,129 [main:67] - randomType = Boolean
2021-03-12 04:36:15,227 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:15,255 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37568ac9]
2021-03-12 04:36:15,370 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:15,371 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:36:15,372 [main:78] - Generated call from random type = (true).compareTo(false).unaryPlus()
2021-03-12 04:36:15,373 [main:61] - replacement of x of type Int is (true).compareTo(false).unaryPlus()
2021-03-12 04:36:15,450 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:15,451 [main:66] - Compilation checking started
2021-03-12 04:36:15,806 [main:53] - Result = true
Text:
open class A {
    open fun x(x: Int = foo()) = (true).compareTo(false).unaryPlus()
    private fun foo() = 42
}
2021-03-12 04:36:15,806 [main:53] - replacing (x, Int)
2021-03-12 04:36:15,806 [main:50] - replacing x Int
2021-03-12 04:36:15,806 [main:54] - Getting value of type Int
2021-03-12 04:36:15,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:15,909 [main:58] - GENERATED VALUE OF TYPE Int = -650845402
2021-03-12 04:36:15,909 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:16,007 [main:67] - randomType = A
2021-03-12 04:36:16,099 [main:302] - generating value of type = A false depth = 0
2021-03-12 04:36:16,099 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = (true).compareTo(false).unaryPlus()
    private fun foo() = 42
}
2021-03-12 04:36:16,115 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@205f10ec]
2021-03-12 04:36:16,225 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:16,226 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-12 04:36:16,228 [main:78] - Generated call from random type = (A()).x(-1469301412).shr(A().x())
2021-03-12 04:36:16,228 [main:106] - GETTING Int from Int
2021-03-12 04:36:16,299 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@233352da]]
2021-03-12 04:36:16,299 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:16,299 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@233352da]
2021-03-12 04:36:16,373 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:16,375 [main:117] - GENERATED CALL = (A().x()).compareTo(A().x()).times(35)
2021-03-12 04:36:16,375 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]]
2021-03-12 04:36:16,375 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]
2021-03-12 04:36:16,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:16,447 [main:117] - GENERATED CALL = (A().x()).coerceIn(A().x(), -1362700037)
2021-03-12 04:36:16,447 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]]
2021-03-12 04:36:16,447 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:16,448 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]
2021-03-12 04:36:16,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:16,536 [main:117] - GENERATED CALL = (A().x()).compareTo(A().x()).or(-1476221681)
2021-03-12 04:36:16,536 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:36:16,536 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:16,537 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:36:16,538 [main:117] - GENERATED CALL = (A().x()).toInt().unaryPlus()
2021-03-12 04:36:16,538 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]]
2021-03-12 04:36:16,538 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:16,539 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]
2021-03-12 04:36:16,540 [main:117] - GENERATED CALL = (A().x()).toInt().coerceAtLeast(A().x())
2021-03-12 04:36:16,540 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@76f1d19f]]
2021-03-12 04:36:16,540 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:36:16,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@76f1d19f]
2021-03-12 04:36:16,626 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:16,627 [main:117] - GENERATED CALL = (A().x()).toByte().rem(-81)
2021-03-12 04:36:16,627 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5ce0d1aa]]
2021-03-12 04:36:16,628 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3]
2021-03-12 04:36:16,628 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5ce0d1aa]
2021-03-12 04:36:16,718 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:16,719 [main:117] - GENERATED CALL = (A().x()).toShort().compareTo(98)
2021-03-12 04:36:16,720 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-12 04:36:16,720 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-12 04:36:16,721 [main:117] - GENERATED CALL = (A().x()).dec()
2021-03-12 04:36:16,721 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-12 04:36:16,721 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:16,721 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-12 04:36:16,722 [main:117] - GENERATED CALL = (A().x()).compareTo(A().x()).dec()
2021-03-12 04:36:16,723 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 04:36:16,723 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:16,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 04:36:16,724 [main:117] - GENERATED CALL = (A().x()).toInt().countLeadingZeroBits()
2021-03-12 04:36:16,724 [main:61] - replacement of x of type Int is -650845402
2021-03-12 04:36:16,840 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 04:36:16,949 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 04:36:17,025 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 04:36:17,025 [main:66] - Compilation checking started
2021-03-12 04:36:17,303 [main:53] - Result = true
Text:
open class A {
    open fun x(x: Int = foo()) = ((true)).compareTo(false).unaryPlus()
    private fun foo() = 42
}
2021-03-12 04:36:17,303 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 04:36:17,416 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 04:36:17,417 [main:66] - Compilation checking started
2021-03-12 04:36:17,738 [main:41] - AFTER TRY 0 res = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:17,881 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:18,049 [main:43] - Try №0
2021-03-12 04:36:19,082 [main:48] - Already checked
2021-03-12 04:36:19,736 [main:69] - Trying to insert fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = Kla0().fu0().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if (prope1?.getName() != "foo") return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return "OK"
}
2021-03-12 04:36:19,841 [main:66] - Compilation checking started
2021-03-12 04:36:20,389 [main:103] - Trying to change 13 nodes
2021-03-12 04:36:20,390 [main:107] - replacing (fu0(), Any)
2021-03-12 04:36:20,390 [main:50] - replacing fu0() Any
2021-03-12 04:36:20,390 [main:54] - Getting value of type Any
2021-03-12 04:36:20,474 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:20,476 [main:58] - GENERATED VALUE OF TYPE Any = "pxbgn"
2021-03-12 04:36:20,476 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:20,579 [main:67] - randomType = A
2021-03-12 04:36:20,680 [main:302] - generating value of type = A false depth = 0
2021-03-12 04:36:20,680 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:20,705 [main:106] - GETTING Any from Int
2021-03-12 04:36:20,776 [main:114] - replacement of fu0() of type Any is A().x()
2021-03-12 04:36:20,863 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:20,864 [main:66] - Compilation checking started
2021-03-12 04:36:21,030 [main:49] - Result = false
Text:
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = Kla0().A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if (prope1?.getName() != "foo") return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return "OK"
}


2021-03-12 04:36:21,030 [main:107] - replacing (fu0(), Any)
2021-03-12 04:36:21,030 [main:50] - replacing fu0() Any
2021-03-12 04:36:21,031 [main:54] - Getting value of type Any
2021-03-12 04:36:21,114 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:21,114 [main:58] - GENERATED VALUE OF TYPE Any = "frdpw"
2021-03-12 04:36:21,114 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:21,318 [main:67] - randomType = A?
2021-03-12 04:36:21,402 [main:302] - generating value of type = A false depth = 0
2021-03-12 04:36:21,402 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:21,414 [main:106] - GETTING Any from Int
2021-03-12 04:36:21,466 [main:114] - replacement of fu0() of type Any is A().x()
2021-03-12 04:36:21,552 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:21,553 [main:66] - Compilation checking started
2021-03-12 04:36:21,719 [main:49] - Result = false
Text:
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = Kla0().A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if (prope1?.getName() != "foo") return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return "OK"
}


2021-03-12 04:36:21,719 [main:107] - replacing (prope1?.getName() != "foo", Boolean)
2021-03-12 04:36:21,719 [main:50] - replacing prope1?.getName() != "foo" Boolean
2021-03-12 04:36:21,719 [main:54] - Getting value of type Boolean
2021-03-12 04:36:21,803 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:21,803 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:36:21,804 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:21,892 [main:67] - randomType = A
2021-03-12 04:36:21,977 [main:302] - generating value of type = A false depth = 0
2021-03-12 04:36:21,977 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:21,985 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@3b0e857d]
2021-03-12 04:36:22,097 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:22,098 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7fc83c47]
2021-03-12 04:36:22,181 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:22,182 [main:78] - Generated call from random type = (A()).equals("qcpqp").and(true)
2021-03-12 04:36:22,184 [main:106] - GETTING Boolean from Int
2021-03-12 04:36:22,236 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49b8d338]]
2021-03-12 04:36:22,236 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:22,237 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49b8d338]
2021-03-12 04:36:22,237 [main:117] - GENERATED CALL = (A().x()).toChar().isUpperCase()
2021-03-12 04:36:22,238 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]]
2021-03-12 04:36:22,238 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:22,238 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]
2021-03-12 04:36:22,326 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:22,327 [main:117] - GENERATED CALL = (A().x()).toInt().equals("qqzwv")
2021-03-12 04:36:22,327 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77c1dc5d]]
2021-03-12 04:36:22,327 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]
2021-03-12 04:36:22,415 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:22,416 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77c1dc5d]
2021-03-12 04:36:22,505 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:22,506 [main:117] - GENERATED CALL = (A().x()).equals("vjkxt").or(true)
2021-03-12 04:36:22,506 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38f563e4], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7b1ca32d]]
2021-03-12 04:36:22,506 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38f563e4]
2021-03-12 04:36:22,592 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:36:22,593 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@7b1ca32d]
2021-03-12 04:36:22,594 [main:117] - GENERATED CALL = (A().x()).div(0.7160440909299548).isInfinite()
2021-03-12 04:36:22,594 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d884f]]
2021-03-12 04:36:22,594 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:22,595 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d884f]
2021-03-12 04:36:22,595 [main:117] - GENERATED CALL = (A().x()).toChar().isHighSurrogate()
2021-03-12 04:36:22,595 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@643d449a]]
2021-03-12 04:36:22,596 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:36:22,596 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@643d449a]
2021-03-12 04:36:22,691 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:22,692 [main:117] - GENERATED CALL = (A().x()).toByte().equals("lqexr")
2021-03-12 04:36:22,692 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ddadccf]]
2021-03-12 04:36:22,692 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:22,693 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ddadccf]
2021-03-12 04:36:22,693 [main:117] - GENERATED CALL = (A().x()).toChar().isLetter()
2021-03-12 04:36:22,693 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38f563e4], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e4fe7ba]]
2021-03-12 04:36:22,693 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@38f563e4]
2021-03-12 04:36:22,818 [main:302] - generating value of type = Double true depth = 0
2021-03-12 04:36:22,818 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e4fe7ba]
2021-03-12 04:36:22,819 [main:117] - GENERATED CALL = (A().x()).div(0.24522648903818856).isFinite()
2021-03-12 04:36:22,819 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63b16764]]
2021-03-12 04:36:22,819 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]
2021-03-12 04:36:22,941 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:22,942 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63b16764]
2021-03-12 04:36:23,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:23,022 [main:117] - GENERATED CALL = (A().x()).equals("rffew").xor(true)
2021-03-12 04:36:23,022 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bceaf53]]
2021-03-12 04:36:23,022 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:23,022 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bceaf53]
2021-03-12 04:36:23,023 [main:117] - GENERATED CALL = (A().x()).toChar().isDefined()
2021-03-12 04:36:23,023 [main:114] - replacement of prope1?.getName() != "foo" of type Boolean is (A().x()).toChar().isUpperCase()
2021-03-12 04:36:23,102 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:23,103 [main:66] - Compilation checking started
2021-03-12 04:36:23,482 [main:53] - Result = true
Text:
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = Kla0().fu0().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return "OK"
}


2021-03-12 04:36:23,482 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 04:36:23,483 [main:50] - replacing {} Function0<Unit>
2021-03-12 04:36:23,483 [main:54] - Getting value of type Function0<Unit>
2021-03-12 04:36:23,569 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 04:36:23,569 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:36:23,676 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:36:23,679 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:36:23,868 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 04:36:23,868 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 04:36:23,961 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:36:23,963 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 04:36:24,143 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 04:36:24,143 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 04:36:24,242 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:36:24,243 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:36:24,578 [main:302] - generating value of type = Int true depth = 12
2021-03-12 04:36:24,578 [main:302] - generating value of type = Function1<Int, Unit> false depth = 12
2021-03-12 04:36:24,578 [main:302] - generating value of type = Unit false depth = 13
2021-03-12 04:36:24,673 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:36:24,676 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:36:24,851 [main:302] - generating value of type = Any false depth = 16
2021-03-12 04:36:24,852 [main:385] - Cant generate call of fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:36:24,852 [main:95] - GENERATED = repeat(1983359841, {a: Int -> })
2021-03-12 04:36:24,853 [main:95] - GENERATED = contract({ repeat(1983359841, {a: Int -> })})
2021-03-12 04:36:24,854 [main:95] - GENERATED = contract({ contract({ repeat(1983359841, {a: Int -> })})})
2021-03-12 04:36:24,854 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ repeat(1983359841, {a: Int -> })})})}
2021-03-12 04:36:24,854 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:24,855 [main:67] - randomType = Boolean
2021-03-12 04:36:24,959 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:24,974 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 04:36:25,046 [main:114] - replacement of {} of type Function0<Unit> is { contract({ contract({ repeat(1983359841, {a: Int -> })})})}
2021-03-12 04:36:25,134 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:36:25,134 [main:66] - Compilation checking started
2021-03-12 04:36:25,376 [main:49] - Result = false
Text:
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return { contract({ contract({ repeat(1983359841, {a: Int -> })})})}
        }
    }

    val javaClass = Kla0().fu0().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return "OK"
}


2021-03-12 04:36:25,377 [main:107] - replacing (Kla0().fu0(), Any)
2021-03-12 04:36:25,377 [main:50] - replacing Kla0().fu0() Any
2021-03-12 04:36:25,377 [main:54] - Getting value of type Any
2021-03-12 04:36:25,473 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:25,473 [main:58] - GENERATED VALUE OF TYPE Any = "comhk"
2021-03-12 04:36:25,473 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:25,474 [main:67] - randomType = String
2021-03-12 04:36:25,556 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:25,586 [main:106] - GETTING Any from Int
2021-03-12 04:36:25,627 [main:114] - replacement of Kla0().fu0() of type Any is A().x()
2021-03-12 04:36:25,707 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:25,707 [main:66] - Compilation checking started
2021-03-12 04:36:26,035 [main:53] - Result = true
Text:
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return "OK"
}


2021-03-12 04:36:26,035 [main:107] - replacing ("OK", String)
2021-03-12 04:36:26,035 [main:50] - replacing "OK" String
2021-03-12 04:36:26,035 [main:54] - Getting value of type String
2021-03-12 04:36:26,121 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:26,121 [main:58] - GENERATED VALUE OF TYPE String = "yzmfc"
2021-03-12 04:36:26,121 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:26,208 [main:67] - randomType = Byte
2021-03-12 04:36:26,290 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:26,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:36:26,341 [main:78] - Generated call from random type = (-36).toString(A().x())
2021-03-12 04:36:26,342 [main:106] - GETTING String from Int
2021-03-12 04:36:26,397 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:26,397 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:26,482 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:26,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:26,483 [main:117] - GENERATED CALL = (A().x()).compareTo(-282471750).toString(A().x())
2021-03-12 04:36:26,483 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:26,483 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:26,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:26,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:26,567 [main:117] - GENERATED CALL = (A().x()).toInt().toString(1979636185)
2021-03-12 04:36:26,567 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]]
2021-03-12 04:36:26,567 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:26,568 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]
2021-03-12 04:36:26,568 [main:117] - GENERATED CALL = (A().x()).toChar().lowercase()
2021-03-12 04:36:26,568 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]]
2021-03-12 04:36:26,568 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:26,568 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]
2021-03-12 04:36:26,655 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:26,656 [main:117] - GENERATED CALL = (A().x()).toChar().plus("mjlmv")
2021-03-12 04:36:26,656 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]]
2021-03-12 04:36:26,656 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:36:26,656 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:36:26,657 [main:117] - GENERATED CALL = (A().x()).toByte().toString(A().x())
2021-03-12 04:36:26,657 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]]
2021-03-12 04:36:26,657 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3]
2021-03-12 04:36:26,657 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]
2021-03-12 04:36:26,658 [main:117] - GENERATED CALL = (A().x()).toShort().toString(A().x())
2021-03-12 04:36:26,658 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:36:26,658 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:36:26,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:36:26,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:26,739 [main:117] - GENERATED CALL = (A().x()).toLong().toString(1297123286)
2021-03-12 04:36:26,740 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]]
2021-03-12 04:36:26,740 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:26,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]
2021-03-12 04:36:26,740 [main:117] - GENERATED CALL = (A().x()).toChar().uppercase()
2021-03-12 04:36:26,740 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:26,740 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:26,821 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:26,821 [main:117] - GENERATED CALL = (A().x()).toString(-1277641870)
2021-03-12 04:36:26,822 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]]
2021-03-12 04:36:26,822 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:26,822 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]
2021-03-12 04:36:26,822 [main:117] - GENERATED CALL = (A().x()).toChar().titlecase()
2021-03-12 04:36:26,822 [main:114] - replacement of "OK" of type String is (A().x()).toChar().plus("mjlmv")
2021-03-12 04:36:26,904 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:26,905 [main:66] - Compilation checking started
2021-03-12 04:36:27,287 [main:53] - Result = true
Text:
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}


2021-03-12 04:36:27,378 [main:41] - AFTER TRY 1 res = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}


2021-03-12 04:36:27,558 [main:112] - generating klass A text = open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}
2021-03-12 04:36:27,559 [main:112] - generating klass Kla0 text = class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }
2021-03-12 04:36:27,745 [main:43] - Try №1
2021-03-12 04:36:39,720 [main:48] - Already checked
2021-03-12 04:36:43,991 [main:69] - Trying to insert suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}
2021-03-12 04:36:44,106 [main:66] - Compilation checking started
2021-03-12 04:36:45,310 [main:103] - Trying to change 243 nodes
2021-03-12 04:36:45,310 [main:107] - replacing (1, Int)
2021-03-12 04:36:45,310 [main:50] - replacing 1 Int
2021-03-12 04:36:45,310 [main:54] - Getting value of type Int
2021-03-12 04:36:45,476 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:45,478 [main:58] - GENERATED VALUE OF TYPE Int = 1561245396
2021-03-12 04:36:45,479 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:45,659 [main:67] - randomType = Short
2021-03-12 04:36:45,818 [main:302] - generating value of type = Short true depth = 0
2021-03-12 04:36:45,883 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:45,883 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-12 04:36:45,884 [main:78] - Generated call from random type = (13108).toInt().shr((A().x()))
2021-03-12 04:36:45,885 [main:106] - GETTING Int from A
2021-03-12 04:36:45,893 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]]
2021-03-12 04:36:45,893 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:45,894 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]
2021-03-12 04:36:45,894 [main:117] - GENERATED CALL = (A()).x(A().x()).ushr(A().x())
2021-03-12 04:36:45,894 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1460458c]]
2021-03-12 04:36:45,895 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:45,895 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1460458c]
2021-03-12 04:36:46,071 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:46,075 [main:117] - GENERATED CALL = (A()).x(A().x()).minus(-118)
2021-03-12 04:36:46,075 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]]
2021-03-12 04:36:46,075 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,075 [main:117] - GENERATED CALL = (A()).x(A().x())
2021-03-12 04:36:46,075 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@778e928c]]
2021-03-12 04:36:46,076 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,076 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@778e928c]
2021-03-12 04:36:46,223 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:46,226 [main:117] - GENERATED CALL = (A()).x((A().x())).compareTo(-13)
2021-03-12 04:36:46,226 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@75a8d59d]]
2021-03-12 04:36:46,227 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,227 [main:117] - GENERATED CALL = (A()).x(A().x()).sign
2021-03-12 04:36:46,227 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:36:46,227 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,228 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:36:46,228 [main:117] - GENERATED CALL = (A()).x((A().x())).unaryPlus()
2021-03-12 04:36:46,228 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8d4a94]]
2021-03-12 04:36:46,228 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:46,380 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7c8d4a94]
2021-03-12 04:36:46,381 [main:117] - GENERATED CALL = (A()).x(106340032).rotateRight(A().x())
2021-03-12 04:36:46,381 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]]
2021-03-12 04:36:46,381 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,535 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:46,538 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]
2021-03-12 04:36:46,539 [main:117] - GENERATED CALL = (A()).x(-1739140786).or(A().x())
2021-03-12 04:36:46,539 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37568ac9]]
2021-03-12 04:36:46,539 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:36:46,689 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:36:46,689 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37568ac9]
2021-03-12 04:36:46,841 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:36:46,844 [main:117] - GENERATED CALL = (A()).equals("skkmu").compareTo(true)
2021-03-12 04:36:46,845 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]]
2021-03-12 04:36:46,845 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:46,845 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-12 04:36:46,846 [main:117] - GENERATED CALL = (A()).x(A().x()).shr(A().x())
2021-03-12 04:36:46,846 [main:114] - replacement of 1 of type Int is (A()).x(A().x()).sign
2021-03-12 04:36:46,997 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:46,997 [main:66] - Compilation checking started
2021-03-12 04:36:47,479 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (A()).x(A().x()).sign, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:36:47,483 [main:107] - replacing (method, String)
2021-03-12 04:36:47,484 [main:50] - replacing method String
2021-03-12 04:36:47,484 [main:54] - Getting value of type String
2021-03-12 04:36:47,629 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:47,631 [main:58] - GENERATED VALUE OF TYPE String = "gpwxf"
2021-03-12 04:36:47,632 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:47,642 [main:67] - randomType = Kla1
2021-03-12 04:36:47,804 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:36:47,809 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}
2021-03-12 04:36:47,956 [main:194] - Type params = []
2021-03-12 04:36:48,090 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:36:48,232 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:36:48,237 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:36:48,598 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:36:48,746 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:36:48,750 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:36:49,250 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:36:49,250 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:36:49,267 [main:106] - GETTING String from Int
2021-03-12 04:36:49,324 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]]
2021-03-12 04:36:49,324 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3]
2021-03-12 04:36:49,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]
2021-03-12 04:36:49,324 [main:117] - GENERATED CALL = ((A().x())).toShort().toString((A().x()))
2021-03-12 04:36:49,324 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]]
2021-03-12 04:36:49,324 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:36:49,325 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:36:49,325 [main:117] - GENERATED CALL = ((A().x())).toByte().toString(A().x())
2021-03-12 04:36:49,325 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:36:49,325 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:36:49,325 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:36:49,475 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:49,477 [main:117] - GENERATED CALL = ((A().x())).toLong().toString(-364202302)
2021-03-12 04:36:49,478 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:36:49,478 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]
2021-03-12 04:36:49,625 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:36:49,628 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:36:49,628 [main:117] - GENERATED CALL = ((A().x())).div(-6762405361005791121).toString(A().x())
2021-03-12 04:36:49,628 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:49,628 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:49,629 [main:117] - GENERATED CALL = ((A().x())).toString(A().x())
2021-03-12 04:36:49,629 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:49,629 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:49,629 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:49,630 [main:117] - GENERATED CALL = ((A().x())).toInt().toString(A().x())
2021-03-12 04:36:49,630 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]]
2021-03-12 04:36:49,630 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:49,630 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]
2021-03-12 04:36:49,767 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:49,770 [main:117] - GENERATED CALL = ((A().x())).toChar().plus("nhvyx")
2021-03-12 04:36:49,771 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]]
2021-03-12 04:36:49,771 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:49,771 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]
2021-03-12 04:36:49,771 [main:117] - GENERATED CALL = ((A().x())).toChar().titlecase()
2021-03-12 04:36:49,771 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:49,771 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:49,922 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:49,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:50,057 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:50,060 [main:117] - GENERATED CALL = ((A().x())).compareTo(-1213012897).toString(1295011050)
2021-03-12 04:36:50,060 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]]
2021-03-12 04:36:50,060 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:36:50,060 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]
2021-03-12 04:36:50,060 [main:117] - GENERATED CALL = ((A().x())).toChar().lowercase()
2021-03-12 04:36:50,060 [main:114] - replacement of method of type String is ((A().x())).toChar().titlecase()
2021-03-12 04:36:50,189 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:50,190 [main:66] - Compilation checking started
2021-03-12 04:36:50,927 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:36:50,931 [main:107] - replacing (1, Int)
2021-03-12 04:36:50,931 [main:50] - replacing 1 Int
2021-03-12 04:36:50,932 [main:54] - Getting value of type Int
2021-03-12 04:36:51,128 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:51,132 [main:58] - GENERATED VALUE OF TYPE Int = 673334588
2021-03-12 04:36:51,133 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:51,514 [main:67] - randomType = ArrayList<UByte>
2021-03-12 04:36:51,644 [main:302] - generating value of type = ArrayList<UByte> false depth = 0
2021-03-12 04:36:51,780 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-12 04:36:51,784 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UByte): ArrayList<UByte> = TODO()
2021-03-12 04:36:51,927 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 04:36:51,930 [main:95] - GENERATED = arrayListOf<UByte>(60.toUByte())
2021-03-12 04:36:52,130 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@607f76a1]
2021-03-12 04:36:52,130 [main:78] - Generated call from random type = (arrayListOf<UByte>(60.toUByte())).modCount.toInt()
2021-03-12 04:36:52,131 [main:106] - GETTING Int from Int
2021-03-12 04:36:52,191 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@690b36c8]]
2021-03-12 04:36:52,192 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:36:52,192 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@690b36c8]
2021-03-12 04:36:52,192 [main:117] - GENERATED CALL = ((A().x())).toByte().toInt()
2021-03-12 04:36:52,192 [main:113] - Case = [public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1460458c]]
2021-03-12 04:36:52,192 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1460458c]
2021-03-12 04:36:52,326 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:52,329 [main:117] - GENERATED CALL = ((A().x())).minus(109)
2021-03-12 04:36:52,330 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156c2fa2]]
2021-03-12 04:36:52,330 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:52,330 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156c2fa2]
2021-03-12 04:36:52,330 [main:117] - GENERATED CALL = ((A().x())).compareTo((A().x())).and(A().x())
2021-03-12 04:36:52,331 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5a877525]]
2021-03-12 04:36:52,331 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3]
2021-03-12 04:36:52,331 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5a877525]
2021-03-12 04:36:52,331 [main:117] - GENERATED CALL = ((A().x())).toShort().unaryPlus()
2021-03-12 04:36:52,331 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:36:52,331 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:36:52,331 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:36:52,332 [main:117] - GENERATED CALL = ((A().x())).toInt().unaryPlus()
2021-03-12 04:36:52,332 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@123ea859]]
2021-03-12 04:36:52,332 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:36:52,332 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@123ea859]
2021-03-12 04:36:52,473 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:52,476 [main:117] - GENERATED CALL = ((A().x())).toByte().compareTo(98)
2021-03-12 04:36:52,476 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]]
2021-03-12 04:36:52,476 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:36:52,476 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]
2021-03-12 04:36:52,476 [main:117] - GENERATED CALL = ((A().x())).compareTo(A().x()).coerceAtLeast(A().x())
2021-03-12 04:36:52,476 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]]
2021-03-12 04:36:52,477 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]
2021-03-12 04:36:52,477 [main:117] - GENERATED CALL = ((A().x())).coerceAtLeast((A().x()))
2021-03-12 04:36:52,477 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]]
2021-03-12 04:36:52,477 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]
2021-03-12 04:36:52,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:52,609 [main:117] - GENERATED CALL = ((A().x())).ushr(943037155)
2021-03-12 04:36:52,610 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8cacdeb], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@223d3190]]
2021-03-12 04:36:52,610 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8cacdeb]
2021-03-12 04:36:52,743 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:52,746 [main:117] - GENERATED CALL = ((A().x())).rangeTo(115).endInclusive
2021-03-12 04:36:52,746 [main:114] - replacement of 1 of type Int is ((A().x())).compareTo((A().x())).and(A().x())
2021-03-12 04:36:52,888 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:52,889 [main:66] - Compilation checking started
2021-03-12 04:36:53,518 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope9 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:36:53,522 [main:107] - replacing (prope9, Int)
2021-03-12 04:36:53,523 [main:50] - replacing prope9 Int
2021-03-12 04:36:53,523 [main:54] - Getting value of type Int
2021-03-12 04:36:53,667 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:53,670 [main:58] - GENERATED VALUE OF TYPE Int = -1082190820
2021-03-12 04:36:53,670 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:53,682 [main:67] - randomType = Kla2
2021-03-12 04:36:53,827 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:36:53,830 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}
2021-03-12 04:36:53,857 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec287d]
2021-03-12 04:36:53,857 [main:78] - Generated call from random type = (Kla2()).prope7?.hashCode()!!
2021-03-12 04:36:53,858 [main:106] - GETTING Int from A
2021-03-12 04:36:53,866 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33aa6807]]
2021-03-12 04:36:53,866 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:54,025 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33aa6807]
2021-03-12 04:36:54,025 [main:117] - GENERATED CALL = (A()).x(-524777490).xor(A().x())
2021-03-12 04:36:54,026 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 04:36:54,026 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,026 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 04:36:54,026 [main:117] - GENERATED CALL = (A()).x((A().x())).rotateLeft((A().x()))
2021-03-12 04:36:54,026 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 04:36:54,026 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,160 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:54,163 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 04:36:54,164 [main:117] - GENERATED CALL = (A()).x(-1641307137).countLeadingZeroBits()
2021-03-12 04:36:54,164 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63d3006a]]
2021-03-12 04:36:54,164 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,164 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63d3006a]
2021-03-12 04:36:54,164 [main:117] - GENERATED CALL = (A()).x(A().x()).countOneBits()
2021-03-12 04:36:54,164 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60c69660]]
2021-03-12 04:36:54,164 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,304 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:54,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 04:36:54,307 [main:117] - GENERATED CALL = (A()).x(-933428998).countTrailingZeroBits()
2021-03-12 04:36:54,307 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]]
2021-03-12 04:36:54,307 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,308 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27d40d38]
2021-03-12 04:36:54,308 [main:117] - GENERATED CALL = (A()).x(A().x()).inc()
2021-03-12 04:36:54,308 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a689a]]
2021-03-12 04:36:54,308 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a689a]
2021-03-12 04:36:54,463 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:54,466 [main:117] - GENERATED CALL = (A()).x(A().x()).rem(-58)
2021-03-12 04:36:54,466 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8ea6dac]]
2021-03-12 04:36:54,466 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,467 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8ea6dac]
2021-03-12 04:36:54,596 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:54,599 [main:117] - GENERATED CALL = (A()).x((A().x())).div(113)
2021-03-12 04:36:54,600 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@233352da]]
2021-03-12 04:36:54,600 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,600 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@233352da]
2021-03-12 04:36:54,727 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:36:54,730 [main:117] - GENERATED CALL = (A()).x(A().x()).times(21)
2021-03-12 04:36:54,730 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]]
2021-03-12 04:36:54,731 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:36:54,731 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-12 04:36:54,731 [main:117] - GENERATED CALL = (A()).x(A().x()).shr((A().x()))
2021-03-12 04:36:54,731 [main:114] - replacement of prope9 of type Int is (A()).x(A().x()).rem(-58)
2021-03-12 04:36:54,859 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:54,859 [main:66] - Compilation checking started
2021-03-12 04:36:55,558 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:36:55,562 [main:107] - replacing (", got ", String)
2021-03-12 04:36:55,562 [main:50] - replacing ", got " String
2021-03-12 04:36:55,562 [main:54] - Getting value of type String
2021-03-12 04:36:55,700 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:55,703 [main:58] - GENERATED VALUE OF TYPE String = "yolhi"
2021-03-12 04:36:55,703 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:56,054 [main:67] - randomType = LinkedHashSet<UInt>
2021-03-12 04:36:56,187 [main:302] - generating value of type = LinkedHashSet<UInt> false depth = 0
2021-03-12 04:36:56,322 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<UInt>): LinkedHashSet<UInt> = TODO()
2021-03-12 04:36:56,326 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<UInt>): LinkedHashSet<UInt> = TODO()
2021-03-12 04:36:56,626 [main:302] - generating value of type = Collection<UInt> false depth = 3
2021-03-12 04:36:56,766 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: UInt): Collection<UInt> = TODO()
2021-03-12 04:36:56,771 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: UInt): Collection<UInt> = TODO()
2021-03-12 04:36:56,914 [main:302] - generating value of type = UInt true depth = 6
2021-03-12 04:36:56,917 [main:95] - GENERATED = listOfNotNull<UInt>(699798027.toUInt())
2021-03-12 04:36:56,917 [main:95] - GENERATED = LinkedHashSet<UInt>(listOfNotNull<UInt>(699798027.toUInt()))
2021-03-12 04:36:57,092 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@503d749e]
2021-03-12 04:36:57,092 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@76ca930d]
2021-03-12 04:36:57,093 [main:78] - Generated call from random type = (LinkedHashSet<UInt>(listOfNotNull<UInt>(699798027.toUInt()))).toArray().contentToString()
2021-03-12 04:36:57,094 [main:106] - GETTING String from Char
2021-03-12 04:36:57,120 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]]
2021-03-12 04:36:57,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]
2021-03-12 04:36:57,121 [main:117] - GENERATED CALL = ((A().x()).toChar()).lowercase()
2021-03-12 04:36:57,121 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:36:57,121 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:36:57,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:36:57,248 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:57,251 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().toString(-1076877615)
2021-03-12 04:36:57,251 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]]
2021-03-12 04:36:57,251 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79]
2021-03-12 04:36:57,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:36:57,251 [main:117] - GENERATED CALL = ((A().x()).toChar()).toByte().toString((A().x()))
2021-03-12 04:36:57,252 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]]
2021-03-12 04:36:57,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]
2021-03-12 04:36:57,252 [main:117] - GENERATED CALL = ((A().x()).toChar()).titlecase()
2021-03-12 04:36:57,252 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:36:57,252 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:36:57,252 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:36:57,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:57,403 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).toString(-281389151)
2021-03-12 04:36:57,403 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]]
2021-03-12 04:36:57,403 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]
2021-03-12 04:36:57,536 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:57,539 [main:117] - GENERATED CALL = ((A().x()).toChar()).plus("ujaij")
2021-03-12 04:36:57,539 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]]
2021-03-12 04:36:57,540 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]
2021-03-12 04:36:57,540 [main:117] - GENERATED CALL = ((A().x()).toChar()).uppercase()
2021-03-12 04:36:57,540 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]]
2021-03-12 04:36:57,540 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:36:57,540 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]
2021-03-12 04:36:57,540 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().toString((A().x()))
2021-03-12 04:36:57,540 [main:114] - replacement of ", got " of type String is ((A().x()).toChar()).toByte().toString((A().x()))
2021-03-12 04:36:57,669 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:36:57,670 [main:66] - Compilation checking started
2021-03-12 04:36:58,320 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:36:58,324 [main:107] - replacing (1, Int)
2021-03-12 04:36:58,324 [main:50] - replacing 1 Int
2021-03-12 04:36:58,324 [main:54] - Getting value of type Int
2021-03-12 04:36:58,469 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:36:58,472 [main:58] - GENERATED VALUE OF TYPE Int = -2016395120
2021-03-12 04:36:58,472 [main:61] - GENERATED IS CALL =false
2021-03-12 04:36:58,642 [main:67] - randomType = Kla2?
2021-03-12 04:36:58,776 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:36:58,779 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}
2021-03-12 04:36:58,813 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Any?.hashCode(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ec287d]
2021-03-12 04:36:58,814 [main:78] - Generated call from random type = (Kla2())?.prope7?.hashCode()!!
2021-03-12 04:36:58,814 [main:114] - replacement of 1 of type Int is (Kla2())?.prope7?.hashCode()!!
2021-03-12 04:36:58,983 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(POSTFIX_EXPRESSION)
2021-03-12 04:36:58,984 [main:66] - Compilation checking started
2021-03-12 04:36:59,696 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:36:59,699 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-12 04:36:59,699 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-12 04:36:59,699 [main:54] - Getting value of type String
2021-03-12 04:36:59,842 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:36:59,845 [main:58] - GENERATED VALUE OF TYPE String = "oxypj"
2021-03-12 04:36:59,846 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:00,154 [main:67] - randomType = Sequence<Float>
2021-03-12 04:37:00,155 [main:106] - GETTING String from Char
2021-03-12 04:37:00,186 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]]
2021-03-12 04:37:00,187 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:37:00,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]
2021-03-12 04:37:00,326 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:00,330 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().toString(116408918)
2021-03-12 04:37:00,330 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]]
2021-03-12 04:37:00,330 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]
2021-03-12 04:37:00,466 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:00,470 [main:117] - GENERATED CALL = ((A().x()).toChar()).plus("oavlo")
2021-03-12 04:37:00,470 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:37:00,470 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:00,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:37:00,470 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().toString((A().x()))
2021-03-12 04:37:00,470 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]]
2021-03-12 04:37:00,470 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]
2021-03-12 04:37:00,471 [main:117] - GENERATED CALL = ((A().x()).toChar()).uppercase()
2021-03-12 04:37:00,471 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:00,471 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:00,471 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:00,471 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).toString(A().x())
2021-03-12 04:37:00,471 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]]
2021-03-12 04:37:00,471 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]
2021-03-12 04:37:00,471 [main:117] - GENERATED CALL = ((A().x()).toChar()).titlecase()
2021-03-12 04:37:00,471 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]]
2021-03-12 04:37:00,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]
2021-03-12 04:37:00,472 [main:117] - GENERATED CALL = ((A().x()).toChar()).lowercase()
2021-03-12 04:37:00,472 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]]
2021-03-12 04:37:00,472 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79]
2021-03-12 04:37:00,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:37:00,472 [main:117] - GENERATED CALL = ((A().x()).toChar()).toByte().toString((A().x()))
2021-03-12 04:37:00,472 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is ((A().x()).toChar()).toShort().toString(116408918)
2021-03-12 04:37:00,625 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:00,625 [main:66] - Compilation checking started
2021-03-12 04:37:01,259 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:01,262 [main:107] - replacing ({
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    }, SuspendFunction0<Unit>)
2021-03-12 04:37:01,262 [main:50] - replacing {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    } SuspendFunction0<Unit>
2021-03-12 04:37:01,262 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 04:37:01,390 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 04:37:01,393 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:37:01,547 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:37:01,552 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 04:37:01,883 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 04:37:01,887 [main:95] - GENERATED = require(true)
2021-03-12 04:37:01,887 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(true)}
2021-03-12 04:37:01,887 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:02,212 [main:67] - randomType = Kla6?
2021-03-12 04:37:02,341 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 04:37:02,344 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 04:37:02,372 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 04:37:02,419 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-12 04:37:02,445 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 04:37:02,446 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-12 04:37:02,454 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 04:37:02,454 [main:114] - replacement of {
        prope6 = fu2 { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, s -> s }
    } of type SuspendFunction0<Unit> is { require(true)}
2021-03-12 04:37:02,589 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:37:02,590 [main:66] - Compilation checking started
2021-03-12 04:37:03,226 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:03,230 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 04:37:03,230 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 04:37:03,230 [main:54] - Getting value of type Throwable?
2021-03-12 04:37:03,367 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:37:03,509 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?): Throwable = TODO()
2021-03-12 04:37:03,514 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?): Throwable = TODO()
2021-03-12 04:37:03,812 [main:95] - GENERATED = IllegalArgumentException(null)
2021-03-12 04:37:03,812 [main:58] - GENERATED VALUE OF TYPE Throwable? = IllegalArgumentException(null)
2021-03-12 04:37:03,812 [main:61] - GENERATED IS CALL =true
2021-03-12 04:37:03,824 [main:67] - randomType = Kla1
2021-03-12 04:37:03,950 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:37:03,953 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}
2021-03-12 04:37:04,080 [main:194] - Type params = []
2021-03-12 04:37:04,215 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:37:04,357 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:04,361 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:04,655 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:37:04,792 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:04,796 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:05,261 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 8
2021-03-12 04:37:05,398 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:05,403 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:05,842 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:05,842 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:05,842 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:05,857 [main:106] - GETTING Throwable? from A
2021-03-12 04:37:05,864 [main:106] - GETTING Throwable? from Int
2021-03-12 04:37:05,909 [main:106] - GETTING Throwable? from Int
2021-03-12 04:37:05,910 [main:106] - GETTING Throwable? from Int
2021-03-12 04:37:05,911 [main:106] - GETTING Throwable? from Char
2021-03-12 04:37:05,938 [main:114] - replacement of exceptionOrNull() of type Throwable? is IllegalArgumentException(null)
2021-03-12 04:37:06,073 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:37:06,074 [main:66] - Compilation checking started
2021-03-12 04:37:06,493 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.IllegalArgumentException(null)?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:06,496 [main:107] - replacing ({
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    }, SuspendFunction0<Unit>)
2021-03-12 04:37:06,496 [main:50] - replacing {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    } SuspendFunction0<Unit>
2021-03-12 04:37:06,496 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 04:37:06,622 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 04:37:06,625 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 04:37:06,632 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-12 04:37:06,632 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:06,790 [main:67] - randomType = Kla1?
2021-03-12 04:37:06,918 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:37:06,921 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}
2021-03-12 04:37:07,045 [main:194] - Type params = []
2021-03-12 04:37:07,169 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:37:07,298 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:07,303 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:07,589 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:37:07,723 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:07,727 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:08,189 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:08,190 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:08,209 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 04:37:08,265 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 04:37:08,266 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 04:37:08,268 [main:106] - GETTING SuspendFunction0<Unit> from A
2021-03-12 04:37:08,277 [main:106] - GETTING SuspendFunction0<Unit> from Char
2021-03-12 04:37:08,309 [main:114] - replacement of {
        prope6 = fu4 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, s -> s
        }
    } of type SuspendFunction0<Unit> is { println()}
2021-03-12 04:37:08,449 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 04:37:08,449 [main:66] - Compilation checking started
2021-03-12 04:37:09,082 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:09,086 [main:107] - replacing (Kla5(), Kla5)
2021-03-12 04:37:09,086 [main:50] - replacing Kla5() Kla5
2021-03-12 04:37:09,086 [main:54] - Getting value of type Kla5
2021-03-12 04:37:09,220 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:37:09,223 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:37:09,224 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 04:37:09,224 [main:61] - GENERATED IS CALL =true
2021-03-12 04:37:09,518 [main:67] - randomType = UShort?
2021-03-12 04:37:09,643 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:37:09,688 [main:106] - GETTING Kla5 from Char
2021-03-12 04:37:09,718 [main:106] - GETTING Kla5 from Int
2021-03-12 04:37:09,748 [main:106] - GETTING Kla5 from A
2021-03-12 04:37:09,753 [main:106] - GETTING Kla5 from Int
2021-03-12 04:37:09,754 [main:106] - GETTING Kla5 from Int
2021-03-12 04:37:09,754 [main:114] - replacement of Kla5() of type Kla5 is Kla5()
2021-03-12 04:37:09,879 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:37:09,882 [main:107] - replacing ("OK", String)
2021-03-12 04:37:09,882 [main:50] - replacing "OK" String
2021-03-12 04:37:09,882 [main:54] - Getting value of type String
2021-03-12 04:37:10,016 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:10,019 [main:58] - GENERATED VALUE OF TYPE String = "uifib"
2021-03-12 04:37:10,020 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:10,169 [main:67] - randomType = ULong
2021-03-12 04:37:10,300 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:37:10,343 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5736b986]
2021-03-12 04:37:10,343 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@607d2484]
2021-03-12 04:37:10,344 [main:78] - Generated call from random type = (2811024265490364479.toULong()).toUShort().toString((A().x()))
2021-03-12 04:37:10,344 [main:106] - GETTING String from A
2021-03-12 04:37:10,351 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:10,351 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:10,351 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:10,476 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:10,479 [main:117] - GENERATED CALL = (A()).x(A().x()).toString(-42560086)
2021-03-12 04:37:10,479 [main:114] - replacement of "OK" of type String is (2811024265490364479.toULong()).toUShort().toString((A().x()))
2021-03-12 04:37:10,601 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:10,601 [main:66] - Compilation checking started
2021-03-12 04:37:11,443 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:11,446 [main:107] - replacing (1, Int)
2021-03-12 04:37:11,446 [main:50] - replacing 1 Int
2021-03-12 04:37:11,446 [main:54] - Getting value of type Int
2021-03-12 04:37:11,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:11,574 [main:58] - GENERATED VALUE OF TYPE Int = 1611426932
2021-03-12 04:37:11,574 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:11,872 [main:67] - randomType = ArrayDeque<Kla1>
2021-03-12 04:37:12,000 [main:302] - generating value of type = ArrayDeque<Kla1> false depth = 0
2021-03-12 04:37:12,134 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla1> = TODO()
2021-03-12 04:37:12,138 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla1> = TODO()
2021-03-12 04:37:12,281 [main:95] - GENERATED = ArrayDeque<Kla1>()
2021-03-12 04:37:12,408 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147faaa8]
2021-03-12 04:37:12,408 [main:78] - Generated call from random type = (ArrayDeque<Kla1>()).size.shl(A().x())
2021-03-12 04:37:12,409 [main:106] - GETTING Int from Char
2021-03-12 04:37:12,426 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@162644b9]]
2021-03-12 04:37:12,426 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,427 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).absoluteValue
2021-03-12 04:37:12,427 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]]
2021-03-12 04:37:12,427 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,552 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:37:12,555 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@d6b8329]
2021-03-12 04:37:12,555 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo('觕').coerceIn(A().x(), A().x())
2021-03-12 04:37:12,556 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 04:37:12,556 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,556 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 04:37:12,556 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).countLeadingZeroBits()
2021-03-12 04:37:12,556 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@665cc575]]
2021-03-12 04:37:12,556 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:37:12,556 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@665cc575]
2021-03-12 04:37:12,556 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().toInt()
2021-03-12 04:37:12,556 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]]
2021-03-12 04:37:12,556 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,557 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar())
2021-03-12 04:37:12,557 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:37:12,557 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,681 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:37:12,684 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:37:12,684 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo('ⶒ').unaryPlus()
2021-03-12 04:37:12,684 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-12 04:37:12,684 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,685 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-12 04:37:12,685 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).dec()
2021-03-12 04:37:12,685 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@25359298]]
2021-03-12 04:37:12,685 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:12,685 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().sign
2021-03-12 04:37:12,685 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33aa6807]]
2021-03-12 04:37:12,685 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:12,834 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:37:12,837 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@33aa6807]
2021-03-12 04:37:12,968 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:12,971 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo('ጅ').xor(1550806041)
2021-03-12 04:37:12,971 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@123ea859]]
2021-03-12 04:37:12,971 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79]
2021-03-12 04:37:12,972 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@123ea859]
2021-03-12 04:37:13,100 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:13,103 [main:117] - GENERATED CALL = ((A().x()).toChar()).toByte().compareTo(-89)
2021-03-12 04:37:13,103 [main:114] - replacement of 1 of type Int is ((A().x()).toChar()).toByte().compareTo(-89)
2021-03-12 04:37:13,229 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:13,230 [main:66] - Compilation checking started
2021-03-12 04:37:13,873 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:13,877 [main:107] - replacing (1, Int)
2021-03-12 04:37:13,878 [main:50] - replacing 1 Int
2021-03-12 04:37:13,878 [main:54] - Getting value of type Int
2021-03-12 04:37:14,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:14,035 [main:58] - GENERATED VALUE OF TYPE Int = -1606333048
2021-03-12 04:37:14,035 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:14,200 [main:67] - randomType = Sequence<Kla2>
2021-03-12 04:37:14,201 [main:106] - GETTING Int from A
2021-03-12 04:37:14,206 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@75a8d59d]]
2021-03-12 04:37:14,206 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,207 [main:117] - GENERATED CALL = (A()).x(A().x()).sign
2021-03-12 04:37:14,207 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 04:37:14,207 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,332 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:14,335 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 04:37:14,335 [main:117] - GENERATED CALL = (A()).x(1645070318).countLeadingZeroBits()
2021-03-12 04:37:14,335 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8ea6dac]]
2021-03-12 04:37:14,335 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,460 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:14,463 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8ea6dac]
2021-03-12 04:37:14,604 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:14,607 [main:117] - GENERATED CALL = (A()).x(-1276869241).div(47)
2021-03-12 04:37:14,607 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a360264]]
2021-03-12 04:37:14,607 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,607 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3a360264]
2021-03-12 04:37:14,734 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:14,737 [main:117] - GENERATED CALL = (A()).x(A().x()).rotateLeft(201542839)
2021-03-12 04:37:14,737 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36d685d5]]
2021-03-12 04:37:14,737 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,737 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@36d685d5]
2021-03-12 04:37:14,737 [main:117] - GENERATED CALL = (A()).x(A().x()).takeHighestOneBit()
2021-03-12 04:37:14,737 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-12 04:37:14,738 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,865 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:14,868 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-12 04:37:14,868 [main:117] - GENERATED CALL = (A()).x(1944181339).dec()
2021-03-12 04:37:14,868 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147faaa8]]
2021-03-12 04:37:14,868 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:14,997 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:15,000 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147faaa8]
2021-03-12 04:37:15,001 [main:117] - GENERATED CALL = (A()).x(2063216375).shl((A().x()))
2021-03-12 04:37:15,001 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@233352da]]
2021-03-12 04:37:15,001 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:15,001 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@233352da]
2021-03-12 04:37:15,125 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:15,129 [main:117] - GENERATED CALL = (A()).x((A().x())).times(-88)
2021-03-12 04:37:15,129 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@162644b9]]
2021-03-12 04:37:15,129 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:15,129 [main:117] - GENERATED CALL = (A()).x(A().x()).absoluteValue
2021-03-12 04:37:15,129 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]]
2021-03-12 04:37:15,129 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:15,129 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@38d84330]
2021-03-12 04:37:15,129 [main:117] - GENERATED CALL = (A()).x((A().x())).coerceAtLeast(A().x())
2021-03-12 04:37:15,129 [main:114] - replacement of 1 of type Int is (A()).x(2063216375).shl((A().x()))
2021-03-12 04:37:15,255 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:15,255 [main:66] - Compilation checking started
2021-03-12 04:37:15,855 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 04:37:15,858 [main:107] - replacing (exception, Throwable)
2021-03-12 04:37:15,859 [main:50] - replacing exception Throwable
2021-03-12 04:37:15,859 [main:54] - Getting value of type Throwable
2021-03-12 04:37:15,992 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 04:37:15,999 [main:58] - GENERATED VALUE OF TYPE Throwable = NullPointerException()
2021-03-12 04:37:15,999 [main:61] - GENERATED IS CALL =true
2021-03-12 04:37:16,465 [main:67] - randomType = Kla3<UByte?>
2021-03-12 04:37:16,601 [main:302] - generating value of type = Kla3<UByte?> false depth = 0
2021-03-12 04:37:16,604 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 04:37:17,231 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 04:37:17,235 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 04:37:17,257 [main:106] - GETTING Throwable from A
2021-03-12 04:37:17,268 [main:106] - GETTING Throwable from Char
2021-03-12 04:37:17,295 [main:106] - GETTING Throwable from Int
2021-03-12 04:37:17,333 [main:106] - GETTING Throwable from Int
2021-03-12 04:37:17,334 [main:106] - GETTING Throwable from Int
2021-03-12 04:37:17,334 [main:114] - replacement of exception of type Throwable is NullPointerException()
2021-03-12 04:37:17,459 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:37:17,460 [main:66] - Compilation checking started
2021-03-12 04:37:18,081 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if (prope6 != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:18,084 [main:107] - replacing (prope6, String)
2021-03-12 04:37:18,084 [main:50] - replacing prope6 String
2021-03-12 04:37:18,084 [main:54] - Getting value of type String
2021-03-12 04:37:18,213 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:18,216 [main:58] - GENERATED VALUE OF TYPE String = "uofru"
2021-03-12 04:37:18,216 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:18,536 [main:67] - randomType = Set<Sequence<Kla5>>
2021-03-12 04:37:18,537 [main:106] - GETTING String from A
2021-03-12 04:37:18,543 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:18,543 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:18,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:18,543 [main:117] - GENERATED CALL = (A()).x(A().x()).toString(A().x())
2021-03-12 04:37:18,544 [main:114] - replacement of prope6 of type String is (A()).x(A().x()).toString(A().x())
2021-03-12 04:37:18,669 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:18,669 [main:66] - Compilation checking started
2021-03-12 04:37:19,249 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            prope5.prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:19,252 [main:107] - replacing (prope5, Kla5)
2021-03-12 04:37:19,252 [main:50] - replacing prope5 Kla5
2021-03-12 04:37:19,252 [main:54] - Getting value of type Kla5
2021-03-12 04:37:19,392 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 04:37:19,395 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 04:37:19,396 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 04:37:19,396 [main:61] - GENERATED IS CALL =true
2021-03-12 04:37:19,402 [main:67] - randomType = UShort
2021-03-12 04:37:19,541 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:37:19,570 [main:106] - GETTING Kla5 from A
2021-03-12 04:37:19,574 [main:106] - GETTING Kla5 from Int
2021-03-12 04:37:19,603 [main:106] - GETTING Kla5 from Int
2021-03-12 04:37:19,604 [main:106] - GETTING Kla5 from Int
2021-03-12 04:37:19,604 [main:106] - GETTING Kla5 from Char
2021-03-12 04:37:19,621 [main:114] - replacement of prope5 of type Kla5 is Kla5()
2021-03-12 04:37:19,748 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:37:19,748 [main:66] - Compilation checking started
2021-03-12 04:37:20,390 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = false

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:20,393 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 04:37:20,393 [main:50] - replacing getOrThrow() Ty0
2021-03-12 04:37:20,393 [main:54] - Getting value of type Ty0
2021-03-12 04:37:20,527 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 04:37:20,533 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 04:37:20,824 [main:67] - randomType = UByte?
2021-03-12 04:37:20,950 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:37:20,983 [main:106] - GETTING Ty0 from Char
2021-03-12 04:37:21,005 [main:106] - GETTING Ty0 from Int
2021-03-12 04:37:21,039 [main:106] - GETTING Ty0 from A
2021-03-12 04:37:21,044 [main:106] - GETTING Ty0 from Int
2021-03-12 04:37:21,045 [main:106] - GETTING Ty0 from Int
2021-03-12 04:37:21,045 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 04:37:21,045 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 04:37:21,045 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 04:37:21,045 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 04:37:21,185 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 04:37:21,191 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 04:37:21,197 [main:67] - randomType = String
2021-03-12 04:37:21,331 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:21,354 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:37:21,389 [main:106] - GETTING EmptyCoroutineContext from A
2021-03-12 04:37:21,395 [main:106] - GETTING EmptyCoroutineContext from Char
2021-03-12 04:37:21,419 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:37:21,420 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 04:37:21,420 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 04:37:21,420 [main:107] - replacing (false, Boolean)
2021-03-12 04:37:21,420 [main:50] - replacing false Boolean
2021-03-12 04:37:21,420 [main:54] - Getting value of type Boolean
2021-03-12 04:37:21,545 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:37:21,548 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 04:37:21,548 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:22,037 [main:67] - randomType = ArrayList<Triple<Int, Byte, Array<Byte>>>
2021-03-12 04:37:22,162 [main:302] - generating value of type = ArrayList<Triple<Int, Byte, Array<Byte>>> false depth = 0
2021-03-12 04:37:22,300 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Triple<Int, Byte, Array<Byte>>): ArrayList<Triple<Int, Byte, Array<Byte>>> = TODO()
2021-03-12 04:37:22,304 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Triple<Int, Byte, Array<Byte>>): ArrayList<Triple<Int, Byte, Array<Byte>>> = TODO()
2021-03-12 04:37:22,437 [main:302] - generating value of type = Triple<Int, Byte, Array<Byte>> false depth = 3
2021-03-12 04:37:22,569 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Int, second: Byte, third: Array<Byte>): Triple<Int, Byte, Array<Byte>> = TODO()
2021-03-12 04:37:22,573 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Int, second: Byte, third: Array<Byte>): Triple<Int, Byte, Array<Byte>> = TODO()
2021-03-12 04:37:22,730 [main:302] - generating value of type = Int true depth = 6
2021-03-12 04:37:22,733 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 04:37:22,736 [main:302] - generating value of type = Array<Byte> false depth = 6
2021-03-12 04:37:22,870 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Byte> = TODO()
2021-03-12 04:37:22,874 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Byte> = TODO()
2021-03-12 04:37:23,010 [main:95] - GENERATED = emptyArray<Byte>()
2021-03-12 04:37:23,011 [main:95] - GENERATED = Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>())
2021-03-12 04:37:23,011 [main:95] - GENERATED = arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))
2021-03-12 04:37:23,257 [main:149] - GENERATING call of type public open fun subList(fromIndex: kotlin.Int, toIndex: kotlin.Int): kotlin.collections.MutableList<kotlin.Triple<kotlin.Int, kotlin.Byte, kotlin.Array<kotlin.Byte>>> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@3bb9e7cb]
2021-03-12 04:37:23,386 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:23,514 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:23,517 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableList[DeserializedSimpleFunctionDescriptor@60dafd37]
2021-03-12 04:37:23,643 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:23,644 [main:78] - Generated call from random type = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")
2021-03-12 04:37:23,644 [main:114] - replacement of false of type Boolean is (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")
2021-03-12 04:37:23,772 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:23,772 [main:66] - Compilation checking started
2021-03-12 04:37:24,553 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:24,557 [main:107] - replacing (1L, Long)
2021-03-12 04:37:24,557 [main:50] - replacing 1L Long
2021-03-12 04:37:24,557 [main:54] - Getting value of type Long
2021-03-12 04:37:24,715 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:24,719 [main:58] - GENERATED VALUE OF TYPE Long = 5559777498147439269
2021-03-12 04:37:24,719 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:25,229 [main:67] - randomType = Sequence<Array<Double>>
2021-03-12 04:37:25,230 [main:106] - GETTING Long from A
2021-03-12 04:37:25,238 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44f9e70f]]
2021-03-12 04:37:25,238 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:25,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:25,388 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44f9e70f]
2021-03-12 04:37:25,524 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:25,527 [main:117] - GENERATED CALL = (A()).x(1228973371).rem(2465112700087859918)
2021-03-12 04:37:25,527 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f824067]]
2021-03-12 04:37:25,528 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:25,528 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f824067]
2021-03-12 04:37:25,663 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:25,666 [main:117] - GENERATED CALL = (A()).x(A().x()).minus(2534833390160596692)
2021-03-12 04:37:25,667 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f3239]]
2021-03-12 04:37:25,667 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:25,803 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:25,806 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f3239]
2021-03-12 04:37:25,942 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:25,945 [main:117] - GENERATED CALL = (A()).x(684612124).plus(6136843877424001131)
2021-03-12 04:37:25,946 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5036dd9c]]
2021-03-12 04:37:25,946 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:25,946 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5036dd9c]
2021-03-12 04:37:25,946 [main:117] - GENERATED CALL = (A()).x((A().x())).toLong()
2021-03-12 04:37:25,946 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]]
2021-03-12 04:37:25,946 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:25,946 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]
2021-03-12 04:37:26,084 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:26,087 [main:117] - GENERATED CALL = (A()).x((A().x())).div(-1227794624338149122)
2021-03-12 04:37:26,087 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-12 04:37:26,087 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:26,088 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-12 04:37:26,234 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:26,238 [main:117] - GENERATED CALL = (A()).x((A().x())).times(3366167534995578396)
2021-03-12 04:37:26,238 [main:114] - replacement of 1L of type Long is 5559777498147439269
2021-03-12 04:37:26,374 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 04:37:26,375 [main:66] - Compilation checking started
2021-03-12 04:37:27,161 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:27,165 [main:107] - replacing (1L, Long)
2021-03-12 04:37:27,166 [main:50] - replacing 1L Long
2021-03-12 04:37:27,166 [main:54] - Getting value of type Long
2021-03-12 04:37:27,338 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:27,341 [main:58] - GENERATED VALUE OF TYPE Long = 2558985245833470632
2021-03-12 04:37:27,341 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:27,348 [main:67] - randomType = ULong
2021-03-12 04:37:27,499 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:37:27,528 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1220819]
2021-03-12 04:37:27,529 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@69fc861a]
2021-03-12 04:37:27,669 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:27,673 [main:78] - Generated call from random type = (3000142524058210421.toULong()).toShort().plus(7153187692783138351)
2021-03-12 04:37:27,674 [main:106] - GETTING Long from Char
2021-03-12 04:37:27,703 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1cb50215]]
2021-03-12 04:37:27,704 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:37:27,704 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1cb50215]
2021-03-12 04:37:27,844 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:27,847 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().div(-97086010600110835)
2021-03-12 04:37:27,848 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], public final infix fun or(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@15eae4fa]]
2021-03-12 04:37:27,848 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:27,848 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@15eae4fa]
2021-03-12 04:37:27,979 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:27,983 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().or(8854766667861882903)
2021-03-12 04:37:27,983 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Double.toRawBits(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@35a02217]]
2021-03-12 04:37:27,983 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894]
2021-03-12 04:37:27,983 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Double.toRawBits(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@35a02217]
2021-03-12 04:37:27,983 [main:117] - GENERATED CALL = ((A().x()).toChar()).toDouble().toRawBits()
2021-03-12 04:37:27,983 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], public final infix fun shl(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16caff76]]
2021-03-12 04:37:27,983 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:27,983 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16caff76]
2021-03-12 04:37:27,984 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().shl(A().x())
2021-03-12 04:37:27,984 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79237865]]
2021-03-12 04:37:27,984 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79]
2021-03-12 04:37:27,984 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@79237865]
2021-03-12 04:37:28,117 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:28,121 [main:117] - GENERATED CALL = ((A().x()).toChar()).toByte().plus(9102429397682501370)
2021-03-12 04:37:28,121 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], public open fun toLong(): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4e844e9f]]
2021-03-12 04:37:28,121 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:37:28,121 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@4e844e9f]
2021-03-12 04:37:28,121 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().toLong()
2021-03-12 04:37:28,121 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894], @kotlin.SinceKotlin public fun kotlin.Double.roundToLong(): kotlin.Long defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1f56639d]]
2021-03-12 04:37:28,121 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894]
2021-03-12 04:37:28,121 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToLong(): kotlin.Long defined in kotlin.math[DeserializedSimpleFunctionDescriptor@1f56639d]
2021-03-12 04:37:28,121 [main:117] - GENERATED CALL = ((A().x()).toChar()).toDouble().roundToLong()
2021-03-12 04:37:28,121 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], public final operator fun inc(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7f0bc723]]
2021-03-12 04:37:28,121 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:28,122 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@7f0bc723]
2021-03-12 04:37:28,122 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().inc()
2021-03-12 04:37:28,122 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@146a81e4]]
2021-03-12 04:37:28,122 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79]
2021-03-12 04:37:28,122 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@146a81e4]
2021-03-12 04:37:28,269 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:28,273 [main:117] - GENERATED CALL = ((A().x()).toChar()).toByte().div(6809098657444790279)
2021-03-12 04:37:28,273 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], public final operator fun plus(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@56106cef]]
2021-03-12 04:37:28,273 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:28,273 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@56106cef]
2021-03-12 04:37:28,401 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:28,405 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().plus(25)
2021-03-12 04:37:28,405 [main:114] - replacement of 1L of type Long is ((A().x()).toChar()).toDouble().roundToLong()
2021-03-12 04:37:28,533 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:28,533 [main:66] - Compilation checking started
2021-03-12 04:37:28,936 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, ((A().x()).toChar()).toDouble().roundToLong(), 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:28,938 [main:107] - replacing (1L, Long)
2021-03-12 04:37:28,938 [main:50] - replacing 1L Long
2021-03-12 04:37:28,938 [main:54] - Getting value of type Long
2021-03-12 04:37:29,075 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:29,078 [main:58] - GENERATED VALUE OF TYPE Long = -8113837289498384559
2021-03-12 04:37:29,078 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:29,395 [main:67] - randomType = Function1<UInt, String>
2021-03-12 04:37:29,396 [main:106] - GETTING Long from A
2021-03-12 04:37:29,400 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]]
2021-03-12 04:37:29,400 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:29,401 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]
2021-03-12 04:37:29,533 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:29,537 [main:117] - GENERATED CALL = (A()).x((A().x())).div(8020395559315261258)
2021-03-12 04:37:29,537 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1badd75d]]
2021-03-12 04:37:29,537 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:29,537 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1badd75d]
2021-03-12 04:37:29,669 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:29,672 [main:117] - GENERATED CALL = (A()).x(A().x()).times(-5221047280377057510)
2021-03-12 04:37:29,672 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5036dd9c]]
2021-03-12 04:37:29,672 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:29,672 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5036dd9c]
2021-03-12 04:37:29,672 [main:117] - GENERATED CALL = (A()).x((A().x())).toLong()
2021-03-12 04:37:29,673 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44f9e70f]]
2021-03-12 04:37:29,673 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:29,673 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44f9e70f]
2021-03-12 04:37:29,807 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:29,810 [main:117] - GENERATED CALL = (A()).x(A().x()).rem(1949859929364087113)
2021-03-12 04:37:29,810 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f3239]]
2021-03-12 04:37:29,811 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:29,811 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f3239]
2021-03-12 04:37:29,959 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:29,962 [main:117] - GENERATED CALL = (A()).x(A().x()).plus(6379621878624043044)
2021-03-12 04:37:29,962 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f824067]]
2021-03-12 04:37:29,962 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:30,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:30,094 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f824067]
2021-03-12 04:37:30,225 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:30,228 [main:117] - GENERATED CALL = (A()).x(-893469251).minus(-5561324550281418674)
2021-03-12 04:37:30,228 [main:114] - replacement of 1L of type Long is (A()).x((A().x())).div(8020395559315261258)
2021-03-12 04:37:30,359 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:30,359 [main:66] - Compilation checking started
2021-03-12 04:37:30,955 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, "OK")
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:30,958 [main:107] - replacing ("OK", String)
2021-03-12 04:37:30,958 [main:50] - replacing "OK" String
2021-03-12 04:37:30,958 [main:54] - Getting value of type String
2021-03-12 04:37:31,092 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:31,095 [main:58] - GENERATED VALUE OF TYPE String = "gibal"
2021-03-12 04:37:31,095 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:31,244 [main:67] - randomType = UByte
2021-03-12 04:37:31,389 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:37:31,425 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@4b6c4adc]
2021-03-12 04:37:31,425 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:37:31,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:31,559 [main:78] - Generated call from random type = (12.toUByte()).toByte().toString(-786087819)
2021-03-12 04:37:31,560 [main:106] - GETTING String from Int
2021-03-12 04:37:31,599 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:31,599 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:31,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:31,600 [main:117] - GENERATED CALL = (A().x()).toInt().toString(A().x())
2021-03-12 04:37:31,600 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]]
2021-03-12 04:37:31,600 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:31,600 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]
2021-03-12 04:37:31,600 [main:117] - GENERATED CALL = (A().x()).toChar().titlecase()
2021-03-12 04:37:31,600 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:37:31,600 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]
2021-03-12 04:37:31,751 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:31,755 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:37:31,755 [main:117] - GENERATED CALL = (A().x()).div(-389475494217232119).toString((A().x()))
2021-03-12 04:37:31,755 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]]
2021-03-12 04:37:31,755 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:37:31,755 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@749c09c8]
2021-03-12 04:37:31,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:31,887 [main:117] - GENERATED CALL = (A().x()).toByte().toString(967569458)
2021-03-12 04:37:31,887 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]]
2021-03-12 04:37:31,887 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3]
2021-03-12 04:37:31,887 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]
2021-03-12 04:37:31,887 [main:117] - GENERATED CALL = (A().x()).toShort().toString(A().x())
2021-03-12 04:37:31,887 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:37:31,887 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:37:31,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:37:31,888 [main:117] - GENERATED CALL = (A().x()).toLong().toString(A().x())
2021-03-12 04:37:31,888 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:31,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:31,888 [main:117] - GENERATED CALL = (A().x()).toString(A().x())
2021-03-12 04:37:31,888 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:31,888 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:37:31,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:31,888 [main:117] - GENERATED CALL = (A().x()).compareTo(A().x()).toString(A().x())
2021-03-12 04:37:31,888 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]]
2021-03-12 04:37:31,888 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:31,888 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]
2021-03-12 04:37:31,889 [main:117] - GENERATED CALL = (A().x()).toChar().lowercase()
2021-03-12 04:37:31,889 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]]
2021-03-12 04:37:31,889 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:31,889 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]
2021-03-12 04:37:32,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:32,023 [main:117] - GENERATED CALL = (A().x()).toChar().plus("cbxuy")
2021-03-12 04:37:32,023 [main:114] - replacement of "OK" of type String is (A().x()).toInt().toString(A().x())
2021-03-12 04:37:32,154 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:32,155 [main:66] - Compilation checking started
2021-03-12 04:37:32,763 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:32,767 [main:107] - replacing (invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK"), String)
2021-03-12 04:37:32,767 [main:50] - replacing invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK") String
2021-03-12 04:37:32,767 [main:54] - Getting value of type String
2021-03-12 04:37:32,909 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:32,913 [main:58] - GENERATED VALUE OF TYPE String = "ljteg"
2021-03-12 04:37:32,913 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:33,068 [main:67] - randomType = Kla6
2021-03-12 04:37:33,197 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 04:37:33,200 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}
2021-03-12 04:37:33,221 [main:106] - GETTING String from Int
2021-03-12 04:37:33,250 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:37:33,250 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]
2021-03-12 04:37:33,380 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:33,383 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:37:33,383 [main:117] - GENERATED CALL = ((A().x())).div(3352764834265630635).toString(A().x())
2021-03-12 04:37:33,383 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:33,383 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:37:33,530 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:33,534 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:33,663 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:33,666 [main:117] - GENERATED CALL = ((A().x())).compareTo(691644113).toString(-2139002216)
2021-03-12 04:37:33,666 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]]
2021-03-12 04:37:33,666 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:33,666 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@74b51b85]
2021-03-12 04:37:33,666 [main:117] - GENERATED CALL = ((A().x())).toChar().titlecase()
2021-03-12 04:37:33,667 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:33,667 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:33,667 [main:117] - GENERATED CALL = ((A().x())).toString(A().x())
2021-03-12 04:37:33,667 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]]
2021-03-12 04:37:33,667 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:33,667 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23be072e]
2021-03-12 04:37:33,667 [main:117] - GENERATED CALL = ((A().x())).toChar().lowercase()
2021-03-12 04:37:33,667 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]]
2021-03-12 04:37:33,667 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47ba8d3]
2021-03-12 04:37:33,667 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c1c5ba3]
2021-03-12 04:37:33,667 [main:117] - GENERATED CALL = ((A().x())).toShort().toString((A().x()))
2021-03-12 04:37:33,668 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]]
2021-03-12 04:37:33,668 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:33,668 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c7c675f]
2021-03-12 04:37:33,797 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:33,800 [main:117] - GENERATED CALL = ((A().x())).toChar().plus("cqcdq")
2021-03-12 04:37:33,800 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:33,800 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:33,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:33,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:33,934 [main:117] - GENERATED CALL = ((A().x())).toInt().toString(1338104430)
2021-03-12 04:37:33,934 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]]
2021-03-12 04:37:33,935 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@410e2efc]
2021-03-12 04:37:33,935 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54e1d3c]
2021-03-12 04:37:33,935 [main:117] - GENERATED CALL = ((A().x())).toChar().uppercase()
2021-03-12 04:37:33,935 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]]
2021-03-12 04:37:33,935 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:37:33,935 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dbde6ca]
2021-03-12 04:37:33,935 [main:117] - GENERATED CALL = ((A().x())).toLong().toString((A().x()))
2021-03-12 04:37:33,935 [main:114] - replacement of invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK") of type String is ((A().x())).div(3352764834265630635).toString(A().x())
2021-03-12 04:37:34,065 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:34,066 [main:66] - Compilation checking started
2021-03-12 04:37:34,453 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.((A().x())).div(3352764834265630635).toString(A().x())
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:34,455 [main:107] - replacing (this.prope7, Any?)
2021-03-12 04:37:34,455 [main:50] - replacing this.prope7 Any?
2021-03-12 04:37:34,455 [main:54] - Getting value of type Any?
2021-03-12 04:37:34,587 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:34,587 [main:58] - GENERATED VALUE OF TYPE Any? = "zatcn"
2021-03-12 04:37:34,587 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:34,594 [main:67] - randomType = UShort
2021-03-12 04:37:34,728 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:37:34,754 [main:106] - GETTING Any? from Int
2021-03-12 04:37:34,783 [main:106] - GETTING Any? from Int
2021-03-12 04:37:34,784 [main:106] - GETTING Any? from Char
2021-03-12 04:37:34,801 [main:106] - GETTING Any? from A
2021-03-12 04:37:34,806 [main:106] - GETTING Any? from Int
2021-03-12 04:37:34,806 [main:114] - replacement of this.prope7 of type Any? is "zatcn"
2021-03-12 04:37:34,937 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:37:34,937 [main:66] - Compilation checking started
2021-03-12 04:37:35,341 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke(1, 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        "zatcn" = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:35,344 [main:107] - replacing (1, Int)
2021-03-12 04:37:35,344 [main:50] - replacing 1 Int
2021-03-12 04:37:35,344 [main:54] - Getting value of type Int
2021-03-12 04:37:35,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:35,476 [main:58] - GENERATED VALUE OF TYPE Int = -344332401
2021-03-12 04:37:35,477 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:35,490 [main:67] - randomType = Kla1
2021-03-12 04:37:35,618 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 04:37:35,621 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}
2021-03-12 04:37:35,751 [main:194] - Type params = []
2021-03-12 04:37:35,884 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 04:37:36,027 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:36,032 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:36,326 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 04:37:36,465 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:36,469 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:36,962 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 04:37:37,111 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:37:37,115 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:37:37,577 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 04:37:37,717 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:37,721 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:38,189 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 14
2021-03-12 04:37:38,330 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:38,335 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:38,856 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 17
2021-03-12 04:37:38,856 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:38,856 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 04:37:38,856 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 04:37:38,857 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 04:37:38,857 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 04:37:38,875 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@7cc3a9d3]
2021-03-12 04:37:39,005 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:39,005 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@37568ac9]
2021-03-12 04:37:39,140 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:37:39,144 [main:78] - Generated call from random type = (Kla1()).equals("ybpcf").compareTo(false)
2021-03-12 04:37:39,144 [main:106] - GETTING Int from Int
2021-03-12 04:37:39,186 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:37:39,187 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:39,187 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:37:39,187 [main:117] - GENERATED CALL = (A().x()).toInt().unaryPlus()
2021-03-12 04:37:39,187 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a689a]]
2021-03-12 04:37:39,187 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:39,187 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a689a]
2021-03-12 04:37:39,321 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:39,325 [main:117] - GENERATED CALL = (A().x()).toInt().rem(17)
2021-03-12 04:37:39,325 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@27b93919]]
2021-03-12 04:37:39,325 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6cb04c55]
2021-03-12 04:37:39,325 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@27b93919]
2021-03-12 04:37:39,452 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:39,456 [main:117] - GENERATED CALL = (A().x()).toByte().times(-69)
2021-03-12 04:37:39,456 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@162644b9]]
2021-03-12 04:37:39,456 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:37:39,456 [main:117] - GENERATED CALL = (A().x()).compareTo(A().x()).absoluteValue
2021-03-12 04:37:39,456 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3897209]]
2021-03-12 04:37:39,456 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:37:39,584 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:39,587 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3897209]
2021-03-12 04:37:39,715 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:39,718 [main:117] - GENERATED CALL = (A().x()).compareTo(1149892567).plus(5)
2021-03-12 04:37:39,719 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@59e8b191], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7929bced]]
2021-03-12 04:37:39,719 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@59e8b191]
2021-03-12 04:37:39,719 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Float.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@7929bced]
2021-03-12 04:37:39,719 [main:117] - GENERATED CALL = (A().x()).toFloat().roundToInt()
2021-03-12 04:37:39,719 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]]
2021-03-12 04:37:39,719 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@6107fce9]
2021-03-12 04:37:39,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:39,849 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]
2021-03-12 04:37:39,850 [main:117] - GENERATED CALL = (A().x()).compareTo(1021817073).ushr(A().x())
2021-03-12 04:37:39,850 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]]
2021-03-12 04:37:39,850 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:39,850 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-12 04:37:39,850 [main:117] - GENERATED CALL = (A().x()).toInt().shr((A().x()))
2021-03-12 04:37:39,850 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d8c2de8]]
2021-03-12 04:37:39,850 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d8c2de8]
2021-03-12 04:37:39,850 [main:117] - GENERATED CALL = (A().x()).takeLowestOneBit()
2021-03-12 04:37:39,850 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60c69660]]
2021-03-12 04:37:39,850 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 04:37:39,850 [main:117] - GENERATED CALL = (A().x()).countTrailingZeroBits()
2021-03-12 04:37:39,850 [main:114] - replacement of 1 of type Int is (A().x()).toInt().rem(17)
2021-03-12 04:37:39,979 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:39,979 [main:66] - Compilation checking started
2021-03-12 04:37:40,580 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:40,583 [main:107] - replacing (c, SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String>)
2021-03-12 04:37:40,583 [main:50] - replacing c SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String>
2021-03-12 04:37:40,583 [main:54] - Getting value of type SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String>
2021-03-12 04:37:40,715 [main:302] - generating value of type = SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> false depth = 0
2021-03-12 04:37:40,718 [main:302] - generating value of type = String true depth = 1
2021-03-12 04:37:40,722 [main:58] - GENERATED VALUE OF TYPE SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> = {a: Long, b: Long, c: Long, d: Long, e: Long, f: Long, g: Long, h: Long, i: Long, j: Long, k: Long, l: Long, m: Long, n: Long, o: Long, p: Long, q: Long, r: Long, s: Long, t: Long, u: Long, v: Long, w: Long, x: Long, y: Long, z: Long, {: Long, |: Long, }: Long, ~: String -> "uflml"}
2021-03-12 04:37:40,722 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:40,729 [main:67] - randomType = ULong
2021-03-12 04:37:40,857 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 04:37:40,892 [main:106] - GETTING SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> from A
2021-03-12 04:37:40,902 [main:106] - GETTING SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> from Int
2021-03-12 04:37:40,937 [main:106] - GETTING SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> from Int
2021-03-12 04:37:40,942 [main:106] - GETTING SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> from Int
2021-03-12 04:37:40,947 [main:106] - GETTING SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> from Char
2021-03-12 04:37:40,963 [main:114] - replacement of c of type SuspendFunction30<Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, Long, String, String> is {a: Long, b: Long, c: Long, d: Long, e: Long, f: Long, g: Long, h: Long, i: Long, j: Long, k: Long, l: Long, m: Long, n: Long, o: Long, p: Long, q: Long, r: Long, s: Long, t: Long, u: Long, v: Long, w: Long, x: Long, y: Long, z: Long, {: Long, |: Long, }: Long, ~: String -> "uflml"}
2021-03-12 04:37:41,092 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 04:37:41,092 [main:66] - Compilation checking started
2021-03-12 04:37:41,099 [main:71] - Wrong syntax or breaks conditions
2021-03-12 04:37:41,100 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return {a: Long, b: Long, c: Long, d: Long, e: Long, f: Long, g: Long, h: Long, i: Long, j: Long, k: Long, l: Long, m: Long, n: Long, o: Long, p: Long, q: Long, r: Long, s: Long, t: Long, u: Long, v: Long, w: Long, x: Long, y: Long, z: Long, {: Long, |: Long, }: Long, ~: String -> "uflml"}.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error(((A().x()).toChar()).toShort().toString(116408918) + i + ", got " + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:41,102 [main:107] - replacing (((A().x()).toChar()).toShort().toString(116408918) + i + ", got ", String)
2021-03-12 04:37:41,103 [main:50] - replacing ((A().x()).toChar()).toShort().toString(116408918) + i + ", got " String
2021-03-12 04:37:41,103 [main:54] - Getting value of type String
2021-03-12 04:37:41,231 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:41,234 [main:58] - GENERATED VALUE OF TYPE String = "ukqah"
2021-03-12 04:37:41,234 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:43,934 [main:67] - randomType = Function2<LinkedHashMap<Sequence<Float>, Kla2>, MutableMap<Float?, HashSet<Double>>?, Function1<ArrayDeque<Triple<Double, Int, Float>>, Kla2?>>
2021-03-12 04:37:43,935 [main:106] - GETTING String from A
2021-03-12 04:37:43,942 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:43,942 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:43,942 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:43,942 [main:117] - GENERATED CALL = (A()).x(A().x()).toString((A().x()))
2021-03-12 04:37:43,942 [main:114] - replacement of ((A().x()).toChar()).toShort().toString(116408918) + i + ", got " of type String is "ukqah"
2021-03-12 04:37:44,076 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 04:37:44,076 [main:66] - Compilation checking started
2021-03-12 04:37:44,657 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:44,659 [main:107] - replacing (1, Int)
2021-03-12 04:37:44,659 [main:50] - replacing 1 Int
2021-03-12 04:37:44,659 [main:54] - Getting value of type Int
2021-03-12 04:37:44,794 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:44,797 [main:58] - GENERATED VALUE OF TYPE Int = 1139763655
2021-03-12 04:37:44,797 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:45,248 [main:67] - randomType = Function1<UInt, Kla6>
2021-03-12 04:37:45,249 [main:106] - GETTING Int from Char
2021-03-12 04:37:45,266 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]]
2021-03-12 04:37:45,266 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:45,393 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:37:45,397 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1edd6c8c]
2021-03-12 04:37:45,397 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo('뷗').countLeadingZeroBits()
2021-03-12 04:37:45,397 [main:113] - Case = [@kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@16107de0]]
2021-03-12 04:37:45,397 [main:117] - GENERATED CALL = ((A().x()).toChar()).code
2021-03-12 04:37:45,397 [main:113] - Case = [public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@65293200]]
2021-03-12 04:37:45,397 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@65293200]
2021-03-12 04:37:45,397 [main:117] - GENERATED CALL = ((A().x()).toChar()).toInt()
2021-03-12 04:37:45,397 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63d3006a]]
2021-03-12 04:37:45,397 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:45,523 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:37:45,527 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@63d3006a]
2021-03-12 04:37:45,527 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo('뮡').countOneBits()
2021-03-12 04:37:45,527 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5a877525]]
2021-03-12 04:37:45,527 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:37:45,527 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5a877525]
2021-03-12 04:37:45,527 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().unaryPlus()
2021-03-12 04:37:45,527 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@59c66ec5], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@19044e11]]
2021-03-12 04:37:45,527 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@59c66ec5]
2021-03-12 04:37:45,527 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@19044e11]
2021-03-12 04:37:45,527 [main:117] - GENERATED CALL = ((A().x()).toChar()).toFloat().toBits()
2021-03-12 04:37:45,528 [main:113] - Case = [public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@361b25cf]]
2021-03-12 04:37:45,528 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1fbb2a97]
2021-03-12 04:37:45,528 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@361b25cf]
2021-03-12 04:37:45,528 [main:117] - GENERATED CALL = ((A().x()).toChar()).toShort().unaryMinus()
2021-03-12 04:37:45,528 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]]
2021-03-12 04:37:45,528 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:45,528 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dcfa481]
2021-03-12 04:37:45,528 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).unaryPlus()
2021-03-12 04:37:45,528 [main:113] - Case = [public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3d8c8ca2]]
2021-03-12 04:37:45,528 [main:149] - GENERATING call of type public final fun toByte(): kotlin.Byte defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3eb04c79]
2021-03-12 04:37:45,528 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3d8c8ca2]
2021-03-12 04:37:45,528 [main:117] - GENERATED CALL = ((A().x()).toChar()).toByte().unaryMinus()
2021-03-12 04:37:45,528 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]]
2021-03-12 04:37:45,529 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:45,529 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@74b4931d]
2021-03-12 04:37:45,529 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).dec()
2021-03-12 04:37:45,529 [main:114] - replacement of 1 of type Int is ((A().x()).toChar()).compareTo((A().x()).toChar()).dec()
2021-03-12 04:37:45,661 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:45,661 [main:66] - Compilation checking started
2021-03-12 04:37:46,256 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:46,258 [main:107] - replacing (prope7, Result<Any?>)
2021-03-12 04:37:46,259 [main:50] - replacing prope7 Result<Any?>
2021-03-12 04:37:46,259 [main:54] - Getting value of type Result<Any?>
2021-03-12 04:37:46,391 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 04:37:46,537 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:37:46,542 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 04:37:46,843 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 04:37:46,847 [main:302] - generating value of type = Any false depth = 4
2021-03-12 04:37:46,847 [main:95] - GENERATED = runCatching<Any?>({ "varge"})
2021-03-12 04:37:46,847 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "varge"})
2021-03-12 04:37:46,847 [main:61] - GENERATED IS CALL =true
2021-03-12 04:37:47,847 [main:67] - randomType = Pair<Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, Int>
2021-03-12 04:37:47,982 [main:302] - generating value of type = Pair<Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, Int> false depth = 0
2021-03-12 04:37:48,120 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, second: Int): Pair<Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, Int> = TODO()
2021-03-12 04:37:48,125 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, second: Int): Pair<Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, Int> = TODO()
2021-03-12 04:37:48,259 [main:302] - generating value of type = Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long> false depth = 3
2021-03-12 04:37:48,263 [main:302] - generating value of type = Long true depth = 4
2021-03-12 04:37:48,266 [main:302] - generating value of type = Int true depth = 3
2021-03-12 04:37:48,269 [main:95] - GENERATED = Pair<Function2<Triple<UByte, List<ULong>, Boolean>, Kla6, Long>, Int>({a: Triple<UByte, List<ULong>, Boolean>, b: Kla6 -> -8961603017787780418}, -572955429)
2021-03-12 04:37:48,297 [main:106] - GETTING Result<Any?> from A
2021-03-12 04:37:48,305 [main:106] - GETTING Result<Any?> from Char
2021-03-12 04:37:48,330 [main:106] - GETTING Result<Any?> from Int
2021-03-12 04:37:48,377 [main:106] - GETTING Result<Any?> from Int
2021-03-12 04:37:48,379 [main:106] - GETTING Result<Any?> from Int
2021-03-12 04:37:48,379 [main:114] - replacement of prope7 of type Result<Any?> is runCatching<Any?>({ "varge"})
2021-03-12 04:37:48,512 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:37:48,513 [main:66] - Compilation checking started
2021-03-12 04:37:49,174 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && !prope10) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:49,176 [main:107] - replacing (!prope10, Boolean)
2021-03-12 04:37:49,177 [main:50] - replacing !prope10 Boolean
2021-03-12 04:37:49,177 [main:54] - Getting value of type Boolean
2021-03-12 04:37:49,317 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:37:49,320 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:37:49,320 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:49,472 [main:67] - randomType = UInt
2021-03-12 04:37:49,602 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 04:37:49,636 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@e867c9]
2021-03-12 04:37:49,636 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb88b6b]
2021-03-12 04:37:49,636 [main:78] - Generated call from random type = (1039716611.toUInt()).toFloat().isInfinite()
2021-03-12 04:37:49,637 [main:106] - GETTING Boolean from Char
2021-03-12 04:37:49,653 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@59c66ec5], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb88b6b]]
2021-03-12 04:37:49,653 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@59c66ec5]
2021-03-12 04:37:49,653 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5cb88b6b]
2021-03-12 04:37:49,653 [main:117] - GENERATED CALL = ((A().x()).toChar()).toFloat().isInfinite()
2021-03-12 04:37:49,654 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@bc2c2d1]]
2021-03-12 04:37:49,654 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894]
2021-03-12 04:37:49,654 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@bc2c2d1]
2021-03-12 04:37:49,781 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:49,782 [main:117] - GENERATED CALL = ((A().x()).toChar()).toDouble().equals("eckza")
2021-03-12 04:37:49,782 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6dfbd571]]
2021-03-12 04:37:49,782 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894]
2021-03-12 04:37:49,782 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@6dfbd571]
2021-03-12 04:37:49,782 [main:117] - GENERATED CALL = ((A().x()).toChar()).toDouble().isNaN()
2021-03-12 04:37:49,782 [main:113] - Case = [public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]]
2021-03-12 04:37:49,782 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1018f9d4]
2021-03-12 04:37:49,782 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]
2021-03-12 04:37:49,911 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:49,911 [main:117] - GENERATED CALL = ((A().x()).toChar()).compareTo((A().x()).toChar()).equals("plugw")
2021-03-12 04:37:49,911 [main:113] - Case = [public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e4fe7ba]]
2021-03-12 04:37:49,911 [main:149] - GENERATING call of type public final fun toDouble(): kotlin.Double defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@21ad2894]
2021-03-12 04:37:49,912 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4e4fe7ba]
2021-03-12 04:37:49,912 [main:117] - GENERATED CALL = ((A().x()).toChar()).toDouble().isFinite()
2021-03-12 04:37:49,912 [main:113] - Case = [public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22aea490]]
2021-03-12 04:37:49,912 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@22aea490]
2021-03-12 04:37:50,038 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:37:50,042 [main:117] - GENERATED CALL = ((A().x()).toChar()).equals((A().x()).toChar(), true)
2021-03-12 04:37:50,042 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@fdee9a5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.CharRange.contains(element: kotlin.Char?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@753cceca]]
2021-03-12 04:37:50,042 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Char): kotlin.ranges.CharRange defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@fdee9a5]
2021-03-12 04:37:50,042 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.CharRange.contains(element: kotlin.Char?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@753cceca]
2021-03-12 04:37:50,170 [main:302] - generating value of type = Char true depth = 0
2021-03-12 04:37:50,174 [main:117] - GENERATED CALL = ((A().x()).toChar()).rangeTo((A().x()).toChar()).contains('?')
2021-03-12 04:37:50,174 [main:113] - Case = [public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6246a249]]
2021-03-12 04:37:50,174 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@579a5178]
2021-03-12 04:37:50,175 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@6246a249]
2021-03-12 04:37:50,302 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:50,302 [main:117] - GENERATED CALL = ((A().x()).toChar()).toLong().equals("vakzi")
2021-03-12 04:37:50,302 [main:113] - Case = [public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@59c66ec5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2d80cec3]]
2021-03-12 04:37:50,302 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@59c66ec5]
2021-03-12 04:37:50,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2d80cec3]
2021-03-12 04:37:50,430 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:37:50,430 [main:117] - GENERATED CALL = ((A().x()).toChar()).toFloat().equals("snvbc")
2021-03-12 04:37:50,430 [main:113] - Case = [public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fac4dfc]]
2021-03-12 04:37:50,430 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fac4dfc]
2021-03-12 04:37:50,430 [main:117] - GENERATED CALL = ((A().x()).toChar()).isTitleCase()
2021-03-12 04:37:50,430 [main:114] - replacement of !prope10 of type Boolean is ((A().x()).toChar()).isTitleCase()
2021-03-12 04:37:50,559 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:50,559 [main:66] - Compilation checking started
2021-03-12 04:37:51,203 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:51,208 [main:107] - replacing (1L, Long)
2021-03-12 04:37:51,208 [main:50] - replacing 1L Long
2021-03-12 04:37:51,208 [main:54] - Getting value of type Long
2021-03-12 04:37:51,349 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:51,353 [main:58] - GENERATED VALUE OF TYPE Long = -207393771496816127
2021-03-12 04:37:51,353 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:51,506 [main:67] - randomType = UByte
2021-03-12 04:37:51,633 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:37:51,663 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@32344d9b]
2021-03-12 04:37:51,664 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@16caff76]
2021-03-12 04:37:51,664 [main:78] - Generated call from random type = (125.toUByte()).toLong().shl((A().x()))
2021-03-12 04:37:51,665 [main:106] - GETTING Long from Int
2021-03-12 04:37:51,694 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], public fun kotlin.Long.coerceAtLeast(minimumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@34f8564d]]
2021-03-12 04:37:51,694 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:37:51,694 [main:149] - GENERATING call of type public fun kotlin.Long.coerceAtLeast(minimumValue: kotlin.Long): kotlin.Long defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@34f8564d]
2021-03-12 04:37:51,826 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:51,829 [main:117] - GENERATED CALL = ((A().x())).toLong().coerceAtLeast(3724358653978869971)
2021-03-12 04:37:51,830 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3daeaf18]]
2021-03-12 04:37:51,830 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4e60caa4]
2021-03-12 04:37:51,961 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:51,964 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3daeaf18]
2021-03-12 04:37:51,964 [main:117] - GENERATED CALL = ((A().x())).div(2393727633138462891).ushr(A().x())
2021-03-12 04:37:51,964 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f3239]]
2021-03-12 04:37:51,964 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:51,964 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@492f3239]
2021-03-12 04:37:52,095 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:52,099 [main:117] - GENERATED CALL = ((A().x())).toInt().plus(342601694380243445)
2021-03-12 04:37:52,099 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49425914], public final val last: kotlin.Long defined in kotlin.ranges.LongRange[DeserializedPropertyDescriptor@7ca84e7f]]
2021-03-12 04:37:52,099 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Long): kotlin.ranges.LongRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@49425914]
2021-03-12 04:37:52,230 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:52,233 [main:117] - GENERATED CALL = ((A().x())).rangeTo(-4483231953484295449).last
2021-03-12 04:37:52,233 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@756e526], public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@b790f3d]]
2021-03-12 04:37:52,233 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@756e526]
2021-03-12 04:37:52,233 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@b790f3d]
2021-03-12 04:37:52,233 [main:117] - GENERATED CALL = ((A().x())).toDouble().toLong()
2021-03-12 04:37:52,234 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@756e526], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Double.toBits(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@23314f61]]
2021-03-12 04:37:52,234 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@756e526]
2021-03-12 04:37:52,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Double.toBits(): kotlin.Long defined in kotlin[DeserializedSimpleFunctionDescriptor@23314f61]
2021-03-12 04:37:52,234 [main:117] - GENERATED CALL = ((A().x())).toDouble().toBits()
2021-03-12 04:37:52,234 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], public final operator fun minus(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@52d2a313]]
2021-03-12 04:37:52,234 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:37:52,234 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@52d2a313]
2021-03-12 04:37:52,362 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:52,365 [main:117] - GENERATED CALL = ((A().x())).toLong().minus(107)
2021-03-12 04:37:52,365 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44f9e70f]]
2021-03-12 04:37:52,365 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@584c62b]
2021-03-12 04:37:52,365 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@44f9e70f]
2021-03-12 04:37:52,496 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:52,499 [main:117] - GENERATED CALL = ((A().x())).toInt().rem(664083198222468673)
2021-03-12 04:37:52,499 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad], public final fun inv(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5511d1a]]
2021-03-12 04:37:52,499 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4a43aaad]
2021-03-12 04:37:52,499 [main:149] - GENERATING call of type public final fun inv(): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@5511d1a]
2021-03-12 04:37:52,499 [main:117] - GENERATED CALL = ((A().x())).toLong().inv()
2021-03-12 04:37:52,500 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@59e8b191], public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4f1c0bfe]]
2021-03-12 04:37:52,500 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@59e8b191]
2021-03-12 04:37:52,500 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4f1c0bfe]
2021-03-12 04:37:52,500 [main:117] - GENERATED CALL = ((A().x())).toFloat().toLong()
2021-03-12 04:37:52,500 [main:114] - replacement of 1L of type Long is ((A().x())).toLong().coerceAtLeast(3724358653978869971)
2021-03-12 04:37:52,634 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:52,635 [main:66] - Compilation checking started
2021-03-12 04:37:53,297 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, 1, 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:53,299 [main:107] - replacing (1, Int)
2021-03-12 04:37:53,299 [main:50] - replacing 1 Int
2021-03-12 04:37:53,299 [main:54] - Getting value of type Int
2021-03-12 04:37:53,442 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:53,445 [main:58] - GENERATED VALUE OF TYPE Int = 1537942199
2021-03-12 04:37:53,445 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:53,633 [main:67] - randomType = LinkedHashMap<Byte, String>
2021-03-12 04:37:53,778 [main:302] - generating value of type = LinkedHashMap<Byte, String> false depth = 0
2021-03-12 04:37:53,921 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Byte, String>): LkedHashMap<Byte, Strg> = TODO()
2021-03-12 04:37:53,926 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Byte, String>): LkedHashMap<Byte, Strg> = TODO()
2021-03-12 04:37:54,071 [main:302] - generating value of type = Pair<Byte, String> false depth = 3
2021-03-12 04:37:54,210 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: String): Pair<Byte, String> = TODO()
2021-03-12 04:37:54,214 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: String): Pair<Byte, String> = TODO()
2021-03-12 04:37:54,357 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 04:37:54,360 [main:302] - generating value of type = String true depth = 6
2021-03-12 04:37:54,364 [main:95] - GENERATED = Pair<Byte, String>(-49, "mzhws")
2021-03-12 04:37:54,364 [main:95] - GENERATED = linkedMapOf<Byte, String>(Pair<Byte, String>(-49, "mzhws"))
2021-03-12 04:37:54,536 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@28791945]
2021-03-12 04:37:54,536 [main:78] - Generated call from random type = (linkedMapOf<Byte, String>(Pair<Byte, String>(-49, "mzhws"))).size.shr((A().x()))
2021-03-12 04:37:54,537 [main:106] - GETTING Int from A
2021-03-12 04:37:54,544 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60c69660]]
2021-03-12 04:37:54,544 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:54,545 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@60c69660]
2021-03-12 04:37:54,545 [main:117] - GENERATED CALL = (A()).x((A().x())).countTrailingZeroBits()
2021-03-12 04:37:54,545 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]]
2021-03-12 04:37:54,545 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:54,545 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@342bb4db]
2021-03-12 04:37:54,545 [main:117] - GENERATED CALL = (A()).x(A().x()).ushr(A().x())
2021-03-12 04:37:54,545 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]]
2021-03-12 04:37:54,545 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:54,546 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bde140b]
2021-03-12 04:37:54,546 [main:117] - GENERATED CALL = (A()).x(A().x()).or(A().x())
2021-03-12 04:37:54,546 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a689a]]
2021-03-12 04:37:54,546 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:54,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@14a689a]
2021-03-12 04:37:54,710 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:54,716 [main:117] - GENERATED CALL = (A()).x(A().x()).rem(-104)
2021-03-12 04:37:54,717 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8ea6dac]]
2021-03-12 04:37:54,717 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:54,863 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:54,866 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@8ea6dac]
2021-03-12 04:37:55,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:55,010 [main:117] - GENERATED CALL = (A()).x(151119319).div(-56)
2021-03-12 04:37:55,010 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]]
2021-03-12 04:37:55,010 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:55,010 [main:117] - GENERATED CALL = (A()).x(A().x())
2021-03-12 04:37:55,010 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@73a9f793]]
2021-03-12 04:37:55,010 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:55,010 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@73a9f793]
2021-03-12 04:37:55,010 [main:117] - GENERATED CALL = (A()).x((A().x())).coerceAtMost(A().x())
2021-03-12 04:37:55,010 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147faaa8]]
2021-03-12 04:37:55,010 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:55,143 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:55,147 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@147faaa8]
2021-03-12 04:37:55,147 [main:117] - GENERATED CALL = (A()).x(-1644972356).shl(A().x())
2021-03-12 04:37:55,147 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@318d441f]]
2021-03-12 04:37:55,147 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:55,147 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@318d441f]
2021-03-12 04:37:55,147 [main:117] - GENERATED CALL = (A()).x(A().x()).inv()
2021-03-12 04:37:55,147 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d8c2de8]]
2021-03-12 04:37:55,148 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:55,301 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:55,304 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@d8c2de8]
2021-03-12 04:37:55,305 [main:117] - GENERATED CALL = (A()).x(1580717653).takeLowestOneBit()
2021-03-12 04:37:55,305 [main:114] - replacement of 1 of type Int is (A()).x(A().x()).ushr(A().x())
2021-03-12 04:37:55,440 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:55,440 [main:66] - Compilation checking started
2021-03-12 04:37:56,068 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, (A()).x(A().x()).ushr(A().x()), 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:56,072 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n"), String)
2021-03-12 04:37:56,072 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n") String
2021-03-12 04:37:56,072 [main:54] - Getting value of type String
2021-03-12 04:37:56,256 [main:302] - generating value of type = String true depth = 0
2021-03-12 04:37:56,260 [main:58] - GENERATED VALUE OF TYPE String = "juega"
2021-03-12 04:37:56,260 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:56,438 [main:67] - randomType = UByte
2021-03-12 04:37:56,569 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 04:37:56,599 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@589c1bc9]
2021-03-12 04:37:56,600 [main:78] - Generated call from random type = (49.toUByte()).toString(A().x())
2021-03-12 04:37:56,601 [main:106] - GETTING String from A
2021-03-12 04:37:56,605 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]]
2021-03-12 04:37:56,605 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:37:56,738 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:37:56,741 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bfd676]
2021-03-12 04:37:56,742 [main:117] - GENERATED CALL = (A()).x(1423867578).toString((A().x()))
2021-03-12 04:37:56,742 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope8.joinToString(separator = "\n") of type String is (49.toUByte()).toString(A().x())
2021-03-12 04:37:56,880 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:56,880 [main:66] - Compilation checking started
2021-03-12 04:37:57,487 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, (A()).x(A().x()).ushr(A().x()), 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error((49.toUByte()).toString(A().x()))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:57,491 [main:107] - replacing (1L, Long)
2021-03-12 04:37:57,492 [main:50] - replacing 1L Long
2021-03-12 04:37:57,492 [main:54] - Getting value of type Long
2021-03-12 04:37:57,658 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:57,661 [main:58] - GENERATED VALUE OF TYPE Long = -1446104760840009410
2021-03-12 04:37:57,662 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:57,850 [main:67] - randomType = Byte?
2021-03-12 04:37:57,981 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 04:37:58,020 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@146a81e4]
2021-03-12 04:37:58,151 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:58,154 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Long): kotlin.Long defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@244a60a0]
2021-03-12 04:37:58,288 [main:302] - generating value of type = Long true depth = 0
2021-03-12 04:37:58,292 [main:78] - Generated call from random type = (65)?.div(7673602750377224558).and(1787527119046998165)
2021-03-12 04:37:58,292 [main:114] - replacement of 1L of type Long is (65)?.div(7673602750377224558).and(1787527119046998165)
2021-03-12 04:37:58,425 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:37:58,426 [main:66] - Compilation checking started
2021-03-12 04:37:59,017 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, (65)?.div(7673602750377224558).and(1787527119046998165), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, (A()).x(A().x()).ushr(A().x()), 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error((49.toUByte()).toString(A().x()))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:37:59,020 [main:107] - replacing (true, Boolean)
2021-03-12 04:37:59,020 [main:50] - replacing true Boolean
2021-03-12 04:37:59,020 [main:54] - Getting value of type Boolean
2021-03-12 04:37:59,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:37:59,156 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:37:59,156 [main:61] - GENERATED IS CALL =false
2021-03-12 04:37:59,317 [main:67] - randomType = Kla6
2021-03-12 04:37:59,453 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 04:37:59,456 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}
2021-03-12 04:37:59,473 [main:149] - GENERATING call of type public open fun resumeWith(prope7: kotlin.Result<kotlin.Unit>): kotlin.Unit defined in Kla3[SimpleFunctionDescriptorImpl@13b474d9]
2021-03-12 04:37:59,605 [main:302] - generating value of type = Result<Unit> false depth = 0
2021-03-12 04:37:59,744 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-12 04:37:59,767 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Unit): Result<Unit> = TODO()
2021-03-12 04:38:00,065 [main:302] - generating value of type = Function0<Unit> false depth = 3
2021-03-12 04:38:00,069 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 04:38:00,212 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:38:00,216 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 04:38:00,678 [main:302] - generating value of type = Int true depth = 7
2021-03-12 04:38:00,681 [main:302] - generating value of type = Function1<Int, Unit> false depth = 7
2021-03-12 04:38:00,685 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 04:38:00,825 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:38:00,830 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 04:38:01,133 [main:302] - generating value of type = Any false depth = 11
2021-03-12 04:38:01,133 [main:95] - GENERATED = print("roncu")
2021-03-12 04:38:01,133 [main:95] - GENERATED = repeat(-426107926, {a: Int -> print("roncu")})
2021-03-12 04:38:01,133 [main:95] - GENERATED = runCatching<Unit>({ repeat(-426107926, {a: Int -> print("roncu")})})
2021-03-12 04:38:01,134 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3b226449]
2021-03-12 04:38:01,265 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:01,266 [main:78] - Generated call from random type = (Kla6).resumeWith(runCatching<Unit>({ repeat(-426107926, {a: Int -> print("roncu")})})).equals("zzwtk")
2021-03-12 04:38:01,266 [main:114] - replacement of true of type Boolean is (Kla6).resumeWith(runCatching<Unit>({ repeat(-426107926, {a: Int -> print("roncu")})})).equals("zzwtk")
2021-03-12 04:38:01,395 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:38:01,396 [main:66] - Compilation checking started
2021-03-12 04:38:02,049 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, (65)?.div(7673602750377224558).and(1787527119046998165), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, (A()).x(A().x()).ushr(A().x()), 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error((49.toUByte()).toString(A().x()))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = (Kla6).resumeWith(runCatching<Unit>({ repeat(-426107926, {a: Int -> print("roncu")})})).equals("zzwtk")) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:38:02,052 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 04:38:02,052 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 04:38:02,052 [main:54] - Getting value of type Boolean
2021-03-12 04:38:02,199 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:38:02,203 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 04:38:02,203 [main:61] - GENERATED IS CALL =false
2021-03-12 04:38:02,376 [main:67] - randomType = Kla6
2021-03-12 04:38:02,527 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 04:38:02,531 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}
2021-03-12 04:38:02,567 [main:149] - GENERATING call of type public open fun resume(value: kotlin.Unit): kotlin.Unit defined in Kla6[SimpleFunctionDescriptorImpl@7d9749c1]
2021-03-12 04:38:02,568 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3b226449]
2021-03-12 04:38:02,712 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:02,713 [main:78] - Generated call from random type = (Kla6).resume(if ((A().x()).toChar().isUpperCase()) return "method: $prope1").equals("gqndz")
2021-03-12 04:38:02,714 [main:106] - GETTING Boolean from A
2021-03-12 04:38:02,721 [main:113] - Case = [public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]]
2021-03-12 04:38:02,721 [main:149] - GENERATING call of type public open fun x(x: kotlin.Int = ...): kotlin.Int defined in A[SimpleFunctionDescriptorImpl@23c4dd69]
2021-03-12 04:38:02,860 [main:302] - generating value of type = Int true depth = 0
2021-03-12 04:38:02,865 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18f7b7fd]
2021-03-12 04:38:03,003 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,003 [main:117] - GENERATED CALL = (A()).x(47496656).equals("hwxyp")
2021-03-12 04:38:03,008 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]]
2021-03-12 04:38:03,008 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:38:03,150 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,150 [main:117] - GENERATED CALL = (A()).equals("owsit")
2021-03-12 04:38:03,150 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@744200de]]
2021-03-12 04:38:03,150 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:38:03,283 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,283 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@744200de]
2021-03-12 04:38:03,283 [main:117] - GENERATED CALL = (A()).equals("hwryh").not()
2021-03-12 04:38:03,284 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63b16764]]
2021-03-12 04:38:03,284 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:38:03,417 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,417 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@63b16764]
2021-03-12 04:38:03,549 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:38:03,553 [main:117] - GENERATED CALL = (A()).equals("yjhku").xor(true)
2021-03-12 04:38:03,553 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5d664d50]]
2021-03-12 04:38:03,553 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:38:03,687 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,687 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5d664d50]
2021-03-12 04:38:03,827 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,827 [main:117] - GENERATED CALL = (A()).equals("hcrum").equals("bnejb")
2021-03-12 04:38:03,827 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77c1dc5d]]
2021-03-12 04:38:03,827 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:38:03,970 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:03,970 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77c1dc5d]
2021-03-12 04:38:04,125 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:38:04,129 [main:117] - GENERATED CALL = (A()).equals("ewtjb").or(true)
2021-03-12 04:38:04,129 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7fc83c47]]
2021-03-12 04:38:04,129 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@59f903c0]
2021-03-12 04:38:04,263 [main:302] - generating value of type = Any false depth = 0
2021-03-12 04:38:04,263 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7fc83c47]
2021-03-12 04:38:04,396 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 04:38:04,400 [main:117] - GENERATED CALL = (A()).equals("szogg").and(true)
2021-03-12 04:38:04,400 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (A()).equals("yjhku").xor(true)
2021-03-12 04:38:04,532 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 04:38:04,533 [main:66] - Compilation checking started
2021-03-12 04:38:04,943 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, (65)?.div(7673602750377224558).and(1787527119046998165), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, (A()).x(A().x()).ushr(A().x()), 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if ((A()).equals("yjhku").xor(true)) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error((49.toUByte()).toString(A().x()))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = (Kla6).resumeWith(runCatching<Unit>({ repeat(-426107926, {a: Int -> print("roncu")})})).equals("zzwtk")) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:38:04,946 [main:107] - replacing (this, Kla2)
2021-03-12 04:38:04,946 [main:50] - replacing this Kla2
2021-03-12 04:38:04,946 [main:54] - Getting value of type Kla2
2021-03-12 04:38:05,083 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 04:38:05,087 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        this.prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}
2021-03-12 04:38:05,087 [main:58] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-12 04:38:05,088 [main:61] - GENERATED IS CALL =true
2021-03-12 04:38:05,096 [main:67] - randomType = UShort
2021-03-12 04:38:05,228 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 04:38:05,262 [main:106] - GETTING Kla2 from Int
2021-03-12 04:38:05,302 [main:106] - GETTING Kla2 from Char
2021-03-12 04:38:05,326 [main:106] - GETTING Kla2 from Int
2021-03-12 04:38:05,326 [main:106] - GETTING Kla2 from A
2021-03-12 04:38:05,333 [main:106] - GETTING Kla2 from Int
2021-03-12 04:38:05,333 [main:114] - replacement of this of type Kla2 is Kla2()
2021-03-12 04:38:05,465 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 04:38:05,466 [main:66] - Compilation checking started
2021-03-12 04:38:06,059 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
open class A {
    open fun x(x: Int = foo()) = x
    private fun foo() = 42
}

fun box644(): String {
    class Kla0 {
        fun fu0(): Any {
            return {}
        }
    }

    val javaClass = A().x().javaClass
    val prope1 = javaClass.getEnclosingMethod()
    if ((A().x()).toChar().isUpperCase()) return "method: $prope1"

    val prope2 = javaClass.getEnclosingClass()!!.getName()
    if (prope2 != "LambdaInMemberFunctionInLocalClassKt\$box\$C") return "enclosing class: $prope2"

    val prope3 = javaClass.getDeclaringClass()
    if (prope3 != null) return "anonymous function has a declaring class: $prope3"

    return (A().x()).toChar().plus("mjlmv")
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun fu2(c: suspend (Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, Long,
                                                  Long, Long, Long, Long, Long, Long, Long, Long, Long, String) -> String): String {
    return c.invoke(1L, 1L, (A()).x((A().x())).div(8020395559315261258), 1L, 1L, 1L, 1L, ((A().x())).toLong().coerceAtLeast(3724358653978869971), 1L, 1L, 1L, 5559777498147439269, 1L, 1L, (65)?.div(7673602750377224558).and(1787527119046998165), 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, "OK")
}

suspend fun fu3(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 String) -> String): String {
    return c.invoke(1, 1, 1, 1, 1, 1, 1, ((A().x())).compareTo((A().x())).and(A().x()), 1, 1, 1, 1, 1, (A()).x(2063216375).shl((A().x())), 1, 1, 1, 1, 1, 1, "OK")
}

suspend fun fu4(c: suspend (Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, Int, Int, Int, Int, Int, Int, Int, Int, Int,
                                                 Int, String) -> String): String {
    return c.invoke((A().x()).toInt().rem(17), 1, 1, ((A().x()).toChar()).toByte().compareTo(-89), 1, (A()).x(A().x()).ushr(A().x()), 1, 1, 1, 1, 1, 1, 1, ((A().x()).toChar()).compareTo((A().x()).toChar()).dec(), 1, 1, 1, 1, 1, (Kla2())?.prope7?.hashCode()!!, 1, (A().x()).toInt().toString(A().x()))
}

fun box974(): String {
    var prope6 = "FAIL 1"
    fu1 { require(true)}
    if ((A()).x(A().x()).toString(A().x()) != (2811024265490364479.toULong()).toUShort().toString((A().x()))) return prope6
    prope6 = "FAIL 2"
    fu1 {
        prope6 = fu3 {
            i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, s -> s
        }
    }
    if (prope6 != "OK") return prope6
    prope6 = "FAIL 3"
    fu1 { println()}
    return prope6
}

fun <Ty0> fu5(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        x(prope7.getOrThrow())
    }
}

fun fu6(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        prope7.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope7: Result<Any?>) {
        runCatching<Any?>({ "varge"}).getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Any?>) {
        Kla2().prope7 = prope7.getOrThrow()
    }

    var prope7: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope7: Result<Ty0>) {
        if (prope7.isSuccess) {
            resume(prope7.getOrThrow())
        } else {
            fu7(prope7.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope8 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope8.clear()
        var prope12: CoroutineStackFrame? = c
        while (prope12 != null) {
            prope8.add(prope12.getStackTraceElement())
            prope12 = prope12.callerFrame
        }
    }

    fun fu10(method: String) {
        prope8.find { it?.methodName?.startsWith(((A().x())).toChar().titlecase()) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope8.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope8.find { it?.methodName?.startsWith(method) == true } ?: error((49.toUByte()).toString(A().x()))
    }
}

val prope4 = Kla4()

class Kla5 {
    private var prope9 = 0
    var prope10 = (arrayListOf<Triple<Int, Byte, Array<Byte>>>(Triple<Int, Byte, Array<Byte>>(710082188, -121, emptyArray<Byte>()))).subList(-543605880, 367837760).equals("smzhf")

    var prope11: () -> Unit = {}

    fun fu12() {
        prope9 = 0
        prope10 = false
        prope11 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { c ->
        prope9++
        prope11 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = (Kla6).resumeWith(runCatching<Unit>({ repeat(-426107926, {a: Int -> print("roncu")})})).equals("zzwtk")) {
        for (i in 1..numberOfSuspensions) {
            if ((A()).x(A().x()).rem(-58) != i) error("ukqah" + prope9)
            prope11()
        }
        if (prope9 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ((A().x()).toChar()).toByte().toString((A().x())) + prope9)
        if (prope10) error("Wrong state-machine generated: it is finished early")
        prope11()
        if (checkFinished && ((A().x()).toChar()).isTitleCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope5 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope5.prope11 = {
            Kla5().prope10 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw NullPointerException()
    }
}


2021-03-12 04:38:06,062 [main:107] - replacing ("FAIL 3", String)
2021-03-12 04:38:06,062 [main:50] - replacing "FAIL 3" String
2021-03-12 04:38:06,063 [main:54] - Getting value of type String
