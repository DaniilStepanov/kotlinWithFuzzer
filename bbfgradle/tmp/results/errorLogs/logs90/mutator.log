2021-03-12 06:16:09,554 [main:66] - Compilation checking started
2021-03-12 06:16:10,880 [main:50] - replacing val a: String String
2021-03-12 06:16:10,880 [main:54] - Getting value of type String
2021-03-12 06:16:11,060 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:11,064 [main:58] - GENERATED VALUE OF TYPE String = "ttmjj"
2021-03-12 06:16:11,064 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:13,961 [main:67] - randomType = LinkedHashMap<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>
2021-03-12 06:16:14,064 [main:302] - generating value of type = LinkedHashMap<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?> false depth = 0
2021-03-12 06:16:14,241 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>): LkedHashMap<Function2<Triple<Collection<S>, Function2<LkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?> = TODO()
2021-03-12 06:16:14,247 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>): LkedHashMap<Function2<Triple<Collection<S>, Function2<LkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?> = TODO()
2021-03-12 06:16:14,358 [main:302] - generating value of type = Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?> false depth = 3
2021-03-12 06:16:14,466 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, second: Long?): Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?> = TODO()
2021-03-12 06:16:14,470 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, second: Long?): Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?> = TODO()
2021-03-12 06:16:14,591 [main:302] - generating value of type = Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char> false depth = 6
2021-03-12 06:16:14,591 [main:302] - generating value of type = Char true depth = 7
2021-03-12 06:16:14,592 [main:302] - generating value of type = Long true depth = 6
2021-03-12 06:16:14,594 [main:95] - GENERATED = Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>({a: Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, b: UShort -> '诘'}, -8673144130718533615)
2021-03-12 06:16:14,596 [main:95] - GENERATED = linkedMapOf<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>(Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>({a: Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, b: UShort -> '诘'}, -8673144130718533615))
2021-03-12 06:16:15,183 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:15,277 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:15,280 [main:78] - Generated call from random type = (linkedMapOf<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>(Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>({a: Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, b: UShort -> '诘'}, -8673144130718533615))).size.toString(1945110316)
2021-03-12 06:16:15,282 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 06:16:15,283 [main:66] - Compilation checking started
2021-03-12 06:16:16,181 [main:53] - Result = true
Text:
class S(val a: String = (linkedMapOf<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>(Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>({a: Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, b: UShort -> '诘'}, -8673144130718533615))).size.toString(1945110316), val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:16,182 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:16,183 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 06:16:16,184 [main:66] - Compilation checking started
2021-03-12 06:16:16,860 [main:53] - Result = true
Text:
class S(val a: String = (linkedMapOf<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>(Pair<Function2<Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, UShort, Char>, Long?>({a: Triple<Collection<S>, Function2<LinkedHashMap<Tester, Set<UInt>>, Int, S?>, Set<Byte>>, b: UShort -> '诘'}, -8673144130718533615))).size.toString(1945110316), val b: String = "pzbxn") {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:17,088 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}
2021-03-12 06:16:17,190 [main:194] - Type params = []
2021-03-12 06:16:17,306 [main:302] - generating value of type = String true depth = 1
2021-03-12 06:16:17,306 [main:302] - generating value of type = String true depth = 1
2021-03-12 06:16:17,309 [main:112] - generating klass Tester text = class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}
2021-03-12 06:16:17,451 [main:194] - Type params = []
2021-03-12 06:16:17,797 [main:43] - GENERATING CALL OF operator fun S.component3() = ((a + b) as String).substring(2)
2021-03-12 06:16:17,798 [main:61] - WITHOUT TYPE PARAMS = operator fun S.component3() = ((a + b) as String).substring(2)
2021-03-12 06:16:17,903 [main:302] - generating value of type = S false depth = 1
2021-03-12 06:16:17,903 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}
2021-03-12 06:16:18,006 [main:194] - Type params = []
2021-03-12 06:16:18,095 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:18,095 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:18,096 [main:95] - GENERATED = S("qsmlt", "qtpds").component3()
2021-03-12 06:16:18,205 [main:45] - Trying to change 27 nodes
2021-03-12 06:16:18,207 [main:53] - replacing ((a + b), String)
2021-03-12 06:16:18,207 [main:50] - replacing (a + b) String
2021-03-12 06:16:18,207 [main:54] - Getting value of type String
2021-03-12 06:16:18,299 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:18,299 [main:58] - GENERATED VALUE OF TYPE String = "kzgzz"
2021-03-12 06:16:18,299 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:18,300 [main:67] - randomType = Tester
2021-03-12 06:16:18,404 [main:302] - generating value of type = Tester false depth = 0
2021-03-12 06:16:18,404 [main:112] - generating klass Tester text = class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}
2021-03-12 06:16:18,495 [main:194] - Type params = []
2021-03-12 06:16:18,589 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@315b098c]
2021-03-12 06:16:18,589 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb11142]
2021-03-12 06:16:18,590 [main:78] - Generated call from random type = (Tester()).box().toUpperCase()
2021-03-12 06:16:18,590 [main:106] - GETTING String from String
2021-03-12 06:16:18,621 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]]
2021-03-12 06:16:18,621 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]
2021-03-12 06:16:18,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:18,805 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:18,806 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).padStart(-988739454, '퀈')
2021-03-12 06:16:18,807 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c8033b]]
2021-03-12 06:16:18,807 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c8033b]
2021-03-12 06:16:18,900 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:18,992 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:16:18,994 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:16:19,176 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:19,177 [main:95] - GENERATED = StringBuilder("tghhh")
2021-03-12 06:16:19,178 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh"))
2021-03-12 06:16:19,178 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62824af7]]
2021-03-12 06:16:19,179 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62824af7]
2021-03-12 06:16:19,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:19,287 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).substring(775566618)
2021-03-12 06:16:19,287 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3583f9c]]
2021-03-12 06:16:19,287 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3583f9c]
2021-03-12 06:16:19,288 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).replaceIndentByMargin(S("qsmlt", "qtpds").component3(), S("bjirv", "umaox").b)
2021-03-12 06:16:19,288 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f1754a0]]
2021-03-12 06:16:19,288 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f1754a0]
2021-03-12 06:16:19,375 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:19,375 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:19,376 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).filter({a: Char -> false})
2021-03-12 06:16:19,377 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]]
2021-03-12 06:16:19,377 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:19,470 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:19,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:19,560 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]
2021-03-12 06:16:19,660 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:19,661 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).subSequence(-213583758, 380687025).repeat(1063117773)
2021-03-12 06:16:19,661 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e3f582]]
2021-03-12 06:16:19,661 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:19,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:19,750 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@55e3f582]
2021-03-12 06:16:19,750 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).get(-361884934).uppercase()
2021-03-12 06:16:19,750 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b9bb79]]
2021-03-12 06:16:19,750 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b9bb79]
2021-03-12 06:16:19,835 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:19,836 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).prependIndent("tjnhu")
2021-03-12 06:16:19,837 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51449e61]]
2021-03-12 06:16:19,837 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51449e61]
2021-03-12 06:16:19,837 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).reversed()
2021-03-12 06:16:19,837 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2d5596]]
2021-03-12 06:16:19,838 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2d5596]
2021-03-12 06:16:19,933 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:16:20,028 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:16:20,029 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:16:20,158 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:16:20,159 [main:95] - GENERATED = arrayListOf<Int>(-1789233361)
2021-03-12 06:16:20,160 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).slice(arrayListOf<Int>(-1789233361))
2021-03-12 06:16:20,160 [main:61] - replacement of (a + b) of type String is (S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh"))
2021-03-12 06:16:20,258 [main:33] - Trying to replace Element(PARENTHESIZED) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:20,259 [main:66] - Compilation checking started
2021-03-12 06:16:20,620 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:20,622 [main:53] - replacing (ok, String)
2021-03-12 06:16:20,622 [main:50] - replacing ok String
2021-03-12 06:16:20,622 [main:54] - Getting value of type String
2021-03-12 06:16:20,713 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:20,714 [main:58] - GENERATED VALUE OF TYPE String = "asxvj"
2021-03-12 06:16:20,714 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:20,912 [main:67] - randomType = Long?
2021-03-12 06:16:21,008 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:16:21,100 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@63e85236]
2021-03-12 06:16:21,100 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2ee0b0c6]
2021-03-12 06:16:21,193 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:21,195 [main:78] - Generated call from random type = (5696854945955243582)?.toShort().toString(-1892100979)
2021-03-12 06:16:21,195 [main:61] - replacement of ok of type String is (5696854945955243582)?.toShort().toString(-1892100979)
2021-03-12 06:16:21,281 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:21,281 [main:66] - Compilation checking started
2021-03-12 06:16:21,710 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:21,711 [main:53] - replacing ((a + b) as String, String)
2021-03-12 06:16:21,711 [main:50] - replacing (a + b) as String String
2021-03-12 06:16:21,711 [main:54] - Getting value of type String
2021-03-12 06:16:21,817 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:21,817 [main:58] - GENERATED VALUE OF TYPE String = "miwig"
2021-03-12 06:16:21,818 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:21,919 [main:67] - randomType = Pair<Tester, S>
2021-03-12 06:16:22,005 [main:302] - generating value of type = Pair<Tester, S> false depth = 0
2021-03-12 06:16:22,105 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Tester, second: S): Pair<Tester, S> = TODO()
2021-03-12 06:16:22,106 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Tester, second: S): Pair<Tester, S> = TODO()
2021-03-12 06:16:22,204 [main:302] - generating value of type = Tester false depth = 3
2021-03-12 06:16:22,204 [main:112] - generating klass Tester text = class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}
2021-03-12 06:16:22,306 [main:194] - Type params = []
2021-03-12 06:16:22,425 [main:302] - generating value of type = S false depth = 3
2021-03-12 06:16:22,426 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}
2021-03-12 06:16:22,534 [main:194] - Type params = []
2021-03-12 06:16:22,625 [main:302] - generating value of type = String true depth = 5
2021-03-12 06:16:22,626 [main:302] - generating value of type = String true depth = 5
2021-03-12 06:16:22,627 [main:95] - GENERATED = Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))
2021-03-12 06:16:22,644 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@119b3a57]
2021-03-12 06:16:22,645 [main:78] - Generated call from random type = (Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()
2021-03-12 06:16:22,645 [main:106] - GETTING String from String
2021-03-12 06:16:22,679 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]]
2021-03-12 06:16:22,680 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]
2021-03-12 06:16:22,771 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:22,860 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:22,861 [main:117] - GENERATED CALL = (Tester().box()).substringAfterLast('詌', "lsrrz")
2021-03-12 06:16:22,861 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a106caa]]
2021-03-12 06:16:22,861 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1a106caa]
2021-03-12 06:16:22,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:22,993 [main:117] - GENERATED CALL = (Tester().box()).drop(-1324259564)
2021-03-12 06:16:22,994 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339dbd0e]]
2021-03-12 06:16:22,994 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339dbd0e]
2021-03-12 06:16:23,094 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:23,095 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:23,096 [main:117] - GENERATED CALL = (Tester().box()).dropWhile({a: Char -> true})
2021-03-12 06:16:23,097 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]]
2021-03-12 06:16:23,097 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:23,193 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:23,194 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:23,283 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:23,284 [main:117] - GENERATED CALL = (Tester().box()).compareTo("ruylv").toString(-455926408)
2021-03-12 06:16:23,284 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]]
2021-03-12 06:16:23,284 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:23,368 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:23,368 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]
2021-03-12 06:16:23,369 [main:117] - GENERATED CALL = (Tester().box()).get(-1557390894).titlecase()
2021-03-12 06:16:23,369 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:16:23,369 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:16:23,452 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:16:23,453 [main:117] - GENERATED CALL = (Tester().box()).plus("hmesx")
2021-03-12 06:16:23,453 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e592eea]]
2021-03-12 06:16:23,453 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e592eea]
2021-03-12 06:16:23,454 [main:117] - GENERATED CALL = (Tester().box()).capitalize()
2021-03-12 06:16:23,454 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339486ff]]
2021-03-12 06:16:23,454 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339486ff]
2021-03-12 06:16:23,587 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:23,694 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:23,696 [main:117] - GENERATED CALL = (Tester().box()).replaceBeforeLast('늩', S("qsmlt", "qtpds").component3(), "ovjsi")
2021-03-12 06:16:23,696 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]]
2021-03-12 06:16:23,696 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]
2021-03-12 06:16:23,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:23,811 [main:117] - GENERATED CALL = (Tester().box()).takeLast(-437235628)
2021-03-12 06:16:23,812 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]]
2021-03-12 06:16:23,812 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:23,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:23,994 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:23,995 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]
2021-03-12 06:16:24,076 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:24,165 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:24,166 [main:117] - GENERATED CALL = (Tester().box()).subSequence(2144833219, 436680347).commonPrefixWith("ajkgk", true)
2021-03-12 06:16:24,167 [main:61] - replacement of (a + b) as String of type String is (Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()
2021-03-12 06:16:24,280 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:24,280 [main:66] - Compilation checking started
2021-03-12 06:16:24,639 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:24,640 [main:53] - replacing (a, String)
2021-03-12 06:16:24,640 [main:50] - replacing a String
2021-03-12 06:16:24,640 [main:54] - Getting value of type String
2021-03-12 06:16:24,743 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:24,743 [main:58] - GENERATED VALUE OF TYPE String = "gncgo"
2021-03-12 06:16:24,743 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:24,744 [main:67] - randomType = Int
2021-03-12 06:16:24,834 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:24,899 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5ac56fad]
2021-03-12 06:16:24,899 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:24,988 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:24,989 [main:78] - Generated call from random type = (-1399876277).toInt().toString(-229386478)
2021-03-12 06:16:24,989 [main:106] - GETTING String from String
2021-03-12 06:16:25,021 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a71f57]]
2021-03-12 06:16:25,022 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:25,109 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:25,199 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:25,200 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a71f57]
2021-03-12 06:16:25,345 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:16:25,446 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 06:16:25,448 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 06:16:25,630 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:25,630 [main:95] - GENERATED = Regex("flgbg")
2021-03-12 06:16:25,732 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:16:25,732 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:16:25,739 [main:117] - GENERATED CALL = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
2021-03-12 06:16:25,740 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c8033b]]
2021-03-12 06:16:25,740 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c8033b]
2021-03-12 06:16:25,852 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:25,859 [main:117] - GENERATED CALL = (Tester().box()).removeSurrounding("ukefg")
2021-03-12 06:16:25,859 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:25,859 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:25,941 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:26,037 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:26,038 [main:117] - GENERATED CALL = (Tester().box()).commonSuffixWith(StringBuilder(), false)
2021-03-12 06:16:26,038 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]]
2021-03-12 06:16:26,038 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]
2021-03-12 06:16:26,164 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:26,168 [main:117] - GENERATED CALL = (Tester().box()).removePrefix(StringBuilder())
2021-03-12 06:16:26,169 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]]
2021-03-12 06:16:26,169 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]
2021-03-12 06:16:26,169 [main:117] - GENERATED CALL = (Tester().box()).trim()
2021-03-12 06:16:26,169 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]]
2021-03-12 06:16:26,169 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]
2021-03-12 06:16:26,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:26,340 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:26,341 [main:117] - GENERATED CALL = (Tester().box()).padStart(-2075293862, '敆')
2021-03-12 06:16:26,342 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]]
2021-03-12 06:16:26,342 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]
2021-03-12 06:16:26,342 [main:117] - GENERATED CALL = (Tester().box()).trimIndent()
2021-03-12 06:16:26,342 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b9bb79]]
2021-03-12 06:16:26,342 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b9bb79]
2021-03-12 06:16:26,343 [main:117] - GENERATED CALL = (Tester().box()).prependIndent(S("qsmlt", "qtpds").component3())
2021-03-12 06:16:26,343 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21ec413c]]
2021-03-12 06:16:26,343 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21ec413c]
2021-03-12 06:16:26,425 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:26,543 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:26,658 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:26,659 [main:117] - GENERATED CALL = (Tester().box()).replace('抧', 'ꢛ', false)
2021-03-12 06:16:26,659 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3583f9c]]
2021-03-12 06:16:26,659 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3583f9c]
2021-03-12 06:16:26,660 [main:117] - GENERATED CALL = (Tester().box()).replaceIndentByMargin(S("bjirv", "umaox").component1(), S("bjirv", "umaox").component1())
2021-03-12 06:16:26,660 [main:61] - replacement of a of type String is (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
2021-03-12 06:16:26,747 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:26,747 [main:66] - Compilation checking started
2021-03-12 06:16:27,120 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:27,120 [main:53] - replacing (S("O","K"), S)
2021-03-12 06:16:27,121 [main:50] - replacing S("O","K") S
2021-03-12 06:16:27,121 [main:54] - Getting value of type S
2021-03-12 06:16:27,213 [main:302] - generating value of type = S false depth = 0
2021-03-12 06:16:27,213 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}
2021-03-12 06:16:27,312 [main:194] - Type params = []
2021-03-12 06:16:27,404 [main:302] - generating value of type = String true depth = 2
2021-03-12 06:16:27,404 [main:302] - generating value of type = String true depth = 2
2021-03-12 06:16:27,405 [main:58] - GENERATED VALUE OF TYPE S = S("ynifw", "tbzbe")
2021-03-12 06:16:27,405 [main:61] - GENERATED IS CALL =true
2021-03-12 06:16:27,502 [main:67] - randomType = Float
2021-03-12 06:16:27,590 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:16:27,648 [main:106] - GETTING S from String
2021-03-12 06:16:27,679 [main:106] - GETTING S from String
2021-03-12 06:16:27,680 [main:106] - GETTING S from String
2021-03-12 06:16:27,681 [main:106] - GETTING S from String
2021-03-12 06:16:27,682 [main:106] - GETTING S from String
2021-03-12 06:16:27,683 [main:106] - GETTING S from String
2021-03-12 06:16:27,683 [main:61] - replacement of S("O","K") of type S is S("ynifw", "tbzbe")
2021-03-12 06:16:27,774 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:16:27,775 [main:66] - Compilation checking started
2021-03-12 06:16:28,152 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:28,152 [main:53] - replacing (a, String)
2021-03-12 06:16:28,153 [main:50] - replacing a String
2021-03-12 06:16:28,153 [main:54] - Getting value of type String
2021-03-12 06:16:28,240 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:28,241 [main:58] - GENERATED VALUE OF TYPE String = "vzsea"
2021-03-12 06:16:28,241 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:28,612 [main:67] - randomType = LinkedHashMap<UShort?, Byte>
2021-03-12 06:16:28,720 [main:302] - generating value of type = LinkedHashMap<UShort?, Byte> false depth = 0
2021-03-12 06:16:28,828 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UShort?, Byte>): LkedHashMap<UShort?, Byte> = TODO()
2021-03-12 06:16:28,829 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UShort?, Byte>): LkedHashMap<UShort?, Byte> = TODO()
2021-03-12 06:16:28,918 [main:302] - generating value of type = Pair<UShort?, Byte> false depth = 3
2021-03-12 06:16:29,009 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UShort?, second: Byte): Pair<UShort?, Byte> = TODO()
2021-03-12 06:16:29,011 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UShort?, second: Byte): Pair<UShort?, Byte> = TODO()
2021-03-12 06:16:29,102 [main:302] - generating value of type = UShort true depth = 6
2021-03-12 06:16:29,103 [main:302] - generating value of type = Byte true depth = 6
2021-03-12 06:16:29,104 [main:95] - GENERATED = Pair<UShort?, Byte>(3545.toUShort(), 126)
2021-03-12 06:16:29,104 [main:95] - GENERATED = linkedMapOf<UShort?, Byte>(Pair<UShort?, Byte>(3545.toUShort(), 126))
2021-03-12 06:16:29,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:29,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:29,379 [main:78] - Generated call from random type = (linkedMapOf<UShort?, Byte>(Pair<UShort?, Byte>(3545.toUShort(), 126))).size.toString(1056035937)
2021-03-12 06:16:29,379 [main:106] - GETTING String from String
2021-03-12 06:16:29,410 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d33874]]
2021-03-12 06:16:29,411 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d33874]
2021-03-12 06:16:29,411 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceIndent(S("qsmlt", "qtpds").component3())
2021-03-12 06:16:29,411 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]]
2021-03-12 06:16:29,412 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]
2021-03-12 06:16:29,412 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).trimIndent()
2021-03-12 06:16:29,412 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]]
2021-03-12 06:16:29,412 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]
2021-03-12 06:16:29,514 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:29,606 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:29,607 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).padEnd(900146081, '聃')
2021-03-12 06:16:29,607 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]]
2021-03-12 06:16:29,607 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:29,697 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:29,698 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]
2021-03-12 06:16:29,698 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).get(1140340080).titlecase()
2021-03-12 06:16:29,699 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]]
2021-03-12 06:16:29,699 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]
2021-03-12 06:16:29,786 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:29,787 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:29,788 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).dropLastWhile({a: Char -> false})
2021-03-12 06:16:29,788 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f1754a0]]
2021-03-12 06:16:29,788 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f1754a0]
2021-03-12 06:16:29,889 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:29,890 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:29,891 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).filter({a: Char -> true})
2021-03-12 06:16:29,892 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d17fa2]]
2021-03-12 06:16:29,892 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d17fa2]
2021-03-12 06:16:29,993 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:30,082 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:30,083 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).substringBeforeLast('釖', "vwwjc")
2021-03-12 06:16:30,083 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:30,083 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:30,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:30,262 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:30,262 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:30,347 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:30,463 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:30,465 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:30,660 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:16:30,752 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:30,753 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:30,990 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 06:16:31,090 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:31,092 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:31,272 [main:302] - generating value of type = CharSequence false depth = 9
2021-03-12 06:16:31,276 [main:95] - GENERATED = StringBuilder("wnsde")
2021-03-12 06:16:31,276 [main:95] - GENERATED = StringBuilder(StringBuilder("wnsde"))
2021-03-12 06:16:31,277 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder("wnsde")))
2021-03-12 06:16:31,363 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:31,364 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(2131308219, -2133172165).commonSuffixWith(StringBuilder(StringBuilder(StringBuilder("wnsde"))), false)
2021-03-12 06:16:31,364 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483da8a0]]
2021-03-12 06:16:31,364 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483da8a0]
2021-03-12 06:16:31,467 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:31,467 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:31,468 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).filterNot({a: Char -> false})
2021-03-12 06:16:31,469 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2ff925]]
2021-03-12 06:16:31,469 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2ff925]
2021-03-12 06:16:31,567 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:31,659 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:31,660 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).removeRange(-728642573, 1683601962)
2021-03-12 06:16:31,660 [main:61] - replacement of a of type String is "vzsea"
2021-03-12 06:16:31,750 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:16:31,751 [main:53] - replacing (a, String)
2021-03-12 06:16:31,751 [main:50] - replacing a String
2021-03-12 06:16:31,751 [main:54] - Getting value of type String
2021-03-12 06:16:31,837 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:31,837 [main:58] - GENERATED VALUE OF TYPE String = "hlojw"
2021-03-12 06:16:31,837 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:31,936 [main:67] - randomType = Tester?
2021-03-12 06:16:32,029 [main:302] - generating value of type = Tester false depth = 0
2021-03-12 06:16:32,030 [main:112] - generating klass Tester text = class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring(2)
}
2021-03-12 06:16:32,115 [main:194] - Type params = []
2021-03-12 06:16:32,207 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@3f42a5fe]
2021-03-12 06:16:32,208 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13c8033b]
2021-03-12 06:16:32,321 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:32,326 [main:78] - Generated call from random type = (Tester())?.box().removeSurrounding("qoqzm")
2021-03-12 06:16:32,326 [main:106] - GETTING String from String
2021-03-12 06:16:32,365 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]]
2021-03-12 06:16:32,365 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:32,459 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:32,544 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:32,545 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]
2021-03-12 06:16:32,641 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:32,730 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:32,730 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).subSequence(1019427161, 846258525).commonPrefixWith("bufax", false)
2021-03-12 06:16:32,731 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]]
2021-03-12 06:16:32,731 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]
2021-03-12 06:16:32,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:32,828 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).takeLast(1618633853)
2021-03-12 06:16:32,828 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]]
2021-03-12 06:16:32,828 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:32,935 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:33,021 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:33,022 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]
2021-03-12 06:16:33,104 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:33,105 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).subSequence(1904112478, -887784212).repeat(-327483667)
2021-03-12 06:16:33,105 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]]
2021-03-12 06:16:33,105 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]
2021-03-12 06:16:33,197 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:33,289 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:33,290 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).substringBefore('⺗', "mxljo")
2021-03-12 06:16:33,290 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d17fa2]]
2021-03-12 06:16:33,290 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24d17fa2]
2021-03-12 06:16:33,372 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:33,373 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).substringBeforeLast('꘢', S("bjirv", "umaox").a)
2021-03-12 06:16:33,373 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39735924]]
2021-03-12 06:16:33,373 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39735924]
2021-03-12 06:16:33,456 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:33,457 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).trimMargin("wsjvx")
2021-03-12 06:16:33,457 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:16:33,457 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:16:33,540 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).plus(null)
2021-03-12 06:16:33,540 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54fb0bfb]]
2021-03-12 06:16:33,540 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:33,633 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:33,634 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54fb0bfb]
2021-03-12 06:16:33,635 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).get(-1685995796).lowercase()
2021-03-12 06:16:33,635 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3583f9c]]
2021-03-12 06:16:33,635 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3583f9c]
2021-03-12 06:16:33,635 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).replaceIndentByMargin(S("bjirv", "umaox").component2(), S("qsmlt", "qtpds").component3())
2021-03-12 06:16:33,635 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bbaa9f2]]
2021-03-12 06:16:33,635 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bbaa9f2]
2021-03-12 06:16:33,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:33,728 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component2()).dropLast(-168757475)
2021-03-12 06:16:33,728 [main:61] - replacement of a of type String is (S("bjirv", "umaox").component2()).takeLast(1618633853)
2021-03-12 06:16:33,816 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:33,817 [main:53] - replacing (b, String)
2021-03-12 06:16:33,817 [main:50] - replacing b String
2021-03-12 06:16:33,817 [main:54] - Getting value of type String
2021-03-12 06:16:33,905 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:33,906 [main:58] - GENERATED VALUE OF TYPE String = "ujezx"
2021-03-12 06:16:33,906 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:34,390 [main:67] - randomType = Sequence<MutableMap<Char, Tester?>>?
2021-03-12 06:16:34,390 [main:106] - GETTING String from String
2021-03-12 06:16:34,420 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]]
2021-03-12 06:16:34,421 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]
2021-03-12 06:16:34,421 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).uppercase()
2021-03-12 06:16:34,421 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bf8d3dc]]
2021-03-12 06:16:34,421 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bf8d3dc]
2021-03-12 06:16:34,422 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).concat(S("bjirv", "umaox").a)
2021-03-12 06:16:34,422 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7326d276]]
2021-03-12 06:16:34,422 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7326d276]
2021-03-12 06:16:34,520 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:34,616 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:34,617 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).replaceAfterLast('䜧', "kjjzz", S("qsmlt", "qtpds").component3())
2021-03-12 06:16:34,618 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]]
2021-03-12 06:16:34,618 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:34,705 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:34,706 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:34,789 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:34,790 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).compareTo("kekeg").toString(-355874644)
2021-03-12 06:16:34,790 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]]
2021-03-12 06:16:34,791 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]
2021-03-12 06:16:34,893 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:34,894 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).substringBefore('⅜', S("qsmlt", "qtpds").component3())
2021-03-12 06:16:34,894 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:34,894 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:34,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:35,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:35,069 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:35,149 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:35,232 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:35,233 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).subSequence(-466566187, -92677878).commonSuffixWith("mhcuo", false)
2021-03-12 06:16:35,233 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@705adaa6]]
2021-03-12 06:16:35,233 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@705adaa6]
2021-03-12 06:16:35,234 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).lowercase()
2021-03-12 06:16:35,234 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]]
2021-03-12 06:16:35,234 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:35,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:35,442 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:35,443 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]
2021-03-12 06:16:35,536 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:35,623 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:35,624 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).subSequence(-1072629983, 178802679).commonPrefixWith("etczx", false)
2021-03-12 06:16:35,624 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]]
2021-03-12 06:16:35,625 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]
2021-03-12 06:16:35,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:35,859 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:35,860 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).padStart(609023531, '㽧')
2021-03-12 06:16:35,860 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e73060]]
2021-03-12 06:16:35,860 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:35,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:36,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:36,032 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e73060]
2021-03-12 06:16:36,115 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:16:36,218 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:16:36,220 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:16:36,488 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:36,488 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:16:36,575 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-12 06:16:36,577 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Set<RegexOption> = TODO()
2021-03-12 06:16:36,688 [main:95] - GENERATED = linkedSetOf<RegexOption>()
2021-03-12 06:16:36,689 [main:95] - GENERATED = Regex("qmmqk", linkedSetOf<RegexOption>())
2021-03-12 06:16:36,780 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:36,781 [main:117] - GENERATED CALL = (S("qsmlt", "qtpds").component3()).subSequence(437069580, -855666895).replaceFirst(Regex("qmmqk", linkedSetOf<RegexOption>()), "gjjzn")
2021-03-12 06:16:36,781 [main:61] - replacement of b of type String is (S("qsmlt", "qtpds").component3()).substringBefore('⅜', S("qsmlt", "qtpds").component3())
2021-03-12 06:16:36,863 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:36,863 [main:53] - replacing (a, String)
2021-03-12 06:16:36,864 [main:50] - replacing a String
2021-03-12 06:16:36,864 [main:54] - Getting value of type String
2021-03-12 06:16:36,946 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:36,947 [main:58] - GENERATED VALUE OF TYPE String = "vrwzb"
2021-03-12 06:16:36,948 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:36,949 [main:67] - randomType = Int
2021-03-12 06:16:37,032 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:37,073 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@44c4182b]
2021-03-12 06:16:37,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:37,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:37,260 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:37,261 [main:78] - Generated call from random type = (1053646827).compareTo(1943734387).toString(-1875502326)
2021-03-12 06:16:37,262 [main:106] - GETTING String from String
2021-03-12 06:16:37,282 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35582687]]
2021-03-12 06:16:37,282 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35582687]
2021-03-12 06:16:37,363 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:37,444 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:37,445 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).substringAfter('儒', "lqdxd")
2021-03-12 06:16:37,445 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e592eea]]
2021-03-12 06:16:37,445 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e592eea]
2021-03-12 06:16:37,446 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).capitalize()
2021-03-12 06:16:37,446 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]]
2021-03-12 06:16:37,446 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:37,547 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:37,548 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).length.toString(-1095573506)
2021-03-12 06:16:37,548 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@233e96f9]]
2021-03-12 06:16:37,548 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@233e96f9]
2021-03-12 06:16:37,656 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:37,656 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:37,657 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).takeWhile({a: Char -> true})
2021-03-12 06:16:37,657 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb11142]]
2021-03-12 06:16:37,657 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb11142]
2021-03-12 06:16:37,658 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).toUpperCase()
2021-03-12 06:16:37,658 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:16:37,658 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:16:37,761 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:16:37,761 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).plus("fbgkf")
2021-03-12 06:16:37,761 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bbaa9f2]]
2021-03-12 06:16:37,761 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bbaa9f2]
2021-03-12 06:16:37,864 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:37,865 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).dropLast(-1658773957)
2021-03-12 06:16:37,865 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2e4471]]
2021-03-12 06:16:37,865 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2e4471]
2021-03-12 06:16:37,949 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:37,953 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).removeSuffix("tgakg")
2021-03-12 06:16:37,953 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]]
2021-03-12 06:16:37,953 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]
2021-03-12 06:16:37,953 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).uppercase()
2021-03-12 06:16:37,953 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]]
2021-03-12 06:16:37,953 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]
2021-03-12 06:16:38,033 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:38,034 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).takeLast(928774173)
2021-03-12 06:16:38,034 [main:61] - replacement of a of type String is (S("bjirv", "umaox").a).plus("fbgkf")
2021-03-12 06:16:38,129 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:38,129 [main:53] - replacing (b, String)
2021-03-12 06:16:38,129 [main:50] - replacing b String
2021-03-12 06:16:38,130 [main:54] - Getting value of type String
2021-03-12 06:16:38,248 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:38,249 [main:58] - GENERATED VALUE OF TYPE String = "rvuus"
2021-03-12 06:16:38,249 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:38,334 [main:67] - randomType = Byte
2021-03-12 06:16:38,414 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:16:38,454 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@507da753]
2021-03-12 06:16:38,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d2020a]
2021-03-12 06:16:38,454 [main:78] - Generated call from random type = (-87).toChar().plus(S("bjirv", "umaox").component1())
2021-03-12 06:16:38,455 [main:106] - GETTING String from String
2021-03-12 06:16:38,471 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]]
2021-03-12 06:16:38,472 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:38,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:16:38,553 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:38,554 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).compareTo(S("bjirv", "umaox").a).toString(-2003548780)
2021-03-12 06:16:38,554 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b9bb79]]
2021-03-12 06:16:38,554 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b9bb79]
2021-03-12 06:16:38,636 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:38,636 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).prependIndent("nblso")
2021-03-12 06:16:38,637 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@233e96f9]]
2021-03-12 06:16:38,637 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@233e96f9]
2021-03-12 06:16:38,720 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:38,720 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:38,721 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).takeWhile({a: Char -> true})
2021-03-12 06:16:38,721 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bf8d3dc]]
2021-03-12 06:16:38,721 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bf8d3dc]
2021-03-12 06:16:38,811 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:38,812 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).concat("lzbvs")
2021-03-12 06:16:38,812 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cc934e8]]
2021-03-12 06:16:38,812 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cc934e8]
2021-03-12 06:16:38,898 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:38,980 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:39,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:39,061 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).replaceFirst('', '隌', false)
2021-03-12 06:16:39,062 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]]
2021-03-12 06:16:39,062 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]
2021-03-12 06:16:39,142 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:39,227 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:39,228 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:39,424 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:16:39,428 [main:95] - GENERATED = StringBuilder("jlnpc")
2021-03-12 06:16:39,429 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).removePrefix(StringBuilder("jlnpc"))
2021-03-12 06:16:39,429 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51449e61]]
2021-03-12 06:16:39,429 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51449e61]
2021-03-12 06:16:39,429 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).reversed()
2021-03-12 06:16:39,430 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]]
2021-03-12 06:16:39,430 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]
2021-03-12 06:16:39,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:39,605 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:39,606 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).padEnd(-1418347779, '臹')
2021-03-12 06:16:39,606 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483da8a0]]
2021-03-12 06:16:39,606 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@483da8a0]
2021-03-12 06:16:39,685 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:39,686 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:39,686 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).filterNot({a: Char -> true})
2021-03-12 06:16:39,687 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e7f9455]]
2021-03-12 06:16:39,687 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e7f9455]
2021-03-12 06:16:39,768 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:16:39,769 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:39,770 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).filterIndexed({a: Int, b: Char -> true})
2021-03-12 06:16:39,770 [main:61] - replacement of b of type String is (S("bjirv", "umaox").a).removePrefix(StringBuilder("jlnpc"))
2021-03-12 06:16:39,862 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:39,863 [main:53] - replacing (o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2, String)
2021-03-12 06:16:39,863 [main:50] - replacing o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2 String
2021-03-12 06:16:39,863 [main:54] - Getting value of type String
2021-03-12 06:16:39,951 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:39,952 [main:58] - GENERATED VALUE OF TYPE String = "zyipw"
2021-03-12 06:16:39,952 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:39,953 [main:67] - randomType = S
2021-03-12 06:16:40,037 [main:302] - generating value of type = S false depth = 0
2021-03-12 06:16:40,038 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}
2021-03-12 06:16:40,124 [main:194] - Type params = []
2021-03-12 06:16:40,215 [main:302] - generating value of type = String true depth = 2
2021-03-12 06:16:40,215 [main:302] - generating value of type = String true depth = 2
2021-03-12 06:16:40,224 [main:149] - GENERATING call of type public final operator fun component1(): kotlin.String defined in S[SimpleFunctionDescriptorImpl@30a38e88]
2021-03-12 06:16:40,224 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]
2021-03-12 06:16:40,306 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:40,307 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:40,308 [main:78] - Generated call from random type = (S("dzjyu", "ergzz")).component1().dropLastWhile({a: Char -> true})
2021-03-12 06:16:40,308 [main:106] - GETTING String from String
2021-03-12 06:16:40,338 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]]
2021-03-12 06:16:40,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]
2021-03-12 06:16:40,339 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).trim()
2021-03-12 06:16:40,339 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]]
2021-03-12 06:16:40,339 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c3282d]
2021-03-12 06:16:40,451 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:40,452 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).takeLast(-1877674263)
2021-03-12 06:16:40,453 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]]
2021-03-12 06:16:40,453 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]
2021-03-12 06:16:40,570 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:40,574 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).removePrefix("qquda")
2021-03-12 06:16:40,574 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2985771a]]
2021-03-12 06:16:40,575 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2985771a]
2021-03-12 06:16:40,659 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:40,660 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).replaceAfter('厠', S("bjirv", "umaox").b, S("bjirv", "umaox").a)
2021-03-12 06:16:40,660 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]]
2021-03-12 06:16:40,660 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]
2021-03-12 06:16:40,744 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:40,745 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:40,746 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
2021-03-12 06:16:40,746 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]]
2021-03-12 06:16:40,746 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]
2021-03-12 06:16:40,746 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).uppercase()
2021-03-12 06:16:40,746 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e7f9455]]
2021-03-12 06:16:40,746 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e7f9455]
2021-03-12 06:16:40,827 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:16:40,828 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:40,829 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).filterIndexed({a: Int, b: Char -> true})
2021-03-12 06:16:40,829 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cc934e8]]
2021-03-12 06:16:40,829 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cc934e8]
2021-03-12 06:16:40,908 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:40,987 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:41,078 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:41,079 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).replaceFirst('經', '뛺', true)
2021-03-12 06:16:41,079 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62824af7]]
2021-03-12 06:16:41,079 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@62824af7]
2021-03-12 06:16:41,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:41,165 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).substring(1317121082)
2021-03-12 06:16:41,165 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]]
2021-03-12 06:16:41,165 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:41,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:41,247 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]
2021-03-12 06:16:41,247 [main:117] - GENERATED CALL = (S("bjirv", "umaox").b).get(-1700499691).titlecase()
2021-03-12 06:16:41,247 [main:61] - replacement of o + k + (5696854945955243582)?.toShort().toString(-1892100979) + ok2 of type String is (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
2021-03-12 06:16:41,327 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:41,328 [main:66] - Compilation checking started
2021-03-12 06:16:41,700 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring(2)
}

fun box() = Tester().box()


2021-03-12 06:16:41,700 [main:53] - replacing (k, String)
2021-03-12 06:16:41,701 [main:50] - replacing k String
2021-03-12 06:16:41,701 [main:54] - Getting value of type String
2021-03-12 06:16:41,802 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:41,803 [main:58] - GENERATED VALUE OF TYPE String = "ctbdc"
2021-03-12 06:16:41,803 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:41,899 [main:67] - randomType = Char
2021-03-12 06:16:42,004 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:42,040 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@11e8a92c]
2021-03-12 06:16:42,041 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11e4c08c]
2021-03-12 06:16:42,125 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:42,125 [main:78] - Generated call from random type = ('㛶').toLong().toString(1698546789)
2021-03-12 06:16:42,126 [main:61] - replacement of k of type String is ('㛶').toLong().toString(1698546789)
2021-03-12 06:16:42,207 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:42,208 [main:53] - replacing ("O", String)
2021-03-12 06:16:42,208 [main:50] - replacing "O" String
2021-03-12 06:16:42,208 [main:54] - Getting value of type String
2021-03-12 06:16:42,293 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:42,293 [main:58] - GENERATED VALUE OF TYPE String = "gwjoc"
2021-03-12 06:16:42,293 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:42,378 [main:67] - randomType = Double
2021-03-12 06:16:42,461 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:16:42,512 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@cab07cc]
2021-03-12 06:16:42,512 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d2020a]
2021-03-12 06:16:42,598 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:42,599 [main:78] - Generated call from random type = (0.13286609469938904).toChar().plus("xztiw")
2021-03-12 06:16:42,599 [main:61] - replacement of "O" of type String is (0.13286609469938904).toChar().plus("xztiw")
2021-03-12 06:16:42,723 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:42,724 [main:53] - replacing (o + ('㛶').toLong().toString(1698546789) + (5696854945955243582)?.toShort().toString(-1892100979), String)
2021-03-12 06:16:42,724 [main:50] - replacing o + ('㛶').toLong().toString(1698546789) + (5696854945955243582)?.toShort().toString(-1892100979) String
2021-03-12 06:16:42,724 [main:54] - Getting value of type String
2021-03-12 06:16:42,817 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:42,817 [main:58] - GENERATED VALUE OF TYPE String = "qpbqm"
2021-03-12 06:16:42,817 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:42,903 [main:67] - randomType = UShort
2021-03-12 06:16:42,983 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:16:43,027 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6917395b]
2021-03-12 06:16:43,027 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bd286ee]
2021-03-12 06:16:43,106 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:43,107 [main:78] - Generated call from random type = (15157.toUShort()).toByte().toString(-712889687)
2021-03-12 06:16:43,107 [main:106] - GETTING String from String
2021-03-12 06:16:43,125 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5984fe01]]
2021-03-12 06:16:43,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5984fe01]
2021-03-12 06:16:43,204 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:16:43,204 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:16:43,205 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceFirstChar({a: Char -> '秅'})
2021-03-12 06:16:43,205 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]]
2021-03-12 06:16:43,205 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]
2021-03-12 06:16:43,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:43,390 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:43,391 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).padEnd(1486497296, '쟥')
2021-03-12 06:16:43,391 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a3f66c]]
2021-03-12 06:16:43,391 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a3f66c]
2021-03-12 06:16:43,470 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:43,549 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:43,550 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceBefore('ᢏ', S("bjirv", "umaox").component1(), "ctgjb")
2021-03-12 06:16:43,550 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54fb0bfb]]
2021-03-12 06:16:43,550 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:43,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:43,629 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@54fb0bfb]
2021-03-12 06:16:43,630 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).get(-308405838).lowercase()
2021-03-12 06:16:43,630 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eaba70d]]
2021-03-12 06:16:43,630 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eaba70d]
2021-03-12 06:16:43,630 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).toLowerCase()
2021-03-12 06:16:43,630 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2ff925]]
2021-03-12 06:16:43,630 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c2ff925]
2021-03-12 06:16:43,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:43,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:43,792 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).removeRange(-860991027, 853490260)
2021-03-12 06:16:43,792 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]]
2021-03-12 06:16:43,792 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]
2021-03-12 06:16:43,793 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).uppercase()
2021-03-12 06:16:43,793 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]]
2021-03-12 06:16:43,793 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]
2021-03-12 06:16:43,890 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:43,891 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:43,892 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).dropLastWhile({a: Char -> false})
2021-03-12 06:16:43,892 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]]
2021-03-12 06:16:43,892 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:43,987 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:44,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:44,069 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]
2021-03-12 06:16:44,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:44,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:44,228 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(1852624458, 1183033612).substring(1775366411, 210767075)
2021-03-12 06:16:44,228 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]]
2021-03-12 06:16:44,228 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:44,306 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:44,401 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:44,402 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]
2021-03-12 06:16:44,494 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:44,578 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:44,579 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(1477114514, -97847596).commonPrefixWith(StringBuilder(), false)
2021-03-12 06:16:44,579 [main:61] - replacement of o + ('㛶').toLong().toString(1698546789) + (5696854945955243582)?.toShort().toString(-1892100979) of type String is "qpbqm"
2021-03-12 06:16:44,658 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:16:44,659 [main:53] - replacing ("K", String)
2021-03-12 06:16:44,659 [main:50] - replacing "K" String
2021-03-12 06:16:44,659 [main:54] - Getting value of type String
2021-03-12 06:16:44,738 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:44,739 [main:58] - GENERATED VALUE OF TYPE String = "emqrj"
2021-03-12 06:16:44,739 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:44,740 [main:67] - randomType = Tester
2021-03-12 06:16:44,819 [main:302] - generating value of type = Tester false depth = 0
2021-03-12 06:16:44,819 [main:112] - generating klass Tester text = class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring(2)
}
2021-03-12 06:16:44,899 [main:194] - Type params = []
2021-03-12 06:16:45,018 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@3809d9eb]
2021-03-12 06:16:45,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]
2021-03-12 06:16:45,019 [main:78] - Generated call from random type = (Tester()).box().uppercase()
2021-03-12 06:16:45,019 [main:106] - GETTING String from String
2021-03-12 06:16:45,056 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339486ff]]
2021-03-12 06:16:45,056 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339486ff]
2021-03-12 06:16:45,138 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:45,218 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:45,219 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceBeforeLast('븓', Tester().box(), "xbupd")
2021-03-12 06:16:45,219 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2d5596]]
2021-03-12 06:16:45,219 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c2d5596]
2021-03-12 06:16:45,299 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:16:45,385 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 06:16:45,386 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 06:16:45,582 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-12 06:16:45,583 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 06:16:45,688 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:16:45,691 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:16:45,998 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 06:16:45,998 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 06:16:45,999 [main:302] - generating value of type = Any false depth = 8
2021-03-12 06:16:45,999 [main:95] - GENERATED = check(false, { "zfbmn"})
2021-03-12 06:16:45,999 [main:95] - GENERATED = buildSet<Int>({ check(false, { "zfbmn"})})
2021-03-12 06:16:46,000 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).slice(buildSet<Int>({ check(false, { "zfbmn"})}))
2021-03-12 06:16:46,000 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:46,000 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:46,079 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:46,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:46,160 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:46,258 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:46,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:46,353 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(1514743108, -611397649).commonSuffixWith("czfcd", false)
2021-03-12 06:16:46,353 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48d9550b]]
2021-03-12 06:16:46,353 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48d9550b]
2021-03-12 06:16:46,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:46,511 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:46,590 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:46,594 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceRange(-893274734, -1879227315, "nvuqg")
2021-03-12 06:16:46,594 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]]
2021-03-12 06:16:46,594 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21633f5b]
2021-03-12 06:16:46,672 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:46,672 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:46,673 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).dropLastWhile({a: Char -> false})
2021-03-12 06:16:46,673 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]]
2021-03-12 06:16:46,673 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:16:46,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:46,768 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24228d01]
2021-03-12 06:16:46,768 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).get(1798706010).titlecase()
2021-03-12 06:16:46,768 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:46,768 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:46,858 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:46,942 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:16:46,944 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:16:47,108 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:47,109 [main:95] - GENERATED = StringBuilder("gpuhx")
2021-03-12 06:16:47,189 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:47,190 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).commonSuffixWith(StringBuilder("gpuhx"), true)
2021-03-12 06:16:47,190 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]]
2021-03-12 06:16:47,190 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1749209c]
2021-03-12 06:16:47,190 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).uppercase()
2021-03-12 06:16:47,190 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d33874]]
2021-03-12 06:16:47,190 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d33874]
2021-03-12 06:16:47,285 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:47,286 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceIndent("xfspy")
2021-03-12 06:16:47,286 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7326d276]]
2021-03-12 06:16:47,286 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7326d276]
2021-03-12 06:16:47,376 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:47,377 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceAfterLast('踎', S("bjirv", "umaox").a, Tester().box())
2021-03-12 06:16:47,377 [main:61] - replacement of "K" of type String is (S("bjirv", "umaox").component1()).dropLastWhile({a: Char -> false})
2021-03-12 06:16:47,461 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:47,462 [main:53] - replacing (2, Int)
2021-03-12 06:16:47,462 [main:50] - replacing 2 Int
2021-03-12 06:16:47,462 [main:54] - Getting value of type Int
2021-03-12 06:16:47,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:47,542 [main:58] - GENERATED VALUE OF TYPE Int = -1466636579
2021-03-12 06:16:47,543 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:47,711 [main:67] - randomType = MutableMap<UInt, Char>
2021-03-12 06:16:47,712 [main:106] - GETTING Int from String
2021-03-12 06:16:47,732 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3538740a]]
2021-03-12 06:16:47,732 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3538740a]
2021-03-12 06:16:47,811 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:47,811 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).length.xor(280764489)
2021-03-12 06:16:47,811 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b]]
2021-03-12 06:16:47,811 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).length
2021-03-12 06:16:47,812 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46dadf94]]
2021-03-12 06:16:47,812 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46dadf94]
2021-03-12 06:16:47,905 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 06:16:47,906 [main:302] - generating value of type = Int true depth = 1
2021-03-12 06:16:47,906 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).sumBy({a: Char -> -901120587})
2021-03-12 06:16:47,907 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710d138e]]
2021-03-12 06:16:47,907 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@710d138e]
2021-03-12 06:16:47,993 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:47,993 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:47,994 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).indexOfLast({a: Char -> false})
2021-03-12 06:16:47,994 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@16d92d12]]
2021-03-12 06:16:47,994 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@16d92d12]
2021-03-12 06:16:48,071 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:48,072 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).length.coerceAtLeast(1901004928)
2021-03-12 06:16:48,072 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@43ea41d9]]
2021-03-12 06:16:48,072 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:48,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@43ea41d9]
2021-03-12 06:16:48,073 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).compareTo(S("bjirv", "umaox").b).countTrailingZeroBits()
2021-03-12 06:16:48,073 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5020027c]]
2021-03-12 06:16:48,073 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5020027c]
2021-03-12 06:16:48,073 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).length.countLeadingZeroBits()
2021-03-12 06:16:48,073 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dbed05]]
2021-03-12 06:16:48,073 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:48,074 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dbed05]
2021-03-12 06:16:48,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:48,152 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).compareTo(S("bjirv", "umaox").component2()).shr(-1870097379)
2021-03-12 06:16:48,152 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5de1b3ee]]
2021-03-12 06:16:48,152 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:48,152 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5de1b3ee]
2021-03-12 06:16:48,229 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:16:48,230 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).compareTo(S("bjirv", "umaox").component2()).minus(101)
2021-03-12 06:16:48,230 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4f6815]]
2021-03-12 06:16:48,230 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:16:48,230 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6d4f6815]
2021-03-12 06:16:48,230 [main:117] - GENERATED CALL = (S("bjirv", "umaox").a).compareTo(Tester().box()).unaryPlus()
2021-03-12 06:16:48,230 [main:61] - replacement of 2 of type Int is (S("bjirv", "umaox").a).length.coerceAtLeast(1901004928)
2021-03-12 06:16:48,307 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:48,308 [main:66] - Compilation checking started
2021-03-12 06:16:48,641 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(-892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring((S("bjirv", "umaox").a).length.coerceAtLeast(1901004928))
}

fun box() = Tester().box()


2021-03-12 06:16:48,642 [main:53] - replacing (b, String)
2021-03-12 06:16:48,642 [main:50] - replacing b String
2021-03-12 06:16:48,642 [main:54] - Getting value of type String
2021-03-12 06:16:48,760 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:48,761 [main:58] - GENERATED VALUE OF TYPE String = "pcatw"
2021-03-12 06:16:48,761 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:48,884 [main:67] - randomType = Pair<Char, Int>
2021-03-12 06:16:49,004 [main:302] - generating value of type = Pair<Char, Int> false depth = 0
2021-03-12 06:16:49,101 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char, second: Int): Pair<Char, Int> = TODO()
2021-03-12 06:16:49,103 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char, second: Int): Pair<Char, Int> = TODO()
2021-03-12 06:16:49,194 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:16:49,194 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:16:49,195 [main:95] - GENERATED = Pair<Char, Int>('숾', 734696748)
2021-03-12 06:16:49,213 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d2020a]
2021-03-12 06:16:49,214 [main:78] - Generated call from random type = (Pair<Char, Int>('숾', 734696748)).first.plus(Tester().box())
2021-03-12 06:16:49,214 [main:106] - GETTING String from String
2021-03-12 06:16:49,248 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48d9550b]]
2021-03-12 06:16:49,248 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48d9550b]
2021-03-12 06:16:49,346 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:49,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:49,562 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:49,567 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceRange(-17038492, 1572322438, "qqcfj")
2021-03-12 06:16:49,567 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:49,567 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:49,666 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:49,753 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:49,753 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).commonSuffixWith(StringBuilder(), false)
2021-03-12 06:16:49,753 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]]
2021-03-12 06:16:49,753 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]
2021-03-12 06:16:49,837 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:49,838 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).substringAfterLast('ᝏ', S("bjirv", "umaox").b)
2021-03-12 06:16:49,838 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]]
2021-03-12 06:16:49,838 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:49,927 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:50,013 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:50,014 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]
2021-03-12 06:16:50,114 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:50,214 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:16:50,216 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:16:50,392 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:16:50,392 [main:95] - GENERATED = StringBuilder(1346328265)
2021-03-12 06:16:50,473 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:50,474 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(1159734456, -101400787).commonPrefixWith(StringBuilder(1346328265), true)
2021-03-12 06:16:50,474 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@233e96f9]]
2021-03-12 06:16:50,474 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@233e96f9]
2021-03-12 06:16:50,554 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:50,554 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:50,555 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).takeWhile({a: Char -> true})
2021-03-12 06:16:50,555 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:16:50,555 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:16:50,637 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:16:50,637 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).plus("mrsgb")
2021-03-12 06:16:50,638 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a71f57]]
2021-03-12 06:16:50,638 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:50,751 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:50,844 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:50,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a71f57]
2021-03-12 06:16:50,928 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:16:51,015 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:16:51,016 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 06:16:51,290 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:51,290 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 06:16:51,293 [main:95] - GENERATED = Regex("ksizq", kotlin.text.RegexOption.MULTILINE)
2021-03-12 06:16:51,378 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:16:51,378 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:16:51,382 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(-1742006372, -1781429284).replace(Regex("ksizq", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "kllqi"})
2021-03-12 06:16:51,383 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]]
2021-03-12 06:16:51,383 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]
2021-03-12 06:16:51,471 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:51,472 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).repeat(-1513599523)
2021-03-12 06:16:51,472 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]]
2021-03-12 06:16:51,472 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]
2021-03-12 06:16:51,472 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).trim()
2021-03-12 06:16:51,472 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]]
2021-03-12 06:16:51,472 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]
2021-03-12 06:16:51,472 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).trimIndent()
2021-03-12 06:16:51,472 [main:61] - replacement of b of type String is (S("bjirv", "umaox").component1()).plus("mrsgb")
2021-03-12 06:16:51,561 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:51,561 [main:53] - replacing (a, String)
2021-03-12 06:16:51,561 [main:50] - replacing a String
2021-03-12 06:16:51,561 [main:54] - Getting value of type String
2021-03-12 06:16:51,641 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:16:51,642 [main:58] - GENERATED VALUE OF TYPE String = "xletp"
2021-03-12 06:16:51,642 [main:61] - GENERATED IS CALL =false
2021-03-12 06:16:51,726 [main:67] - randomType = Short
2021-03-12 06:16:51,805 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:16:51,838 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@ce2af8d]
2021-03-12 06:16:51,838 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bd286ee]
2021-03-12 06:16:51,957 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:51,958 [main:78] - Generated call from random type = (-22595).toByte().toString(897849315)
2021-03-12 06:16:51,958 [main:106] - GETTING String from String
2021-03-12 06:16:51,996 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@604e1e34]]
2021-03-12 06:16:51,996 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@604e1e34]
2021-03-12 06:16:51,997 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).trimStart()
2021-03-12 06:16:51,997 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]]
2021-03-12 06:16:51,997 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]
2021-03-12 06:16:52,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:52,115 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).repeat(189931547)
2021-03-12 06:16:52,115 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e391270]]
2021-03-12 06:16:52,115 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e391270]
2021-03-12 06:16:52,116 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).trimEnd()
2021-03-12 06:16:52,116 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d33874]]
2021-03-12 06:16:52,116 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56d33874]
2021-03-12 06:16:52,116 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceIndent(S("qsmlt", "qtpds").component3())
2021-03-12 06:16:52,116 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]]
2021-03-12 06:16:52,116 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c60f564]
2021-03-12 06:16:52,117 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).trim()
2021-03-12 06:16:52,117 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48d9550b]]
2021-03-12 06:16:52,117 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48d9550b]
2021-03-12 06:16:52,202 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:52,281 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:52,361 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:52,364 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).replaceRange(244027820, 1874868483, "tqmiy")
2021-03-12 06:16:52,365 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]]
2021-03-12 06:16:52,365 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b85e170]
2021-03-12 06:16:52,443 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:52,537 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:16:52,538 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).padEnd(-933226288, '㶄')
2021-03-12 06:16:52,538 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:16:52,538 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:52,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:52,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:52,711 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:16:52,789 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:16:52,873 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:52,874 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:16:53,043 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:16:53,047 [main:95] - GENERATED = StringBuilder("edfrx")
2021-03-12 06:16:53,144 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:16:53,145 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(-410293864, -1643022707).commonSuffixWith(StringBuilder("edfrx"), true)
2021-03-12 06:16:53,145 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]]
2021-03-12 06:16:53,145 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:16:53,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:53,323 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:53,324 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]
2021-03-12 06:16:53,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:53,486 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:16:53,487 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).subSequence(620831626, 2131676344).substring(-1336587039, -1047170004)
2021-03-12 06:16:53,487 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e9b3068]]
2021-03-12 06:16:53,487 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e9b3068]
2021-03-12 06:16:53,570 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:16:53,571 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:16:53,571 [main:117] - GENERATED CALL = (S("bjirv", "umaox").component1()).takeLastWhile({a: Char -> false})
2021-03-12 06:16:53,572 [main:61] - replacement of a of type String is (-22595).toByte().toString(897849315)
2021-03-12 06:16:53,651 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:16:53,747 [main:119] - TRYING TO REPLACE CONSTANT 892293202
2021-03-12 06:16:53,835 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:16:53,835 [main:66] - Compilation checking started
2021-03-12 06:16:54,188 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(892293202, -168189796).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring((S("bjirv", "umaox").a).length.coerceAtLeast(1901004928))
}

fun box() = Tester().box()


2021-03-12 06:16:54,189 [main:119] - TRYING TO REPLACE CONSTANT 168189796
2021-03-12 06:16:54,268 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:16:54,268 [main:66] - Compilation checking started
2021-03-12 06:16:54,596 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(892293202, 1901004928).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring((S("bjirv", "umaox").a).length.coerceAtLeast(1901004928))
}

fun box() = Tester().box()


2021-03-12 06:16:54,596 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 06:16:54,676 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:16:54,676 [main:66] - Compilation checking started
2021-03-12 06:16:55,017 [main:119] - TRYING TO REPLACE CONSTANT 1901004928
2021-03-12 06:16:55,096 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 06:16:55,096 [main:66] - Compilation checking started
2021-03-12 06:16:55,407 [main:53] - Result = true
Text:
class S(val a: String, val b: String) {
  operator fun component1() : String = (Tester().box()).subSequence(892293202, 1901004928).replace(Regex("flgbg"), {a: MatchResult -> "dgwid"})
  operator fun component2() : String = b
}

operator fun S.component3() = ((S("bjirv", "umaox").a).removeSurrounding(StringBuilder("tghhh")) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("ynifw", "tbzbe")
    return (S("bjirv", "umaox").b).dropLastWhile({a: Char -> false})
  }

  operator fun S.component4() = ((Pair<Tester, S>(Tester(), S("ecmfi", "xshdm"))).first.box()).substring((S("bjirv", "umaox").a).length.coerceAtLeast(-168189796))
}

fun box() = Tester().box()


2021-03-12 06:16:55,442 [main:41] - AFTER TRY 0 res = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()
2021-03-12 06:16:55,585 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}
2021-03-12 06:16:55,656 [main:194] - Type params = []
2021-03-12 06:16:55,725 [main:302] - generating value of type = String true depth = 1
2021-03-12 06:16:55,726 [main:302] - generating value of type = String true depth = 1
2021-03-12 06:16:55,726 [main:112] - generating klass Tester text = class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}
2021-03-12 06:16:55,816 [main:194] - Type params = []
2021-03-12 06:16:56,032 [main:43] - GENERATING CALL OF operator fun S.component3() = ((a + b) as String).substring(2)
2021-03-12 06:16:56,033 [main:61] - WITHOUT TYPE PARAMS = operator fun S.component3() = ((a + b) as String).substring(2)
2021-03-12 06:16:56,115 [main:302] - generating value of type = S false depth = 1
2021-03-12 06:16:56,116 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}
2021-03-12 06:16:56,203 [main:194] - Type params = []
2021-03-12 06:16:56,273 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:56,273 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:16:56,273 [main:95] - GENERATED = S("fsmtm", "ytzgy").component3()
2021-03-12 06:16:56,350 [main:43] - Try №0
2021-03-12 06:17:09,033 [main:48] - Already checked
2021-03-12 06:17:12,945 [main:69] - Trying to insert abstract fun fu6(exception: Throwable)
2021-03-12 06:17:13,059 [main:66] - Compilation checking started
2021-03-12 06:17:14,092 [main:103] - Trying to change 184 nodes
2021-03-12 06:17:14,092 [main:107] - replacing (prope9, Function0<Unit>)
2021-03-12 06:17:14,092 [main:50] - replacing prope9 Function0<Unit>
2021-03-12 06:17:14,093 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:17:14,254 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:17:14,256 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:17:14,406 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:17:14,410 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:17:14,962 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:17:14,965 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-12 06:17:14,967 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:17:15,126 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:17:15,130 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:17:15,576 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 06:17:15,578 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 06:17:15,580 [main:302] - generating value of type = Any false depth = 9
2021-03-12 06:17:15,580 [main:95] - GENERATED = check(true, { "kguph"})
2021-03-12 06:17:15,581 [main:95] - GENERATED = repeat(1451822811, {a: Int -> check(true, { "kguph"})})
2021-03-12 06:17:15,581 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1451822811, {a: Int -> check(true, { "kguph"})})}
2021-03-12 06:17:15,581 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:15,757 [main:67] - randomType = S?
2021-03-12 06:17:15,953 [main:302] - generating value of type = S false depth = 0
2021-03-12 06:17:15,955 [main:112] - generating klass S text = class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}
2021-03-12 06:17:16,106 [main:194] - Type params = []
2021-03-12 06:17:16,249 [main:302] - generating value of type = String true depth = 2
2021-03-12 06:17:16,251 [main:302] - generating value of type = String true depth = 2
2021-03-12 06:17:16,263 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,296 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,297 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,298 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,299 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,301 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,302 [main:106] - GETTING Function0<Unit> from Tester
2021-03-12 06:17:16,310 [main:106] - GETTING Function0<Unit> from S
2021-03-12 06:17:16,318 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,320 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:17:16,320 [main:114] - replacement of prope9 of type Function0<Unit> is { repeat(1451822811, {a: Int -> check(true, { "kguph"})})}
2021-03-12 06:17:16,451 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:17:16,452 [main:66] - Compilation checking started
2021-03-12 06:17:16,869 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    }

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        { repeat(1451822811, {a: Int -> check(true, { "kguph"})})} = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:16,871 [main:107] - replacing (1..numberOfSuspensions, IntRange)
2021-03-12 06:17:16,871 [main:50] - replacing 1..numberOfSuspensions IntRange
2021-03-12 06:17:16,871 [main:54] - Getting value of type IntRange
2021-03-12 06:17:17,016 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 06:17:17,170 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:17:17,173 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:17:17,635 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:17:17,637 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:17:17,639 [main:95] - GENERATED = IntRange(1826241020, -1832073408)
2021-03-12 06:17:17,639 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(1826241020, -1832073408)
2021-03-12 06:17:17,640 [main:61] - GENERATED IS CALL =true
2021-03-12 06:17:17,647 [main:67] - randomType = Kla2
2021-03-12 06:17:17,786 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:17:17,788 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 06:17:17,816 [main:106] - GETTING IntRange from String
2021-03-12 06:17:17,857 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@78436905]]
2021-03-12 06:17:17,857 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@78436905]
2021-03-12 06:17:18,006 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:17:18,008 [main:117] - GENERATED CALL = (o + k).length.until(45)
2021-03-12 06:17:18,008 [main:113] - Case = [public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@529ea07a]]
2021-03-12 06:17:18,009 [main:117] - GENERATED CALL = (o + k).indices
2021-03-12 06:17:18,009 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@78436905]]
2021-03-12 06:17:18,009 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:17:18,009 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@78436905]
2021-03-12 06:17:18,136 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:17:18,138 [main:117] - GENERATED CALL = (o + k).compareTo(S("joxsd", "hvqdh").component1()).until(-41)
2021-03-12 06:17:18,139 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public val kotlin.CharSequence.indices: kotlin.ranges.IntRange defined in kotlin.text[DeserializedPropertyDescriptor@529ea07a]]
2021-03-12 06:17:18,139 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:18,266 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:18,425 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:18,427 [main:117] - GENERATED CALL = (o + k).subSequence(1879950662, -432896988).indices
2021-03-12 06:17:18,427 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67ff5a9]]
2021-03-12 06:17:18,427 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52206882]
2021-03-12 06:17:18,579 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:18,581 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67ff5a9]
2021-03-12 06:17:18,716 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:17:18,719 [main:117] - GENERATED CALL = (o + k).compareTo("bzvxa").rangeTo(-94)
2021-03-12 06:17:18,719 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67ff5a9]]
2021-03-12 06:17:18,719 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@67ff5a9]
2021-03-12 06:17:18,848 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:17:18,851 [main:117] - GENERATED CALL = (o + k).length.rangeTo(-114)
2021-03-12 06:17:18,851 [main:114] - replacement of 1..numberOfSuspensions of type IntRange is (o + k).compareTo("bzvxa").rangeTo(-94)
2021-03-12 06:17:18,988 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:18,989 [main:66] - Compilation checking started
2021-03-12 06:17:19,383 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    }

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in (o + k).compareTo("bzvxa").rangeTo(-94)) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:19,385 [main:107] - replacing ("\n", String)
2021-03-12 06:17:19,385 [main:50] - replacing "\n" String
2021-03-12 06:17:19,385 [main:54] - Getting value of type String
2021-03-12 06:17:19,524 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:19,526 [main:58] - GENERATED VALUE OF TYPE String = "rpbbw"
2021-03-12 06:17:19,526 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:19,986 [main:67] - randomType = LinkedHashMap<Boolean, Short>
2021-03-12 06:17:20,110 [main:302] - generating value of type = LinkedHashMap<Boolean, Short> false depth = 0
2021-03-12 06:17:20,243 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Boolean, Short> = TODO()
2021-03-12 06:17:20,246 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Boolean, Short> = TODO()
2021-03-12 06:17:20,381 [main:95] - GENERATED = linkedMapOf<Boolean, Short>()
2021-03-12 06:17:20,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:17:20,668 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:20,670 [main:78] - Generated call from random type = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)
2021-03-12 06:17:20,670 [main:106] - GETTING String from String
2021-03-12 06:17:20,688 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]]
2021-03-12 06:17:20,688 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]
2021-03-12 06:17:20,689 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).trimIndent()
2021-03-12 06:17:20,689 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@6d80cf8b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]]
2021-03-12 06:17:20,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2601dca0]
2021-03-12 06:17:20,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:20,832 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).length.toString(-249114782)
2021-03-12 06:17:20,832 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:17:20,832 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:17:20,958 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:20,958 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).plus("glsnl")
2021-03-12 06:17:20,958 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:17:20,959 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:21,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:21,221 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:21,224 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:17:21,362 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:17:21,514 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:17:21,517 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:17:21,802 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:17:21,804 [main:95] - GENERATED = StringBuilder("cfsah")
2021-03-12 06:17:21,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:21,973 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).subSequence(-2078097136, -467717567).commonSuffixWith(StringBuilder("cfsah"), false)
2021-03-12 06:17:21,973 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]]
2021-03-12 06:17:21,973 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65de0061]
2021-03-12 06:17:22,131 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:22,265 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:22,267 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).padStart(1595352263, '⟹')
2021-03-12 06:17:22,267 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]]
2021-03-12 06:17:22,267 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5eb80d88]
2021-03-12 06:17:22,413 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:17:22,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:22,544 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).commonSuffixWith("mktue", true)
2021-03-12 06:17:22,544 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]]
2021-03-12 06:17:22,544 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:22,667 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:22,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:22,795 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]
2021-03-12 06:17:22,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:23,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:23,077 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).subSequence(1019038679, -1840054043).substring(-2121428780, -1663175531)
2021-03-12 06:17:23,078 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2e4471]]
2021-03-12 06:17:23,078 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2e4471]
2021-03-12 06:17:23,224 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:17:23,229 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).removeSuffix("qkhgf")
2021-03-12 06:17:23,229 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]]
2021-03-12 06:17:23,229 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]
2021-03-12 06:17:23,351 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:23,353 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).substringAfterLast('餢', o + k)
2021-03-12 06:17:23,353 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]]
2021-03-12 06:17:23,353 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]
2021-03-12 06:17:23,476 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:23,478 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component2()).substringBefore('䆮', o + k + ok)
2021-03-12 06:17:23,481 [main:114] - replacement of "\n" of type String is (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)
2021-03-12 06:17:23,609 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:23,609 [main:66] - Compilation checking started
2021-03-12 06:17:24,231 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    }

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:24,235 [main:107] - replacing (prope1, Kla5)
2021-03-12 06:17:24,235 [main:50] - replacing prope1 Kla5
2021-03-12 06:17:24,235 [main:54] - Getting value of type Kla5
2021-03-12 06:17:24,428 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:17:24,431 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:17:24,432 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 06:17:24,432 [main:61] - GENERATED IS CALL =true
2021-03-12 06:17:24,629 [main:67] - randomType = Double
2021-03-12 06:17:24,767 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:17:24,813 [main:106] - GETTING Kla5 from Tester
2021-03-12 06:17:24,817 [main:106] - GETTING Kla5 from S
2021-03-12 06:17:24,822 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,839 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,840 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,841 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,841 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,842 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,843 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,843 [main:106] - GETTING Kla5 from String
2021-03-12 06:17:24,843 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 06:17:24,967 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:17:24,968 [main:66] - Compilation checking started
2021-03-12 06:17:25,577 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    }

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:25,579 [main:107] - replacing (prope2, Result<Any?>)
2021-03-12 06:17:25,579 [main:50] - replacing prope2 Result<Any?>
2021-03-12 06:17:25,579 [main:54] - Getting value of type Result<Any?>
2021-03-12 06:17:25,707 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 06:17:25,835 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:17:25,838 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:17:26,134 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 06:17:26,136 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:17:26,137 [main:95] - GENERATED = runCatching<Any?>({ "vjema"})
2021-03-12 06:17:26,137 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "vjema"})
2021-03-12 06:17:26,137 [main:61] - GENERATED IS CALL =true
2021-03-12 06:17:26,276 [main:67] - randomType = ULong
2021-03-12 06:17:26,407 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:17:26,452 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,484 [main:106] - GETTING Result<Any?> from Tester
2021-03-12 06:17:26,493 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,495 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,496 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,498 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,499 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,501 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,502 [main:106] - GETTING Result<Any?> from String
2021-03-12 06:17:26,504 [main:106] - GETTING Result<Any?> from S
2021-03-12 06:17:26,511 [main:114] - replacement of prope2 of type Result<Any?> is runCatching<Any?>({ "vjema"})
2021-03-12 06:17:26,637 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:17:26,637 [main:66] - Compilation checking started
2021-03-12 06:17:27,257 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    }

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:27,260 [main:107] - replacing (fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    }, String)
2021-03-12 06:17:27,260 [main:50] - replacing fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    } String
2021-03-12 06:17:27,260 [main:54] - Getting value of type String
2021-03-12 06:17:27,392 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:27,394 [main:58] - GENERATED VALUE OF TYPE String = "gcvhi"
2021-03-12 06:17:27,394 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:27,700 [main:67] - randomType = Collection<UInt>
2021-03-12 06:17:27,701 [main:106] - GETTING String from String
2021-03-12 06:17:27,729 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e73060]]
2021-03-12 06:17:27,730 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:27,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:27,978 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:27,980 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@60e73060]
2021-03-12 06:17:28,103 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:17:28,231 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:17:28,234 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:17:28,663 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:17:28,665 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:17:28,837 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 06:17:28,841 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 06:17:28,998 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-12 06:17:28,998 [main:95] - GENERATED = Regex("pdbrh", setOf<RegexOption>())
2021-03-12 06:17:29,123 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:29,126 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).subSequence(-657531781, -1606511847).replaceFirst(Regex("pdbrh", setOf<RegexOption>()), "ltbru")
2021-03-12 06:17:29,126 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bbaa9f2]]
2021-03-12 06:17:29,126 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bbaa9f2]
2021-03-12 06:17:29,268 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:29,271 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).dropLast(-407060010)
2021-03-12 06:17:29,271 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9826b3]]
2021-03-12 06:17:29,271 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c9826b3]
2021-03-12 06:17:29,271 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).decapitalize()
2021-03-12 06:17:29,271 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]]
2021-03-12 06:17:29,271 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d5ae6]
2021-03-12 06:17:29,395 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:29,520 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:29,522 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")
2021-03-12 06:17:29,522 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]]
2021-03-12 06:17:29,522 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]
2021-03-12 06:17:29,647 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:29,650 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).substringAfterLast('拎', S("joxsd", "hvqdh").component2())
2021-03-12 06:17:29,650 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@604e1e34]]
2021-03-12 06:17:29,650 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@604e1e34]
2021-03-12 06:17:29,650 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).trimStart()
2021-03-12 06:17:29,650 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a71f57]]
2021-03-12 06:17:29,650 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:29,774 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:29,937 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:29,939 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16a71f57]
2021-03-12 06:17:30,100 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:17:30,246 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:17:30,249 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:17:30,701 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:17:30,703 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:17:30,837 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 06:17:30,841 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-12 06:17:30,976 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-12 06:17:30,976 [main:95] - GENERATED = Regex("nkdha", setOf<RegexOption>())
2021-03-12 06:17:31,124 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:17:31,126 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:17:31,132 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).subSequence(1642261154, 784529684).replace(Regex("nkdha", setOf<RegexOption>()), {a: MatchResult -> "jsrog"})
2021-03-12 06:17:31,132 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d2020a]]
2021-03-12 06:17:31,132 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47e51a7a]
2021-03-12 06:17:31,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:31,276 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12d2020a]
2021-03-12 06:17:31,276 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).get(324450920).plus(Tester().box())
2021-03-12 06:17:31,276 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2985771a]]
2021-03-12 06:17:31,276 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2985771a]
2021-03-12 06:17:31,402 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:31,529 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:31,531 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).replaceAfter('', o + k, "etkgx")
2021-03-12 06:17:31,532 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:17:31,532 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:17:31,653 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:31,654 [main:117] - GENERATED CALL = (S("joxsd", "hvqdh").component1()).plus("hxyfh")
2021-03-12 06:17:31,654 [main:114] - replacement of fu0 {
        fu4(1)
        fu5(1)
        try {
            fu4(2)
            fu3(2)
        } finally {
            fu4(3)
            fu5(3)
            return@fu0 4
        }
        fu5("FAIL")
        -1
    } of type String is (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")
2021-03-12 06:17:31,775 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:31,776 [main:66] - Compilation checking started
2021-03-12 06:17:32,396 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:32,399 [main:107] - replacing (value, Ty0)
2021-03-12 06:17:32,400 [main:50] - replacing value Ty0
2021-03-12 06:17:32,400 [main:54] - Getting value of type Ty0
2021-03-12 06:17:32,546 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:17:32,551 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:17:32,730 [main:67] - randomType = UShort
2021-03-12 06:17:32,864 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:17:32,912 [main:106] - GETTING Ty0 from S
2021-03-12 06:17:32,920 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,940 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,940 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,941 [main:106] - GETTING Ty0 from Tester
2021-03-12 06:17:32,946 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,946 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,947 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,947 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,948 [main:106] - GETTING Ty0 from String
2021-03-12 06:17:32,948 [main:111] - Cant find and generate replacement for value type Ty0
2021-03-12 06:17:32,948 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:17:32,948 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:17:32,948 [main:54] - Getting value of type Int
2021-03-12 06:17:33,068 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:33,071 [main:58] - GENERATED VALUE OF TYPE Int = 126959668
2021-03-12 06:17:33,071 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:33,346 [main:67] - randomType = UShort?
2021-03-12 06:17:33,467 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:17:33,503 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@76768420]
2021-03-12 06:17:33,503 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51fba518]
2021-03-12 06:17:33,503 [main:78] - Generated call from random type = (25131.toUShort())?.toLong().countTrailingZeroBits()
2021-03-12 06:17:33,503 [main:114] - replacement of numberOfSuspensions of type Int is (25131.toUShort())?.toLong().countTrailingZeroBits()
2021-03-12 06:17:33,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:33,628 [main:66] - Compilation checking started
2021-03-12 06:17:34,276 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($it);"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(25131.toUShort())?.toLong().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:34,279 [main:107] - replacing (it, Int)
2021-03-12 06:17:34,279 [main:50] - replacing it Int
2021-03-12 06:17:34,279 [main:54] - Getting value of type Int
2021-03-12 06:17:34,431 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:34,434 [main:58] - GENERATED VALUE OF TYPE Int = 1049313564
2021-03-12 06:17:34,434 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:35,008 [main:67] - randomType = ArrayDeque<Collection<Kla3<ULong>>>
2021-03-12 06:17:35,131 [main:302] - generating value of type = ArrayDeque<Collection<Kla3<ULong>>> false depth = 0
2021-03-12 06:17:35,259 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Collection<Kla3<ULong>>> = TODO()
2021-03-12 06:17:35,262 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Collection<Kla3<ULong>>> = TODO()
2021-03-12 06:17:35,390 [main:95] - GENERATED = ArrayDeque<Collection<Kla3<ULong>>>()
2021-03-12 06:17:35,643 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@f114c2f]
2021-03-12 06:17:35,643 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentHashCode(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8511e04]
2021-03-12 06:17:35,643 [main:78] - Generated call from random type = (ArrayDeque<Collection<Kla3<ULong>>>()).toArray().contentHashCode()
2021-03-12 06:17:35,644 [main:114] - replacement of it of type Int is (ArrayDeque<Collection<Kla3<ULong>>>()).toArray().contentHashCode()
2021-03-12 06:17:35,764 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:35,765 [main:66] - Compilation checking started
2021-03-12 06:17:36,369 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($(ArrayDeque<Collection<Kla3<ULong>>>()).toArray().contentHashCode());"
    })
    return prope4.prope2
}

fun box606(): String {
    val prope5 = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(25131.toUShort())?.toLong().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:36,373 [main:107] - replacing (prope4, Kla0)
2021-03-12 06:17:36,373 [main:50] - replacing prope4 Kla0
2021-03-12 06:17:36,373 [main:54] - Getting value of type Kla0
2021-03-12 06:17:36,547 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:17:36,550 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}
2021-03-12 06:17:36,551 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:17:36,551 [main:61] - GENERATED IS CALL =true
2021-03-12 06:17:36,714 [main:67] - randomType = Kla6
2021-03-12 06:17:36,843 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:17:36,846 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:17:36,867 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,887 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,887 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,888 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,888 [main:106] - GETTING Kla0 from Tester
2021-03-12 06:17:36,894 [main:106] - GETTING Kla0 from S
2021-03-12 06:17:36,898 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,899 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,899 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,900 [main:106] - GETTING Kla0 from String
2021-03-12 06:17:36,900 [main:114] - replacement of prope4 of type Kla0 is Kla0()
2021-03-12 06:17:37,027 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:17:37,028 [main:66] - Compilation checking started
2021-03-12 06:17:37,643 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($(ArrayDeque<Collection<Kla3<ULong>>>()).toArray().contentHashCode());"
    })
    return Kla0().prope2
}

fun box606(): String {
    val prope5 = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(25131.toUShort())?.toLong().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:37,645 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 06:17:37,645 [main:50] - replacing isSuccess Boolean
2021-03-12 06:17:37,645 [main:54] - Getting value of type Boolean
2021-03-12 06:17:37,778 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:37,781 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:17:37,781 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:38,068 [main:67] - randomType = HashSet<Float>
2021-03-12 06:17:38,198 [main:302] - generating value of type = HashSet<Float> false depth = 0
2021-03-12 06:17:38,333 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Float> = TODO()
2021-03-12 06:17:38,338 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashSet<Float> = TODO()
2021-03-12 06:17:38,765 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:17:38,768 [main:302] - generating value of type = Float true depth = 3
2021-03-12 06:17:38,772 [main:95] - GENERATED = LinkedHashSet<Float>(-756315257, 0.39861345f)
2021-03-12 06:17:38,935 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d97ced2]
2021-03-12 06:17:38,935 [main:78] - Generated call from random type = (LinkedHashSet<Float>(-756315257, 0.39861345f)).isNotEmpty()
2021-03-12 06:17:38,936 [main:106] - GETTING Boolean from Tester
2021-03-12 06:17:38,941 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589]]
2021-03-12 06:17:38,941 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589]
2021-03-12 06:17:39,066 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:39,066 [main:117] - GENERATED CALL = (Tester()).equals("itbye")
2021-03-12 06:17:39,067 [main:113] - Case = [public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@935dfed]]
2021-03-12 06:17:39,067 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029]
2021-03-12 06:17:39,067 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@935dfed]
2021-03-12 06:17:39,067 [main:117] - GENERATED CALL = (Tester()).box().toBoolean()
2021-03-12 06:17:39,067 [main:113] - Case = [public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e817ad6]]
2021-03-12 06:17:39,067 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029]
2021-03-12 06:17:39,067 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e817ad6]
2021-03-12 06:17:39,197 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:39,200 [main:117] - GENERATED CALL = (Tester()).box().matches("gwsdl")
2021-03-12 06:17:39,201 [main:113] - Case = [public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47bb5eaf]]
2021-03-12 06:17:39,201 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029]
2021-03-12 06:17:39,201 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47bb5eaf]
2021-03-12 06:17:39,336 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:39,466 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:39,470 [main:117] - GENERATED CALL = (Tester()).box().endsWith("hswny", true)
2021-03-12 06:17:39,470 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@439342a]]
2021-03-12 06:17:39,471 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589]
2021-03-12 06:17:39,595 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:39,595 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@439342a]
2021-03-12 06:17:39,720 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:39,723 [main:117] - GENERATED CALL = (Tester()).equals("yqiwv").xor(false)
2021-03-12 06:17:39,723 [main:113] - Case = [public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@14ea123e]]
2021-03-12 06:17:39,723 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029]
2021-03-12 06:17:39,723 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@14ea123e]
2021-03-12 06:17:39,850 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:39,850 [main:117] - GENERATED CALL = (Tester()).box().equals("wtevc")
2021-03-12 06:17:39,850 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e3463c1]]
2021-03-12 06:17:39,850 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589]
2021-03-12 06:17:39,986 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:39,987 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1e3463c1]
2021-03-12 06:17:40,114 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:40,117 [main:117] - GENERATED CALL = (Tester()).equals("judij").and(true)
2021-03-12 06:17:40,117 [main:113] - Case = [public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33cccfac]]
2021-03-12 06:17:40,117 [main:149] - GENERATING call of type public final fun box(): kotlin.String defined in Tester[SimpleFunctionDescriptorImpl@608cc029]
2021-03-12 06:17:40,118 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33cccfac]
2021-03-12 06:17:40,246 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:40,249 [main:117] - GENERATED CALL = (Tester()).box().startsWith(S("joxsd", "hvqdh").component1(), false)
2021-03-12 06:17:40,250 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f0f98fc]]
2021-03-12 06:17:40,250 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589]
2021-03-12 06:17:40,411 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:40,412 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6f0f98fc]
2021-03-12 06:17:40,563 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:40,567 [main:117] - GENERATED CALL = (Tester()).equals("hixrp").or(false)
2021-03-12 06:17:40,567 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6b8eec09]]
2021-03-12 06:17:40,567 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Tester[DeserializedSimpleFunctionDescriptor@9ecc589]
2021-03-12 06:17:40,694 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:40,694 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6b8eec09]
2021-03-12 06:17:40,695 [main:117] - GENERATED CALL = (Tester()).equals("rrfli").not()
2021-03-12 06:17:40,695 [main:114] - replacement of isSuccess of type Boolean is (Tester()).equals("rrfli").not()
2021-03-12 06:17:40,828 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:40,829 [main:66] - Compilation checking started
2021-03-12 06:17:41,195 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += "log($value);"
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($(ArrayDeque<Collection<Kla3<ULong>>>()).toArray().contentHashCode());"
    })
    return Kla0().prope2
}

fun box606(): String {
    val prope5 = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.(Tester()).equals("rrfli").not()) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(25131.toUShort())?.toLong().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:41,197 [main:107] - replacing ("log($value);", String)
2021-03-12 06:17:41,197 [main:50] - replacing "log($value);" String
2021-03-12 06:17:41,197 [main:54] - Getting value of type String
2021-03-12 06:17:41,323 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:17:41,326 [main:58] - GENERATED VALUE OF TYPE String = "nwjtu"
2021-03-12 06:17:41,327 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:41,763 [main:67] - randomType = Kla3<Sequence<UInt>>
2021-03-12 06:17:41,928 [main:302] - generating value of type = Kla3<Sequence<UInt>> false depth = 0
2021-03-12 06:17:41,931 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:17:42,356 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 06:17:42,359 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:17:42,380 [main:106] - GETTING String from String
2021-03-12 06:17:42,400 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2e4471]]
2021-03-12 06:17:42,400 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3e2e4471]
2021-03-12 06:17:42,525 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:17:42,531 [main:117] - GENERATED CALL = (o + k).removeSuffix("vxqdf")
2021-03-12 06:17:42,531 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]]
2021-03-12 06:17:42,531 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39e66222]
2021-03-12 06:17:42,658 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:17:42,665 [main:117] - GENERATED CALL = (o + k).removePrefix(StringBuilder())
2021-03-12 06:17:42,665 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]]
2021-03-12 06:17:42,665 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:42,792 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:42,921 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:42,924 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@516f46ba]
2021-03-12 06:17:43,051 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:17:43,182 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:17:43,187 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:17:43,481 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:17:43,485 [main:95] - GENERATED = StringBuilder(-395750157)
2021-03-12 06:17:43,608 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:17:43,611 [main:117] - GENERATED CALL = (o + k).subSequence(-888907331, 1920156585).commonPrefixWith(StringBuilder(-395750157), false)
2021-03-12 06:17:43,611 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb11142]]
2021-03-12 06:17:43,612 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb11142]
2021-03-12 06:17:43,612 [main:117] - GENERATED CALL = (o + k).toUpperCase()
2021-03-12 06:17:43,612 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e9b3068]]
2021-03-12 06:17:43,612 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e9b3068]
2021-03-12 06:17:43,735 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:17:43,739 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:17:43,742 [main:117] - GENERATED CALL = (o + k).takeLastWhile({a: Char -> false})
2021-03-12 06:17:43,742 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]]
2021-03-12 06:17:43,742 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@446d1515]
2021-03-12 06:17:43,742 [main:117] - GENERATED CALL = (o + k).trimIndent()
2021-03-12 06:17:43,742 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]]
2021-03-12 06:17:43,742 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a0a9b7]
2021-03-12 06:17:43,866 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:17:43,869 [main:117] - GENERATED CALL = (o + k).substringAfterLast('爗', S("joxsd", "hvqdh").b)
2021-03-12 06:17:43,869 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]]
2021-03-12 06:17:43,869 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@6387fb09]
2021-03-12 06:17:43,994 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:17:43,995 [main:117] - GENERATED CALL = (o + k).plus("fmnar")
2021-03-12 06:17:43,995 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]]
2021-03-12 06:17:43,995 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:44,119 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,249 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc2d996]
2021-03-12 06:17:44,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,503 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,506 [main:117] - GENERATED CALL = (o + k).subSequence(-476686292, -379409057).substring(-191952681, -354967989)
2021-03-12 06:17:44,507 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]]
2021-03-12 06:17:44,507 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@5ad6e5ac]
2021-03-12 06:17:44,633 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,791 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d72e916]
2021-03-12 06:17:44,917 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:44,921 [main:117] - GENERATED CALL = (o + k).subSequence(1182149926, 44234642).repeat(325521517)
2021-03-12 06:17:44,921 [main:114] - replacement of "log($value);" of type String is (o + k).toUpperCase()
2021-03-12 06:17:45,045 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:17:45,045 [main:66] - Compilation checking started
2021-03-12 06:17:45,431 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class S(val a: String, val b: String) {
  operator fun component1() : String = a
  operator fun component2() : String = b
}

operator fun S.component3() = ((a + b) as String).substring(2)

class Tester() {
  fun box() : String {
    val (o,k,ok,ok2) = S("O","K")
    return o + k + ok + ok2
  }

  operator fun S.component4() = ((a + b) as String).substring(2)
}

fun box() = Tester().box()

class Kla0 {
    var prope2 = ""

    suspend fun <Ty0> fu3(value: Ty0): Ty0 = suspendCoroutineUninterceptedOrReturn { c ->
        prope2 += "suspend($value);"
        c.resume(value)
        COROUTINE_SUSPENDED
    }

    var prope3 = 0
    fun fu4(i: Int) {
        if (++prope3 != i) throw Exception("EXPECTED $i")
    }

    fun <Ty0> fu5(value: Ty0) {
        prope2 += (o + k).toUpperCase()
    }
}

fun fu0(c: suspend Kla0.() -> Int): String {
    val prope4 = Kla0()
    c.startCoroutine(prope4, fu1 {
        prope4.prope2 += "return($(ArrayDeque<Collection<Kla3<ULong>>>()).toArray().contentHashCode());"
    })
    return Kla0().prope2
}

fun box606(): String {
    val prope5 = (S("joxsd", "hvqdh").component1()).substringBefore('咒', "jqdky")

    if (prope5 != "log(1);suspend(2);log(3);return(4);") return "FAIL: $prope5"
    return "OK"
}

fun <Ty0> fu1(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu2(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        runCatching<Any?>({ "vjema"}).exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu6(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope6 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope6.clear()
        var prope10: CoroutineStackFrame? = c
        while (prope10 != null) {
            prope6.add(prope10.getStackTraceElement())
            prope10 = prope10.callerFrame
        }
    }

    fun fu9(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope6.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope6.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope6.joinToString(separator = (linkedMapOf<Boolean, Short>()).size.toString(-1631012370)))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope7 = 0
    var prope8 = false

    var prope9: () -> Unit = {}

    fun fu11() {
        prope7 = 0
        prope8 = false
        prope9 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope7++
        prope9 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(25131.toUShort())?.toLong().countTrailingZeroBits()) {
            if (prope7 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope7)
            prope9()
        }
        if (prope7 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope7)
        if (prope8) error("Wrong state-machine generated: it is finished early")
        prope9()
        if (checkFinished && !prope8) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla5().prope9 = {
            prope1.prope8 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:17:45,433 [main:107] - replacing (prope7, Int)
2021-03-12 06:17:45,433 [main:50] - replacing prope7 Int
2021-03-12 06:17:45,433 [main:54] - Getting value of type Int
2021-03-12 06:17:45,561 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:45,565 [main:58] - GENERATED VALUE OF TYPE Int = 1070034566
2021-03-12 06:17:45,565 [main:61] - GENERATED IS CALL =false
2021-03-12 06:17:45,873 [main:67] - randomType = Triple<Char, Int, UInt>
2021-03-12 06:17:46,001 [main:302] - generating value of type = Triple<Char, Int, UInt> false depth = 0
2021-03-12 06:17:46,134 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Char, second: Int, third: UInt): Triple<Char, Int, UInt> = TODO()
2021-03-12 06:17:46,138 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Char, second: Int, third: UInt): Triple<Char, Int, UInt> = TODO()
2021-03-12 06:17:46,268 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:17:46,271 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:17:46,274 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 06:17:46,278 [main:95] - GENERATED = Triple<Char, Int, UInt>('泷', -1882088557, 1465096444.toUInt())
2021-03-12 06:17:46,298 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6dbed05]
2021-03-12 06:17:46,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:17:46,430 [main:78] - Generated call from random type = (Triple<Char, Int, UInt>('泷', -1882088557, 1465096444.toUInt())).second.shr(-1234660579)
2021-03-12 06:17:46,431 [main:106] - GETTING Int from S
2021-03-12 06:17:46,438 [main:113] - Case = [public final operator fun component1(): kotlin.String defined in S[SimpleFunctionDescriptorImpl@6f133ece], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82c7859]]
2021-03-12 06:17:46,438 [main:149] - GENERATING call of type public final operator fun component1(): kotlin.String defined in S[SimpleFunctionDescriptorImpl@6f133ece]
2021-03-12 06:17:46,438 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@82c7859]
2021-03-12 06:17:46,584 [main:302] - generating value of type = Boolean true depth = 0
