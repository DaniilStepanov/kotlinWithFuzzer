2021-03-12 08:34:27,114 [main:66] - Compilation checking started
2021-03-12 08:34:28,510 [main:50] - replacing p: String String
2021-03-12 08:34:28,511 [main:54] - Getting value of type String
2021-03-12 08:34:28,656 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:28,659 [main:58] - GENERATED VALUE OF TYPE String = "uqvqx"
2021-03-12 08:34:28,660 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:28,662 [main:67] - randomType = Boolean
2021-03-12 08:34:28,776 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:29,243 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:34:29,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:29,414 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:34:29,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:29,538 [main:78] - Generated call from random type = (true).compareTo(true).toString(-104481227)
2021-03-12 08:34:29,539 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 08:34:29,550 [main:66] - Compilation checking started
2021-03-12 08:34:30,105 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String = "uqvqx") {

    }
}

fun box() : String {
    A().next()
    return "OK"
}
2021-03-12 08:34:30,377 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:34:30,379 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:34:30,646 [main:45] - Trying to change 12 nodes
2021-03-12 08:34:30,651 [main:53] - replacing (delayedQueue.poll() ?: break, String)
2021-03-12 08:34:30,652 [main:50] - replacing delayedQueue.poll() ?: break String
2021-03-12 08:34:30,652 [main:54] - Getting value of type String
2021-03-12 08:34:30,762 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:30,763 [main:58] - GENERATED VALUE OF TYPE String = "ctmez"
2021-03-12 08:34:30,763 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:30,764 [main:67] - randomType = Boolean
2021-03-12 08:34:30,870 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:30,902 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:34:30,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:30,997 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:34:31,104 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:31,106 [main:78] - Generated call from random type = (false).compareTo(false).toString(-864408742)
2021-03-12 08:34:31,122 [main:106] - GETTING String from MyQueue
2021-03-12 08:34:31,143 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645]]
2021-03-12 08:34:31,143 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645]
2021-03-12 08:34:31,144 [main:117] - GENERATED CALL = (delayedQueue).poll()
2021-03-12 08:34:31,145 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]]
2021-03-12 08:34:31,145 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645]
2021-03-12 08:34:31,145 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]
2021-03-12 08:34:31,146 [main:117] - GENERATED CALL = (delayedQueue).poll()?.orEmpty()
2021-03-12 08:34:31,147 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]]
2021-03-12 08:34:31,147 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645]
2021-03-12 08:34:31,147 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]
2021-03-12 08:34:31,234 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:31,236 [main:117] - GENERATED CALL = (delayedQueue).poll()?.plus("rnpnk")
2021-03-12 08:34:31,237 [main:61] - replacement of delayedQueue.poll() ?: break of type String is (delayedQueue).poll()
2021-03-12 08:34:31,339 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:31,339 [main:66] - Compilation checking started
2021-03-12 08:34:31,624 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock((delayedQueue).poll())
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}
2021-03-12 08:34:31,627 [main:53] - replacing (delayedQueue.poll(), String?)
2021-03-12 08:34:31,627 [main:50] - replacing delayedQueue.poll() String?
2021-03-12 08:34:31,627 [main:54] - Getting value of type String?
2021-03-12 08:34:31,747 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:31,747 [main:58] - GENERATED VALUE OF TYPE String? = "eebmp"
2021-03-12 08:34:31,748 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:31,973 [main:67] - randomType = ULong?
2021-03-12 08:34:32,097 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 08:34:32,206 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7e7c0a80]
2021-03-12 08:34:32,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@272269b3]
2021-03-12 08:34:32,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:32,306 [main:78] - Generated call from random type = (4896943996087566185.toULong())?.toUInt().toString(-372171714)
2021-03-12 08:34:32,306 [main:61] - replacement of delayedQueue.poll() of type String? is (4896943996087566185.toULong())?.toUInt().toString(-372171714)
2021-03-12 08:34:32,392 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:32,393 [main:66] - Compilation checking started
2021-03-12 08:34:32,854 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}
2021-03-12 08:34:32,856 [main:53] - replacing (true, Boolean)
2021-03-12 08:34:32,856 [main:50] - replacing true Boolean
2021-03-12 08:34:32,856 [main:54] - Getting value of type Boolean
2021-03-12 08:34:32,972 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:32,973 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:34:32,973 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:33,107 [main:67] - randomType = UShort
2021-03-12 08:34:33,210 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:34:33,267 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1f0f5174]
2021-03-12 08:34:33,363 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:33,364 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]
2021-03-12 08:34:33,459 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:33,460 [main:78] - Generated call from random type = (10266.toUShort()).equals("xrfpt").xor(false)
2021-03-12 08:34:33,463 [main:106] - GETTING Boolean from String?
2021-03-12 08:34:33,509 [main:113] - Case = [public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d935]]
2021-03-12 08:34:33,509 [main:149] - GENERATING call of type public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d935]
2021-03-12 08:34:33,648 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:33,748 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:33,749 [main:117] - GENERATED CALL = (MyQueue().poll()).equals("gnukq", true)
2021-03-12 08:34:33,750 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]]
2021-03-12 08:34:33,750 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:33,865 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:33,866 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:34:33,956 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:33,957 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("wxfqm").equals("bnnke")
2021-03-12 08:34:33,957 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@711394f8]]
2021-03-12 08:34:33,957 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:34:34,073 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:34,074 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@711394f8]
2021-03-12 08:34:34,076 [main:117] - GENERATED CALL = (MyQueue().poll()).get(1698694389).isUpperCase()
2021-03-12 08:34:34,076 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]]
2021-03-12 08:34:34,076 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:34:34,185 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:34,185 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]
2021-03-12 08:34:34,186 [main:117] - GENERATED CALL = (MyQueue().poll()).equals("adymh").not()
2021-03-12 08:34:34,187 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bb0a5]]
2021-03-12 08:34:34,187 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:34,279 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:34,279 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@144bb0a5]
2021-03-12 08:34:34,371 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:34,531 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:34,533 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("cpnaf").startsWith("gaqrm", true)
2021-03-12 08:34:34,533 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]]
2021-03-12 08:34:34,533 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:34:34,628 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:34,629 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]
2021-03-12 08:34:34,717 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:34,718 [main:117] - GENERATED CALL = (MyQueue().poll()).equals("jqpwi").xor(true)
2021-03-12 08:34:34,718 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b8d06e5]]
2021-03-12 08:34:34,718 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:34:34,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:34,898 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:34,899 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b8d06e5]
2021-03-12 08:34:34,900 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(-1966740201, 1600689751).isBlank()
2021-03-12 08:34:34,900 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence?.isNullOrBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5489046e]]
2021-03-12 08:34:34,900 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence?.isNullOrBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5489046e]
2021-03-12 08:34:34,901 [main:117] - GENERATED CALL = (MyQueue().poll()).isNullOrBlank()
2021-03-12 08:34:34,901 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77cb8984]]
2021-03-12 08:34:34,901 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:34:35,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:35,016 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77cb8984]
2021-03-12 08:34:35,017 [main:117] - GENERATED CALL = (MyQueue().poll()).get(151591875).isDefined()
2021-03-12 08:34:35,017 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7101c520]]
2021-03-12 08:34:35,017 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:34:35,111 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:35,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:35,205 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7101c520]
2021-03-12 08:34:35,294 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 08:34:35,426 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 08:34:35,429 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 08:34:35,612 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:34:35,612 [main:95] - GENERATED = Regex("vhrng")
2021-03-12 08:34:35,613 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(1885435951, 1861023744).matches(Regex("vhrng"))
2021-03-12 08:34:35,613 [main:61] - replacement of true of type Boolean is false
2021-03-12 08:34:35,700 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:34:35,701 [main:66] - Compilation checking started
2021-03-12 08:34:36,054 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:36,055 [main:53] - replacing (MyQueue(), MyQueue)
2021-03-12 08:34:36,056 [main:50] - replacing MyQueue() MyQueue
2021-03-12 08:34:36,056 [main:54] - Getting value of type MyQueue
2021-03-12 08:34:36,175 [main:302] - generating value of type = MyQueue false depth = 0
2021-03-12 08:34:36,176 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:34:36,176 [main:58] - GENERATED VALUE OF TYPE MyQueue = MyQueue()
2021-03-12 08:34:36,177 [main:61] - GENERATED IS CALL =true
2021-03-12 08:34:36,391 [main:67] - randomType = Set<ArrayDeque<MyQueue>>
2021-03-12 08:34:36,391 [main:106] - GETTING MyQueue from MyQueue
2021-03-12 08:34:36,399 [main:61] - replacement of MyQueue() of type MyQueue is A().delayedQueue
2021-03-12 08:34:36,483 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:36,483 [main:66] - Compilation checking started
2021-03-12 08:34:36,718 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = A().delayedQueue

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:36,720 [main:53] - replacing (delayedQueue.poll() ?: break, String)
2021-03-12 08:34:36,720 [main:50] - replacing delayedQueue.poll() ?: break String
2021-03-12 08:34:36,720 [main:54] - Getting value of type String
2021-03-12 08:34:36,824 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:36,824 [main:58] - GENERATED VALUE OF TYPE String = "ankvj"
2021-03-12 08:34:36,825 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:37,406 [main:67] - randomType = Triple<Map<A?, Float>, ArrayDeque<UInt>, Int>
2021-03-12 08:34:37,500 [main:302] - generating value of type = Triple<Map<A?, Float>, ArrayDeque<UInt>, Int> false depth = 0
2021-03-12 08:34:37,602 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Map<A?, Float>, second: ArrayDeque<UInt>, third: Int): Triple<Map<A?, Float>, ArrayDeque<UInt>, Int> = TODO()
2021-03-12 08:34:37,605 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Map<A?, Float>, second: ArrayDeque<UInt>, third: Int): Triple<Map<A?, Float>, ArrayDeque<UInt>, Int> = TODO()
2021-03-12 08:34:37,700 [main:302] - generating value of type = Map<A?, Float> false depth = 3
2021-03-12 08:34:37,825 [main:43] - GENERATING CALL OF fun <K, V> mapOf(pairs: Pair<A?, Float>): Map<A?, Float> = TODO()
2021-03-12 08:34:37,840 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(pairs: Pair<A?, Float>): Map<A?, Float> = TODO()
2021-03-12 08:34:37,932 [main:302] - generating value of type = Pair<A?, Float> false depth = 6
2021-03-12 08:34:38,021 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: A?, second: Float): Pair<A?, Float> = TODO()
2021-03-12 08:34:38,023 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: A?, second: Float): Pair<A?, Float> = TODO()
2021-03-12 08:34:38,113 [main:302] - generating value of type = A false depth = 9
2021-03-12 08:34:38,113 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:34:38,114 [main:302] - generating value of type = Float true depth = 9
2021-03-12 08:34:38,115 [main:95] - GENERATED = Pair<A?, Float>(A(), 0.79323363f)
2021-03-12 08:34:38,116 [main:95] - GENERATED = mapOf<A?, Float>(Pair<A?, Float>(A(), 0.79323363f))
2021-03-12 08:34:38,116 [main:302] - generating value of type = ArrayDeque<UInt> false depth = 3
2021-03-12 08:34:38,212 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 08:34:38,214 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt>): ArrayDeque<UInt> = TODO()
2021-03-12 08:34:38,445 [main:302] - generating value of type = Collection<UInt> false depth = 6
2021-03-12 08:34:38,546 [main:43] - GENERATING CALL OF fun UByteArray(size: kotlin.Int): Collection<UInt> = TODO()
2021-03-12 08:34:38,548 [main:61] - WITHOUT TYPE PARAMS = fun UByteArray(size: kotlin.Int): Collection<UInt> = TODO()
2021-03-12 08:34:38,719 [main:302] - generating value of type = Int true depth = 9
2021-03-12 08:34:38,720 [main:95] - GENERATED = UByteArray(-1625240065)
2021-03-12 08:34:38,720 [main:95] - GENERATED = ArrayDeque<UInt>(UByteArray(-1625240065))
2021-03-12 08:34:38,720 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:34:38,721 [main:95] - GENERATED = Triple<Map<A?, Float>, ArrayDeque<UInt>, Int>(mapOf<A?, Float>(Pair<A?, Float>(A(), 0.79323363f)), ArrayDeque<UInt>(UByteArray(-1625240065)), -1832148742)
2021-03-12 08:34:38,764 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:34:38,850 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:38,851 [main:78] - Generated call from random type = (Triple<Map<A?, Float>, ArrayDeque<UInt>, Int>(mapOf<A?, Float>(Pair<A?, Float>(A(), 0.79323363f)), ArrayDeque<UInt>(UByteArray(-1625240065)), -1832148742)).third.toString(-609076747)
2021-03-12 08:34:38,854 [main:106] - GETTING String from MyQueue
2021-03-12 08:34:38,862 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@29cb45df], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]]
2021-03-12 08:34:38,862 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@29cb45df]
2021-03-12 08:34:38,862 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]
2021-03-12 08:34:38,974 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:38,975 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.plus("amcga")
2021-03-12 08:34:38,976 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@29cb45df], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]]
2021-03-12 08:34:38,976 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@29cb45df]
2021-03-12 08:34:38,976 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]
2021-03-12 08:34:38,976 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.orEmpty()
2021-03-12 08:34:38,977 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@29cb45df]]
2021-03-12 08:34:38,977 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@29cb45df]
2021-03-12 08:34:38,977 [main:117] - GENERATED CALL = (A().delayedQueue).poll()
2021-03-12 08:34:38,977 [main:61] - replacement of delayedQueue.poll() ?: break of type String is (A().delayedQueue).poll()?.plus("amcga")
2021-03-12 08:34:39,069 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:34:39,069 [main:66] - Compilation checking started
2021-03-12 08:34:39,281 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock((A().delayedQueue).poll()?.plus("amcga"))
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:39,282 [main:53] - replacing (MyQueue(), MyQueue)
2021-03-12 08:34:39,282 [main:50] - replacing MyQueue() MyQueue
2021-03-12 08:34:39,283 [main:54] - Getting value of type MyQueue
2021-03-12 08:34:39,364 [main:302] - generating value of type = MyQueue false depth = 0
2021-03-12 08:34:39,364 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:34:39,365 [main:58] - GENERATED VALUE OF TYPE MyQueue = MyQueue()
2021-03-12 08:34:39,365 [main:61] - GENERATED IS CALL =true
2021-03-12 08:34:39,366 [main:67] - randomType = MyQueue
2021-03-12 08:34:39,461 [main:302] - generating value of type = MyQueue false depth = 0
2021-03-12 08:34:39,461 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:34:39,470 [main:106] - GETTING MyQueue from String?
2021-03-12 08:34:39,507 [main:106] - GETTING MyQueue from MyQueue
2021-03-12 08:34:39,514 [main:61] - replacement of MyQueue() of type MyQueue is A().delayedQueue
2021-03-12 08:34:39,594 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:39,595 [main:66] - Compilation checking started
2021-03-12 08:34:39,817 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = A().delayedQueue

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:39,818 [main:53] - replacing ({
            delayedQueue.poll() ?: break
        }, String)
2021-03-12 08:34:39,819 [main:50] - replacing {
            delayedQueue.poll() ?: break
        } String
2021-03-12 08:34:39,819 [main:54] - Getting value of type String
2021-03-12 08:34:39,900 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:39,901 [main:58] - GENERATED VALUE OF TYPE String = "dkuyu"
2021-03-12 08:34:39,901 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:39,994 [main:67] - randomType = ArrayDeque<MyQueue>
2021-03-12 08:34:40,078 [main:302] - generating value of type = ArrayDeque<MyQueue> false depth = 0
2021-03-12 08:34:40,166 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MyQueue> = TODO()
2021-03-12 08:34:40,167 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<MyQueue> = TODO()
2021-03-12 08:34:40,385 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:34:40,386 [main:95] - GENERATED = ArrayDeque<MyQueue>(708399122)
2021-03-12 08:34:40,638 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): MyQueue defined in kotlin.collections.AbstractMutableList[DeserializedSimpleFunctionDescriptor@5f4750bd]
2021-03-12 08:34:40,723 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:40,724 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@7878adb3]
2021-03-12 08:34:40,725 [main:78] - Generated call from random type = (ArrayDeque<MyQueue>(708399122)).get(2078302254).poll()!!
2021-03-12 08:34:40,725 [main:106] - GETTING String from String?
2021-03-12 08:34:40,759 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bbbf090]]
2021-03-12 08:34:40,759 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:40,843 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:40,844 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3bbbf090]
2021-03-12 08:34:40,845 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("aypis").toUpperCase()
2021-03-12 08:34:40,845 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8742566], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]]
2021-03-12 08:34:40,845 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:34:40,928 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:40,929 [main:117] - GENERATED CALL = (MyQueue().poll()).length.toString(1761301559)
2021-03-12 08:34:40,929 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef008e4]]
2021-03-12 08:34:40,929 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:41,010 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:41,010 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ef008e4]
2021-03-12 08:34:41,102 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:34:41,102 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:34:41,104 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})
2021-03-12 08:34:41,104 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e649aa1]]
2021-03-12 08:34:41,104 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:41,191 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:41,191 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e649aa1]
2021-03-12 08:34:41,278 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:41,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:41,363 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("kcojv").removeRange(-232561596, 324908697)
2021-03-12 08:34:41,363 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]]
2021-03-12 08:34:41,363 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:41,444 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:41,445 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:41,548 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:41,549 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("qezbc").plus("jrhwm")
2021-03-12 08:34:41,549 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f97d692]]
2021-03-12 08:34:41,549 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:41,641 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:41,642 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f97d692]
2021-03-12 08:34:41,725 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:41,727 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("iipjk").concat("xjatv")
2021-03-12 08:34:41,727 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7217a9d5]]
2021-03-12 08:34:41,727 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:41,810 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:41,811 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7217a9d5]
2021-03-12 08:34:41,895 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:41,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:42,074 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 08:34:42,078 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("dwjyr").replaceRange(-533923337, 48304642, "fqqoq")
2021-03-12 08:34:42,079 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b4d2ee]]
2021-03-12 08:34:42,079 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:42,157 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:42,158 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b4d2ee]
2021-03-12 08:34:42,236 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:34:42,236 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:34:42,237 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("qsigj").takeLastWhile({a: Char -> true})
2021-03-12 08:34:42,237 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b5a8119]]
2021-03-12 08:34:42,237 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:42,322 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:42,322 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b5a8119]
2021-03-12 08:34:42,323 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("jwalp").capitalize()
2021-03-12 08:34:42,323 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5345911c]]
2021-03-12 08:34:42,323 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:34:42,404 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:42,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5345911c]
2021-03-12 08:34:42,405 [main:117] - GENERATED CALL = (MyQueue().poll()).get(1897495472).titlecase()
2021-03-12 08:34:42,406 [main:61] - replacement of {
            delayedQueue.poll() ?: break
        } of type String is (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})
2021-03-12 08:34:42,499 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:42,499 [main:66] - Compilation checking started
2021-03-12 08:34:42,897 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:42,899 [main:53] - replacing (true, Boolean)
2021-03-12 08:34:42,899 [main:50] - replacing true Boolean
2021-03-12 08:34:42,899 [main:54] - Getting value of type Boolean
2021-03-12 08:34:42,990 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:42,991 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:34:42,991 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:43,105 [main:67] - randomType = MutableMap<MyQueue, String>
2021-03-12 08:34:43,106 [main:106] - GETTING Boolean from MyQueue
2021-03-12 08:34:43,113 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]]
2021-03-12 08:34:43,113 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]
2021-03-12 08:34:43,205 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:43,206 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]
2021-03-12 08:34:43,206 [main:117] - GENERATED CALL = (delayedQueue).equals("mhcym").not()
2021-03-12 08:34:43,206 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@42ee2c95]]
2021-03-12 08:34:43,206 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]
2021-03-12 08:34:43,301 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:43,302 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@42ee2c95]
2021-03-12 08:34:43,403 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:43,404 [main:117] - GENERATED CALL = (delayedQueue).equals("cfotc").equals("yggdb")
2021-03-12 08:34:43,404 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71322f51]]
2021-03-12 08:34:43,405 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]
2021-03-12 08:34:43,496 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:43,497 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71322f51]
2021-03-12 08:34:43,586 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:43,587 [main:117] - GENERATED CALL = (delayedQueue).equals("lecis").and(true)
2021-03-12 08:34:43,588 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4febd275]]
2021-03-12 08:34:43,588 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]
2021-03-12 08:34:43,680 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:43,681 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4febd275]
2021-03-12 08:34:43,774 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:43,775 [main:117] - GENERATED CALL = (delayedQueue).equals("yvmar").or(false)
2021-03-12 08:34:43,776 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645], public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d935]]
2021-03-12 08:34:43,776 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645]
2021-03-12 08:34:43,776 [main:149] - GENERATING call of type public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d935]
2021-03-12 08:34:43,886 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:43,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:43,983 [main:117] - GENERATED CALL = (delayedQueue).poll()?.equals("haecm", true)
2021-03-12 08:34:43,984 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]]
2021-03-12 08:34:43,984 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]
2021-03-12 08:34:44,070 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:44,070 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]
2021-03-12 08:34:44,156 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:44,157 [main:117] - GENERATED CALL = (delayedQueue).equals("qvdny").xor(false)
2021-03-12 08:34:44,157 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]]
2021-03-12 08:34:44,157 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@281ec213]
2021-03-12 08:34:44,246 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:44,246 [main:117] - GENERATED CALL = (delayedQueue).equals("eawov")
2021-03-12 08:34:44,247 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645], @kotlin.SinceKotlin public fun kotlin.String?.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]]
2021-03-12 08:34:44,247 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@5c5bc645]
2021-03-12 08:34:44,247 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String?.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@10892581]
2021-03-12 08:34:44,247 [main:117] - GENERATED CALL = (delayedQueue).poll()?.toBoolean()
2021-03-12 08:34:44,247 [main:61] - replacement of true of type Boolean is (delayedQueue).equals("lecis").and(true)
2021-03-12 08:34:44,332 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:44,333 [main:66] - Compilation checking started
2021-03-12 08:34:44,673 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while ((delayedQueue).equals("lecis").and(true)) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:44,675 [main:53] - replacing (delayedQueue.poll(), String?)
2021-03-12 08:34:44,675 [main:50] - replacing delayedQueue.poll() String?
2021-03-12 08:34:44,675 [main:54] - Getting value of type String?
2021-03-12 08:34:44,767 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:44,767 [main:58] - GENERATED VALUE OF TYPE String? = "mgdpd"
2021-03-12 08:34:44,767 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:44,853 [main:67] - randomType = Byte
2021-03-12 08:34:44,944 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:34:44,999 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@418083eb]
2021-03-12 08:34:45,000 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f42b350]
2021-03-12 08:34:45,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:45,091 [main:78] - Generated call from random type = (-112).toShort().toString(-1735303454)
2021-03-12 08:34:45,092 [main:61] - replacement of delayedQueue.poll() of type String? is (-112).toShort().toString(-1735303454)
2021-03-12 08:34:45,183 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:45,183 [main:66] - Compilation checking started
2021-03-12 08:34:45,543 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while ((delayedQueue).equals("lecis").and(true)) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString(-372171714) ?: break)
        }

        while (false) {
            unblock((-112).toShort().toString(-1735303454) ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:45,632 [main:119] - TRYING TO REPLACE CONSTANT 4896943996087566185
2021-03-12 08:34:45,718 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:34:45,719 [main:66] - Compilation checking started
2021-03-12 08:34:46,071 [main:119] - TRYING TO REPLACE CONSTANT 372171714
2021-03-12 08:34:46,170 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 08:34:46,170 [main:66] - Compilation checking started
2021-03-12 08:34:46,534 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while ((delayedQueue).equals("lecis").and(true)) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString((-112)) ?: break)
        }

        while (false) {
            unblock((-112).toShort().toString(-1735303454) ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:46,535 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:34:46,628 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:34:46,629 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 08:34:46,712 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:46,713 [main:66] - Compilation checking started
2021-03-12 08:34:47,082 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while ((delayedQueue).equals("lecis").and((delayedQueue).equals("lecis").and(true))) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString((-112)) ?: break)
        }

        while (false) {
            unblock((-112).toShort().toString(-1735303454) ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:47,082 [main:119] - TRYING TO REPLACE CONSTANT 112
2021-03-12 08:34:47,171 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 08:34:47,172 [main:66] - Compilation checking started
2021-03-12 08:34:47,512 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while ((delayedQueue).equals("lecis").and((delayedQueue).equals("lecis").and(true))) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString((-112)) ?: break)
        }

        while (false) {
            unblock(((-112)).toShort().toString(-1735303454) ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:47,512 [main:119] - TRYING TO REPLACE CONSTANT 1735303454
2021-03-12 08:34:47,603 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:34:47,604 [main:66] - Compilation checking started
2021-03-12 08:34:47,923 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while ((delayedQueue).equals("lecis").and((delayedQueue).equals("lecis").and(true))) (MyQueue().poll()).plus("xiojd").filter({a: Char -> true})

        while (true) {
            unblock((4896943996087566185.toULong())?.toUInt().toString((-112)) ?: break)
        }

        while (false) {
            unblock(((-112)).toShort().toString(372171714) ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}


2021-03-12 08:34:47,949 [main:41] - AFTER TRY 0 res = class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}
2021-03-12 08:34:48,104 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:34:48,104 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:34:48,272 [main:43] - Try №0
2021-03-12 08:34:49,434 [main:69] - Trying to insert fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 f@{
        if (prope0 > 0)
          return@f "OK"
        else "Fail 1"
    }
    if (prope1 != "OK") return prope1

    val prope2 = fu0 f@{
        if (prope0 < 0)
          return@f "Fail 2"
        else "OK"
    }
    if (prope2 != "OK") return prope2
    return "OK"
}
2021-03-12 08:34:49,537 [main:66] - Compilation checking started
2021-03-12 08:34:50,023 [main:103] - Trying to change 30 nodes
2021-03-12 08:34:50,024 [main:107] - replacing (prope1 != "OK", Boolean)
2021-03-12 08:34:50,024 [main:50] - replacing prope1 != "OK" Boolean
2021-03-12 08:34:50,024 [main:54] - Getting value of type Boolean
2021-03-12 08:34:50,116 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:50,116 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:34:50,117 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:50,208 [main:67] - randomType = ArrayList<Boolean>
2021-03-12 08:34:50,290 [main:302] - generating value of type = ArrayList<Boolean> false depth = 0
2021-03-12 08:34:50,410 [main:43] - GENERATING CALL OF fun <E> ArrayList(): ArrayList<Boolean> = TODO()
2021-03-12 08:34:50,411 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(): ArrayList<Boolean> = TODO()
2021-03-12 08:34:50,506 [main:95] - GENERATED = ArrayList<Boolean>()
2021-03-12 08:34:50,681 [main:149] - GENERATING call of type public open fun listIterator(): kotlin.collections.MutableListIterator<kotlin.Boolean> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@57f6a697]
2021-03-12 08:34:50,682 [main:149] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.MutableListIterator[DeserializedSimpleFunctionDescriptor@43970ca8]
2021-03-12 08:34:50,682 [main:78] - Generated call from random type = (ArrayList<Boolean>()).listIterator().hasPrevious()
2021-03-12 08:34:50,683 [main:106] - GETTING Boolean from A
2021-03-12 08:34:50,694 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]]
2021-03-12 08:34:50,694 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:34:50,790 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:50,790 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]
2021-03-12 08:34:50,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:50,886 [main:117] - GENERATED CALL = (A()).equals("bmlvx").xor(false)
2021-03-12 08:34:50,886 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@42ee2c95]]
2021-03-12 08:34:50,886 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:34:50,979 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:50,981 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@42ee2c95]
2021-03-12 08:34:51,069 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,070 [main:117] - GENERATED CALL = (A()).equals("lkrpw").equals("cynel")
2021-03-12 08:34:51,070 [main:113] - Case = [public final fun next(): kotlin.Unit defined in A[SimpleFunctionDescriptorImpl@5d17fbde], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@1263b7c5]]
2021-03-12 08:34:51,070 [main:149] - GENERATING call of type public final fun next(): kotlin.Unit defined in A[SimpleFunctionDescriptorImpl@5d17fbde]
2021-03-12 08:34:51,070 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@1263b7c5]
2021-03-12 08:34:51,163 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,163 [main:117] - GENERATED CALL = (A()).next().equals("gwdfm")
2021-03-12 08:34:51,164 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]]
2021-03-12 08:34:51,164 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:34:51,294 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,295 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]
2021-03-12 08:34:51,295 [main:117] - GENERATED CALL = (A()).equals("cqowx").not()
2021-03-12 08:34:51,296 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71322f51]]
2021-03-12 08:34:51,296 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:34:51,401 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,402 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@71322f51]
2021-03-12 08:34:51,491 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:51,492 [main:117] - GENERATED CALL = (A()).equals("djivr").and(false)
2021-03-12 08:34:51,492 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4febd275]]
2021-03-12 08:34:51,492 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:34:51,580 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,581 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4febd275]
2021-03-12 08:34:51,682 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:51,683 [main:117] - GENERATED CALL = (A()).equals("pgmqk").or(false)
2021-03-12 08:34:51,683 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]]
2021-03-12 08:34:51,684 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:34:51,777 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,778 [main:117] - GENERATED CALL = (A()).equals("zsuni")
2021-03-12 08:34:51,778 [main:113] - Case = [public final val delayedQueue: MyQueue defined in A[PropertyDescriptorImpl@5594db02], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@4c39e0e1]]
2021-03-12 08:34:51,778 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@4c39e0e1]
2021-03-12 08:34:51,875 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:51,876 [main:117] - GENERATED CALL = (A()).delayedQueue.equals("swxnh")
2021-03-12 08:34:51,876 [main:114] - replacement of prope1 != "OK" of type Boolean is (A()).equals("djivr").and(false)
2021-03-12 08:34:51,988 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:51,989 [main:66] - Compilation checking started
2021-03-12 08:34:52,309 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 f@{
        if (prope0 > 0)
          return@f "OK"
        else "Fail 1"
    }
    if ((A()).equals("djivr").and(false)) return prope1

    val prope2 = fu0 f@{
        if (prope0 < 0)
          return@f "Fail 2"
        else "OK"
    }
    if (prope2 != "OK") return prope2
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:34:52,310 [main:107] - replacing (0, Int)
2021-03-12 08:34:52,310 [main:50] - replacing 0 Int
2021-03-12 08:34:52,310 [main:54] - Getting value of type Int
2021-03-12 08:34:52,399 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:52,400 [main:58] - GENERATED VALUE OF TYPE Int = 2108038187
2021-03-12 08:34:52,400 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:52,490 [main:67] - randomType = A?
2021-03-12 08:34:52,572 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:34:52,572 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:34:52,583 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@31f71c29]
2021-03-12 08:34:52,670 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:52,671 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:34:52,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:52,758 [main:78] - Generated call from random type = (A())?.equals("tydny").compareTo(false)
2021-03-12 08:34:52,759 [main:106] - GETTING Int from MyQueue
2021-03-12 08:34:52,766 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8742566]]
2021-03-12 08:34:52,766 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:34:52,767 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.length
2021-03-12 08:34:52,767 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@3a1aa935], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]]
2021-03-12 08:34:52,767 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@3a1aa935]
2021-03-12 08:34:52,853 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:52,853 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:34:52,979 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:52,980 [main:117] - GENERATED CALL = (A().delayedQueue).equals("xbjwv").compareTo(true)
2021-03-12 08:34:52,980 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@103a0cf8]]
2021-03-12 08:34:52,980 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:34:52,980 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-12 08:34:53,081 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:53,083 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.compareTo("pwxyt")
2021-03-12 08:34:53,083 [main:114] - replacement of 0 of type Int is (A())?.equals("tydny").compareTo(false)
2021-03-12 08:34:53,167 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:53,167 [main:66] - Compilation checking started
2021-03-12 08:34:53,468 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 f@{
        if (prope0 > (A())?.equals("tydny").compareTo(false))
          return@f "OK"
        else "Fail 1"
    }
    if ((A()).equals("djivr").and(false)) return prope1

    val prope2 = fu0 f@{
        if (prope0 < 0)
          return@f "Fail 2"
        else "OK"
    }
    if (prope2 != "OK") return prope2
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:34:53,468 [main:107] - replacing ({
        if (prope0 < 0)
          return@f "Fail 2"
        else "OK"
    }, Function0<String>)
2021-03-12 08:34:53,469 [main:50] - replacing {
        if (prope0 < 0)
          return@f "Fail 2"
        else "OK"
    } Function0<String>
2021-03-12 08:34:53,469 [main:54] - Getting value of type Function0<String>
2021-03-12 08:34:53,551 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 08:34:53,552 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:34:53,552 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "oppey"}
2021-03-12 08:34:53,552 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:53,639 [main:67] - randomType = Byte
2021-03-12 08:34:53,723 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:34:53,781 [main:106] - GETTING Function0<String> from A
2021-03-12 08:34:53,792 [main:106] - GETTING Function0<String> from MyQueue
2021-03-12 08:34:53,802 [main:106] - GETTING Function0<String> from String?
2021-03-12 08:34:53,839 [main:114] - replacement of {
        if (prope0 < 0)
          return@f "Fail 2"
        else "OK"
    } of type Function0<String> is { "oppey"}
2021-03-12 08:34:53,925 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 08:34:53,925 [main:66] - Compilation checking started
2021-03-12 08:34:54,254 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 f@{
        if (prope0 > (A())?.equals("tydny").compareTo(false))
          return@f "OK"
        else "Fail 1"
    }
    if ((A()).equals("djivr").and(false)) return prope1

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != "OK") return prope2
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:34:54,254 [main:107] - replacing (f@{
        if (prope0 > (A())?.equals("tydny").compareTo(false))
          return@f "OK"
        else "Fail 1"
    }, Function0<String>)
2021-03-12 08:34:54,255 [main:50] - replacing f@{
        if (prope0 > (A())?.equals("tydny").compareTo(false))
          return@f "OK"
        else "Fail 1"
    } Function0<String>
2021-03-12 08:34:54,255 [main:54] - Getting value of type Function0<String>
2021-03-12 08:34:54,338 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-12 08:34:54,339 [main:302] - generating value of type = String true depth = 1
2021-03-12 08:34:54,339 [main:58] - GENERATED VALUE OF TYPE Function0<String> = { "ymspq"}
2021-03-12 08:34:54,339 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:54,341 [main:67] - randomType = MyQueue
2021-03-12 08:34:54,419 [main:302] - generating value of type = MyQueue false depth = 0
2021-03-12 08:34:54,419 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:34:54,428 [main:106] - GETTING Function0<String> from A
2021-03-12 08:34:54,439 [main:106] - GETTING Function0<String> from MyQueue
2021-03-12 08:34:54,447 [main:106] - GETTING Function0<String> from String?
2021-03-12 08:34:54,477 [main:114] - replacement of f@{
        if (prope0 > (A())?.equals("tydny").compareTo(false))
          return@f "OK"
        else "Fail 1"
    } of type Function0<String> is { "ymspq"}
2021-03-12 08:34:54,558 [main:33] - Trying to replace Element(LABELED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:34:54,558 [main:66] - Compilation checking started
2021-03-12 08:34:54,805 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 { "ymspq"}
    if ((A()).equals("djivr").and(false)) return prope1

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != "OK") return prope2
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:34:54,805 [main:107] - replacing (prope2, String)
2021-03-12 08:34:54,805 [main:50] - replacing prope2 String
2021-03-12 08:34:54,805 [main:54] - Getting value of type String
2021-03-12 08:34:54,885 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:54,886 [main:58] - GENERATED VALUE OF TYPE String = "pquqs"
2021-03-12 08:34:54,886 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:54,972 [main:67] - randomType = Byte
2021-03-12 08:34:55,052 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:34:55,104 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@418083eb]
2021-03-12 08:34:55,104 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f42b350]
2021-03-12 08:34:55,204 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:55,205 [main:78] - Generated call from random type = (75).toShort().toString(-774332044)
2021-03-12 08:34:55,206 [main:106] - GETTING String from MyQueue
2021-03-12 08:34:55,213 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]]
2021-03-12 08:34:55,213 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:34:55,213 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]
2021-03-12 08:34:55,214 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.orEmpty()
2021-03-12 08:34:55,214 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]]
2021-03-12 08:34:55,214 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:34:55,214 [main:117] - GENERATED CALL = (A().delayedQueue).poll()
2021-03-12 08:34:55,214 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]]
2021-03-12 08:34:55,214 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:34:55,214 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]
2021-03-12 08:34:55,290 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:55,291 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.plus("jtpmg")
2021-03-12 08:34:55,291 [main:114] - replacement of prope2 of type String is (75).toShort().toString(-774332044)
2021-03-12 08:34:55,367 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:55,367 [main:66] - Compilation checking started
2021-03-12 08:34:55,637 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 { "ymspq"}
    if ((A()).equals("djivr").and(false)) return prope1

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != "OK") return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:34:55,637 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:34:55,637 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:34:55,637 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:34:55,732 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:34:55,733 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:34:55,739 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:34:55,739 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:55,976 [main:67] - randomType = Sequence<Float>
2021-03-12 08:34:55,977 [main:106] - GETTING Function0<Ty0> from MyQueue
2021-03-12 08:34:55,986 [main:106] - GETTING Function0<Ty0> from A
2021-03-12 08:34:55,997 [main:106] - GETTING Function0<Ty0> from String?
2021-03-12 08:34:56,036 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:34:56,125 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:34:56,125 [main:66] - Compilation checking started
2021-03-12 08:34:56,348 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 { "ymspq"}
    if ((A()).equals("djivr").and(false)) return prope1

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != "OK") return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return { }() }


2021-03-12 08:34:56,348 [main:107] - replacing (prope1, String)
2021-03-12 08:34:56,348 [main:50] - replacing prope1 String
2021-03-12 08:34:56,348 [main:54] - Getting value of type String
2021-03-12 08:34:56,434 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:56,435 [main:58] - GENERATED VALUE OF TYPE String = "ekosz"
2021-03-12 08:34:56,435 [main:61] - GENERATED IS CALL =false
2021-03-12 08:34:56,622 [main:67] - randomType = LinkedHashMap<Int, A>
2021-03-12 08:34:56,700 [main:302] - generating value of type = LinkedHashMap<Int, A> false depth = 0
2021-03-12 08:34:56,786 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Int, A> = TODO()
2021-03-12 08:34:56,787 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Int, A> = TODO()
2021-03-12 08:34:56,871 [main:95] - GENERATED = linkedMapOf<Int, A>()
2021-03-12 08:34:57,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:34:57,127 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:57,128 [main:78] - Generated call from random type = (linkedMapOf<Int, A>()).size.toString(-1090954162)
2021-03-12 08:34:57,128 [main:106] - GETTING String from String?
2021-03-12 08:34:57,155 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8742566], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]]
2021-03-12 08:34:57,155 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:34:57,236 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:57,237 [main:117] - GENERATED CALL = (MyQueue().poll()).length.toString(-922168234)
2021-03-12 08:34:57,237 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ce7772]]
2021-03-12 08:34:57,237 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:57,338 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:57,338 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78ce7772]
2021-03-12 08:34:57,424 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 08:34:57,510 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 08:34:57,512 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 08:34:57,758 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:34:57,758 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:34:57,758 [main:95] - GENERATED = IntRange(-1722322341, -1770958472)
2021-03-12 08:34:57,759 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("rftnn").slice(IntRange(-1722322341, -1770958472))
2021-03-12 08:34:57,759 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efeb7b]]
2021-03-12 08:34:57,759 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:57,836 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:57,836 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1efeb7b]
2021-03-12 08:34:57,915 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:34:57,992 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:58,089 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:58,090 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("diubo").replaceBefore('漘', "eotzt", "edbee")
2021-03-12 08:34:58,091 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4046f6d3]]
2021-03-12 08:34:58,091 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:58,176 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:58,176 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4046f6d3]
2021-03-12 08:34:58,177 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("wnudn").trimStart()
2021-03-12 08:34:58,177 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700cfd52]]
2021-03-12 08:34:58,177 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:58,259 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:58,259 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@700cfd52]
2021-03-12 08:34:58,260 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("vdvnv").reversed()
2021-03-12 08:34:58,260 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ade148]]
2021-03-12 08:34:58,260 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:58,338 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:58,339 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ade148]
2021-03-12 08:34:58,418 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:34:58,496 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:58,497 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("ntnsa").substringBeforeLast('篕', "ltjey")
2021-03-12 08:34:58,497 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79da3879]]
2021-03-12 08:34:58,497 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:58,584 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:58,585 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79da3879]
2021-03-12 08:34:58,671 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:34:58,766 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:34:58,854 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:34:58,855 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("oivch").replace('௬', '', false)
2021-03-12 08:34:58,855 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f07196b]]
2021-03-12 08:34:58,855 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:34:58,937 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:59,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:34:59,015 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f07196b]
2021-03-12 08:34:59,094 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 08:34:59,175 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 08:34:59,177 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 08:34:59,428 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:34:59,429 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 08:34:59,432 [main:95] - GENERATED = Regex("nknxe", kotlin.text.RegexOption.MULTILINE)
2021-03-12 08:34:59,528 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:34:59,529 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(-555296299, 1690724082).replaceFirst(Regex("nknxe", kotlin.text.RegexOption.MULTILINE), "llqkd")
2021-03-12 08:34:59,530 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce1a5be]]
2021-03-12 08:34:59,530 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:59,633 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:59,634 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ce1a5be]
2021-03-12 08:34:59,749 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 08:34:59,750 [main:302] - generating value of type = Char true depth = 1
2021-03-12 08:34:59,751 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("jclrb").replaceFirstChar({a: Char -> ''})
2021-03-12 08:34:59,751 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b5a8119]]
2021-03-12 08:34:59,751 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:34:59,846 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:34:59,846 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b5a8119]
2021-03-12 08:34:59,846 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("gxhuu").capitalize()
2021-03-12 08:34:59,846 [main:114] - replacement of prope1 of type String is (linkedMapOf<Int, A>()).size.toString(-1090954162)
2021-03-12 08:34:59,923 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:34:59,923 [main:66] - Compilation checking started
2021-03-12 08:35:00,289 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 { "ymspq"}
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != "OK") return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:00,289 [main:107] - replacing (1, Int)
2021-03-12 08:35:00,289 [main:50] - replacing 1 Int
2021-03-12 08:35:00,289 [main:54] - Getting value of type Int
2021-03-12 08:35:00,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:00,375 [main:58] - GENERATED VALUE OF TYPE Int = 59633894
2021-03-12 08:35:00,376 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:00,557 [main:67] - randomType = LinkedHashSet<Char>
2021-03-12 08:35:00,665 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 0
2021-03-12 08:35:00,777 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Char): LkedHashSet<Char> = TODO()
2021-03-12 08:35:00,779 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Char): LkedHashSet<Char> = TODO()
2021-03-12 08:35:00,885 [main:302] - generating value of type = Char true depth = 3
2021-03-12 08:35:00,886 [main:95] - GENERATED = linkedSetOf<Char>('龋')
2021-03-12 08:35:01,105 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@226661c3]
2021-03-12 08:35:01,196 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 08:35:01,196 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:35:01,197 [main:78] - Generated call from random type = (linkedSetOf<Char>('龋')).indexOfLast({a: T -> true})
2021-03-12 08:35:01,198 [main:106] - GETTING Int from A
2021-03-12 08:35:01,208 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]]
2021-03-12 08:35:01,208 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@69f3d913]
2021-03-12 08:35:01,303 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:01,304 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:35:01,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:01,400 [main:117] - GENERATED CALL = (A()).equals("zabuv").compareTo(false)
2021-03-12 08:35:01,400 [main:114] - replacement of 1 of type Int is (linkedSetOf<Char>('龋')).indexOfLast({a: T -> true})
2021-03-12 08:35:01,490 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:01,491 [main:66] - Compilation checking started
2021-03-12 08:35:01,764 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (linkedSetOf<Char>('龋')).indexOfLast({a: T -> true})
    val prope1 = fu0 { "ymspq"}
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != "OK") return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:01,765 [main:107] - replacing (f(), Ty0)
2021-03-12 08:35:01,765 [main:50] - replacing f() Ty0
2021-03-12 08:35:01,765 [main:54] - Getting value of type Ty0
2021-03-12 08:35:01,851 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 08:35:01,855 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 08:35:01,969 [main:67] - randomType = A?
2021-03-12 08:35:02,073 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:35:02,073 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:35:02,088 [main:106] - GETTING Ty0 from A
2021-03-12 08:35:02,104 [main:106] - GETTING Ty0 from String?
2021-03-12 08:35:02,143 [main:106] - GETTING Ty0 from MyQueue
2021-03-12 08:35:02,151 [main:111] - Cant find and generate replacement for f() type Ty0
2021-03-12 08:35:02,151 [main:107] - replacing ("OK", String)
2021-03-12 08:35:02,151 [main:50] - replacing "OK" String
2021-03-12 08:35:02,151 [main:54] - Getting value of type String
2021-03-12 08:35:02,233 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:02,233 [main:58] - GENERATED VALUE OF TYPE String = "lbbkx"
2021-03-12 08:35:02,234 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:02,321 [main:67] - randomType = A?
2021-03-12 08:35:02,403 [main:302] - generating value of type = A false depth = 0
2021-03-12 08:35:02,403 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:35:02,409 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@46f63a0e]
2021-03-12 08:35:02,410 [main:78] - Generated call from random type = (A())?.delayedQueue.poll()!!
2021-03-12 08:35:02,411 [main:106] - GETTING String from MyQueue
2021-03-12 08:35:02,415 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]]
2021-03-12 08:35:02,416 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:02,416 [main:117] - GENERATED CALL = (A().delayedQueue).poll()
2021-03-12 08:35:02,416 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]]
2021-03-12 08:35:02,416 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:02,416 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]
2021-03-12 08:35:02,416 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.orEmpty()
2021-03-12 08:35:02,417 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]]
2021-03-12 08:35:02,417 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:02,417 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]
2021-03-12 08:35:02,497 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:02,497 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.plus("ewnbs")
2021-03-12 08:35:02,497 [main:114] - replacement of "OK" of type String is (A())?.delayedQueue.poll()!!
2021-03-12 08:35:02,578 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(POSTFIX_EXPRESSION)
2021-03-12 08:35:02,579 [main:66] - Compilation checking started
2021-03-12 08:35:02,889 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = fu0 { "ymspq"}
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != (A())?.delayedQueue.poll()!!) return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:02,890 [main:107] - replacing (fu0 { "ymspq"}, String)
2021-03-12 08:35:02,890 [main:50] - replacing fu0 { "ymspq"} String
2021-03-12 08:35:02,891 [main:54] - Getting value of type String
2021-03-12 08:35:02,976 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:02,976 [main:58] - GENERATED VALUE OF TYPE String = "bqrmk"
2021-03-12 08:35:02,977 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:02,978 [main:67] - randomType = String
2021-03-12 08:35:03,084 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:03,106 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f7a46bf]
2021-03-12 08:35:03,186 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:35:03,266 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:03,266 [main:78] - Generated call from random type = ("oqgkj").substringBefore('엨', "sbyag")
2021-03-12 08:35:03,267 [main:106] - GETTING String from MyQueue
2021-03-12 08:35:03,274 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]]
2021-03-12 08:35:03,274 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:03,275 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String?.orEmpty(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35603d9f]
2021-03-12 08:35:03,275 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.orEmpty()
2021-03-12 08:35:03,275 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]]
2021-03-12 08:35:03,275 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:03,275 [main:149] - GENERATING call of type public operator fun kotlin.String?.plus(other: kotlin.Any?): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@64f67359]
2021-03-12 08:35:03,360 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:03,360 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.plus("ztoqb")
2021-03-12 08:35:03,360 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]]
2021-03-12 08:35:03,360 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:03,361 [main:117] - GENERATED CALL = (A().delayedQueue).poll()
2021-03-12 08:35:03,361 [main:114] - replacement of fu0 { "ymspq"} of type String is (A().delayedQueue).poll()
2021-03-12 08:35:03,440 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:03,440 [main:66] - Compilation checking started
2021-03-12 08:35:03,740 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != (A())?.delayedQueue.poll()!!) return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:03,741 [main:107] - replacing (f, Function0<Ty0>)
2021-03-12 08:35:03,741 [main:50] - replacing f Function0<Ty0>
2021-03-12 08:35:03,741 [main:54] - Getting value of type Function0<Ty0>
2021-03-12 08:35:03,822 [main:302] - generating value of type = Function0<Ty0> false depth = 0
2021-03-12 08:35:03,823 [main:302] - generating value of type = Ty0 false depth = 1
2021-03-12 08:35:03,826 [main:58] - GENERATED VALUE OF TYPE Function0<Ty0> = { }
2021-03-12 08:35:03,827 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:03,918 [main:67] - randomType = UByte
2021-03-12 08:35:04,003 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 08:35:04,049 [main:106] - GETTING Function0<Ty0> from String?
2021-03-12 08:35:04,094 [main:106] - GETTING Function0<Ty0> from A
2021-03-12 08:35:04,105 [main:106] - GETTING Function0<Ty0> from MyQueue
2021-03-12 08:35:04,111 [main:114] - replacement of f of type Function0<Ty0> is { }
2021-03-12 08:35:04,192 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 08:35:04,192 [main:66] - Compilation checking started
2021-03-12 08:35:04,506 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = fu0 f@{ "oppey"}
    if (prope2 != (A())?.delayedQueue.poll()!!) return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return { }() }


2021-03-12 08:35:04,507 [main:107] - replacing (fu0 f@{ "oppey"}, String)
2021-03-12 08:35:04,507 [main:50] - replacing fu0 f@{ "oppey"} String
2021-03-12 08:35:04,507 [main:54] - Getting value of type String
2021-03-12 08:35:04,595 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:04,596 [main:58] - GENERATED VALUE OF TYPE String = "hbhld"
2021-03-12 08:35:04,596 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:04,597 [main:67] - randomType = String
2021-03-12 08:35:04,702 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:04,733 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:35:04,817 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:04,903 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:04,904 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@19c20630]
2021-03-12 08:35:04,991 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 08:35:05,078 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 08:35:05,080 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 08:35:05,334 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:35:05,335 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 08:35:05,335 [main:95] - GENERATED = Regex("aptlc", kotlin.text.RegexOption.MULTILINE)
2021-03-12 08:35:05,413 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 08:35:05,413 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 08:35:05,418 [main:78] - Generated call from random type = ("mltql").subSequence(-1397085731, 1872368021).replace(Regex("aptlc", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "cysyz"})
2021-03-12 08:35:05,418 [main:106] - GETTING String from String?
2021-03-12 08:35:05,442 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b4d2ee]]
2021-03-12 08:35:05,442 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:05,545 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:05,546 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@48b4d2ee]
2021-03-12 08:35:05,646 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:35:05,646 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:35:05,647 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("gzuxq").takeLastWhile({a: Char -> true})
2021-03-12 08:35:05,647 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f07196b]]
2021-03-12 08:35:05,647 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:35:05,727 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:05,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:05,809 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f07196b]
2021-03-12 08:35:05,890 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 08:35:05,971 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 08:35:05,973 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 08:35:06,215 [main:302] - generating value of type = String true depth = 3
2021-03-12 08:35:06,215 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 08:35:06,216 [main:95] - GENERATED = Regex("sytew", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 08:35:06,292 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:06,293 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(1805067748, 558681189).replaceFirst(Regex("sytew", kotlin.text.RegexOption.IGNORE_CASE), "kefba")
2021-03-12 08:35:06,293 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33a258cd]]
2021-03-12 08:35:06,293 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:06,393 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:06,393 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33a258cd]
2021-03-12 08:35:06,394 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("uhrwo").lowercase()
2021-03-12 08:35:06,394 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fd12002]]
2021-03-12 08:35:06,394 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:06,488 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:06,489 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fd12002]
2021-03-12 08:35:06,489 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("kykmq").trim()
2021-03-12 08:35:06,490 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fe212e3]]
2021-03-12 08:35:06,490 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:06,592 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:06,593 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7fe212e3]
2021-03-12 08:35:06,671 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:06,751 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:06,751 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("mhbsc").replaceIndentByMargin("exywe", "leyvj")
2021-03-12 08:35:06,752 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1742b5ee]]
2021-03-12 08:35:06,752 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:06,832 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:06,832 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1742b5ee]
2021-03-12 08:35:06,921 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 08:35:06,921 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 08:35:06,923 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
2021-03-12 08:35:06,923 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4046f6d3]]
2021-03-12 08:35:06,923 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:07,009 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:07,009 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4046f6d3]
2021-03-12 08:35:07,010 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("yukbb").trimStart()
2021-03-12 08:35:07,010 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e7a4df]]
2021-03-12 08:35:07,010 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:07,097 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:07,098 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e7a4df]
2021-03-12 08:35:07,186 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:35:07,321 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:07,441 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:07,442 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("isxnd").replaceBeforeLast('扆', "vjiaa", "bdiry")
2021-03-12 08:35:07,442 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b5a8119]]
2021-03-12 08:35:07,442 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:07,522 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:07,523 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b5a8119]
2021-03-12 08:35:07,523 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("ostoj").capitalize()
2021-03-12 08:35:07,523 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c55647]]
2021-03-12 08:35:07,523 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:07,601 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:07,601 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66c55647]
2021-03-12 08:35:07,601 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("soblo").trimEnd()
2021-03-12 08:35:07,601 [main:114] - replacement of fu0 f@{ "oppey"} of type String is (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
2021-03-12 08:35:07,680 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:07,681 [main:66] - Compilation checking started
2021-03-12 08:35:08,002 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = 1
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (prope2 != (A())?.delayedQueue.poll()!!) return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:08,003 [main:107] - replacing (1, Int)
2021-03-12 08:35:08,003 [main:50] - replacing 1 Int
2021-03-12 08:35:08,003 [main:54] - Getting value of type Int
2021-03-12 08:35:08,092 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:08,092 [main:58] - GENERATED VALUE OF TYPE Int = -1918099742
2021-03-12 08:35:08,092 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:08,291 [main:67] - randomType = Function2<A, MyQueue, UShort>
2021-03-12 08:35:08,292 [main:106] - GETTING Int from MyQueue
2021-03-12 08:35:08,299 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@103a0cf8]]
2021-03-12 08:35:08,299 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:08,300 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.String[DeserializedSimpleFunctionDescriptor@103a0cf8]
2021-03-12 08:35:08,395 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:08,396 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.compareTo("gfaoa")
2021-03-12 08:35:08,396 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@3a1aa935], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]]
2021-03-12 08:35:08,396 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in MyQueue[DeserializedSimpleFunctionDescriptor@3a1aa935]
2021-03-12 08:35:08,479 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:08,480 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:35:08,564 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:08,565 [main:117] - GENERATED CALL = (A().delayedQueue).equals("faqlt").compareTo(true)
2021-03-12 08:35:08,565 [main:113] - Case = [public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8742566]]
2021-03-12 08:35:08,565 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@58076821]
2021-03-12 08:35:08,566 [main:117] - GENERATED CALL = (A().delayedQueue).poll()?.length
2021-03-12 08:35:08,566 [main:114] - replacement of 1 of type Int is (A().delayedQueue).poll()?.length
2021-03-12 08:35:08,653 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 08:35:08,654 [main:66] - Compilation checking started
2021-03-12 08:35:08,973 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (prope2 != (A())?.delayedQueue.poll()!!) return (75).toShort().toString(-774332044)
    return "OK"
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:08,973 [main:107] - replacing ("OK", String)
2021-03-12 08:35:08,974 [main:50] - replacing "OK" String
2021-03-12 08:35:08,974 [main:54] - Getting value of type String
2021-03-12 08:35:09,065 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:09,066 [main:58] - GENERATED VALUE OF TYPE String = "entas"
2021-03-12 08:35:09,066 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:09,159 [main:67] - randomType = Double
2021-03-12 08:35:09,263 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:35:09,300 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3b5dd166]
2021-03-12 08:35:09,383 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:09,384 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:35:09,468 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:09,468 [main:78] - Generated call from random type = (0.9701068342950504).compareTo(-87).toString(2061156151)
2021-03-12 08:35:09,469 [main:106] - GETTING String from A
2021-03-12 08:35:09,478 [main:113] - Case = [public final val delayedQueue: MyQueue defined in A[PropertyDescriptorImpl@5594db02], public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@67d6dce3]]
2021-03-12 08:35:09,478 [main:149] - GENERATING call of type public final fun poll(): kotlin.String? defined in MyQueue[SimpleFunctionDescriptorImpl@67d6dce3]
2021-03-12 08:35:09,478 [main:117] - GENERATED CALL = (A()).delayedQueue.poll()
2021-03-12 08:35:09,478 [main:114] - replacement of "OK" of type String is (0.9701068342950504).compareTo(-87).toString(2061156151)
2021-03-12 08:35:09,567 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:09,567 [main:66] - Compilation checking started
2021-03-12 08:35:09,893 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (prope2 != (A())?.delayedQueue.poll()!!) return (75).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-87).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:09,894 [main:107] - replacing (prope2 != (A())?.delayedQueue.poll()!!, Boolean)
2021-03-12 08:35:09,894 [main:50] - replacing prope2 != (A())?.delayedQueue.poll()!! Boolean
2021-03-12 08:35:09,894 [main:54] - Getting value of type Boolean
2021-03-12 08:35:09,980 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:09,980 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:35:09,981 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:10,075 [main:67] - randomType = Pair<Int, Short>
2021-03-12 08:35:10,161 [main:302] - generating value of type = Pair<Int, Short> false depth = 0
2021-03-12 08:35:10,249 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Short): Pair<Int, Short> = TODO()
2021-03-12 08:35:10,251 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Short): Pair<Int, Short> = TODO()
2021-03-12 08:35:10,362 [main:302] - generating value of type = Int true depth = 3
2021-03-12 08:35:10,362 [main:302] - generating value of type = Short true depth = 3
2021-03-12 08:35:10,363 [main:95] - GENERATED = Pair<Int, Short>(-1151239441, 9491)
2021-03-12 08:35:10,379 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6c37dac8]
2021-03-12 08:35:10,471 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:10,471 [main:78] - Generated call from random type = (Pair<Int, Short>(-1151239441, 9491)).first.equals("cmtos")
2021-03-12 08:35:10,472 [main:106] - GETTING Boolean from String?
2021-03-12 08:35:10,505 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]]
2021-03-12 08:35:10,505 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:35:10,590 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:10,590 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5db13401]
2021-03-12 08:35:10,590 [main:117] - GENERATED CALL = (MyQueue().poll()).equals("muoau").not()
2021-03-12 08:35:10,590 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530667d8]]
2021-03-12 08:35:10,591 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:35:10,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:10,762 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:10,762 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@530667d8]
2021-03-12 08:35:10,763 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(1531906123, -26021600).any()
2021-03-12 08:35:10,763 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118c347e]]
2021-03-12 08:35:10,763 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:10,845 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:10,846 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@118c347e]
2021-03-12 08:35:10,846 [main:117] - GENERATED CALL = (MyQueue().poll()).get(827119867).isISOControl()
2021-03-12 08:35:10,846 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce0900c]]
2021-03-12 08:35:10,846 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@67114807]
2021-03-12 08:35:10,928 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:10,929 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ce0900c]
2021-03-12 08:35:10,929 [main:117] - GENERATED CALL = (MyQueue().poll()).plus("qzvow").toBoolean()
2021-03-12 08:35:10,929 [main:113] - Case = [public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d935]]
2021-03-12 08:35:10,929 [main:149] - GENERATING call of type public fun kotlin.String?.equals(other: kotlin.String?, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@548d935]
2021-03-12 08:35:11,011 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:11,012 [main:117] - GENERATED CALL = (MyQueue().poll()).equals(MyQueue().poll(), false)
2021-03-12 08:35:11,012 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eaaac74]]
2021-03-12 08:35:11,012 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:35:11,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:11,185 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:11,186 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3eaaac74]
2021-03-12 08:35:11,318 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:11,320 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(1442026470, -22823067).hasSurrogatePairAt(-1063251470)
2021-03-12 08:35:11,320 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b3e33]]
2021-03-12 08:35:11,320 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:11,421 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:11,422 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@387b3e33]
2021-03-12 08:35:11,422 [main:117] - GENERATED CALL = (MyQueue().poll()).get(1222675233).isLowerCase()
2021-03-12 08:35:11,422 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@715c727]]
2021-03-12 08:35:11,423 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@c0c430]
2021-03-12 08:35:11,509 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:11,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:11,606 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@715c727]
2021-03-12 08:35:11,706 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:35:11,790 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:11,791 [main:117] - GENERATED CALL = (MyQueue().poll()).subSequence(-2061750170, 1243597926).endsWith('똙', false)
2021-03-12 08:35:11,791 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]]
2021-03-12 08:35:11,791 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:35:11,877 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:11,877 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]
2021-03-12 08:35:11,965 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:11,966 [main:117] - GENERATED CALL = (MyQueue().poll()).equals("jvmph").xor(false)
2021-03-12 08:35:11,966 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe59555]]
2021-03-12 08:35:11,966 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:12,058 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:12,059 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe59555]
2021-03-12 08:35:12,183 [main:302] - generating value of type = Char true depth = 0
2021-03-12 08:35:12,290 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:12,291 [main:117] - GENERATED CALL = (MyQueue().poll()).get(-1441622192).equals('⡰', true)
2021-03-12 08:35:12,291 [main:114] - replacement of prope2 != (A())?.delayedQueue.poll()!! of type Boolean is true
2021-03-12 08:35:12,373 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:35:12,374 [main:66] - Compilation checking started
2021-03-12 08:35:12,688 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (75).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-87).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:12,773 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:35:12,855 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 08:35:12,856 [main:66] - Compilation checking started
2021-03-12 08:35:13,081 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(equals("djivr"))) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (75).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-87).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:13,081 [main:141] - TRYING TO REPLACE CONSTANT 75
2021-03-12 08:35:13,175 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 08:35:13,176 [main:66] - Compilation checking started
2021-03-12 08:35:13,508 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-87).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:13,508 [main:141] - TRYING TO REPLACE CONSTANT 774332044
2021-03-12 08:35:13,607 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:35:13,607 [main:66] - Compilation checking started
2021-03-12 08:35:13,840 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString(-1090954162)

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(size)
    return (0.9701068342950504).compareTo(-87).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:13,840 [main:141] - TRYING TO REPLACE CONSTANT 1090954162
2021-03-12 08:35:13,953 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PARENTHESIZED)
2021-03-12 08:35:13,954 [main:66] - Compilation checking started
2021-03-12 08:35:14,258 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-87).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:14,258 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 08:35:14,354 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 08:35:14,354 [main:66] - Compilation checking started
2021-03-12 08:35:14,707 [main:141] - TRYING TO REPLACE CONSTANT 0.9701068342950504
2021-03-12 08:35:14,796 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 08:35:14,796 [main:66] - Compilation checking started
2021-03-12 08:35:15,109 [main:141] - TRYING TO REPLACE CONSTANT 2061156151
2021-03-12 08:35:15,191 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 08:35:15,191 [main:66] - Compilation checking started
2021-03-12 08:35:15,414 [main:49] - Result = false
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-87).toString(size)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:15,414 [main:141] - TRYING TO REPLACE CONSTANT 87
2021-03-12 08:35:15,499 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 08:35:15,499 [main:66] - Compilation checking started
2021-03-12 08:35:15,778 [main:53] - Result = true
Text:
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:15,778 [main:41] - AFTER TRY 1 res = class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }


2021-03-12 08:35:15,957 [main:112] - generating klass MyQueue text = class MyQueue {
    fun poll(): String? =  null
}
2021-03-12 08:35:15,958 [main:112] - generating klass A text = class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}
2021-03-12 08:35:16,120 [main:43] - GENERATING CALL OF fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }
2021-03-12 08:35:16,122 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu0(f: () -> Char): Char { return f() }
2021-03-12 08:35:16,291 [main:302] - generating value of type = Function0<Char> false depth = 1
2021-03-12 08:35:16,291 [main:302] - generating value of type = Char true depth = 2
2021-03-12 08:35:16,292 [main:95] - GENERATED = fu0<Char>({ ''})
2021-03-12 08:35:16,376 [main:43] - Try №1
2021-03-12 08:35:25,907 [main:48] - Already checked
2021-03-12 08:35:29,583 [main:69] - Trying to insert fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
2021-03-12 08:35:29,673 [main:66] - Compilation checking started
2021-03-12 08:35:30,756 [main:103] - Trying to change 152 nodes
2021-03-12 08:35:30,756 [main:107] - replacing (i, Int)
2021-03-12 08:35:30,758 [main:50] - replacing i Int
2021-03-12 08:35:30,758 [main:54] - Getting value of type Int
2021-03-12 08:35:30,916 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:30,919 [main:58] - GENERATED VALUE OF TYPE Int = 246112972
2021-03-12 08:35:30,920 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:31,457 [main:67] - randomType = LinkedHashSet<UByte?>
2021-03-12 08:35:31,625 [main:302] - generating value of type = LinkedHashSet<UByte?> false depth = 0
2021-03-12 08:35:31,819 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UByte?> = TODO()
2021-03-12 08:35:31,825 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UByte?> = TODO()
2021-03-12 08:35:32,021 [main:95] - GENERATED = linkedSetOf<UByte?>()
2021-03-12 08:35:32,155 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@15b4bf9e]
2021-03-12 08:35:32,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:32,301 [main:78] - Generated call from random type = (linkedSetOf<UByte?>()).size.coerceIn(559823748, (0.9701068342950504).compareTo(-774332044))
2021-03-12 08:35:32,302 [main:106] - GETTING Int from Short
2021-03-12 08:35:32,368 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@595713fd]]
2021-03-12 08:35:32,369 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@595713fd]
2021-03-12 08:35:32,369 [main:117] - GENERATED CALL = ((774332044).toShort()).countTrailingZeroBits()
2021-03-12 08:35:32,369 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@c8080e6], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@41bf95c1]]
2021-03-12 08:35:32,369 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@c8080e6]
2021-03-12 08:35:32,369 [main:117] - GENERATED CALL = ((774332044).toShort()).toInt().sign
2021-03-12 08:35:32,369 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3f71d964], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@aa1bb72]]
2021-03-12 08:35:32,369 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3f71d964]
2021-03-12 08:35:32,516 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:32,518 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@aa1bb72]
2021-03-12 08:35:32,662 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:32,665 [main:117] - GENERATED CALL = ((774332044).toShort()).compareTo(-62).and(-180516985)
2021-03-12 08:35:32,665 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@c8080e6], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23e9bc96]]
2021-03-12 08:35:32,665 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@c8080e6]
2021-03-12 08:35:32,665 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23e9bc96]
2021-03-12 08:35:32,665 [main:117] - GENERATED CALL = ((774332044).toShort()).toInt().shl((linkedMapOf<Int, A>()).size)
2021-03-12 08:35:32,665 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b065bdb], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@9e6519c]]
2021-03-12 08:35:32,665 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2b065bdb]
2021-03-12 08:35:32,666 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@9e6519c]
2021-03-12 08:35:32,666 [main:117] - GENERATED CALL = ((774332044).toShort()).toShort().unaryMinus()
2021-03-12 08:35:32,666 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3f71d964], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18ca542f]]
2021-03-12 08:35:32,666 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3f71d964]
2021-03-12 08:35:32,801 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:32,803 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@18ca542f]
2021-03-12 08:35:32,803 [main:117] - GENERATED CALL = ((774332044).toShort()).compareTo(-28).inv()
2021-03-12 08:35:32,804 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@53141d54], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@fea99d7]]
2021-03-12 08:35:32,804 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@53141d54]
2021-03-12 08:35:32,804 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@fea99d7]
2021-03-12 08:35:32,804 [main:117] - GENERATED CALL = ((774332044).toShort()).toByte().countTrailingZeroBits()
2021-03-12 08:35:32,804 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36d150e6], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@457f023a]]
2021-03-12 08:35:32,804 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@36d150e6]
2021-03-12 08:35:32,939 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:32,941 [main:117] - GENERATED CALL = ((774332044).toShort()).rangeTo(1).endInclusive
2021-03-12 08:35:32,942 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@c8080e6], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@284e134c]]
2021-03-12 08:35:32,942 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@c8080e6]
2021-03-12 08:35:32,942 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@284e134c]
2021-03-12 08:35:32,942 [main:117] - GENERATED CALL = ((774332044).toShort()).toInt().dec()
2021-03-12 08:35:32,942 [main:113] - Case = [public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@9e6519c]]
2021-03-12 08:35:32,942 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@9e6519c]
2021-03-12 08:35:32,942 [main:117] - GENERATED CALL = ((774332044).toShort()).unaryMinus()
2021-03-12 08:35:32,942 [main:114] - replacement of i of type Int is ((774332044).toShort()).compareTo(-28).inv()
2021-03-12 08:35:33,098 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:33,099 [main:66] - Compilation checking started
2021-03-12 08:35:33,746 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }

inline class Kla0(val x: Any)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun <Ty1> fu2(fn: suspend () -> Ty1) = fn()

fun fu3(r: Kla0) = if (r.x == "OK") "OK" else "fail: $r"

fun box202(): String {
    var prope5: String = "fail"
    fu1 {
        prope5 = fu3(fu2 { Kla0("OK") })
    }
    return prope5
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if (prope8 != ((774332044).toShort()).compareTo(-28).inv()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:35:33,748 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 08:35:33,748 [main:50] - replacing checkFinished Boolean
2021-03-12 08:35:33,748 [main:54] - Getting value of type Boolean
2021-03-12 08:35:33,894 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:33,897 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:35:33,897 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:34,067 [main:67] - randomType = Kla3<MyQueue>
2021-03-12 08:35:34,209 [main:302] - generating value of type = Kla3<MyQueue> false depth = 0
2021-03-12 08:35:34,212 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 08:35:34,876 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 08:35:34,878 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}
2021-03-12 08:35:34,901 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@4c7f9f38]
2021-03-12 08:35:35,040 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:35,041 [main:78] - Generated call from random type = (Kla6).context.equals("zemxd")
2021-03-12 08:35:35,041 [main:114] - replacement of checkFinished of type Boolean is (Kla6).context.equals("zemxd")
2021-03-12 08:35:35,189 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:35,189 [main:66] - Compilation checking started
2021-03-12 08:35:35,892 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }

inline class Kla0(val x: Any)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun <Ty1> fu2(fn: suspend () -> Ty1) = fn()

fun fu3(r: Kla0) = if (r.x == "OK") "OK" else "fail: $r"

fun box202(): String {
    var prope5: String = "fail"
    fu1 {
        prope5 = fu3(fu2 { Kla0("OK") })
    }
    return prope5
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if (prope8 != ((774332044).toShort()).compareTo(-28).inv()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Kla6).context.equals("zemxd") && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:35:35,895 [main:107] - replacing (prope8 != ((774332044).toShort()).compareTo(-28).inv(), Boolean)
2021-03-12 08:35:35,895 [main:50] - replacing prope8 != ((774332044).toShort()).compareTo(-28).inv() Boolean
2021-03-12 08:35:35,895 [main:54] - Getting value of type Boolean
2021-03-12 08:35:36,041 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:36,044 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 08:35:36,045 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:36,052 [main:67] - randomType = Short
2021-03-12 08:35:36,204 [main:302] - generating value of type = Short true depth = 0
2021-03-12 08:35:36,257 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6924bec6]
2021-03-12 08:35:36,257 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@28019d67]
2021-03-12 08:35:36,258 [main:78] - Generated call from random type = (3154).div((0.9701068342950504)).isNaN()
2021-03-12 08:35:36,258 [main:114] - replacement of prope8 != ((774332044).toShort()).compareTo(-28).inv() of type Boolean is (3154).div((0.9701068342950504)).isNaN()
2021-03-12 08:35:36,395 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:36,396 [main:66] - Compilation checking started
2021-03-12 08:35:37,042 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }

inline class Kla0(val x: Any)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun <Ty1> fu2(fn: suspend () -> Ty1) = fn()

fun fu3(r: Kla0) = if (r.x == "OK") "OK" else "fail: $r"

fun box202(): String {
    var prope5: String = "fail"
    fu1 {
        prope5 = fu3(fu2 { Kla0("OK") })
    }
    return prope5
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if ((3154).div((0.9701068342950504)).isNaN()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Kla6).context.equals("zemxd") && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:35:37,045 [main:107] - replacing (!prope9, Boolean)
2021-03-12 08:35:37,046 [main:50] - replacing !prope9 Boolean
2021-03-12 08:35:37,046 [main:54] - Getting value of type Boolean
2021-03-12 08:35:37,204 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:37,206 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:35:37,206 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:37,365 [main:67] - randomType = ArrayDeque<A>
2021-03-12 08:35:37,511 [main:302] - generating value of type = ArrayDeque<A> false depth = 0
2021-03-12 08:35:37,664 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<A>): ArrayDeque<A> = TODO()
2021-03-12 08:35:37,668 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<A>): ArrayDeque<A> = TODO()
2021-03-12 08:35:38,015 [main:302] - generating value of type = Collection<A> false depth = 3
2021-03-12 08:35:38,155 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<A> = TODO()
2021-03-12 08:35:38,158 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<A> = TODO()
2021-03-12 08:35:38,443 [main:302] - generating value of type = Int true depth = 6
2021-03-12 08:35:38,445 [main:95] - GENERATED = UIntArray(-1144696612)
2021-03-12 08:35:38,446 [main:95] - GENERATED = ArrayDeque<A>(UIntArray(-1144696612))
2021-03-12 08:35:38,614 [main:149] - GENERATING call of type public final fun first(): A defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@365df5bb]
2021-03-12 08:35:38,614 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in A[DeserializedSimpleFunctionDescriptor@3a6dfb03]
2021-03-12 08:35:38,747 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:38,748 [main:78] - Generated call from random type = (ArrayDeque<A>(UIntArray(-1144696612))).first().equals("mcytr")
2021-03-12 08:35:38,749 [main:106] - GETTING Boolean from String
2021-03-12 08:35:38,778 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77cb8984]]
2021-03-12 08:35:38,778 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:38,779 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77cb8984]
2021-03-12 08:35:38,779 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isDefined()
2021-03-12 08:35:38,779 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a66d015]]
2021-03-12 08:35:38,779 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:38,905 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:38,907 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a66d015]
2021-03-12 08:35:38,908 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).get(-1785417815).isLetter()
2021-03-12 08:35:38,908 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@711394f8]]
2021-03-12 08:35:38,908 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:38,908 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@711394f8]
2021-03-12 08:35:38,908 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isUpperCase()
2021-03-12 08:35:38,908 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6665a56e]]
2021-03-12 08:35:38,908 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:38,908 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6665a56e]
2021-03-12 08:35:38,908 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).get((linkedMapOf<Int, A>()).size).isSurrogate()
2021-03-12 08:35:38,909 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b8d06e5]]
2021-03-12 08:35:38,909 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b8d06e5]
2021-03-12 08:35:38,909 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).isBlank()
2021-03-12 08:35:38,909 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6418ed40]]
2021-03-12 08:35:38,909 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:38,909 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6418ed40]
2021-03-12 08:35:38,909 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).get((linkedMapOf<Int, A>()).size).isDigit()
2021-03-12 08:35:38,909 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]]
2021-03-12 08:35:38,909 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:35:39,038 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:39,038 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@fdacdbb]
2021-03-12 08:35:39,039 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).equals("jlyeg").xor((A()).equals("djivr"))
2021-03-12 08:35:39,039 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@42ee2c95]]
2021-03-12 08:35:39,039 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@4a45ae63]
2021-03-12 08:35:39,186 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:39,186 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@42ee2c95]
2021-03-12 08:35:39,310 [main:302] - generating value of type = Any false depth = 0
2021-03-12 08:35:39,310 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).equals("joefy").equals("nscjd")
2021-03-12 08:35:39,311 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bdabe8b]]
2021-03-12 08:35:39,311 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7bdabe8b]
2021-03-12 08:35:39,440 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:39,571 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:39,574 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).endsWith("kwkle", false)
2021-03-12 08:35:39,574 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ea8f88]]
2021-03-12 08:35:39,574 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@e7a966e]
2021-03-12 08:35:39,574 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67ea8f88]
2021-03-12 08:35:39,574 [main:117] - GENERATED CALL = ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isLetterOrDigit()
2021-03-12 08:35:39,574 [main:114] - replacement of !prope9 of type Boolean is ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isUpperCase()
2021-03-12 08:35:39,701 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:39,701 [main:66] - Compilation checking started
2021-03-12 08:35:40,320 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }

inline class Kla0(val x: Any)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun <Ty1> fu2(fn: suspend () -> Ty1) = fn()

fun fu3(r: Kla0) = if (r.x == "OK") "OK" else "fail: $r"

fun box202(): String {
    var prope5: String = "fail"
    fu1 {
        prope5 = fu3(fu2 { Kla0("OK") })
    }
    return prope5
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if ((3154).div((0.9701068342950504)).isNaN()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Kla6).context.equals("zemxd") && ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:35:40,324 [main:107] - replacing (prope8, Int)
2021-03-12 08:35:40,326 [main:50] - replacing prope8 Int
2021-03-12 08:35:40,326 [main:54] - Getting value of type Int
2021-03-12 08:35:40,474 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:40,476 [main:58] - GENERATED VALUE OF TYPE Int = 1575171635
2021-03-12 08:35:40,476 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:40,793 [main:67] - randomType = LinkedHashMap<Float, Boolean>
2021-03-12 08:35:40,927 [main:302] - generating value of type = LinkedHashMap<Float, Boolean> false depth = 0
2021-03-12 08:35:41,064 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Float, Boolean>): LkedHashMap<Float, Boolean> = TODO()
2021-03-12 08:35:41,068 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Float, Boolean>): LkedHashMap<Float, Boolean> = TODO()
2021-03-12 08:35:41,209 [main:302] - generating value of type = Pair<Float, Boolean> false depth = 3
2021-03-12 08:35:41,344 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float, second: Boolean): Pair<Float, Boolean> = TODO()
2021-03-12 08:35:41,348 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float, second: Boolean): Pair<Float, Boolean> = TODO()
2021-03-12 08:35:41,485 [main:302] - generating value of type = Float true depth = 6
2021-03-12 08:35:41,487 [main:302] - generating value of type = Boolean true depth = 6
2021-03-12 08:35:41,490 [main:95] - GENERATED = Pair<Float, Boolean>(0.47828245f, false)
2021-03-12 08:35:41,490 [main:95] - GENERATED = linkedMapOf<Float, Boolean>(Pair<Float, Boolean>(0.47828245f, false))
2021-03-12 08:35:41,608 [main:78] - Generated call from random type = (linkedMapOf<Float, Boolean>(Pair<Float, Boolean>(0.47828245f, false))).size
2021-03-12 08:35:41,609 [main:106] - GETTING Int from LinkedHashMap<Int, A>
2021-03-12 08:35:41,746 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e0fc63f]]
2021-03-12 08:35:41,746 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4e0fc63f]
2021-03-12 08:35:41,747 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.rotateLeft((linkedMapOf<Int, A>()).size)
2021-03-12 08:35:41,747 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@41bf95c1]]
2021-03-12 08:35:41,747 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.sign
2021-03-12 08:35:41,747 [main:113] - Case = [public open fun containsKey(key: kotlin.Int): kotlin.Boolean defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@40c1331], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]]
2021-03-12 08:35:41,747 [main:149] - GENERATING call of type public open fun containsKey(key: kotlin.Int): kotlin.Boolean defined in kotlin.collections.LinkedHashMap[DeserializedSimpleFunctionDescriptor@40c1331]
2021-03-12 08:35:41,747 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:35:41,748 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).containsKey((linkedMapOf<Int, A>()).size).compareTo((A()).equals("djivr"))
2021-03-12 08:35:41,748 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@aa1bb72]]
2021-03-12 08:35:41,748 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@aa1bb72]
2021-03-12 08:35:41,748 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.and((774332044))
2021-03-12 08:35:41,748 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a793c64]]
2021-03-12 08:35:41,748 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4a793c64]
2021-03-12 08:35:41,887 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:41,890 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.minus(31)
2021-03-12 08:35:41,890 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62f1773d]]
2021-03-12 08:35:41,890 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62f1773d]
2021-03-12 08:35:42,041 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:42,044 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.plus(-100)
2021-03-12 08:35:42,044 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b7c102b]]
2021-03-12 08:35:42,044 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3b7c102b]
2021-03-12 08:35:42,182 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:42,184 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.div(37)
2021-03-12 08:35:42,184 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d90ac77]]
2021-03-12 08:35:42,184 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d90ac77]
2021-03-12 08:35:42,184 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.unaryMinus()
2021-03-12 08:35:42,185 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7543a335]]
2021-03-12 08:35:42,185 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7543a335]
2021-03-12 08:35:42,314 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 08:35:42,317 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.times(-120)
2021-03-12 08:35:42,317 [main:113] - Case = [public open val size: kotlin.Int defined in kotlin.collections.LinkedHashMap[DeserializedPropertyDescriptor@7f38b066], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@351b9520]]
2021-03-12 08:35:42,317 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@351b9520]
2021-03-12 08:35:42,444 [main:302] - generating value of type = Int true depth = 0
2021-03-12 08:35:42,446 [main:117] - GENERATED CALL = ((linkedMapOf<Int, A>())).size.xor(157236326)
2021-03-12 08:35:42,446 [main:114] - replacement of prope8 of type Int is 1575171635
2021-03-12 08:35:42,573 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 08:35:42,574 [main:66] - Compilation checking started
2021-03-12 08:35:42,966 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }

inline class Kla0(val x: Any)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun <Ty1> fu2(fn: suspend () -> Ty1) = fn()

fun fu3(r: Kla0) = if (r.x == "OK") "OK" else "fail: $r"

fun box202(): String {
    var prope5: String = "fail"
    fu1 {
        prope5 = fu3(fu2 { Kla0("OK") })
    }
    return prope5
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
1575171635 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if ((3154).div((0.9701068342950504)).isNaN()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Kla6).context.equals("zemxd") && ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:35:42,968 [main:107] - replacing (prope6.isSuccess, Boolean)
2021-03-12 08:35:42,970 [main:50] - replacing prope6.isSuccess Boolean
2021-03-12 08:35:42,970 [main:54] - Getting value of type Boolean
2021-03-12 08:35:43,101 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 08:35:43,104 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 08:35:43,104 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:43,108 [main:67] - randomType = Double
2021-03-12 08:35:43,238 [main:302] - generating value of type = Double true depth = 0
2021-03-12 08:35:43,268 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@41d08b91]
2021-03-12 08:35:43,269 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a66d015]
2021-03-12 08:35:43,269 [main:78] - Generated call from random type = (0.8039518224410541).toChar().isLetter()
2021-03-12 08:35:43,269 [main:114] - replacement of prope6.isSuccess of type Boolean is (0.8039518224410541).toChar().isLetter()
2021-03-12 08:35:43,398 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:43,400 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 08:35:43,401 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 08:35:43,401 [main:54] - Getting value of type String
2021-03-12 08:35:43,540 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:43,542 [main:58] - GENERATED VALUE OF TYPE String = "ywezu"
2021-03-12 08:35:43,542 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:43,681 [main:67] - randomType = UShort
2021-03-12 08:35:43,814 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 08:35:43,856 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@2c379eec]
2021-03-12 08:35:43,856 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a274029]
2021-03-12 08:35:43,856 [main:78] - Generated call from random type = (12799.toUShort()).toByte().toString((linkedMapOf<Int, A>()).size)
2021-03-12 08:35:43,857 [main:106] - GETTING String from Boolean
2021-03-12 08:35:43,868 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]]
2021-03-12 08:35:43,868 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2ea78df7]
2021-03-12 08:35:43,868 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8762054]
2021-03-12 08:35:43,869 [main:117] - GENERATED CALL = ((A()).equals("djivr")).compareTo((A()).equals("djivr")).toString((774332044))
2021-03-12 08:35:43,869 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (12799.toUShort()).toByte().toString((linkedMapOf<Int, A>()).size)
2021-03-12 08:35:43,998 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 08:35:43,999 [main:66] - Compilation checking started
2021-03-12 08:35:44,705 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
class MyQueue {
    fun poll(): String? =  null
}

class A {
    val delayedQueue = MyQueue()

    fun next() {
        while (true) {
            delayedQueue.poll() ?: break
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }

        while (true) {
            unblock(delayedQueue.poll() ?: break)
        }
    }

    fun unblock(p: String) {

    }
}

fun box() : String {
    A().next()
    return "OK"
}

fun box768(): String {
    val prope0 = (A().delayedQueue).poll()?.length
    val prope1 = (A().delayedQueue).poll()
    if ((A()).equals("djivr").and(false)) return (linkedMapOf<Int, A>()).size.toString((774332044))

    val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
    if (true) return (774332044).toShort().toString(-774332044)
    return (0.9701068342950504).compareTo(-774332044).toString(2061156151)
}

fun <Ty0> fu0(f: () -> Ty0): Ty0 { return f() }

inline class Kla0(val x: Any)

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla1)
}

suspend fun <Ty1> fu2(fn: suspend () -> Ty1) = fn()

fun fu3(r: Kla0) = if (r.x == "OK") "OK" else "fail: $r"

fun box202(): String {
    var prope5: String = "fail"
    fu1 {
        prope5 = fu3(fu2 { Kla0("OK") })
    }
    return prope5
}

fun <Ty1> fu4(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        x(prope6.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope6: Result<Any?>) {
        prope6.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Any?>) {
        this.prope6 = prope6.getOrThrow()
    }

    var prope6: Any? = null
}

abstract class Kla3<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope6: Result<Ty1>) {
        if (prope6.isSuccess) {
            resume(prope6.getOrThrow())
        } else {
            fu6(prope6.exceptionOrNull()!!)
        }
    }

    abstract fun fu6(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu8() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu8(it)
    }

    fun fu8(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu9(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu10(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope3 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if ((3154).div((0.9701068342950504)).isNaN()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((12799.toUShort()).toByte().toString((linkedMapOf<Int, A>()).size) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Kla6).context.equals("zemxd") && ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope4 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope4.prope10 = {
            prope4.prope9 = true
        }
    }

    override fun fu6(exception: Throwable) {
        throw exception
    }
}


2021-03-12 08:35:44,707 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 08:35:44,709 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 08:35:44,709 [main:54] - Getting value of type String
2021-03-12 08:35:44,850 [main:302] - generating value of type = String true depth = 0
2021-03-12 08:35:44,853 [main:58] - GENERATED VALUE OF TYPE String = "joxqx"
2021-03-12 08:35:44,853 [main:61] - GENERATED IS CALL =false
2021-03-12 08:35:44,864 [main:67] - randomType = Kla5
2021-03-12 08:35:44,999 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 08:35:45,002 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu11() {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu12() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu13(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val prope0 = (A().delayedQueue).poll()?.length
val prope1 = (A().delayedQueue).poll()
val prope2 = (MyQueue().poll()).plus("jcnlj").filterNot({a: Char -> false})
for (i in 1..numberOfSuspensions) {
            if ((3154).div((0.9701068342950504)).isNaN()) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((12799.toUShort()).toByte().toString((linkedMapOf<Int, A>()).size) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((Kla6).context.equals("zemxd") && ((MyQueue().poll()).plus("jcnlj")).get((774332044)).isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 08:35:45,013 [main:106] - GETTING String from String
2021-03-12 08:35:45,042 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e7a4df]]
2021-03-12 08:35:45,043 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e7a4df]
2021-03-12 08:35:45,193 [main:302] - generating value of type = Char true depth = 0
