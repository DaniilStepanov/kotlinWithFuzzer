2021-03-12 06:05:15,245 [main:66] - Compilation checking started
2021-03-12 06:05:16,201 [main:302] - generating value of type = Function2<R, T, R> false depth = 0
2021-03-12 06:05:16,203 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:05:17,633 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: List<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>>, block: T.()->UByte): R = TODO()
2021-03-12 06:05:17,636 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: List<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>>, block: T.()->UByte): R = TODO()
2021-03-12 06:05:17,876 [main:302] - generating value of type = List<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>> false depth = 4
2021-03-12 06:05:17,995 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): List<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>> = TODO()
2021-03-12 06:05:17,997 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): List<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>> = TODO()
2021-03-12 06:05:18,220 [main:302] - generating value of type = Int true depth = 7
2021-03-12 06:05:18,222 [main:95] - GENERATED = ArrayDeque<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>>(-1338000484)
2021-03-12 06:05:18,222 [main:385] - Cant generate call of fun <T, R> with(receiver: List<Function1<Pair<LinkedHashSet<UShort>, ULong>, ArrayDeque<Long>>>, block: T.()->UByte): R = TODO()
2021-03-12 06:05:18,223 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 06:05:18,223 [main:66] - Compilation checking started
2021-03-12 06:05:18,537 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R = {a: R, b: T -> }): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}


2021-03-12 06:05:18,982 [main:43] - GENERATING CALL OF public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:05:19,421 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T, R> Iterable<ArrayDeque<UInt?>>.fold2(initial: Boolean, operation: (Boolean, ArrayDeque<UInt?>) -> Boolean): Boolean {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:05:19,729 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:05:19,729 [main:302] - generating value of type = Function2<Boolean, ArrayDeque<UInt?>, Boolean> false depth = 1
2021-03-12 06:05:19,730 [main:302] - generating value of type = Boolean true depth = 2
2021-03-12 06:05:19,730 [main:302] - generating value of type = Iterable<ArrayDeque<UInt?>> false depth = 1
2021-03-12 06:05:19,832 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: ArrayDeque<UInt?>): Iterable<ArrayDeque<UInt?>> = TODO()
2021-03-12 06:05:19,834 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: ArrayDeque<UInt?>): Iterable<ArrayDeque<UInt?>> = TODO()
2021-03-12 06:05:19,966 [main:302] - generating value of type = ArrayDeque<UInt?> false depth = 4
2021-03-12 06:05:20,070 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt?>): ArrayDeque<UInt?> = TODO()
2021-03-12 06:05:20,073 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<UInt?>): ArrayDeque<UInt?> = TODO()
2021-03-12 06:05:20,315 [main:302] - generating value of type = Collection<UInt?> false depth = 7
2021-03-12 06:05:20,434 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->UInt?): Collection<UInt?> = TODO()
2021-03-12 06:05:20,440 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->UInt?): Collection<UInt?> = TODO()
2021-03-12 06:05:20,794 [main:302] - generating value of type = Int true depth = 10
2021-03-12 06:05:20,794 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, UInt?> false depth = 10
2021-03-12 06:05:20,794 [main:302] - generating value of type = UInt true depth = 11
2021-03-12 06:05:20,795 [main:95] - GENERATED = List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()})
2021-03-12 06:05:20,796 [main:95] - GENERATED = ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))
2021-03-12 06:05:20,796 [main:95] - GENERATED = setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()})))
2021-03-12 06:05:20,797 [main:95] - GENERATED = setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})
2021-03-12 06:05:20,979 [main:45] - Trying to change 18 nodes
2021-03-12 06:05:20,984 [main:53] - replacing (a, String)
2021-03-12 06:05:20,985 [main:50] - replacing a String
2021-03-12 06:05:20,985 [main:54] - Getting value of type String
2021-03-12 06:05:21,094 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:21,096 [main:58] - GENERATED VALUE OF TYPE String = "epozp"
2021-03-12 06:05:21,097 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:21,097 [main:67] - randomType = String
2021-03-12 06:05:21,189 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:21,267 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]
2021-03-12 06:05:21,351 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:05:21,436 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:21,438 [main:78] - Generated call from random type = ("oskgq").substringBeforeLast('ï­´', "vzpjc")
2021-03-12 06:05:21,440 [main:106] - GETTING String from List<String>
2021-03-12 06:05:21,497 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6959f42a], public abstract operator fun next(): kotlin.String defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@6b22e8eb]]
2021-03-12 06:05:21,497 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6959f42a]
2021-03-12 06:05:21,498 [main:149] - GENERATING call of type public abstract operator fun next(): kotlin.String defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@6b22e8eb]
2021-03-12 06:05:21,498 [main:117] - GENERATED CALL = (list).iterator().next()
2021-03-12 06:05:21,498 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@797c8f80], public abstract fun previous(): kotlin.String defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@546e20d5]]
2021-03-12 06:05:21,499 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@797c8f80]
2021-03-12 06:05:21,499 [main:149] - GENERATING call of type public abstract fun previous(): kotlin.String defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@546e20d5]
2021-03-12 06:05:21,499 [main:117] - GENERATED CALL = (list).listIterator().previous()
2021-03-12 06:05:21,500 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4021890a]]
2021-03-12 06:05:21,500 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4021890a]
2021-03-12 06:05:21,588 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 06:05:21,588 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:05:21,589 [main:117] - GENERATED CALL = (list).find({a: T -> false})
2021-03-12 06:05:21,590 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b98cd2], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]]
2021-03-12 06:05:21,590 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b98cd2]
2021-03-12 06:05:21,686 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:21,687 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]
2021-03-12 06:05:21,795 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:05:21,795 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:05:21,796 [main:117] - GENERATED CALL = (list).get(-517973225).takeWhile({a: Char -> false})
2021-03-12 06:05:21,797 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b98cd2], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]]
2021-03-12 06:05:21,797 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b98cd2]
2021-03-12 06:05:21,883 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:21,884 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]
2021-03-12 06:05:21,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:22,043 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:22,126 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:05:22,131 [main:117] - GENERATED CALL = (list).get(-1511195586).replaceRange(-213513068, 1670164067, "fpico")
2021-03-12 06:05:22,131 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39236f4a]]
2021-03-12 06:05:22,131 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.getOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@39236f4a]
2021-03-12 06:05:22,211 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:22,292 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 06:05:22,292 [main:302] - generating value of type = T false depth = 1
2021-03-12 06:05:22,683 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Function1<Byte, Short>, b: Function1<Byte, Short>, comparator: kotlin.Comparator<Function1<Byte, Short>>): T = TODO()
2021-03-12 06:05:22,685 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Function1<Byte, Short>, b: Function1<Byte, Short>, comparator: kotlin.Comparator<Function1<Byte, Short>>): T = TODO()
2021-03-12 06:05:23,054 [main:302] - generating value of type = Function1<Byte, Short> false depth = 4
2021-03-12 06:05:23,054 [main:302] - generating value of type = Short true depth = 5
2021-03-12 06:05:23,055 [main:302] - generating value of type = Function1<Byte, Short> false depth = 4
2021-03-12 06:05:23,055 [main:302] - generating value of type = Short true depth = 5
2021-03-12 06:05:23,055 [main:302] - generating value of type = Comparator<Function1<Byte, Short>> false depth = 4
2021-03-12 06:05:23,167 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<Function1<Byte, Short>>): Comparator<Function1<Byte, Short>> = TODO()
2021-03-12 06:05:23,168 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<Function1<Byte, Short>>): Comparator<Function1<Byte, Short>> = TODO()
2021-03-12 06:05:23,431 [main:302] - generating value of type = Comparator<Function1<Byte, Short>> false depth = 7
2021-03-12 06:05:23,520 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<Function1<Byte, Short>> = TODO()
2021-03-12 06:05:23,521 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<Function1<Byte, Short>> = TODO()
2021-03-12 06:05:23,630 [main:95] - GENERATED = reverseOrder<Function1<Byte, Short>>()
2021-03-12 06:05:23,631 [main:95] - GENERATED = nullsLast<Function1<Byte, Short>>(reverseOrder<Function1<Byte, Short>>())
2021-03-12 06:05:23,631 [main:95] - GENERATED = maxOf<Function1<Byte, Short>>({a: Byte -> -11226}, {a: Byte -> -356}, nullsLast<Function1<Byte, Short>>(reverseOrder<Function1<Byte, Short>>()))
2021-03-12 06:05:23,633 [main:117] - GENERATED CALL = (list).getOrElse(-1944548719, {a: Int -> maxOf<Function1<Byte, Short>>({a: Byte -> -11226}, {a: Byte -> -356}, nullsLast<Function1<Byte, Short>>(reverseOrder<Function1<Byte, Short>>()))})
2021-03-12 06:05:23,633 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d6e48c6]]
2021-03-12 06:05:23,634 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d6e48c6]
2021-03-12 06:05:23,634 [main:117] - GENERATED CALL = (list).min()
2021-03-12 06:05:23,634 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]]
2021-03-12 06:05:23,634 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]
2021-03-12 06:05:23,635 [main:117] - GENERATED CALL = (list).component1()
2021-03-12 06:05:23,635 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ce2e026]]
2021-03-12 06:05:23,635 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ce2e026]
2021-03-12 06:05:23,715 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:05:23,812 [main:43] - GENERATING CALL OF fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 06:05:23,814 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 06:05:24,014 [main:385] - Cant generate call of fun <T> compareByDescending(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 06:05:24,014 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ce2e026]
2021-03-12 06:05:24,014 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b98cd2], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]]
2021-03-12 06:05:24,015 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b98cd2]
2021-03-12 06:05:24,103 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:24,104 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-12 06:05:24,190 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:05:24,277 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:24,370 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:24,371 [main:117] - GENERATED CALL = (list).get(-1754059895).replaceAfter('è¬', "ebiwy", "xcfbp")
2021-03-12 06:05:24,371 [main:61] - replacement of a of type String is (list).iterator().next()
2021-03-12 06:05:24,450 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:24,450 [main:66] - Compilation checking started
2021-03-12 06:05:24,822 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> (list).iterator().next() +b}
}


2021-03-12 06:05:24,823 [main:53] - replacing (accumulator, R)
2021-03-12 06:05:24,823 [main:50] - replacing accumulator R
2021-03-12 06:05:24,823 [main:54] - Getting value of type R
2021-03-12 06:05:24,939 [main:302] - generating value of type = R false depth = 0
2021-03-12 06:05:25,146 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->UByte): R = TODO()
2021-03-12 06:05:25,148 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->UByte): R = TODO()
2021-03-12 06:05:25,467 [main:302] - generating value of type = Any false depth = 3
2021-03-12 06:05:25,467 [main:302] - generating value of type = Function0<UByte> false depth = 3
2021-03-12 06:05:25,467 [main:302] - generating value of type = UByte true depth = 4
2021-03-12 06:05:25,468 [main:95] - GENERATED = synchronized<UByte>("eeexc", { 63.toUByte()})
2021-03-12 06:05:25,469 [main:58] - GENERATED VALUE OF TYPE R = synchronized<UByte>("eeexc", { 63.toUByte()})
2021-03-12 06:05:25,469 [main:61] - GENERATED IS CALL =true
2021-03-12 06:05:25,470 [main:67] - randomType = String
2021-03-12 06:05:25,571 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:25,614 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:05:25,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:25,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:25,799 [main:149] - GENERATING call of type public inline fun <R> kotlin.CharSequence.foldIndexed(initial: R, operation: (index: kotlin.Int, acc: R, kotlin.Char) -> R): R defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cd24be6]
2021-03-12 06:05:25,899 [main:302] - generating value of type = Function3<[@kotlin.ParameterName] Int, [@kotlin.ParameterName] R, Char, R> false depth = 0
2021-03-12 06:05:25,900 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:05:26,326 [main:43] - GENERATING CALL OF fun <R> run(block: ()->LinkedHashMap<String, Float>): R = TODO()
2021-03-12 06:05:26,328 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->LinkedHashMap<String, Float>): R = TODO()
2021-03-12 06:05:26,538 [main:302] - generating value of type = Function0<LinkedHashMap<String, Float>> false depth = 4
2021-03-12 06:05:26,538 [main:302] - generating value of type = LinkedHashMap<String, Float> false depth = 5
2021-03-12 06:05:26,640 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Strg, Float> = TODO()
2021-03-12 06:05:26,642 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Strg, Float> = TODO()
2021-03-12 06:05:26,740 [main:95] - GENERATED = linkedMapOf<String, Float>()
2021-03-12 06:05:26,741 [main:95] - GENERATED = run<LinkedHashMap<String, Float>>({ linkedMapOf<String, Float>()})
2021-03-12 06:05:26,742 [main:78] - Generated call from random type = ("ybypt").subSequence(519634007, -1280642280).foldIndexed(initial, {a: Int, b: R, c: Char -> run<LinkedHashMap<String, Float>>({ linkedMapOf<String, Float>()})})
2021-03-12 06:05:26,742 [main:106] - GETTING R from R
2021-03-12 06:05:26,747 [main:61] - replacement of accumulator of type R is accumulator
2021-03-12 06:05:26,843 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:05:26,844 [main:53] - replacing (element, T)
2021-03-12 06:05:26,845 [main:50] - replacing element T
2021-03-12 06:05:26,845 [main:54] - Getting value of type T
2021-03-12 06:05:26,961 [main:302] - generating value of type = T false depth = 0
2021-03-12 06:05:27,363 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: ArrayDeque<UByte?>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 06:05:27,364 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: ArrayDeque<UByte?>, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 06:05:27,569 [main:302] - generating value of type = ArrayDeque<UByte?> false depth = 3
2021-03-12 06:05:27,680 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UByte?> = TODO()
2021-03-12 06:05:27,681 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<UByte?> = TODO()
2021-03-12 06:05:27,913 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:05:27,913 [main:95] - GENERATED = ArrayDeque<UByte?>(252293710)
2021-03-12 06:05:27,914 [main:302] - generating value of type = Function0<Any> false depth = 3
2021-03-12 06:05:27,914 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:05:27,915 [main:95] - GENERATED = requireNotNull<ArrayDeque<UByte?>>(ArrayDeque<UByte?>(252293710), { "dpmhw"})
2021-03-12 06:05:27,915 [main:58] - GENERATED VALUE OF TYPE T = requireNotNull<ArrayDeque<UByte?>>(ArrayDeque<UByte?>(252293710), { "dpmhw"})
2021-03-12 06:05:27,915 [main:61] - GENERATED IS CALL =true
2021-03-12 06:05:28,021 [main:67] - randomType = UByte
2021-03-12 06:05:28,114 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:05:28,199 [main:106] - GETTING T from R
2021-03-12 06:05:28,207 [main:106] - GETTING T from Boolean
2021-03-12 06:05:28,223 [main:106] - GETTING T from Function2<R, T, R>
2021-03-12 06:05:28,239 [main:106] - GETTING T from R
2021-03-12 06:05:28,239 [main:61] - replacement of element of type T is requireNotNull<ArrayDeque<UByte?>>(ArrayDeque<UByte?>(252293710), { "dpmhw"})
2021-03-12 06:05:28,332 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:05:28,333 [main:66] - Compilation checking started
2021-03-12 06:05:28,627 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, requireNotNull<ArrayDeque<UByte?>>(ArrayDeque<UByte?>(252293710), { "dpmhw"}))
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> (list).iterator().next() +b}
}


2021-03-12 06:05:28,628 [main:53] - replacing (operation(accumulator, element), R)
2021-03-12 06:05:28,628 [main:50] - replacing operation(accumulator, element) R
2021-03-12 06:05:28,629 [main:54] - Getting value of type R
2021-03-12 06:05:28,755 [main:302] - generating value of type = R false depth = 0
2021-03-12 06:05:29,177 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: UByte, block: T.()->LinkedHashSet<Int>): R = TODO()
2021-03-12 06:05:29,179 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: UByte, block: T.()->LinkedHashSet<Int>): R = TODO()
2021-03-12 06:05:29,382 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 06:05:29,383 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, LinkedHashSet<Int>> false depth = 3
2021-03-12 06:05:29,383 [main:302] - generating value of type = LinkedHashSet<Int> false depth = 4
2021-03-12 06:05:29,492 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Int> = TODO()
2021-03-12 06:05:29,494 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Int> = TODO()
2021-03-12 06:05:29,634 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-12 06:05:29,635 [main:95] - GENERATED = with<UByte, LinkedHashSet<Int>>(37.toUByte(), { linkedSetOf<Int>()})
2021-03-12 06:05:29,635 [main:58] - GENERATED VALUE OF TYPE R = with<UByte, LinkedHashSet<Int>>(37.toUByte(), { linkedSetOf<Int>()})
2021-03-12 06:05:29,635 [main:61] - GENERATED IS CALL =true
2021-03-12 06:05:29,750 [main:67] - randomType = ULong
2021-03-12 06:05:29,853 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:05:29,909 [main:106] - GETTING R from Function2<R, T, R>
2021-03-12 06:05:29,923 [main:113] - Case = [public abstract operator fun invoke(p1: R, p2: T): R defined in kotlin.Function2[FunctionInvokeDescriptor@393bcf96]]
2021-03-12 06:05:29,923 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: R, p2: T): R defined in kotlin.Function2[FunctionInvokeDescriptor@393bcf96]
2021-03-12 06:05:30,015 [main:302] - generating value of type = T false depth = 0
2021-03-12 06:05:30,202 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Short): T = TODO()
2021-03-12 06:05:30,203 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Short): T = TODO()
2021-03-12 06:05:30,290 [main:302] - generating value of type = Short true depth = 3
2021-03-12 06:05:30,291 [main:95] - GENERATED = requireNotNull<Short>(-31299)
2021-03-12 06:05:30,291 [main:117] - GENERATED CALL = (operation)?.invoke(accumulator, requireNotNull<Short>(-31299))
2021-03-12 06:05:30,291 [main:61] - replacement of operation(accumulator, element) of type R is (operation)?.invoke(accumulator, requireNotNull<Short>(-31299))
2021-03-12 06:05:30,381 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:05:30,382 [main:66] - Compilation checking started
2021-03-12 06:05:30,637 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = (operation)?.invoke(accumulator, requireNotNull<Short>(-31299))
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> (list).iterator().next() +b}
}


2021-03-12 06:05:30,638 [main:53] - replacing (accumulator, R)
2021-03-12 06:05:30,638 [main:50] - replacing accumulator R
2021-03-12 06:05:30,638 [main:54] - Getting value of type R
2021-03-12 06:05:30,730 [main:302] - generating value of type = R false depth = 0
2021-03-12 06:05:31,541 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Sequence<UByte?>, block: T.()->Pair<Float?, Int>): R = TODO()
2021-03-12 06:05:31,543 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Sequence<UByte?>, block: T.()->Pair<Float?, Int>): R = TODO()
2021-03-12 06:05:31,738 [main:302] - generating value of type = Sequence<UByte?> false depth = 3
2021-03-12 06:05:31,844 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: UByte?): Sequence<UByte?> = TODO()
2021-03-12 06:05:31,846 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: UByte?): Sequence<UByte?> = TODO()
2021-03-12 06:05:31,939 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 06:05:31,940 [main:95] - GENERATED = sequenceOf<UByte?>(29.toUByte())
2021-03-12 06:05:31,940 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, Pair<Float?, Int>> false depth = 3
2021-03-12 06:05:31,941 [main:302] - generating value of type = Pair<Float?, Int> false depth = 4
2021-03-12 06:05:32,040 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Float?, second: Int): Pair<Float?, Int> = TODO()
2021-03-12 06:05:32,042 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Float?, second: Int): Pair<Float?, Int> = TODO()
2021-03-12 06:05:32,132 [main:302] - generating value of type = Int true depth = 7
2021-03-12 06:05:32,133 [main:95] - GENERATED = Pair<Float?, Int>(null, 333167121)
2021-03-12 06:05:32,133 [main:95] - GENERATED = with<Sequence<UByte?>, Pair<Float?, Int>>(sequenceOf<UByte?>(29.toUByte()), { Pair<Float?, Int>(null, 333167121)})
2021-03-12 06:05:32,133 [main:58] - GENERATED VALUE OF TYPE R = with<Sequence<UByte?>, Pair<Float?, Int>>(sequenceOf<UByte?>(29.toUByte()), { Pair<Float?, Int>(null, 333167121)})
2021-03-12 06:05:32,134 [main:61] - GENERATED IS CALL =true
2021-03-12 06:05:32,528 [main:67] - randomType = Pair<Char?, Char>
2021-03-12 06:05:32,624 [main:302] - generating value of type = Pair<Char?, Char> false depth = 0
2021-03-12 06:05:32,719 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char?, second: Char): Pair<Char?, Char> = TODO()
2021-03-12 06:05:32,720 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char?, second: Char): Pair<Char?, Char> = TODO()
2021-03-12 06:05:32,800 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:05:32,801 [main:302] - generating value of type = Char true depth = 3
2021-03-12 06:05:32,801 [main:95] - GENERATED = Pair<Char?, Char>('ã¥¦', 'æ£')
2021-03-12 06:05:32,828 [main:106] - GETTING R from Function2<R, T, R>
2021-03-12 06:05:32,851 [main:113] - Case = [public abstract operator fun invoke(p1: R, p2: T): R defined in kotlin.Function2[FunctionInvokeDescriptor@393bcf96]]
2021-03-12 06:05:32,851 [main:149] - GENERATING call of type public abstract operator fun invoke(p1: R, p2: T): R defined in kotlin.Function2[FunctionInvokeDescriptor@393bcf96]
2021-03-12 06:05:32,928 [main:302] - generating value of type = T false depth = 0
2021-03-12 06:05:33,091 [main:43] - GENERATING CALL OF fun <T> minOf(a: UByte, other: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-12 06:05:33,092 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: UByte, other: UByte, comparator: kotlin.Comparator<UByte>): T = TODO()
2021-03-12 06:05:33,290 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 06:05:33,290 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 06:05:33,291 [main:302] - generating value of type = Comparator<UByte> false depth = 3
2021-03-12 06:05:33,383 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (UByte)->kotlin.Comparable<*>?): Comparator<UByte> = TODO()
2021-03-12 06:05:33,384 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (UByte)->kotlin.Comparable<*>?): Comparator<UByte> = TODO()
2021-03-12 06:05:33,583 [main:302] - generating value of type = Function1<UByte, Comparable<*>?> false depth = 6
2021-03-12 06:05:33,584 [main:95] - GENERATED = compareBy<UByte>({a: UByte -> null})
2021-03-12 06:05:33,584 [main:95] - GENERATED = minOf<UByte>(31.toUByte(), 30.toUByte(), compareBy<UByte>({a: UByte -> null}))
2021-03-12 06:05:33,585 [main:117] - GENERATED CALL = (operation)?.invoke(accumulator, minOf<UByte>(31.toUByte(), 30.toUByte(), compareBy<UByte>({a: UByte -> null})))
2021-03-12 06:05:33,586 [main:61] - replacement of accumulator of type R is (operation)?.invoke(accumulator, minOf<UByte>(31.toUByte(), 30.toUByte(), compareBy<UByte>({a: UByte -> null})))
2021-03-12 06:05:33,678 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:05:33,678 [main:66] - Compilation checking started
2021-03-12 06:05:34,061 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return (operation)?.invoke(accumulator, minOf<UByte>(31.toUByte(), 30.toUByte(), compareBy<UByte>({a: UByte -> null})))
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> (list).iterator().next() +b}
}


2021-03-12 06:05:34,063 [main:53] - replacing (list.fold2("") {a, b -> (list).iterator().next() +b}, String)
2021-03-12 06:05:34,063 [main:50] - replacing list.fold2("") {a, b -> (list).iterator().next() +b} String
2021-03-12 06:05:34,063 [main:54] - Getting value of type String
2021-03-12 06:05:34,162 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:34,162 [main:58] - GENERATED VALUE OF TYPE String = "kxqtc"
2021-03-12 06:05:34,163 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:34,250 [main:67] - randomType = Int
2021-03-12 06:05:34,326 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:34,372 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:05:34,373 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:05:34,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:34,448 [main:78] - Generated call from random type = (-302232020).toLong().toString(2049793817)
2021-03-12 06:05:34,449 [main:106] - GETTING String from Boolean
2021-03-12 06:05:34,462 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:05:34,462 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:05:34,463 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:34,550 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:34,552 [main:117] - GENERATED CALL = (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(2073884683)
2021-03-12 06:05:34,552 [main:61] - replacement of list.fold2("") {a, b -> (list).iterator().next() +b} of type String is "kxqtc"
2021-03-12 06:05:34,628 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:05:34,628 [main:66] - Compilation checking started
2021-03-12 06:05:34,888 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return "kxqtc"
}


2021-03-12 06:05:34,889 [main:53] - replacing (b, String)
2021-03-12 06:05:34,889 [main:50] - replacing b String
2021-03-12 06:05:34,889 [main:54] - Getting value of type String
2021-03-12 06:05:34,977 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:34,978 [main:58] - GENERATED VALUE OF TYPE String = "tbvwb"
2021-03-12 06:05:34,978 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:35,067 [main:67] - randomType = Long
2021-03-12 06:05:35,140 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:05:35,199 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:05:35,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:35,274 [main:78] - Generated call from random type = (-7290899438751032093).toString(307198636)
2021-03-12 06:05:35,274 [main:61] - replacement of b of type String is (-7290899438751032093).toString(307198636)
2021-03-12 06:05:35,356 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:35,357 [main:53] - replacing ("K", String)
2021-03-12 06:05:35,358 [main:50] - replacing "K" String
2021-03-12 06:05:35,358 [main:54] - Getting value of type String
2021-03-12 06:05:35,439 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:35,439 [main:58] - GENERATED VALUE OF TYPE String = "hnfco"
2021-03-12 06:05:35,439 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:35,512 [main:67] - randomType = Byte
2021-03-12 06:05:35,582 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:05:35,620 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@6788b5e7]
2021-03-12 06:05:35,697 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:05:35,698 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:05:35,767 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:35,767 [main:78] - Generated call from random type = (40).div(-1976706318484060379).toString(-1530020662)
2021-03-12 06:05:35,768 [main:106] - GETTING String from Boolean
2021-03-12 06:05:35,779 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:05:35,779 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:05:35,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:35,873 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:35,874 [main:117] - GENERATED CALL = (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(876141736)
2021-03-12 06:05:35,875 [main:61] - replacement of "K" of type String is (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(876141736)
2021-03-12 06:05:35,947 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:35,948 [main:66] - Compilation checking started
2021-03-12 06:05:36,449 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(876141736))
    return "kxqtc"
}


2021-03-12 06:05:36,449 [main:53] - replacing (a, String)
2021-03-12 06:05:36,449 [main:50] - replacing a String
2021-03-12 06:05:36,449 [main:54] - Getting value of type String
2021-03-12 06:05:36,581 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:36,582 [main:58] - GENERATED VALUE OF TYPE String = "bgabl"
2021-03-12 06:05:36,582 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:36,683 [main:67] - randomType = UByte
2021-03-12 06:05:36,786 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:05:36,834 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@9c03f09]
2021-03-12 06:05:36,834 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:05:36,939 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:36,940 [main:78] - Generated call from random type = (51.toUByte()).toLong().toString(-1989671930)
2021-03-12 06:05:36,941 [main:106] - GETTING String from Boolean
2021-03-12 06:05:36,957 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:05:36,957 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:05:36,957 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:37,059 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:37,062 [main:117] - GENERATED CALL = (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(169896283)
2021-03-12 06:05:37,062 [main:61] - replacement of a of type String is (51.toUByte()).toLong().toString(-1989671930)
2021-03-12 06:05:37,197 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:37,198 [main:53] - replacing ("O", String)
2021-03-12 06:05:37,199 [main:50] - replacing "O" String
2021-03-12 06:05:37,199 [main:54] - Getting value of type String
2021-03-12 06:05:37,297 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:37,298 [main:58] - GENERATED VALUE OF TYPE String = "mezyb"
2021-03-12 06:05:37,298 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:37,511 [main:67] - randomType = Double?
2021-03-12 06:05:37,608 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:05:37,663 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:05:37,663 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:37,756 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:37,757 [main:78] - Generated call from random type = (0.916678597595955)?.toInt().toString(610749194)
2021-03-12 06:05:37,757 [main:61] - replacement of "O" of type String is (0.916678597595955)?.toInt().toString(610749194)
2021-03-12 06:05:37,855 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:37,856 [main:66] - Compilation checking started
2021-03-12 06:05:38,282 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(876141736))
    return "kxqtc"
}


2021-03-12 06:05:38,283 [main:53] - replacing ("K", String)
2021-03-12 06:05:38,283 [main:50] - replacing "K" String
2021-03-12 06:05:38,283 [main:54] - Getting value of type String
2021-03-12 06:05:38,390 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:38,391 [main:58] - GENERATED VALUE OF TYPE String = "ptzws"
2021-03-12 06:05:38,391 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:38,537 [main:67] - randomType = Float
2021-03-12 06:05:38,657 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:05:38,708 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@562dd50]
2021-03-12 06:05:38,709 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:05:38,818 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:38,819 [main:78] - Generated call from random type = (0.49607587f).toByte().toString(-1125142472)
2021-03-12 06:05:38,821 [main:106] - GETTING String from Boolean
2021-03-12 06:05:38,834 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:05:38,834 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:05:38,835 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:38,943 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:38,944 [main:117] - GENERATED CALL = (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(904107818)
2021-03-12 06:05:38,944 [main:61] - replacement of "K" of type String is "ptzws"
2021-03-12 06:05:39,050 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:05:39,051 [main:53] - replacing (a, String)
2021-03-12 06:05:39,051 [main:50] - replacing a String
2021-03-12 06:05:39,051 [main:54] - Getting value of type String
2021-03-12 06:05:39,153 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:39,154 [main:58] - GENERATED VALUE OF TYPE String = "vbtel"
2021-03-12 06:05:39,154 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:39,432 [main:67] - randomType = UInt?
2021-03-12 06:05:39,547 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:05:39,608 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@428fdf21]
2021-03-12 06:05:39,609 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:05:39,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:39,723 [main:78] - Generated call from random type = (591909657.toUInt())?.toLong().toString(237739963)
2021-03-12 06:05:39,723 [main:61] - replacement of a of type String is (591909657.toUInt())?.toLong().toString(237739963)
2021-03-12 06:05:39,819 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:39,820 [main:53] - replacing ("K", String)
2021-03-12 06:05:39,820 [main:50] - replacing "K" String
2021-03-12 06:05:39,820 [main:54] - Getting value of type String
2021-03-12 06:05:39,921 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:39,922 [main:58] - GENERATED VALUE OF TYPE String = "jdkwd"
2021-03-12 06:05:39,922 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:40,339 [main:67] - randomType = Sequence<ULong?>
2021-03-12 06:05:40,340 [main:106] - GETTING String from Boolean
2021-03-12 06:05:40,354 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:05:40,354 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:05:40,355 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:40,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:40,459 [main:117] - GENERATED CALL = (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(669890972)
2021-03-12 06:05:40,459 [main:61] - replacement of "K" of type String is (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(669890972)
2021-03-12 06:05:40,563 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:40,564 [main:53] - replacing ("K", String)
2021-03-12 06:05:40,564 [main:50] - replacing "K" String
2021-03-12 06:05:40,564 [main:54] - Getting value of type String
2021-03-12 06:05:40,667 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:05:40,668 [main:58] - GENERATED VALUE OF TYPE String = "bqsqv"
2021-03-12 06:05:40,668 [main:61] - GENERATED IS CALL =false
2021-03-12 06:05:40,785 [main:67] - randomType = UShort
2021-03-12 06:05:40,914 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:05:40,964 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:05:41,072 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:41,073 [main:78] - Generated call from random type = (1049.toUShort()).toString(-1733403282)
2021-03-12 06:05:41,074 [main:106] - GETTING String from Boolean
2021-03-12 06:05:41,089 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:05:41,089 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:05:41,210 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:05:41,211 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:05:41,339 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:05:41,341 [main:117] - GENERATED CALL = (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(true).toString(1919960951)
2021-03-12 06:05:41,341 [main:61] - replacement of "K" of type String is "bqsqv"
2021-03-12 06:05:41,472 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:05:41,580 [main:119] - TRYING TO REPLACE CONSTANT 876141736
2021-03-12 06:05:41,692 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:05:41,693 [main:66] - Compilation checking started
2021-03-12 06:05:42,046 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:42,046 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 06:05:42,150 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:05:42,151 [main:66] - Compilation checking started
2021-03-12 06:05:42,559 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:42,559 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 06:05:42,670 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:05:42,671 [main:66] - Compilation checking started
2021-03-12 06:05:42,976 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true}), {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:42,976 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 06:05:43,105 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:05:43,106 [main:66] - Compilation checking started
2021-03-12 06:05:43,393 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:43,393 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 06:05:43,507 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:05:43,508 [main:66] - Compilation checking started
2021-03-12 06:05:43,958 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:43,959 [main:119] - TRYING TO REPLACE CONSTANT 762881974
2021-03-12 06:05:44,068 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:05:44,068 [main:66] - Compilation checking started
2021-03-12 06:05:44,491 [main:119] - TRYING TO REPLACE CONSTANT 762881974
2021-03-12 06:05:44,602 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:05:44,603 [main:66] - Compilation checking started
2021-03-12 06:05:44,863 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(toInt(), {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:44,863 [main:119] - TRYING TO REPLACE CONSTANT 1406032740
2021-03-12 06:05:45,012 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:05:45,013 [main:66] - Compilation checking started
2021-03-12 06:05:45,428 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 762881974.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:45,428 [main:119] - TRYING TO REPLACE CONSTANT 1406032740
2021-03-12 06:05:45,546 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:05:45,547 [main:66] - Compilation checking started
2021-03-12 06:05:45,850 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf((0.916678597595955)?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 762881974.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:45,851 [main:119] - TRYING TO REPLACE CONSTANT 0.916678597595955
2021-03-12 06:05:46,001 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 06:05:46,002 [main:66] - Compilation checking started
2021-03-12 06:05:46,387 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf(((0.916678597595955))?.toInt().toString(610749194), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 762881974.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:46,387 [main:119] - TRYING TO REPLACE CONSTANT 610749194
2021-03-12 06:05:46,537 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:05:46,537 [main:66] - Compilation checking started
2021-03-12 06:05:46,951 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf(((0.916678597595955))?.toInt().toString(((0.916678597595955))?.toInt()), (setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 762881974.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(true, {a: Boolean, b: ArrayDeque<UInt?> -> true})).compareTo(setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> setOfNotNull<ArrayDeque<UInt?>>(ArrayDeque<UInt?>(List<UInt?>(762881974, {a: Int -> 1406032740.toUInt()}))).fold2<ArrayDeque<UInt?>, Boolean>(false, {a: Boolean, b: ArrayDeque<UInt?> -> true})})).toString(1406032740))
    return "kxqtc"
}


2021-03-12 06:05:46,967 [main:66] - Compilation checking started
2021-03-12 06:05:47,328 [main:41] - AFTER TRY 0 res = //WITH_RUNTIME

import kotlin.collections.*
public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}


2021-03-12 06:05:47,702 [main:43] - GENERATING CALL OF public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:05:47,880 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T, R> Iterable<Char>.fold2(initial: Short, operation: (Short, Char) -> Short): Short {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:05:48,070 [main:302] - generating value of type = Short true depth = 1
2021-03-12 06:05:48,071 [main:302] - generating value of type = Function2<Short, Char, Short> false depth = 1
2021-03-12 06:05:48,071 [main:302] - generating value of type = Short true depth = 2
2021-03-12 06:05:48,071 [main:302] - generating value of type = Iterable<Char> false depth = 1
2021-03-12 06:05:48,163 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(element: Char): Iterable<Char> = TODO()
2021-03-12 06:05:48,165 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(element: Char): Iterable<Char> = TODO()
2021-03-12 06:05:48,269 [main:302] - generating value of type = Char true depth = 4
2021-03-12 06:05:48,270 [main:95] - GENERATED = listOfNotNull<Char>('à¦º')
2021-03-12 06:05:48,270 [main:95] - GENERATED = listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})
2021-03-12 06:05:48,364 [main:43] - Try â0
2021-03-12 06:06:02,694 [main:48] - Already checked
2021-03-12 06:06:06,509 [main:69] - Trying to insert fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
2021-03-12 06:06:06,621 [main:66] - Compilation checking started
2021-03-12 06:06:07,829 [main:103] - Trying to change 214 nodes
2021-03-12 06:06:07,830 [main:107] - replacing (c, Continuation<*>)
2021-03-12 06:06:07,832 [main:50] - replacing c Continuation<*>
2021-03-12 06:06:07,832 [main:54] - Getting value of type Continuation<*>
2021-03-12 06:06:08,018 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-12 06:06:08,201 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 06:06:08,205 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 06:06:08,754 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:06:08,953 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:08,959 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:09,343 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:06:09,586 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:09,591 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:10,169 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 06:06:10,357 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:10,361 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:10,922 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:10,923 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:10,923 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:10,923 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-12 06:06:10,923 [main:58] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-12 06:06:11,135 [main:67] - randomType = Map<Int, Boolean>
2021-03-12 06:06:11,137 [main:106] - GETTING Continuation<*> from Short
2021-03-12 06:06:11,182 [main:106] - GETTING Continuation<*> from List<String>
2021-03-12 06:06:11,221 [main:111] - Cant find and generate replacement for c type Continuation<*>
2021-03-12 06:06:11,221 [main:107] - replacing ({
            // no suspension
            fu0 {
                prope3 = "OK"
            }

            // 1 suspension
            fu0 {
                if (fu5() != "56") return@fu0
                prope3 = "OK"
            }

            // 2 suspensions
            fu0 {
                if (fu5() != "56") return@fu0
                fu5()
                prope3 = "OK"
            }
        }, Function0<Unit>)
2021-03-12 06:06:11,222 [main:50] - replacing {
            // no suspension
            fu0 {
                prope3 = "OK"
            }

            // 1 suspension
            fu0 {
                if (fu5() != "56") return@fu0
                prope3 = "OK"
            }

            // 2 suspensions
            fu0 {
                if (fu5() != "56") return@fu0
                fu5()
                prope3 = "OK"
            }
        } Function0<Unit>
2021-03-12 06:06:11,222 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:06:11,397 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:06:11,400 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:06:11,580 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:06:11,585 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:06:12,021 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:06:12,024 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:06:12,026 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:06:12,026 [main:95] - GENERATED = require(true, { "dfrbo"})
2021-03-12 06:06:12,026 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "dfrbo"})}
2021-03-12 06:06:12,027 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:12,343 [main:67] - randomType = Sequence<UInt>
2021-03-12 06:06:12,344 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:06:12,394 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:06:12,431 [main:114] - replacement of {
            // no suspension
            fu0 {
                prope3 = "OK"
            }

            // 1 suspension
            fu0 {
                if (fu5() != "56") return@fu0
                prope3 = "OK"
            }

            // 2 suspensions
            fu0 {
                if (fu5() != "56") return@fu0
                fu5()
                prope3 = "OK"
            }
        } of type Function0<Unit> is { require(true, { "dfrbo"})}
2021-03-12 06:06:12,587 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:06:12,588 [main:66] - Compilation checking started
2021-03-12 06:06:13,142 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    while (prope4.fu6()) {
        if (!prope5.fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if (checkFinished && !prope9) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:13,145 [main:107] - replacing (checkFinished && !prope9, Boolean)
2021-03-12 06:06:13,146 [main:50] - replacing checkFinished && !prope9 Boolean
2021-03-12 06:06:13,146 [main:54] - Getting value of type Boolean
2021-03-12 06:06:13,272 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:06:13,274 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:06:13,275 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:13,284 [main:67] - randomType = Kla4
2021-03-12 06:06:13,418 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:06:13,420 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:06:13,428 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@447a9634]
2021-03-12 06:06:13,569 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:13,569 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:06:13,695 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:06:13,697 [main:78] - Generated call from random type = (Kla4()).equals("ymmhi").xor(false)
2021-03-12 06:06:13,698 [main:106] - GETTING Boolean from Short
2021-03-12 06:06:13,757 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]]
2021-03-12 06:06:13,757 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:06:13,897 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:13,900 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]
2021-03-12 06:06:14,097 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:14,098 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(-96).equals("mrnpk")
2021-03-12 06:06:14,098 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1351dc8c]]
2021-03-12 06:06:14,098 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:06:14,098 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@1351dc8c]
2021-03-12 06:06:14,255 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:14,255 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().equals("aoser")
2021-03-12 06:06:14,256 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]]
2021-03-12 06:06:14,256 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:06:14,396 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:06:14,398 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]
2021-03-12 06:06:14,399 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.9791193562199066).isFinite()
2021-03-12 06:06:14,399 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]]
2021-03-12 06:06:14,399 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:06:14,543 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:06:14,546 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]
2021-03-12 06:06:14,693 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:14,694 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.5288346376826607).equals("aqric")
2021-03-12 06:06:14,694 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66dbc869]]
2021-03-12 06:06:14,694 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:14,694 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66dbc869]
2021-03-12 06:06:14,694 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isISOControl()
2021-03-12 06:06:14,695 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:06:14,695 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:14,909 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:14,912 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:06:15,038 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:15,039 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-20).equals("aogdc")
2021-03-12 06:06:15,039 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:06:15,039 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:06:15,202 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:15,203 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:06:15,337 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:06:15,340 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("qsupv").and(true)
2021-03-12 06:06:15,340 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]]
2021-03-12 06:06:15,340 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:15,340 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]
2021-03-12 06:06:15,340 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isDigit()
2021-03-12 06:06:15,340 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53619270]]
2021-03-12 06:06:15,340 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:15,341 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53619270]
2021-03-12 06:06:15,341 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isHighSurrogate()
2021-03-12 06:06:15,341 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:06:15,341 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:06:15,491 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:15,492 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:06:15,492 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()
2021-03-12 06:06:15,492 [main:114] - replacement of checkFinished && !prope9 of type Boolean is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()
2021-03-12 06:06:15,633 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:15,633 [main:66] - Compilation checking started
2021-03-12 06:06:16,315 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    while (prope4.fu6()) {
        if (!prope5.fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:16,319 [main:107] - replacing (prope2!!, Continuation<String>)
2021-03-12 06:06:16,320 [main:50] - replacing prope2!! Continuation<String>
2021-03-12 06:06:16,320 [main:54] - Getting value of type Continuation<String>
2021-03-12 06:06:16,522 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:06:16,688 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:06:16,693 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:06:17,243 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:06:17,393 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:17,396 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:17,754 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:06:17,935 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:17,941 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:18,516 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-12 06:06:18,723 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:18,738 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:19,325 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-12 06:06:19,511 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:19,517 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:20,042 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:20,042 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:06:20,043 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:20,043 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:20,043 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:06:20,043 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 06:06:20,048 [main:67] - randomType = String
2021-03-12 06:06:20,230 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:20,261 [main:106] - GETTING Continuation<String> from List<String>
2021-03-12 06:06:20,310 [main:106] - GETTING Continuation<String> from Short
2021-03-12 06:06:20,357 [main:111] - Cant find and generate replacement for prope2!! type Continuation<String>
2021-03-12 06:06:20,357 [main:107] - replacing (prope5, Kla0)
2021-03-12 06:06:20,358 [main:50] - replacing prope5 Kla0
2021-03-12 06:06:20,358 [main:54] - Getting value of type Kla0
2021-03-12 06:06:20,526 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:20,528 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:20,528 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:20,528 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:20,704 [main:67] - randomType = Float
2021-03-12 06:06:20,872 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:06:20,927 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:20,984 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:21,022 [main:114] - replacement of prope5 of type Kla0 is Kla0()
2021-03-12 06:06:21,174 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:21,174 [main:66] - Compilation checking started
2021-03-12 06:06:21,757 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:21,759 [main:107] - replacing ("O", String)
2021-03-12 06:06:21,760 [main:50] - replacing "O" String
2021-03-12 06:06:21,760 [main:54] - Getting value of type String
2021-03-12 06:06:21,945 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:21,947 [main:58] - GENERATED VALUE OF TYPE String = "mdvgf"
2021-03-12 06:06:21,947 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:22,094 [main:67] - randomType = List<Boolean>
2021-03-12 06:06:22,095 [main:106] - GETTING String from Short
2021-03-12 06:06:22,139 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:06:22,139 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:22,139 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:06:22,140 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:06:22,140 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:06:22,140 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:06:22,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:22,304 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(-676730618)
2021-03-12 06:06:22,305 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:06:22,305 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:06:22,452 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:06:22,455 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:06:22,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:22,658 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(-567089440569574355).toString(-224875750)
2021-03-12 06:06:22,658 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:06:22,658 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:06:22,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:06:22,836 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:22,838 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(-1079488064)
2021-03-12 06:06:22,839 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:06:22,839 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:22,839 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:06:22,839 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:06:22,840 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:06:22,840 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:22,840 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:06:22,984 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:22,987 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("ywkhj")
2021-03-12 06:06:22,989 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:06:22,989 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:06:22,989 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:06:23,124 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:23,127 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1779818784)
2021-03-12 06:06:23,127 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:06:23,127 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:06:23,127 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:06:23,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:23,270 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(429389246)
2021-03-12 06:06:23,270 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:06:23,270 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:23,407 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:23,410 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:06:23,548 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:23,550 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-33).toString(1277912884)
2021-03-12 06:06:23,550 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:06:23,551 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:23,551 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:06:23,551 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:06:23,551 [main:114] - replacement of "O" of type String is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1779818784)
2021-03-12 06:06:23,690 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:23,691 [main:66] - Compilation checking started
2021-03-12 06:06:24,119 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1779818784)

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:24,123 [main:107] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-12 06:06:24,123 [main:50] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-12 06:06:24,123 [main:54] - Getting value of type String
2021-03-12 06:06:24,276 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:24,278 [main:58] - GENERATED VALUE OF TYPE String = "ndblq"
2021-03-12 06:06:24,278 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:24,287 [main:67] - randomType = Kla0
2021-03-12 06:06:24,429 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:24,431 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:24,445 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]
2021-03-12 06:06:24,445 [main:78] - Generated call from random type = (Kla0()).prope3.capitalize()
2021-03-12 06:06:24,446 [main:106] - GETTING String from List<String>
2021-03-12 06:06:24,482 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6294193]]
2021-03-12 06:06:24,482 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:24,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:24,641 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6294193]
2021-03-12 06:06:24,795 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:24,798 [main:117] - GENERATED CALL = (list).get(1214707219).drop(516442854)
2021-03-12 06:06:24,799 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]]
2021-03-12 06:06:24,799 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:24,954 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:24,965 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]
2021-03-12 06:06:25,094 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:06:25,249 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:25,382 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:25,384 [main:117] - GENERATED CALL = (list).get(1840146046).replaceAfterLast('ï', "ctrll", "qynbo")
2021-03-12 06:06:25,385 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]]
2021-03-12 06:06:25,385 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:25,520 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:25,522 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]
2021-03-12 06:06:25,523 [main:117] - GENERATED CALL = (list).get(-1880666744).decapitalize()
2021-03-12 06:06:25,523 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]]
2021-03-12 06:06:25,523 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:25,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:25,658 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]
2021-03-12 06:06:25,658 [main:117] - GENERATED CALL = (list).get(-1124859353).lowercase()
2021-03-12 06:06:25,659 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]]
2021-03-12 06:06:25,659 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]
2021-03-12 06:06:25,659 [main:117] - GENERATED CALL = (list).firstOrNull()
2021-03-12 06:06:25,659 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]]
2021-03-12 06:06:25,659 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:25,798 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:25,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]
2021-03-12 06:06:25,801 [main:117] - GENERATED CALL = (list).get(-1914815852).uppercase()
2021-03-12 06:06:25,801 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]]
2021-03-12 06:06:25,801 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:25,941 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:25,943 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]
2021-03-12 06:06:25,943 [main:117] - GENERATED CALL = (list).get(1784479852).toLowerCase()
2021-03-12 06:06:25,943 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]]
2021-03-12 06:06:25,944 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:26,078 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:26,080 [main:117] - GENERATED CALL = (list).get(1460393799)
2021-03-12 06:06:26,081 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc50c30]]
2021-03-12 06:06:26,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc50c30]
2021-03-12 06:06:26,081 [main:117] - GENERATED CALL = (list).component5()
2021-03-12 06:06:26,081 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]]
2021-03-12 06:06:26,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]
2021-03-12 06:06:26,081 [main:117] - GENERATED CALL = (list).component1()
2021-03-12 06:06:26,081 [main:114] - replacement of " is not subtype of CoroutineStackFrame" of type String is (Kla0()).prope3.capitalize()
2021-03-12 06:06:26,215 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:26,216 [main:66] - Compilation checking started
2021-03-12 06:06:26,797 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        prope8 = 0
        prope9 = false
        prope10 = {}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:26,799 [main:107] - replacing ({}, Function0<Unit>)
2021-03-12 06:06:26,800 [main:50] - replacing {} Function0<Unit>
2021-03-12 06:06:26,800 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:06:26,983 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:06:26,985 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:06:27,123 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:06:27,126 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:06:27,597 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:06:27,609 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:06:27,612 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:06:27,612 [main:95] - GENERATED = require(true, { "khpip"})
2021-03-12 06:06:27,612 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "khpip"})}
2021-03-12 06:06:27,612 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:27,625 [main:67] - randomType = Kla0
2021-03-12 06:06:27,755 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:27,758 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:27,767 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:06:27,794 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:06:27,823 [main:114] - replacement of {} of type Function0<Unit> is { require(true, { "khpip"})}
2021-03-12 06:06:27,959 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:06:27,959 [main:66] - Compilation checking started
2021-03-12 06:06:28,566 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != "OK") throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:28,570 [main:107] - replacing ("OK", String)
2021-03-12 06:06:28,571 [main:50] - replacing "OK" String
2021-03-12 06:06:28,571 [main:54] - Getting value of type String
2021-03-12 06:06:28,724 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:28,727 [main:58] - GENERATED VALUE OF TYPE String = "pyfzd"
2021-03-12 06:06:28,727 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:28,742 [main:67] - randomType = String
2021-03-12 06:06:28,877 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:28,902 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]
2021-03-12 06:06:28,902 [main:78] - Generated call from random type = ("frsse").decapitalize()
2021-03-12 06:06:28,903 [main:106] - GETTING String from Short
2021-03-12 06:06:28,950 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:06:28,950 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:06:28,950 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:06:29,090 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:29,092 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1105335495)
2021-03-12 06:06:29,093 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:06:29,093 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:06:29,093 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:06:29,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:29,237 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(-515341267)
2021-03-12 06:06:29,238 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]]
2021-03-12 06:06:29,238 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:06:29,238 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:06:29,405 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:29,407 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().toString(-1927670188)
2021-03-12 06:06:29,408 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:06:29,408 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:06:29,539 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:06:29,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:06:29,675 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:29,678 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)
2021-03-12 06:06:29,678 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:06:29,678 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:29,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:06:29,678 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:06:29,678 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:06:29,678 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:06:29,678 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:06:29,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:29,810 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(1804900985)
2021-03-12 06:06:29,811 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:06:29,811 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:29,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:06:29,811 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:06:29,811 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:06:29,811 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:29,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:06:29,811 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:06:29,811 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:06:29,811 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:29,947 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:29,949 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:06:30,081 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:30,084 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-26).toString(-868130951)
2021-03-12 06:06:30,084 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:06:30,084 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:06:30,084 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:06:30,219 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:30,222 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("pgsdk")
2021-03-12 06:06:30,222 [main:114] - replacement of "OK" of type String is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)
2021-03-12 06:06:30,355 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:30,356 [main:66] - Compilation checking started
2021-03-12 06:06:30,953 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (prope4.prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:30,957 [main:107] - replacing (prope4, Kla0)
2021-03-12 06:06:30,957 [main:50] - replacing prope4 Kla0
2021-03-12 06:06:30,957 [main:54] - Getting value of type Kla0
2021-03-12 06:06:31,111 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:31,113 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:31,113 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:31,122 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:31,135 [main:67] - randomType = Kla2
2021-03-12 06:06:31,267 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:06:31,269 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:06:31,287 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:31,311 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:31,340 [main:114] - replacement of prope4 of type Kla0 is Kla0()
2021-03-12 06:06:31,482 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:31,482 [main:66] - Compilation checking started
2021-03-12 06:06:32,088 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:32,092 [main:107] - replacing (i, Int)
2021-03-12 06:06:32,093 [main:50] - replacing i Int
2021-03-12 06:06:32,093 [main:54] - Getting value of type Int
2021-03-12 06:06:32,271 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:32,275 [main:58] - GENERATED VALUE OF TYPE Int = -445025614
2021-03-12 06:06:32,275 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:32,452 [main:67] - randomType = LinkedHashSet<Char>
2021-03-12 06:06:32,602 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 0
2021-03-12 06:06:32,751 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Char> = TODO()
2021-03-12 06:06:32,755 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Char> = TODO()
2021-03-12 06:06:32,926 [main:95] - GENERATED = linkedSetOf<Char>()
2021-03-12 06:06:33,161 [main:149] - GENERATING call of type public open fun add(element: kotlin.Char): kotlin.Boolean defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@6660e4e1]
2021-03-12 06:06:33,360 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:06:33,362 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:06:33,492 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:06:33,495 [main:78] - Generated call from random type = (linkedSetOf<Char>()).add('ì§').compareTo(true)
2021-03-12 06:06:33,495 [main:106] - GETTING Int from List<String>
2021-03-12 06:06:33,519 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@662fad11]]
2021-03-12 06:06:33,519 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@662fad11]
2021-03-12 06:06:33,680 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:33,684 [main:117] - GENERATED CALL = (list).size.plus(98)
2021-03-12 06:06:33,684 [main:113] - Case = [@kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2f95c400]]
2021-03-12 06:06:33,684 [main:149] - GENERATING call of type @kotlin.jvm.JvmName public fun kotlin.collections.Iterable<kotlin.Byte>.sum(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2f95c400]
2021-03-12 06:06:33,684 [main:117] - GENERATED CALL = (list).sum()
2021-03-12 06:06:33,684 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@586415]]
2021-03-12 06:06:33,684 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@586415]
2021-03-12 06:06:33,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:33,823 [main:117] - GENERATED CALL = (list).size.shl(-1771753431)
2021-03-12 06:06:33,823 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]]
2021-03-12 06:06:33,823 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]
2021-03-12 06:06:33,976 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:33,978 [main:117] - GENERATED CALL = (list).size.rem(98)
2021-03-12 06:06:33,978 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]]
2021-03-12 06:06:33,979 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]
2021-03-12 06:06:34,119 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:34,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:34,266 [main:117] - GENERATED CALL = (list).size.coerceIn(441475030, 537808783)
2021-03-12 06:06:34,266 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]]
2021-03-12 06:06:34,266 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]
2021-03-12 06:06:34,406 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:34,409 [main:117] - GENERATED CALL = (list).size.minus(20)
2021-03-12 06:06:34,409 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-12 06:06:34,409 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-12 06:06:34,409 [main:117] - GENERATED CALL = (list).size.takeHighestOneBit()
2021-03-12 06:06:34,410 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-12 06:06:34,410 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:06:34,562 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:06:34,564 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:06:34,695 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:06:34,698 [main:117] - GENERATED CALL = (list).contains("hlyzd").compareTo(true)
2021-03-12 06:06:34,698 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46fe72f0]]
2021-03-12 06:06:34,698 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@46fe72f0]
2021-03-12 06:06:34,698 [main:117] - GENERATED CALL = (list).size.toInt()
2021-03-12 06:06:34,698 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4aacb4]]
2021-03-12 06:06:34,698 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6e4aacb4]
2021-03-12 06:06:34,698 [main:117] - GENERATED CALL = (list).size.unaryMinus()
2021-03-12 06:06:34,698 [main:114] - replacement of i of type Int is (list).size.coerceIn(441475030, 537808783)
2021-03-12 06:06:34,846 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:34,857 [main:66] - Compilation checking started
2021-03-12 06:06:35,497 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:35,500 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:06:35,500 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:06:35,500 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:06:35,697 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:06:35,700 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:06:35,833 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:06:35,836 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:06:36,166 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:06:36,169 [main:95] - GENERATED = require(false)
2021-03-12 06:06:36,169 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 06:06:36,169 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:36,525 [main:67] - randomType = MutableMap<String, Kla2>
2021-03-12 06:06:36,526 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:06:36,569 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:06:36,597 [main:114] - replacement of prope10 of type Function0<Unit> is { require(false)}
2021-03-12 06:06:36,741 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:06:36,742 [main:66] - Compilation checking started
2021-03-12 06:06:37,192 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        { require(false)} = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:37,194 [main:107] - replacing (Kla0(), Kla0)
2021-03-12 06:06:37,195 [main:50] - replacing Kla0() Kla0
2021-03-12 06:06:37,195 [main:54] - Getting value of type Kla0
2021-03-12 06:06:37,341 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:37,343 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:37,344 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:37,344 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:37,361 [main:67] - randomType = Kla0
2021-03-12 06:06:37,487 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:37,489 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:37,500 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:37,523 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:37,551 [main:114] - replacement of Kla0() of type Kla0 is Kla0()
2021-03-12 06:06:37,692 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:37,694 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:06:37,695 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:06:37,695 [main:54] - Getting value of type Int
2021-03-12 06:06:37,836 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:37,838 [main:58] - GENERATED VALUE OF TYPE Int = -1917735754
2021-03-12 06:06:37,838 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:38,159 [main:67] - randomType = UByte?
2021-03-12 06:06:38,306 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:06:38,360 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public open inline fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@663f599f]
2021-03-12 06:06:38,488 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:06:38,490 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:06:38,640 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:38,652 [main:78] - Generated call from random type = (91.toUByte())?.compareTo(30.toUByte()).shr(-2021329756)
2021-03-12 06:06:38,653 [main:106] - GETTING Int from List<String>
2021-03-12 06:06:38,688 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@586415]]
2021-03-12 06:06:38,688 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@586415]
2021-03-12 06:06:38,815 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:38,817 [main:117] - GENERATED CALL = (list).size.shl(-2119512720)
2021-03-12 06:06:38,817 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.binarySearch(element: T, comparator: kotlin.Comparator<in T>, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@198ae772]]
2021-03-12 06:06:38,818 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.binarySearch(element: T, comparator: kotlin.Comparator<in T>, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@198ae772]
2021-03-12 06:06:39,104 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:06:39,418 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (T)->Float): Comparator<T> = TODO()
2021-03-12 06:06:39,422 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (T)->Float): Comparator<T> = TODO()
2021-03-12 06:06:39,911 [main:302] - generating value of type = Comparator<Float> false depth = 3
2021-03-12 06:06:40,063 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<Float>): Comparator<Float> = TODO()
2021-03-12 06:06:40,067 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<Float>): Comparator<Float> = TODO()
2021-03-12 06:06:40,390 [main:302] - generating value of type = Comparator<Float> false depth = 6
2021-03-12 06:06:40,573 [main:43] - GENERATING CALL OF fun <T> nullsLast(comparator: kotlin.Comparator<Float>): Comparator<Float> = TODO()
2021-03-12 06:06:40,577 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(comparator: kotlin.Comparator<Float>): Comparator<Float> = TODO()
2021-03-12 06:06:40,937 [main:302] - generating value of type = Comparator<Float> false depth = 9
2021-03-12 06:06:41,084 [main:43] - GENERATING CALL OF fun <T, K> compareByDescending(comparator: kotlin.Comparator<Char>, selector: (Float)->Char): Comparator<Float> = TODO()
2021-03-12 06:06:41,087 [main:61] - WITHOUT TYPE PARAMS = fun <T, K> compareByDescending(comparator: kotlin.Comparator<Char>, selector: (Float)->Char): Comparator<Float> = TODO()
2021-03-12 06:06:41,578 [main:302] - generating value of type = Comparator<Char> false depth = 12
2021-03-12 06:06:41,721 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<Char> = TODO()
2021-03-12 06:06:41,724 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<Char> = TODO()
2021-03-12 06:06:41,903 [main:95] - GENERATED = nullsLast<Char>()
2021-03-12 06:06:41,903 [main:302] - generating value of type = Function1<Float, Char> false depth = 12
2021-03-12 06:06:41,906 [main:302] - generating value of type = Char true depth = 13
2021-03-12 06:06:41,908 [main:95] - GENERATED = compareByDescending<Float, Char>(nullsLast<Char>(), {a: Float -> 'î¿'})
2021-03-12 06:06:41,909 [main:95] - GENERATED = nullsLast<Float>(compareByDescending<Float, Char>(nullsLast<Char>(), {a: Float -> 'î¿'}))
2021-03-12 06:06:41,909 [main:95] - GENERATED = nullsFirst<Float>(nullsLast<Float>(compareByDescending<Float, Char>(nullsLast<Char>(), {a: Float -> 'î¿'})))
2021-03-12 06:06:41,909 [main:385] - Cant generate call of fun <T, K> compareByDescending(comparator: kotlin.Comparator<Float>, selector: (T)->Float): Comparator<T> = TODO()
2021-03-12 06:06:42,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:42,223 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:42,225 [main:158] - CANT GENERATE PARAMS FOR public fun <T> kotlin.collections.List<T>.binarySearch(element: T, comparator: kotlin.Comparator<in T>, fromIndex: kotlin.Int = ..., toIndex: kotlin.Int = ...): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@198ae772]
2021-03-12 06:06:42,225 [main:113] - Case = [public inline fun <T> kotlin.collections.List<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d426231]]
2021-03-12 06:06:42,225 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.List<T>.indexOfLast(predicate: (T) -> kotlin.Boolean): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@d426231]
2021-03-12 06:06:42,372 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 06:06:42,374 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:06:42,376 [main:117] - GENERATED CALL = (list).indexOfLast({a: T -> true})
2021-03-12 06:06:42,376 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-12 06:06:42,377 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-12 06:06:42,377 [main:117] - GENERATED CALL = (list).size.takeHighestOneBit()
2021-03-12 06:06:42,377 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c322f66]]
2021-03-12 06:06:42,377 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:06:42,515 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:42,517 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6c322f66]
2021-03-12 06:06:42,517 [main:117] - GENERATED CALL = (list).get(-328293678).toInt()
2021-03-12 06:06:42,518 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45d93fbf]]
2021-03-12 06:06:42,518 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.count(): kotlin.Int defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@45d93fbf]
2021-03-12 06:06:42,518 [main:117] - GENERATED CALL = (list).count()
2021-03-12 06:06:42,518 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b5aaf90]]
2021-03-12 06:06:42,518 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b5aaf90]
2021-03-12 06:06:42,658 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:42,660 [main:117] - GENERATED CALL = (list).size.rotateLeft(-1283646594)
2021-03-12 06:06:42,660 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]]
2021-03-12 06:06:42,660 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]
2021-03-12 06:06:42,798 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:42,801 [main:117] - GENERATED CALL = (list).size.minus(-11)
2021-03-12 06:06:42,801 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56dbd054]]
2021-03-12 06:06:42,801 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56dbd054]
2021-03-12 06:06:42,801 [main:117] - GENERATED CALL = (list).size.takeLowestOneBit()
2021-03-12 06:06:42,801 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]]
2021-03-12 06:06:42,801 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]
2021-03-12 06:06:42,801 [main:117] - GENERATED CALL = (list).size.unaryPlus()
2021-03-12 06:06:42,801 [main:114] - replacement of numberOfSuspensions of type Int is (list).size.shl(-2119512720)
2021-03-12 06:06:42,939 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:42,940 [main:66] - Compilation checking started
2021-03-12 06:06:43,531 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:43,534 [main:107] - replacing (this.prope3, Any?)
2021-03-12 06:06:43,534 [main:50] - replacing this.prope3 Any?
2021-03-12 06:06:43,534 [main:54] - Getting value of type Any?
2021-03-12 06:06:43,690 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:06:43,691 [main:58] - GENERATED VALUE OF TYPE Any? = "pkzgt"
2021-03-12 06:06:43,691 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:43,700 [main:67] - randomType = Kla0
2021-03-12 06:06:43,854 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:43,858 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:43,877 [main:106] - GETTING Any? from Short
2021-03-12 06:06:43,928 [main:106] - GETTING Any? from List<String>
2021-03-12 06:06:43,950 [main:114] - replacement of this.prope3 of type Any? is "pkzgt"
2021-03-12 06:06:44,095 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:06:44,095 [main:66] - Compilation checking started
2021-03-12 06:06:44,529 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(prope6)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"pkzgt" = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:44,531 [main:107] - replacing (prope6, Function1<Throwable, Unit>)
2021-03-12 06:06:44,531 [main:50] - replacing prope6 Function1<Throwable, Unit>
2021-03-12 06:06:44,531 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 06:06:44,682 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 06:06:44,684 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:06:44,833 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:06:44,837 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:06:45,334 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:06:45,336 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:06:45,338 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:06:45,339 [main:95] - GENERATED = check(true, { "dqpig"})
2021-03-12 06:06:45,339 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> check(true, { "dqpig"})}
2021-03-12 06:06:45,339 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:45,357 [main:67] - randomType = Kla2
2021-03-12 06:06:45,489 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:06:45,491 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:06:45,515 [main:106] - GETTING Function1<Throwable, Unit> from List<String>
2021-03-12 06:06:45,549 [main:106] - GETTING Function1<Throwable, Unit> from Short
2021-03-12 06:06:45,602 [main:114] - replacement of prope6 of type Function1<Throwable, Unit> is {a: Throwable -> check(true, { "dqpig"})}
2021-03-12 06:06:45,777 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:06:45,777 [main:66] - Compilation checking started
2021-03-12 06:06:46,431 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(prope5, Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:46,433 [main:107] - replacing (prope5, Kla0)
2021-03-12 06:06:46,434 [main:50] - replacing prope5 Kla0
2021-03-12 06:06:46,434 [main:54] - Getting value of type Kla0
2021-03-12 06:06:46,616 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:46,630 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:46,630 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:46,630 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:46,638 [main:67] - randomType = Long
2021-03-12 06:06:46,806 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:06:46,847 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:46,880 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:46,910 [main:114] - replacement of prope5 of type Kla0 is Kla0()
2021-03-12 06:06:47,086 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:47,086 [main:66] - Compilation checking started
2021-03-12 06:06:47,690 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (prope4.prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:47,693 [main:107] - replacing (prope4, Kla0)
2021-03-12 06:06:47,693 [main:50] - replacing prope4 Kla0
2021-03-12 06:06:47,693 [main:54] - Getting value of type Kla0
2021-03-12 06:06:47,843 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:47,846 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:47,846 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:47,846 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:49,284 [main:67] - randomType = Triple<UByte, Kla2?, Function1<Float, Triple<Kla1, Kla0, UByte>>>?
2021-03-12 06:06:49,416 [main:302] - generating value of type = Triple<UByte, Kla2?, Function1<Float, Triple<Kla1, Kla0, UByte>>> false depth = 0
2021-03-12 06:06:49,573 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UByte, second: Kla2?, third: Function1<Float, Triple<Kla1, Kla0, UByte>>): Triple<UByte, Kla2?, Function1<Float, Triple<Kla1, Kla0, UByte>>> = TODO()
2021-03-12 06:06:49,577 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UByte, second: Kla2?, third: Function1<Float, Triple<Kla1, Kla0, UByte>>): Triple<UByte, Kla2?, Function1<Float, Triple<Kla1, Kla0, UByte>>> = TODO()
2021-03-12 06:06:49,725 [main:302] - generating value of type = UByte true depth = 3
2021-03-12 06:06:49,727 [main:302] - generating value of type = Kla2 false depth = 3
2021-03-12 06:06:49,730 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:06:49,730 [main:302] - generating value of type = Function1<Float, Triple<Kla1, Kla0, UByte>> false depth = 3
2021-03-12 06:06:49,732 [main:302] - generating value of type = Triple<Kla1, Kla0, UByte> false depth = 4
2021-03-12 06:06:49,897 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla1, second: Kla0, third: UByte): Triple<Kla1, Kla0, UByte> = TODO()
2021-03-12 06:06:49,901 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla1, second: Kla0, third: UByte): Triple<Kla1, Kla0, UByte> = TODO()
2021-03-12 06:06:50,049 [main:302] - generating value of type = Kla1 false depth = 7
2021-03-12 06:06:50,052 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-12 06:06:50,209 [main:194] - Type params = []
2021-03-12 06:06:50,350 [main:302] - generating value of type = CoroutineContext false depth = 9
2021-03-12 06:06:50,508 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:50,512 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:50,846 [main:302] - generating value of type = Key<*> false depth = 12
2021-03-12 06:06:50,993 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:50,996 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:51,529 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 06:06:51,698 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:06:51,703 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:06:52,242 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:06:52,243 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:06:52,243 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:06:52,243 [main:302] - generating value of type = Kla0 false depth = 7
2021-03-12 06:06:52,246 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:52,246 [main:302] - generating value of type = UByte true depth = 7
2021-03-12 06:06:52,249 [main:95] - GENERATED = Triple<Kla1, Kla0, UByte>(Kla1(), Kla0(), 23.toUByte())
2021-03-12 06:06:52,249 [main:95] - GENERATED = Triple<UByte, Kla2?, Function1<Float, Triple<Kla1, Kla0, UByte>>>(119.toUByte(), Kla2(), {a: Float -> Triple<Kla1, Kla0, UByte>(Kla1(), Kla0(), 23.toUByte())})
2021-03-12 06:06:52,286 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:52,342 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:52,387 [main:114] - replacement of prope4 of type Kla0 is Kla0()
2021-03-12 06:06:52,513 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:52,514 [main:66] - Compilation checking started
2021-03-12 06:06:53,110 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, prope5)
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:53,113 [main:107] - replacing (prope5, Kla0)
2021-03-12 06:06:53,113 [main:50] - replacing prope5 Kla0
2021-03-12 06:06:53,113 [main:54] - Getting value of type Kla0
2021-03-12 06:06:53,262 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:53,264 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:53,265 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:53,265 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:53,439 [main:67] - randomType = Double
2021-03-12 06:06:53,581 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:06:53,622 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:53,711 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:53,749 [main:114] - replacement of prope5 of type Kla0 is Kla0()
2021-03-12 06:06:53,875 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:53,876 [main:66] - Compilation checking started
2021-03-12 06:06:54,441 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        prope8++
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:54,443 [main:107] - replacing (prope8++, Int)
2021-03-12 06:06:54,443 [main:50] - replacing prope8++ Int
2021-03-12 06:06:54,443 [main:54] - Getting value of type Int
2021-03-12 06:06:54,580 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:54,582 [main:58] - GENERATED VALUE OF TYPE Int = 2089733177
2021-03-12 06:06:54,582 [main:61] - GENERATED IS CALL =false
2021-03-12 06:06:54,720 [main:67] - randomType = Double
2021-03-12 06:06:54,850 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:06:54,883 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:06:54,883 [main:78] - Generated call from random type = (0.9163399682049208).toInt().absoluteValue
2021-03-12 06:06:54,884 [main:106] - GETTING Int from Short
2021-03-12 06:06:54,913 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72448d57]]
2021-03-12 06:06:54,914 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:06:54,914 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@72448d57]
2021-03-12 06:06:54,914 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
2021-03-12 06:06:54,914 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@3c1f046a]]
2021-03-12 06:06:54,914 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:55,038 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:55,040 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(20).sign
2021-03-12 06:06:55,041 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@4b444421]]
2021-03-12 06:06:55,041 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:06:55,200 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:55,202 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(-118).endInclusive
2021-03-12 06:06:55,202 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]]
2021-03-12 06:06:55,202 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:55,324 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:55,326 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]
2021-03-12 06:06:55,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:55,577 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:55,580 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-95).coerceIn(-2111939365, -1920473045)
2021-03-12 06:06:55,580 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-12 06:06:55,580 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:55,708 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:55,711 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:06:55,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:55,840 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-114).shr(-587542320)
2021-03-12 06:06:55,840 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ad01195]]
2021-03-12 06:06:55,840 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ad01195]
2021-03-12 06:06:55,964 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:55,966 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(-14)
2021-03-12 06:06:55,967 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@580936b0]]
2021-03-12 06:06:55,967 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:06:56,091 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:56,094 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@580936b0]
2021-03-12 06:06:56,217 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:06:56,220 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-111).rotateRight(-520926081)
2021-03-12 06:06:56,220 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@208ed968]]
2021-03-12 06:06:56,220 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:06:56,220 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@208ed968]
2021-03-12 06:06:56,349 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:56,352 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().compareTo(74)
2021-03-12 06:06:56,352 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]]
2021-03-12 06:06:56,352 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:06:56,352 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]
2021-03-12 06:06:56,480 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:06:56,482 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().minus(52)
2021-03-12 06:06:56,483 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@58ccbb00]]
2021-03-12 06:06:56,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@58ccbb00]
2021-03-12 06:06:56,483 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).countTrailingZeroBits()
2021-03-12 06:06:56,483 [main:114] - replacement of prope8++ of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
2021-03-12 06:06:56,628 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:06:56,629 [main:66] - Compilation checking started
2021-03-12 06:06:57,264 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === prope5.prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:06:57,267 [main:107] - replacing (prope5, Kla0)
2021-03-12 06:06:57,267 [main:50] - replacing prope5 Kla0
2021-03-12 06:06:57,267 [main:54] - Getting value of type Kla0
2021-03-12 06:06:57,415 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:06:57,418 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:06:57,419 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:06:57,419 [main:61] - GENERATED IS CALL =true
2021-03-12 06:06:58,411 [main:67] - randomType = Array<Function1<Float, Kla6?>>?
2021-03-12 06:06:58,581 [main:302] - generating value of type = Array<Function1<Float, Kla6?>> false depth = 0
2021-03-12 06:06:58,739 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Function1<Float, Kla6?>): Array<Function1<Float, Kla6?>> = TODO()
2021-03-12 06:06:58,743 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Function1<Float, Kla6?>): Array<Function1<Float, Kla6?>> = TODO()
2021-03-12 06:06:59,259 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:06:59,262 [main:302] - generating value of type = Function1<Int, Function1<Float, Kla6?>> false depth = 3
2021-03-12 06:06:59,265 [main:302] - generating value of type = Function1<Float, Kla6?> false depth = 4
2021-03-12 06:06:59,267 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-12 06:06:59,270 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:06:59,270 [main:95] - GENERATED = Array<Function1<Float, Kla6?>>(-1678838884, {a: Int -> {a: Float -> Kla6}})
2021-03-12 06:06:59,292 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:06:59,318 [main:106] - GETTING Kla0 from Short
2021-03-12 06:06:59,347 [main:114] - replacement of prope5 of type Kla0 is Kla0()
2021-03-12 06:06:59,493 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:06:59,494 [main:66] - Compilation checking started
2021-03-12 06:07:00,242 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:00,244 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine ", String)
2021-03-12 06:07:00,245 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " String
2021-03-12 06:07:00,245 [main:54] - Getting value of type String
2021-03-12 06:07:00,429 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:00,432 [main:58] - GENERATED VALUE OF TYPE String = "ivbxz"
2021-03-12 06:07:00,432 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:00,589 [main:67] - randomType = UInt
2021-03-12 06:07:00,742 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:07:00,795 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@348b5cb7]
2021-03-12 06:07:00,795 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:07:00,936 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:00,939 [main:78] - Generated call from random type = (326951012.toUInt()).toUShort().toString(-1315140850)
2021-03-12 06:07:00,939 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " of type String is (326951012.toUInt()).toUShort().toString(-1315140850)
2021-03-12 06:07:01,086 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:01,087 [main:66] - Compilation checking started
2021-03-12 06:07:01,667 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        prope4.fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:01,669 [main:107] - replacing (prope4, Kla0)
2021-03-12 06:07:01,669 [main:50] - replacing prope4 Kla0
2021-03-12 06:07:01,669 [main:54] - Getting value of type Kla0
2021-03-12 06:07:01,831 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:07:01,834 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:07:01,834 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:07:01,834 [main:61] - GENERATED IS CALL =true
2021-03-12 06:07:01,844 [main:67] - randomType = Kla0
2021-03-12 06:07:01,991 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:07:01,994 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:07:02,007 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:07:02,032 [main:106] - GETTING Kla0 from Short
2021-03-12 06:07:02,062 [main:114] - replacement of prope4 of type Kla0 is Kla0()
2021-03-12 06:07:02,229 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:07:02,229 [main:66] - Compilation checking started
2021-03-12 06:07:02,831 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:02,835 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got ", String)
2021-03-12 06:07:02,835 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " String
2021-03-12 06:07:02,835 [main:54] - Getting value of type String
2021-03-12 06:07:03,009 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:03,012 [main:58] - GENERATED VALUE OF TYPE String = "gxitv"
2021-03-12 06:07:03,013 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:03,023 [main:67] - randomType = Kla1
2021-03-12 06:07:03,175 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:07:03,178 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-12 06:07:03,334 [main:194] - Type params = []
2021-03-12 06:07:03,492 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:07:03,650 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:07:03,654 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:07:03,996 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:07:04,147 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:07:04,150 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:07:04,705 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:07:04,705 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:07:04,722 [main:106] - GETTING String from List<String>
2021-03-12 06:07:04,762 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a08429b]]
2021-03-12 06:07:04,762 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:04,890 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:04,893 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a08429b]
2021-03-12 06:07:04,893 [main:117] - GENERATED CALL = (list).get(-531336230).trim()
2021-03-12 06:07:04,893 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd7de2]]
2021-03-12 06:07:04,893 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd7de2]
2021-03-12 06:07:04,893 [main:117] - GENERATED CALL = (list).component3()
2021-03-12 06:07:04,893 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4998e2fe]]
2021-03-12 06:07:04,893 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4998e2fe]
2021-03-12 06:07:05,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:05,039 [main:117] - GENERATED CALL = (list).elementAt(-1422290106)
2021-03-12 06:07:05,039 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@357972dc]]
2021-03-12 06:07:05,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@357972dc]
2021-03-12 06:07:05,039 [main:117] - GENERATED CALL = (list).randomOrNull()
2021-03-12 06:07:05,039 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]]
2021-03-12 06:07:05,039 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:05,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:05,193 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]
2021-03-12 06:07:05,349 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:07:05,524 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:07:05,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:05,693 [main:117] - GENERATED CALL = (list).get(-1066672476).replace('å°', 'æ®', true)
2021-03-12 06:07:05,693 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c75ac24]]
2021-03-12 06:07:05,693 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:05,838 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:05,841 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c75ac24]
2021-03-12 06:07:05,997 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:06,000 [main:117] - GENERATED CALL = (list).get(1125460369).replaceIndent("xjscj")
2021-03-12 06:07:06,000 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30d11af0]]
2021-03-12 06:07:06,000 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:06,142 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:06,147 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30d11af0]
2021-03-12 06:07:06,291 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:07:06,294 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:07:06,297 [main:117] - GENERATED CALL = (list).get(1246333977).dropWhile({a: Char -> true})
2021-03-12 06:07:06,297 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]]
2021-03-12 06:07:06,297 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]
2021-03-12 06:07:06,455 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:07:06,459 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:07:07,150 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Map<Int?, Kla2>?): R = TODO()
2021-03-12 06:07:07,154 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Map<Int?, Kla2>?): R = TODO()
2021-03-12 06:07:07,475 [main:302] - generating value of type = Function0<Map<Int?, Kla2>?> false depth = 4
2021-03-12 06:07:07,478 [main:302] - generating value of type = Map<Int?, Kla2> false depth = 5
2021-03-12 06:07:07,643 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): Map<Int?, Kla2> = TODO()
2021-03-12 06:07:07,647 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): Map<Int?, Kla2> = TODO()
2021-03-12 06:07:07,833 [main:95] - GENERATED = linkedMapOf<Int?, Kla2>()
2021-03-12 06:07:07,833 [main:95] - GENERATED = run<Map<Int?, Kla2>?>({ linkedMapOf<Int?, Kla2>()})
2021-03-12 06:07:07,833 [main:117] - GENERATED CALL = (list).maxByOrNull({a: T -> run<Map<Int?, Kla2>?>({ linkedMapOf<Int?, Kla2>()})})
2021-03-12 06:07:07,833 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]]
2021-03-12 06:07:07,834 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]
2021-03-12 06:07:07,987 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:07:08,159 [main:43] - GENERATING CALL OF fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 06:07:08,164 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 06:07:08,490 [main:385] - Cant generate call of fun <T> compareBy(selector: (T)->kotlin.Comparable<*>?): Comparator<T> = TODO()
2021-03-12 06:07:08,490 [main:158] - CANT GENERATE PARAMS FOR @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]
2021-03-12 06:07:08,490 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public abstract fun next(): kotlin.String defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@4c89dfc8]]
2021-03-12 06:07:08,490 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:07:08,490 [main:149] - GENERATING call of type public abstract fun next(): kotlin.String defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@4c89dfc8]
2021-03-12 06:07:08,491 [main:117] - GENERATED CALL = (list).listIterator().next()
2021-03-12 06:07:08,491 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (list).size.shl(-2119512720) + ", got " of type String is (list).get(-531336230).trim()
2021-03-12 06:07:08,633 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:08,633 [main:66] - Compilation checking started
2021-03-12 06:07:09,267 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:09,270 [main:107] - replacing (prope9, Boolean)
2021-03-12 06:07:09,270 [main:50] - replacing prope9 Boolean
2021-03-12 06:07:09,270 [main:54] - Getting value of type Boolean
2021-03-12 06:07:09,441 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:09,444 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:07:09,444 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:09,455 [main:67] - randomType = Kla4
2021-03-12 06:07:09,602 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:07:09,604 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:07:09,611 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@2d5987ec]
2021-03-12 06:07:09,761 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:09,761 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:07:09,908 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:09,908 [main:78] - Generated call from random type = (Kla4()).equals("tefch").equals("utpjm")
2021-03-12 06:07:09,908 [main:114] - replacement of prope9 of type Boolean is (Kla4()).equals("tefch").equals("utpjm")
2021-03-12 06:07:10,053 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:10,054 [main:66] - Compilation checking started
2021-03-12 06:07:10,457 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.(Kla4()).equals("tefch").equals("utpjm") = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:10,460 [main:107] - replacing (fu6(), Boolean)
2021-03-12 06:07:10,460 [main:50] - replacing fu6() Boolean
2021-03-12 06:07:10,460 [main:54] - Getting value of type Boolean
2021-03-12 06:07:10,620 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:10,623 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:07:10,623 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:10,967 [main:67] - randomType = Double?
2021-03-12 06:07:11,110 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:07:11,150 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]
2021-03-12 06:07:11,296 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:11,296 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:07:11,438 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:11,441 [main:78] - Generated call from random type = (0.8869662923692282)?.equals("tfina").and(false)
2021-03-12 06:07:11,441 [main:114] - replacement of fu6() of type Boolean is (0.8869662923692282)?.equals("tfina").and(false)
2021-03-12 06:07:11,586 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:11,586 [main:66] - Compilation checking started
2021-03-12 06:07:12,003 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().(0.8869662923692282)?.equals("tfina").and(false)) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        prope5.fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:12,005 [main:107] - replacing (prope5, Kla0)
2021-03-12 06:07:12,006 [main:50] - replacing prope5 Kla0
2021-03-12 06:07:12,006 [main:54] - Getting value of type Kla0
2021-03-12 06:07:12,160 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:07:12,163 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:07:12,163 [main:58] - GENERATED VALUE OF TYPE Kla0 = Kla0()
2021-03-12 06:07:12,163 [main:61] - GENERATED IS CALL =true
2021-03-12 06:07:12,522 [main:67] - randomType = UByte?
2021-03-12 06:07:12,663 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:07:12,704 [main:106] - GETTING Kla0 from List<String>
2021-03-12 06:07:12,727 [main:106] - GETTING Kla0 from Short
2021-03-12 06:07:12,755 [main:114] - replacement of prope5 of type Kla0 is Kla0()
2021-03-12 06:07:12,903 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:07:12,903 [main:66] - Compilation checking started
2021-03-12 06:07:13,507 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:13,510 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 06:07:13,511 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 06:07:13,511 [main:54] - Getting value of type Boolean
2021-03-12 06:07:13,742 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:13,747 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:07:13,747 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:13,770 [main:67] - randomType = Boolean
2021-03-12 06:07:13,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:13,940 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:07:14,094 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:14,095 [main:78] - Generated call from random type = (true).equals("fhsdd")
2021-03-12 06:07:14,096 [main:106] - GETTING Boolean from Short
2021-03-12 06:07:14,152 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbd7d63]]
2021-03-12 06:07:14,152 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:14,152 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbd7d63]
2021-03-12 06:07:14,152 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLetter()
2021-03-12 06:07:14,152 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e5975db]]
2021-03-12 06:07:14,152 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:07:14,152 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e5975db]
2021-03-12 06:07:14,153 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite()
2021-03-12 06:07:14,153 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]]
2021-03-12 06:07:14,153 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:07:14,153 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]
2021-03-12 06:07:14,282 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:14,283 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().equals("uwuci")
2021-03-12 06:07:14,283 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]]
2021-03-12 06:07:14,283 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:07:14,429 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:07:14,432 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]
2021-03-12 06:07:14,433 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.13577115000847406).isFinite()
2021-03-12 06:07:14,433 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d6f798d]]
2021-03-12 06:07:14,433 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:14,433 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d6f798d]
2021-03-12 06:07:14,433 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLowSurrogate()
2021-03-12 06:07:14,433 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3ba61775]]
2021-03-12 06:07:14,433 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:07:14,434 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3ba61775]
2021-03-12 06:07:14,586 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:14,586 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().equals("mzpgi")
2021-03-12 06:07:14,586 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]]
2021-03-12 06:07:14,587 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:14,587 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]
2021-03-12 06:07:14,587 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isDigit()
2021-03-12 06:07:14,587 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]]
2021-03-12 06:07:14,587 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:07:14,587 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:07:14,718 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:14,719 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().equals("kbotl")
2021-03-12 06:07:14,723 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@7a4d3d23]]
2021-03-12 06:07:14,723 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:07:14,869 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:14,872 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@7a4d3d23]
2021-03-12 06:07:14,873 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(-7).isEmpty()
2021-03-12 06:07:14,873 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:07:14,873 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:07:15,017 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:15,017 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:07:15,162 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:15,166 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("ezfqr").or(false)
2021-03-12 06:07:15,166 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite()
2021-03-12 06:07:15,305 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:15,306 [main:66] - Compilation checking started
2021-03-12 06:07:15,886 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:15,889 [main:107] - replacing (prope3.getOrThrow(), Any?)
2021-03-12 06:07:15,889 [main:50] - replacing prope3.getOrThrow() Any?
2021-03-12 06:07:15,889 [main:54] - Getting value of type Any?
2021-03-12 06:07:16,044 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:16,045 [main:58] - GENERATED VALUE OF TYPE Any? = "vxyat"
2021-03-12 06:07:16,045 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:18,263 [main:67] - randomType = HashMap<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>>?
2021-03-12 06:07:18,407 [main:302] - generating value of type = HashMap<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>> false depth = 0
2021-03-12 06:07:18,592 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>>): HashMap<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, Strg>, Collection<Char>> = TODO()
2021-03-12 06:07:18,596 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>>): HashMap<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, Strg>, Collection<Char>> = TODO()
2021-03-12 06:07:18,750 [main:302] - generating value of type = Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>> false depth = 3
2021-03-12 06:07:18,915 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, second: Collection<Char>): Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>> = TODO()
2021-03-12 06:07:18,920 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, second: Collection<Char>): Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>> = TODO()
2021-03-12 06:07:19,073 [main:302] - generating value of type = Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String> false depth = 6
2021-03-12 06:07:19,286 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla3<Kla6>, second: Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, third: String): Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String> = TODO()
2021-03-12 06:07:19,290 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla3<Kla6>, second: Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, third: String): Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String> = TODO()
2021-03-12 06:07:19,444 [main:302] - generating value of type = Kla3<Kla6> false depth = 9
2021-03-12 06:07:19,447 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:07:20,509 [main:302] - generating value of type = Kla6 false depth = 11
2021-03-12 06:07:20,513 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:07:20,513 [main:302] - generating value of type = Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt> false depth = 9
2021-03-12 06:07:20,517 [main:302] - generating value of type = UInt true depth = 10
2021-03-12 06:07:20,520 [main:302] - generating value of type = String true depth = 9
2021-03-12 06:07:20,524 [main:95] - GENERATED = Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>(Kla6, {a: Pair<Kla0, Kla0?>, b: Sequence<Long> -> 1128625969.toUInt()}, "rnrdq")
2021-03-12 06:07:20,524 [main:302] - generating value of type = Collection<Char> false depth = 6
2021-03-12 06:07:20,689 [main:43] - GENERATING CALL OF fun <T> setOf(element: Char): Collection<Char> = TODO()
2021-03-12 06:07:20,694 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: Char): Collection<Char> = TODO()
2021-03-12 06:07:20,846 [main:302] - generating value of type = Char true depth = 9
2021-03-12 06:07:20,849 [main:95] - GENERATED = setOf<Char>('Ì¾')
2021-03-12 06:07:20,849 [main:95] - GENERATED = Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>>(Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>(Kla6, {a: Pair<Kla0, Kla0?>, b: Sequence<Long> -> 1128625969.toUInt()}, "rnrdq"), setOf<Char>('Ì¾'))
2021-03-12 06:07:20,850 [main:95] - GENERATED = linkedMapOf<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>>(Pair<Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>, Collection<Char>>(Triple<Kla3<Kla6>, Function2<Pair<Kla0, Kla0?>, Sequence<Long>, UInt>, String>(Kla6, {a: Pair<Kla0, Kla0?>, b: Sequence<Long> -> 1128625969.toUInt()}, "rnrdq"), setOf<Char>('Ì¾')))
2021-03-12 06:07:21,175 [main:106] - GETTING Any? from Short
2021-03-12 06:07:21,237 [main:106] - GETTING Any? from List<String>
2021-03-12 06:07:21,270 [main:114] - replacement of prope3.getOrThrow() of type Any? is "vxyat"
2021-03-12 06:07:21,431 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:07:21,432 [main:66] - Compilation checking started
2021-03-12 06:07:22,066 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:22,070 [main:107] - replacing (prope3, String)
2021-03-12 06:07:22,070 [main:50] - replacing prope3 String
2021-03-12 06:07:22,070 [main:54] - Getting value of type String
2021-03-12 06:07:22,234 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:22,238 [main:58] - GENERATED VALUE OF TYPE String = "iyncx"
2021-03-12 06:07:22,238 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:22,425 [main:67] - randomType = UShort?
2021-03-12 06:07:22,567 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:07:22,613 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline infix fun and(other: kotlin.UShort): kotlin.UShort defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@76502ca4]
2021-03-12 06:07:22,772 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:07:22,775 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:07:22,928 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:22,932 [main:78] - Generated call from random type = (14287.toUShort())?.and(25533.toUShort()).toString(2082552027)
2021-03-12 06:07:22,933 [main:106] - GETTING String from Short
2021-03-12 06:07:23,009 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:23,009 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:23,168 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:23,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:23,321 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:23,324 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-32).toString(851542685)
2021-03-12 06:07:23,324 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:23,325 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:07:23,477 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:07:23,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:23,621 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:23,624 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1196232369510412164).toString(1058253262)
2021-03-12 06:07:23,624 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:23,624 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:07:23,625 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:23,776 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:23,780 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1638514621)
2021-03-12 06:07:23,780 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:07:23,780 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:23,780 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:07:23,780 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:07:23,781 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:23,781 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:07:23,781 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:23,929 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:23,932 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-278361637)
2021-03-12 06:07:23,932 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:23,932 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:23,933 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:24,057 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:24,061 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(225984205)
2021-03-12 06:07:24,061 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:07:24,061 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:24,061 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:07:24,061 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:07:24,061 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:24,061 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:24,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:24,220 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(1741402223)
2021-03-12 06:07:24,220 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:07:24,220 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:24,221 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:07:24,221 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:07:24,221 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:07:24,221 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:24,221 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:07:24,361 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:24,364 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("mlyhj")
2021-03-12 06:07:24,364 [main:114] - replacement of prope3 of type String is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:07:24,492 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:24,493 [main:66] - Compilation checking started
2021-03-12 06:07:24,899 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().(listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase() != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:24,903 [main:107] - replacing ("O", String)
2021-03-12 06:07:24,903 [main:50] - replacing "O" String
2021-03-12 06:07:24,903 [main:54] - Getting value of type String
2021-03-12 06:07:25,067 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:25,070 [main:58] - GENERATED VALUE OF TYPE String = "misrr"
2021-03-12 06:07:25,070 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:25,083 [main:67] - randomType = Kla2
2021-03-12 06:07:25,228 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:07:25,231 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:07:25,247 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@187175b3]
2021-03-12 06:07:25,247 [main:78] - Generated call from random type = (Kla2()).prope3?.toString()!!
2021-03-12 06:07:25,248 [main:106] - GETTING String from List<String>
2021-03-12 06:07:25,271 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]]
2021-03-12 06:07:25,271 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:25,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:25,419 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]
2021-03-12 06:07:25,420 [main:117] - GENERATED CALL = (list).get(-474886186).toLowerCase()
2021-03-12 06:07:25,420 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd7de2]]
2021-03-12 06:07:25,420 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component3(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1cd7de2]
2021-03-12 06:07:25,420 [main:117] - GENERATED CALL = (list).component3()
2021-03-12 06:07:25,420 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]]
2021-03-12 06:07:25,420 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:25,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:25,568 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]
2021-03-12 06:07:25,714 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:07:25,886 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:07:25,891 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:07:26,218 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:07:26,222 [main:95] - GENERATED = StringBuilder("wfyjr")
2021-03-12 06:07:26,222 [main:117] - GENERATED CALL = (list).get(-1462702887).removeSuffix(StringBuilder("wfyjr"))
2021-03-12 06:07:26,222 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76594dc8]]
2021-03-12 06:07:26,222 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:26,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:26,381 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76594dc8]
2021-03-12 06:07:26,530 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:26,533 [main:117] - GENERATED CALL = (list).get(1683803653).dropLast(1461579705)
2021-03-12 06:07:26,533 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]]
2021-03-12 06:07:26,533 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:26,683 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:26,686 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]
2021-03-12 06:07:26,833 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:26,834 [main:117] - GENERATED CALL = (list).get(-26567029).plus("qvlap")
2021-03-12 06:07:26,834 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]]
2021-03-12 06:07:26,834 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:26,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:26,966 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]
2021-03-12 06:07:26,966 [main:117] - GENERATED CALL = (list).get(732649126).capitalize()
2021-03-12 06:07:26,966 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.last(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c3f358c]]
2021-03-12 06:07:26,967 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.last(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c3f358c]
2021-03-12 06:07:26,967 [main:117] - GENERATED CALL = (list).last()
2021-03-12 06:07:26,967 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]]
2021-03-12 06:07:26,967 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:27,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:27,126 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]
2021-03-12 06:07:27,126 [main:117] - GENERATED CALL = (list).get(1354676110).lowercase()
2021-03-12 06:07:27,126 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]]
2021-03-12 06:07:27,126 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]
2021-03-12 06:07:27,270 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:07:27,432 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 06:07:27,437 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 06:07:27,769 [main:385] - Cant generate call of fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 06:07:27,769 [main:158] - CANT GENERATE PARAMS FOR @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]
2021-03-12 06:07:27,769 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e], public abstract operator fun next(): kotlin.String defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@3bdd951a]]
2021-03-12 06:07:27,770 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e]
2021-03-12 06:07:27,770 [main:149] - GENERATING call of type public abstract operator fun next(): kotlin.String defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@3bdd951a]
2021-03-12 06:07:27,770 [main:117] - GENERATED CALL = (list).iterator().next()
2021-03-12 06:07:27,770 [main:114] - replacement of "O" of type String is (list).get(1354676110).lowercase()
2021-03-12 06:07:27,915 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:27,915 [main:66] - Compilation checking started
2021-03-12 06:07:28,316 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("fail 1")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = (list).get(1354676110).lowercase()

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:28,319 [main:107] - replacing ("fail 1", String)
2021-03-12 06:07:28,319 [main:50] - replacing "fail 1" String
2021-03-12 06:07:28,319 [main:54] - Getting value of type String
2021-03-12 06:07:28,479 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:28,482 [main:58] - GENERATED VALUE OF TYPE String = "nlixt"
2021-03-12 06:07:28,482 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:28,495 [main:67] - randomType = Kla2
2021-03-12 06:07:28,641 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:07:28,644 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:07:28,664 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@187175b3]
2021-03-12 06:07:28,665 [main:78] - Generated call from random type = (Kla2()).prope3?.toString()!!
2021-03-12 06:07:28,665 [main:106] - GETTING String from Short
2021-03-12 06:07:28,697 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:28,697 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:28,844 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:28,847 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:28,989 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:28,992 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-73).toString(2111015159)
2021-03-12 06:07:28,993 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]]
2021-03-12 06:07:28,993 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:07:28,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:07:29,140 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:29,143 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().toString(1262810299)
2021-03-12 06:07:29,144 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:07:29,144 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:29,144 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:07:29,286 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:29,289 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("wugke")
2021-03-12 06:07:29,289 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:29,289 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:29,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:29,416 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:29,419 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(859538435)
2021-03-12 06:07:29,419 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:29,419 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:29,563 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:29,566 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(-1558078201)
2021-03-12 06:07:29,566 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:07:29,567 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:29,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:07:29,567 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:07:29,567 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:07:29,567 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:29,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:07:29,567 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:07:29,567 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:29,567 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:07:29,567 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:29,708 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:29,712 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1945134059)
2021-03-12 06:07:29,712 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:07:29,712 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:29,712 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:07:29,712 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:07:29,712 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:29,712 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:07:29,860 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:07:29,863 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:30,005 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:30,008 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(2228245586164410738).toString(1218893416)
2021-03-12 06:07:30,008 [main:114] - replacement of "fail 1" of type String is "nlixt"
2021-03-12 06:07:30,137 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 06:07:30,137 [main:66] - Compilation checking started
2021-03-12 06:07:30,871 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:30,873 [main:107] - replacing (suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }, String)
2021-03-12 06:07:30,873 [main:50] - replacing suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    } String
2021-03-12 06:07:30,873 [main:54] - Getting value of type String
2021-03-12 06:07:31,046 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:31,051 [main:58] - GENERATED VALUE OF TYPE String = "lnufc"
2021-03-12 06:07:31,051 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:31,070 [main:67] - randomType = Kla5
2021-03-12 06:07:31,224 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:07:31,227 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:07:31,237 [main:106] - GETTING String from List<String>
2021-03-12 06:07:31,270 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@777ebf6b]]
2021-03-12 06:07:31,270 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@777ebf6b]
2021-03-12 06:07:31,270 [main:117] - GENERATED CALL = (list).lastOrNull()
2021-03-12 06:07:31,270 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d200879]]
2021-03-12 06:07:31,270 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:31,426 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:31,429 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d200879]
2021-03-12 06:07:31,580 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:31,584 [main:117] - GENERATED CALL = (list).get(-471666571).substring(-753559959)
2021-03-12 06:07:31,584 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]]
2021-03-12 06:07:31,584 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@30a06273]
2021-03-12 06:07:31,736 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:07:31,895 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<T> = TODO()
2021-03-12 06:07:31,899 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<T> = TODO()
2021-03-12 06:07:32,032 [main:95] - GENERATED = naturalOrder<T>()
2021-03-12 06:07:32,032 [main:117] - GENERATED CALL = (list).maxWith(naturalOrder<T>())
2021-03-12 06:07:32,032 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]]
2021-03-12 06:07:32,033 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:32,180 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:32,183 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]
2021-03-12 06:07:32,322 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:07:32,325 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:07:32,328 [main:117] - GENERATED CALL = (list).get(1079398861).takeLastWhile({a: Char -> false})
2021-03-12 06:07:32,328 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@407ed4ce]]
2021-03-12 06:07:32,328 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@407ed4ce]
2021-03-12 06:07:32,474 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:07:32,621 [main:43] - GENERATING CALL OF fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 06:07:32,625 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 06:07:32,973 [main:385] - Cant generate call of fun <T> nullsFirst(comparator: kotlin.Comparator<T>): Comparator<T> = TODO()
2021-03-12 06:07:32,973 [main:158] - CANT GENERATE PARAMS FOR @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.maxWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@407ed4ce]
2021-03-12 06:07:32,973 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559a6a44]]
2021-03-12 06:07:32,973 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:33,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:33,118 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559a6a44]
2021-03-12 06:07:33,266 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:07:33,270 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:07:33,273 [main:117] - GENERATED CALL = (list).get(-1050942709).filter({a: Char -> true})
2021-03-12 06:07:33,273 [main:113] - Case = [@kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ce2e026]]
2021-03-12 06:07:33,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWithOrNull(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4ce2e026]
2021-03-12 06:07:33,414 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:07:33,551 [main:43] - GENERATING CALL OF fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-12 06:07:33,556 [main:61] - WITHOUT TYPE PARAMS = fun <T> reverseOrder(): Comparator<T> = TODO()
2021-03-12 06:07:33,715 [main:95] - GENERATED = reverseOrder<T>()
2021-03-12 06:07:33,716 [main:117] - GENERATED CALL = (list).minWithOrNull(reverseOrder<T>())
2021-03-12 06:07:33,716 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@29e4ad7a]]
2021-03-12 06:07:33,716 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@29e4ad7a]
2021-03-12 06:07:33,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:33,860 [main:117] - GENERATED CALL = (list).getOrNull(740318102)
2021-03-12 06:07:33,860 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@482741af]]
2021-03-12 06:07:33,860 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@482741af]
2021-03-12 06:07:33,860 [main:117] - GENERATED CALL = (list).component2()
2021-03-12 06:07:33,860 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]]
2021-03-12 06:07:33,860 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:33,985 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:33,988 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]
2021-03-12 06:07:34,136 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:34,279 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:34,433 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:07:34,579 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:07:34,583 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:07:34,886 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:07:34,890 [main:95] - GENERATED = StringBuilder("fwsby")
2021-03-12 06:07:34,890 [main:117] - GENERATED CALL = (list).get(1080920688).replaceRange(-823673261, 182339191, StringBuilder("fwsby"))
2021-03-12 06:07:34,890 [main:114] - replacement of suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    } of type String is (list).getOrNull(740318102)
2021-03-12 06:07:35,028 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:35,029 [main:66] - Compilation checking started
2021-03-12 06:07:35,393 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = (list).getOrNull(740318102)

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if (prope8 != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:35,396 [main:107] - replacing (prope8, Int)
2021-03-12 06:07:35,396 [main:50] - replacing prope8 Int
2021-03-12 06:07:35,396 [main:54] - Getting value of type Int
2021-03-12 06:07:35,540 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:35,543 [main:58] - GENERATED VALUE OF TYPE Int = -1190499030
2021-03-12 06:07:35,543 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:35,702 [main:67] - randomType = Byte
2021-03-12 06:07:35,850 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:35,890 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:07:35,890 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@24c7cba6]
2021-03-12 06:07:35,891 [main:78] - Generated call from random type = (-7).toLong().toInt()
2021-03-12 06:07:35,892 [main:106] - GETTING Int from Short
2021-03-12 06:07:35,941 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@a12cd23]]
2021-03-12 06:07:35,941 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:07:35,941 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().sign
2021-03-12 06:07:35,941 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-12 06:07:35,941 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:35,941 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:07:36,070 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:36,073 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().shr(1616877329)
2021-03-12 06:07:36,073 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7233c467]]
2021-03-12 06:07:36,073 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:36,216 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:36,220 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7233c467]
2021-03-12 06:07:36,220 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(94).inv()
2021-03-12 06:07:36,220 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@46ed9298], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a9dced4]]
2021-03-12 06:07:36,220 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@46ed9298]
2021-03-12 06:07:36,360 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:07:36,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a9dced4]
2021-03-12 06:07:36,364 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.32247937f).toRawBits()
2021-03-12 06:07:36,364 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27f713bb]]
2021-03-12 06:07:36,364 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:36,364 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27f713bb]
2021-03-12 06:07:36,364 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().inc()
2021-03-12 06:07:36,364 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@98ee9e7]]
2021-03-12 06:07:36,364 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:36,364 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@98ee9e7]
2021-03-12 06:07:36,364 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().toInt()
2021-03-12 06:07:36,365 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74409dc9]]
2021-03-12 06:07:36,365 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:36,493 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:36,496 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74409dc9]
2021-03-12 06:07:36,497 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(113).countLeadingZeroBits()
2021-03-12 06:07:36,497 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d294cdb]]
2021-03-12 06:07:36,497 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:36,497 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d294cdb]
2021-03-12 06:07:36,640 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:36,644 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818)
2021-03-12 06:07:36,644 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e76656]]
2021-03-12 06:07:36,644 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:36,788 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:36,791 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e76656]
2021-03-12 06:07:36,792 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(50).dec()
2021-03-12 06:07:36,792 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-12 06:07:36,792 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:36,956 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:36,960 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:07:37,106 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:37,109 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(53).shr(1043580123)
2021-03-12 06:07:37,109 [main:114] - replacement of prope8 of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818)
2021-03-12 06:07:37,250 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:37,250 [main:66] - Compilation checking started
2021-03-12 06:07:37,834 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:37,837 [main:107] - replacing ("O", String)
2021-03-12 06:07:37,837 [main:50] - replacing "O" String
2021-03-12 06:07:37,837 [main:54] - Getting value of type String
2021-03-12 06:07:37,998 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:38,001 [main:58] - GENERATED VALUE OF TYPE String = "tmzoy"
2021-03-12 06:07:38,001 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:38,172 [main:67] - randomType = Kla6
2021-03-12 06:07:38,331 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:07:38,334 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:07:38,365 [main:106] - GETTING String from List<String>
2021-03-12 06:07:38,412 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339d42ff]]
2021-03-12 06:07:38,412 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:38,540 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:38,543 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339d42ff]
2021-03-12 06:07:38,543 [main:117] - GENERATED CALL = (list).get(1532158919).trimStart()
2021-03-12 06:07:38,543 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]]
2021-03-12 06:07:38,543 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:38,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:38,693 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]
2021-03-12 06:07:38,834 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:07:38,963 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:39,113 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:39,116 [main:117] - GENERATED CALL = (list).get(-783656965).replaceAfterLast('ê¥¯', "kdrra", "jwuqs")
2021-03-12 06:07:39,116 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:39,116 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:39,262 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:39,265 [main:117] - GENERATED CALL = (list).size.toString(548215295)
2021-03-12 06:07:39,265 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4998e2fe]]
2021-03-12 06:07:39,265 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.List<T>.elementAt(index: kotlin.Int): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4998e2fe]
2021-03-12 06:07:39,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:39,394 [main:117] - GENERATED CALL = (list).elementAt(-364092829)
2021-03-12 06:07:39,394 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565362af]]
2021-03-12 06:07:39,394 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:39,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:39,546 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565362af]
2021-03-12 06:07:39,693 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:07:39,848 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:39,998 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:40,002 [main:117] - GENERATED CALL = (list).get(1271156345).replaceBeforeLast('ä¨', "slreo", "ixwhz")
2021-03-12 06:07:40,002 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]]
2021-03-12 06:07:40,002 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]
2021-03-12 06:07:40,002 [main:117] - GENERATED CALL = (list).firstOrNull()
2021-03-12 06:07:40,002 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]]
2021-03-12 06:07:40,002 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:40,132 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:40,135 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]
2021-03-12 06:07:40,135 [main:117] - GENERATED CALL = (list).get(1822654515).lowercase()
2021-03-12 06:07:40,135 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]]
2021-03-12 06:07:40,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]
2021-03-12 06:07:40,135 [main:117] - GENERATED CALL = (list).component1()
2021-03-12 06:07:40,135 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da166d3]]
2021-03-12 06:07:40,135 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:40,285 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:40,288 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da166d3]
2021-03-12 06:07:40,289 [main:117] - GENERATED CALL = (list).get(-1012782047).toUpperCase()
2021-03-12 06:07:40,289 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ac397d6]]
2021-03-12 06:07:40,289 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ac397d6]
2021-03-12 06:07:40,435 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:07:40,568 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:07:40,725 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:07:40,876 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:41,008 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:07:41,196 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 06:07:41,200 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:07:41,360 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:07:41,364 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:07:41,689 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:07:41,692 [main:95] - GENERATED = StringBuilder(1437959411)
2021-03-12 06:07:41,693 [main:117] - GENERATED CALL = (list).joinToString("mxpbk", StringBuilder(), "czxhk", 406720584, "ohdiy", {a: T -> StringBuilder(1437959411)})
2021-03-12 06:07:41,693 [main:114] - replacement of "O" of type String is (list).firstOrNull()
2021-03-12 06:07:41,819 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:41,820 [main:66] - Compilation checking started
2021-03-12 06:07:42,195 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = (list).firstOrNull()

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu10(it)
    }

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:42,199 [main:107] - replacing ({
        fu10(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 06:07:42,199 [main:50] - replacing {
        fu10(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 06:07:42,199 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 06:07:42,347 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 06:07:42,351 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:07:42,514 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:07:42,520 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:07:42,868 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:07:42,872 [main:95] - GENERATED = require(false)
2021-03-12 06:07:42,872 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(false)}
2021-03-12 06:07:42,872 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:43,070 [main:67] - randomType = LinkedHashMap<Kla1, Long>
2021-03-12 06:07:43,215 [main:302] - generating value of type = LinkedHashMap<Kla1, Long> false depth = 0
2021-03-12 06:07:43,371 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla1, Long> = TODO()
2021-03-12 06:07:43,376 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla1, Long> = TODO()
2021-03-12 06:07:43,536 [main:95] - GENERATED = linkedMapOf<Kla1, Long>()
2021-03-12 06:07:43,707 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Short
2021-03-12 06:07:43,738 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 06:07:43,760 [main:114] - replacement of {
        fu10(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(false)}
2021-03-12 06:07:43,914 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:07:43,914 [main:66] - Compilation checking started
2021-03-12 06:07:44,511 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:44,513 [main:107] - replacing (prope3, String)
2021-03-12 06:07:44,514 [main:50] - replacing prope3 String
2021-03-12 06:07:44,514 [main:54] - Getting value of type String
2021-03-12 06:07:44,665 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:44,668 [main:58] - GENERATED VALUE OF TYPE String = "tqbib"
2021-03-12 06:07:44,668 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:44,850 [main:67] - randomType = UByte
2021-03-12 06:07:44,990 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:07:45,027 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@3fabf8f0]
2021-03-12 06:07:45,027 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:07:45,191 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:45,195 [main:78] - Generated call from random type = (10.toUByte()).toUShort().toString(-1966496670)
2021-03-12 06:07:45,196 [main:106] - GETTING String from Short
2021-03-12 06:07:45,239 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:07:45,239 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:45,240 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:07:45,381 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:45,385 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("ajvxt")
2021-03-12 06:07:45,385 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:45,385 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:45,385 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:45,533 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:45,537 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(171506543)
2021-03-12 06:07:45,537 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:45,537 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:07:45,681 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:07:45,685 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:45,813 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:45,816 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(-1920037319996773021).toString(-945353064)
2021-03-12 06:07:45,816 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:07:45,816 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:45,816 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:07:45,817 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:07:45,817 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:45,817 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:45,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:45,969 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(-1332104950)
2021-03-12 06:07:45,970 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:45,970 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:07:45,970 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:46,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:46,120 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-2006487657)
2021-03-12 06:07:46,120 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:46,120 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:07:46,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:46,249 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:46,253 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-661126019)
2021-03-12 06:07:46,253 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:46,253 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:46,420 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:46,423 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:46,569 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:46,573 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-63).toString(1253746731)
2021-03-12 06:07:46,573 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:07:46,573 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:46,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:07:46,573 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:07:46,574 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]]
2021-03-12 06:07:46,574 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:07:46,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:07:46,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:46,704 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().toString(-46619217)
2021-03-12 06:07:46,704 [main:114] - replacement of prope3 of type String is "tqbib"
2021-03-12 06:07:46,851 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:07:46,851 [main:66] - Compilation checking started
2021-03-12 06:07:47,274 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5."tqbib" != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:47,277 [main:107] - replacing (false, Boolean)
2021-03-12 06:07:47,277 [main:50] - replacing false Boolean
2021-03-12 06:07:47,277 [main:54] - Getting value of type Boolean
2021-03-12 06:07:47,432 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:47,435 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:07:47,435 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:47,751 [main:67] - randomType = Sequence<Byte>
2021-03-12 06:07:47,752 [main:106] - GETTING Boolean from List<String>
2021-03-12 06:07:47,782 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cfd4e82]]
2021-03-12 06:07:47,782 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.none(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6cfd4e82]
2021-03-12 06:07:47,782 [main:117] - GENERATED CALL = (list).none()
2021-03-12 06:07:47,782 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d186c2f]]
2021-03-12 06:07:47,782 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:47,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:47,934 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d186c2f]
2021-03-12 06:07:48,082 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:48,212 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:48,216 [main:117] - GENERATED CALL = (list).get(-724507980).startsWith("yfhmn", true)
2021-03-12 06:07:48,216 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:07:48,216 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:07:48,388 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:48,388 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:07:48,531 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:48,532 [main:117] - GENERATED CALL = (list).equals("kavct").equals("jvcyr")
2021-03-12 06:07:48,532 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@7ae24bd6]]
2021-03-12 06:07:48,532 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:07:48,532 [main:149] - GENERATING call of type public abstract fun hasPrevious(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@7ae24bd6]
2021-03-12 06:07:48,532 [main:117] - GENERATED CALL = (list).listIterator().hasPrevious()
2021-03-12 06:07:48,532 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:07:48,532 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:07:48,660 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:48,660 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:07:48,809 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:48,813 [main:117] - GENERATED CALL = (list).equals("dyyar").xor(true)
2021-03-12 06:07:48,813 [main:113] - Case = [public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@7da685]]
2021-03-12 06:07:48,813 [main:149] - GENERATING call of type public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@7da685]
2021-03-12 06:07:48,813 [main:117] - GENERATED CALL = (list).isEmpty()
2021-03-12 06:07:48,813 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:07:48,813 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:07:48,958 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:48,958 [main:117] - GENERATED CALL = (list).size.equals("zqjta")
2021-03-12 06:07:48,959 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@764e3a1]]
2021-03-12 06:07:48,959 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:07:48,959 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@764e3a1]
2021-03-12 06:07:49,088 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:49,088 [main:117] - GENERATED CALL = (list).listIterator().equals("nrgyf")
2021-03-12 06:07:49,088 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@287abaee]]
2021-03-12 06:07:49,088 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@287abaee]
2021-03-12 06:07:49,237 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:49,238 [main:117] - GENERATED CALL = (list).equals("vmoys")
2021-03-12 06:07:49,238 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:07:49,238 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:07:49,383 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:49,384 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:07:49,523 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:49,529 [main:117] - GENERATED CALL = (list).equals("ngufs").or(true)
2021-03-12 06:07:49,529 [main:114] - replacement of false of type Boolean is (list).isEmpty()
2021-03-12 06:07:49,678 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:49,679 [main:66] - Compilation checking started
2021-03-12 06:07:50,088 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = (list).isEmpty()

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:50,090 [main:107] - replacing (prope6, Function1<Ty0, Unit>)
2021-03-12 06:07:50,091 [main:50] - replacing prope6 Function1<Ty0, Unit>
2021-03-12 06:07:50,091 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-12 06:07:50,248 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-12 06:07:50,251 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:07:50,407 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:07:50,411 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:07:50,748 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:07:50,749 [main:95] - GENERATED = println("elyyb")
2021-03-12 06:07:50,749 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println("elyyb")}
2021-03-12 06:07:50,749 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:51,093 [main:67] - randomType = UByte?
2021-03-12 06:07:51,221 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:07:51,256 [main:106] - GETTING Function1<Ty0, Unit> from Short
2021-03-12 06:07:51,285 [main:106] - GETTING Function1<Ty0, Unit> from List<String>
2021-03-12 06:07:51,307 [main:114] - replacement of prope6 of type Function1<Ty0, Unit> is {a: Ty0 -> println("elyyb")}
2021-03-12 06:07:51,452 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:07:51,453 [main:66] - Compilation checking started
2021-03-12 06:07:51,866 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if (prope5.prope3 != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
{a: Ty0 -> println("elyyb")}(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:51,869 [main:107] - replacing (prope5.prope3, String)
2021-03-12 06:07:51,869 [main:50] - replacing prope5.prope3 String
2021-03-12 06:07:51,869 [main:54] - Getting value of type String
2021-03-12 06:07:52,014 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:52,018 [main:58] - GENERATED VALUE OF TYPE String = "rhpjm"
2021-03-12 06:07:52,018 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:52,196 [main:67] - randomType = Kla3<UInt>
2021-03-12 06:07:52,348 [main:302] - generating value of type = Kla3<UInt> false depth = 0
2021-03-12 06:07:52,351 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:07:52,988 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 06:07:52,991 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:07:53,013 [main:106] - GETTING String from Short
2021-03-12 06:07:53,048 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:07:53,048 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:07:53,219 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:53,222 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(-1958357886)
2021-03-12 06:07:53,223 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:53,223 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:07:53,373 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:07:53,376 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:53,502 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:53,506 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-56).toString(-539923880)
2021-03-12 06:07:53,506 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:53,506 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:07:53,655 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:07:53,659 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:53,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:53,805 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(-2419872341245967954).toString(-631319799)
2021-03-12 06:07:53,805 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]]
2021-03-12 06:07:53,805 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:07:53,805 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:07:53,931 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:53,935 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().toString(-1236699684)
2021-03-12 06:07:53,935 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:07:53,935 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:07:53,935 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:07:54,084 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:54,088 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(-666730798)
2021-03-12 06:07:54,089 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:07:54,089 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:54,089 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:07:54,089 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:07:54,089 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:07:54,089 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:54,089 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:07:54,232 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:54,236 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("ndxiw")
2021-03-12 06:07:54,236 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:07:54,236 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:54,236 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:07:54,236 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:07:54,236 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:07:54,236 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:07:54,236 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:07:54,363 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:54,366 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067)
2021-03-12 06:07:54,366 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:07:54,367 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:07:54,367 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:07:54,367 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:07:54,367 [main:114] - replacement of prope5.prope3 of type String is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067)
2021-03-12 06:07:54,515 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:54,516 [main:66] - Compilation checking started
2021-03-12 06:07:55,145 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308)) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:07:55,149 [main:107] - replacing (Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308), Boolean)
2021-03-12 06:07:55,149 [main:50] - replacing Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308) Boolean
2021-03-12 06:07:55,149 [main:54] - Getting value of type Boolean
2021-03-12 06:07:55,317 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:55,321 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:07:55,321 [main:61] - GENERATED IS CALL =false
2021-03-12 06:07:55,497 [main:67] - randomType = Kla1?
2021-03-12 06:07:55,650 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:07:55,653 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:07:55,803 [main:194] - Type params = []
2021-03-12 06:07:55,932 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:07:56,090 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:07:56,094 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:07:56,437 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:07:56,593 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:07:56,598 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:07:57,099 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:07:57,099 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:07:57,118 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@10334760]
2021-03-12 06:07:57,268 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:57,268 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:07:57,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:57,416 [main:78] - Generated call from random type = (Kla1())?.equals("zutoj").and(false)
2021-03-12 06:07:57,417 [main:106] - GETTING Boolean from List<String>
2021-03-12 06:07:57,450 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:07:57,450 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:07:57,578 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:57,578 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:07:57,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:57,727 [main:117] - GENERATED CALL = (list).equals("gnhuq").xor(false)
2021-03-12 06:07:57,728 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@30fab0b7]]
2021-03-12 06:07:57,728 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:57,872 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:57,876 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@30fab0b7]
2021-03-12 06:07:58,004 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:58,004 [main:117] - GENERATED CALL = (list).get(-977515585).equals("bcuvn")
2021-03-12 06:07:58,005 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:07:58,005 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:07:58,151 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:58,154 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:07:58,308 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:58,311 [main:117] - GENERATED CALL = (list).contains("ybylt").or(true)
2021-03-12 06:07:58,311 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e7148dd]]
2021-03-12 06:07:58,311 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4e7148dd]
2021-03-12 06:07:58,312 [main:117] - GENERATED CALL = (list).any()
2021-03-12 06:07:58,312 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d186c2f]]
2021-03-12 06:07:58,312 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:58,441 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:58,444 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d186c2f]
2021-03-12 06:07:58,589 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:58,764 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:07:58,768 [main:117] - GENERATED CALL = (list).get(-965876043).startsWith("fmhxt", false)
2021-03-12 06:07:58,768 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42d6458d]]
2021-03-12 06:07:58,768 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:07:58,910 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:07:58,913 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42d6458d]
2021-03-12 06:07:58,914 [main:117] - GENERATED CALL = (list).get(1230130274).toBoolean()
2021-03-12 06:07:58,914 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:07:58,914 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:07:59,075 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:07:59,079 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:07:59,224 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:07:59,225 [main:117] - GENERATED CALL = (list).contains("rqolk").equals("hutta")
2021-03-12 06:07:59,225 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8658ba9]]
2021-03-12 06:07:59,225 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8658ba9]
2021-03-12 06:07:59,225 [main:117] - GENERATED CALL = (list).isNullOrEmpty()
2021-03-12 06:07:59,225 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d65fbab]]
2021-03-12 06:07:59,225 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d65fbab]
2021-03-12 06:07:59,225 [main:117] - GENERATED CALL = (list).isNotEmpty()
2021-03-12 06:07:59,225 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26327339]]
2021-03-12 06:07:59,225 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@26327339]
2021-03-12 06:07:59,353 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 06:07:59,356 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:07:59,359 [main:117] - GENERATED CALL = (list).all({a: T -> false})
2021-03-12 06:07:59,359 [main:114] - replacement of Kla0().prope3 != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(1353363018331098664).toString(108409308) of type Boolean is (list).contains("rqolk").equals("hutta")
2021-03-12 06:07:59,504 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:07:59,505 [main:66] - Compilation checking started
2021-03-12 06:08:00,116 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:00,118 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:08:00,118 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:08:00,118 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:08:00,275 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:08:00,282 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:08:00,812 [main:67] - randomType = Kla3<Kla1?>?
2021-03-12 06:08:00,941 [main:302] - generating value of type = Kla3<Kla1?> false depth = 0
2021-03-12 06:08:00,944 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:08:01,452 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 06:08:01,456 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:08:01,479 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 06:08:01,516 [main:106] - GETTING EmptyCoroutineContext from Short
2021-03-12 06:08:01,578 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:08:01,578 [main:107] - replacing (Kla4(), Kla4)
2021-03-12 06:08:01,578 [main:50] - replacing Kla4() Kla4
2021-03-12 06:08:01,578 [main:54] - Getting value of type Kla4
2021-03-12 06:08:01,713 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:08:01,716 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error("Continuation " + c + (Kla0()).prope3.capitalize())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:08:01,716 [main:58] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-12 06:08:01,716 [main:61] - GENERATED IS CALL =true
2021-03-12 06:08:01,890 [main:67] - randomType = ArrayList<Int>
2021-03-12 06:08:02,033 [main:302] - generating value of type = ArrayList<Int> false depth = 0
2021-03-12 06:08:02,166 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Int> = TODO()
2021-03-12 06:08:02,170 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Int> = TODO()
2021-03-12 06:08:02,333 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 06:08:02,517 [main:106] - GETTING Kla4 from Short
2021-03-12 06:08:02,568 [main:106] - GETTING Kla4 from List<String>
2021-03-12 06:08:02,597 [main:114] - replacement of Kla4() of type Kla4 is Kla4()
2021-03-12 06:08:02,748 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:08:02,751 [main:107] - replacing (Kla1, Kla7)
2021-03-12 06:08:02,751 [main:50] - replacing Kla1 Kla7
2021-03-12 06:08:02,751 [main:54] - Getting value of type Kla7
2021-03-12 06:08:02,902 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 06:08:02,906 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-12 06:08:02,906 [main:58] - GENERATED VALUE OF TYPE Kla7 = 
2021-03-12 06:08:03,056 [main:67] - randomType = Float
2021-03-12 06:08:03,205 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:08:03,240 [main:106] - GETTING Kla7 from Short
2021-03-12 06:08:03,272 [main:106] - GETTING Kla7 from List<String>
2021-03-12 06:08:03,310 [main:111] - Cant find and generate replacement for Kla1 type Kla7
2021-03-12 06:08:03,310 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:08:03,310 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:08:03,310 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:08:03,439 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:08:03,445 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:08:04,267 [main:67] - randomType = ArrayDeque<Collection<Kla4?>?>?
2021-03-12 06:08:04,393 [main:302] - generating value of type = ArrayDeque<Collection<Kla4?>?> false depth = 0
2021-03-12 06:08:04,548 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Collection<Kla4?>?>): ArrayDeque<Collection<Kla4?>?> = TODO()
2021-03-12 06:08:04,553 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Collection<Kla4?>?>): ArrayDeque<Collection<Kla4?>?> = TODO()
2021-03-12 06:08:04,858 [main:302] - generating value of type = Collection<Collection<Kla4?>?> false depth = 3
2021-03-12 06:08:05,021 [main:43] - GENERATING CALL OF fun UByteArray(size: kotlin.Int): Collection<Collection<Kla4?>?> = TODO()
2021-03-12 06:08:05,026 [main:61] - WITHOUT TYPE PARAMS = fun UByteArray(size: kotlin.Int): Collection<Collection<Kla4?>?> = TODO()
2021-03-12 06:08:05,335 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:08:05,339 [main:95] - GENERATED = UByteArray(-1789870798)
2021-03-12 06:08:05,339 [main:95] - GENERATED = ArrayDeque<Collection<Kla4?>?>(UByteArray(-1789870798))
2021-03-12 06:08:05,576 [main:106] - GETTING EmptyCoroutineContext from Short
2021-03-12 06:08:05,622 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 06:08:05,660 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:08:05,660 [main:107] - replacing ("Continuation " + c + (Kla0()).prope3.capitalize(), String)
2021-03-12 06:08:05,660 [main:50] - replacing "Continuation " + c + (Kla0()).prope3.capitalize() String
2021-03-12 06:08:05,660 [main:54] - Getting value of type String
2021-03-12 06:08:05,827 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:05,831 [main:58] - GENERATED VALUE OF TYPE String = "mojfi"
2021-03-12 06:08:05,831 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:06,673 [main:67] - randomType = Function1<ArrayList<HashSet<Short?>>, Kla6>
2021-03-12 06:08:06,674 [main:106] - GETTING String from Short
2021-03-12 06:08:06,722 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:08:06,722 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:06,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:08:06,722 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:08:06,722 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:08:06,723 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:06,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:08:06,723 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:08:06,723 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]]
2021-03-12 06:08:06,723 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:08:06,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:08:06,874 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:06,878 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().toString(-2090982906)
2021-03-12 06:08:06,878 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:08:06,878 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:06,878 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:08:07,005 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:07,008 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("fldbs")
2021-03-12 06:08:07,009 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:08:07,009 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:08:07,167 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:08:07,171 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:08:07,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:07,318 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(7964045255740568844).toString(-1359791484)
2021-03-12 06:08:07,318 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:08:07,318 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:08:07,318 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:08:07,445 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:07,448 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1358602959)
2021-03-12 06:08:07,448 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:08:07,448 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:08:07,598 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:07,601 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:08:07,747 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:07,751 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(68).toString(479944244)
2021-03-12 06:08:07,751 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:08:07,751 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:08:07,880 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:07,883 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(523123775)
2021-03-12 06:08:07,883 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:08:07,884 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:08:07,884 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:08:08,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:08,037 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(-1929593613)
2021-03-12 06:08:08,037 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:08:08,038 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:08:08,038 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:08:08,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:08,186 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(1715155076)
2021-03-12 06:08:08,187 [main:114] - replacement of "Continuation " + c + (Kla0()).prope3.capitalize() of type String is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase()
2021-03-12 06:08:08,312 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:08,313 [main:66] - Compilation checking started
2021-03-12 06:08:08,890 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:08,894 [main:107] - replacing (exceptionOrNull(), Throwable?)
2021-03-12 06:08:08,894 [main:50] - replacing exceptionOrNull() Throwable?
2021-03-12 06:08:08,894 [main:54] - Getting value of type Throwable?
2021-03-12 06:08:09,052 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:08:09,205 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 06:08:09,210 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 06:08:09,690 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:08:09,694 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 06:08:09,854 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): Throwable = TODO()
2021-03-12 06:08:09,859 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): Throwable = TODO()
2021-03-12 06:08:10,169 [main:302] - generating value of type = Any false depth = 6
2021-03-12 06:08:10,170 [main:95] - GENERATED = AssertionError("hpmvh")
2021-03-12 06:08:10,170 [main:95] - GENERATED = IllegalStateException("ohpxr", AssertionError("hpmvh"))
2021-03-12 06:08:10,170 [main:58] - GENERATED VALUE OF TYPE Throwable? = IllegalStateException("ohpxr", AssertionError("hpmvh"))
2021-03-12 06:08:10,170 [main:61] - GENERATED IS CALL =true
2021-03-12 06:08:10,176 [main:67] - randomType = Short
2021-03-12 06:08:10,326 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:08:10,371 [main:106] - GETTING Throwable? from List<String>
2021-03-12 06:08:10,402 [main:106] - GETTING Throwable? from Short
2021-03-12 06:08:10,460 [main:114] - replacement of exceptionOrNull() of type Throwable? is IllegalStateException("ohpxr", AssertionError("hpmvh"))
2021-03-12 06:08:10,590 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:08:10,590 [main:66] - Compilation checking started
2021-03-12 06:08:10,964 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.IllegalStateException("ohpxr", AssertionError("hpmvh"))?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != numberOfSuspensions)
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:10,967 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:08:10,967 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:08:10,967 [main:54] - Getting value of type Int
2021-03-12 06:08:11,113 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:11,117 [main:58] - GENERATED VALUE OF TYPE Int = 794318012
2021-03-12 06:08:11,117 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:11,463 [main:67] - randomType = MutableMap<UByte, Kla5>
2021-03-12 06:08:11,464 [main:106] - GETTING Int from Short
2021-03-12 06:08:11,498 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddb00fa]]
2021-03-12 06:08:11,498 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:08:11,499 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddb00fa]
2021-03-12 06:08:11,639 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:11,643 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().or(-1110406320)
2021-03-12 06:08:11,643 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51d14a8a]]
2021-03-12 06:08:11,643 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:08:11,643 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@51d14a8a]
2021-03-12 06:08:11,643 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countTrailingZeroBits()
2021-03-12 06:08:11,643 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@319b4b36]]
2021-03-12 06:08:11,643 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:08:11,643 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@319b4b36]
2021-03-12 06:08:11,774 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:11,777 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().div(5)
2021-03-12 06:08:11,777 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]]
2021-03-12 06:08:11,777 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:08:11,932 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:11,935 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]
2021-03-12 06:08:12,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:12,219 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:12,222 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-100).coerceIn(2090086254, 351838988)
2021-03-12 06:08:12,222 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fb9fa70]]
2021-03-12 06:08:12,222 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:08:12,222 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fb9fa70]
2021-03-12 06:08:12,386 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:12,390 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(104)
2021-03-12 06:08:12,390 [main:113] - Case = [@kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ad01195]]
2021-03-12 06:08:12,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ad01195]
2021-03-12 06:08:12,538 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:12,541 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24)
2021-03-12 06:08:12,541 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17fa3fb2]]
2021-03-12 06:08:12,541 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:08:12,542 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17fa3fb2]
2021-03-12 06:08:12,542 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().countTrailingZeroBits()
2021-03-12 06:08:12,542 [main:113] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@f559dd2]]
2021-03-12 06:08:12,542 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@f559dd2]
2021-03-12 06:08:12,542 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).unaryPlus()
2021-03-12 06:08:12,542 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-12 06:08:12,542 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:08:12,670 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:12,670 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:08:12,824 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:12,828 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("bzptg").compareTo(false)
2021-03-12 06:08:12,828 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]]
2021-03-12 06:08:12,828 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:08:12,977 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:12,980 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]
2021-03-12 06:08:13,111 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:13,114 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-2).minus(-78)
2021-03-12 06:08:13,114 [main:114] - replacement of numberOfSuspensions of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24)
2021-03-12 06:08:13,263 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:13,264 [main:66] - Compilation checking started
2021-03-12 06:08:13,881 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException("fail 2")

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:13,883 [main:107] - replacing (RuntimeException("fail 2"), RuntimeException)
2021-03-12 06:08:13,884 [main:50] - replacing RuntimeException("fail 2") RuntimeException
2021-03-12 06:08:13,884 [main:54] - Getting value of type RuntimeException
2021-03-12 06:08:14,048 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 06:08:14,054 [main:58] - GENERATED VALUE OF TYPE RuntimeException = RuntimeException()
2021-03-12 06:08:14,054 [main:61] - GENERATED IS CALL =true
2021-03-12 06:08:14,556 [main:67] - randomType = Array<ULong>
2021-03-12 06:08:14,713 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-12 06:08:14,849 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong): Array<ULong> = TODO()
2021-03-12 06:08:14,854 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->ULong): Array<ULong> = TODO()
2021-03-12 06:08:15,347 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:08:15,351 [main:302] - generating value of type = Function1<Int, ULong> false depth = 3
2021-03-12 06:08:15,354 [main:302] - generating value of type = ULong true depth = 4
2021-03-12 06:08:15,357 [main:95] - GENERATED = Array<ULong>(1164929508, {a: Int -> 9037177055508121177.toULong()})
2021-03-12 06:08:15,374 [main:106] - GETTING RuntimeException from Short
2021-03-12 06:08:15,418 [main:106] - GETTING RuntimeException from List<String>
2021-03-12 06:08:15,440 [main:114] - replacement of RuntimeException("fail 2") of type RuntimeException is RuntimeException()
2021-03-12 06:08:15,587 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:08:15,588 [main:66] - Compilation checking started
2021-03-12 06:08:16,198 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if (prope8 != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:16,202 [main:107] - replacing (prope6, Continuation<String>)
2021-03-12 06:08:16,202 [main:50] - replacing prope6 Continuation<String>
2021-03-12 06:08:16,202 [main:54] - Getting value of type Continuation<String>
2021-03-12 06:08:16,370 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:08:16,525 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:16,529 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:17,029 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:08:17,215 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:17,220 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:17,566 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:08:17,740 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:17,745 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:18,261 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 06:08:18,422 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:18,426 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:18,950 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 06:08:19,103 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:19,107 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:19,639 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-12 06:08:19,825 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:19,830 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:20,414 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:20,415 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:20,415 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:20,415 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:20,415 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:20,415 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:20,415 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 06:08:20,594 [main:67] - randomType = ULong
2021-03-12 06:08:20,734 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:08:20,775 [main:106] - GETTING Continuation<String> from Short
2021-03-12 06:08:20,818 [main:106] - GETTING Continuation<String> from List<String>
2021-03-12 06:08:20,840 [main:111] - Cant find and generate replacement for prope6 type Continuation<String>
2021-03-12 06:08:20,840 [main:107] - replacing (prope8, Int)
2021-03-12 06:08:20,841 [main:50] - replacing prope8 Int
2021-03-12 06:08:20,841 [main:54] - Getting value of type Int
2021-03-12 06:08:20,993 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:20,996 [main:58] - GENERATED VALUE OF TYPE Int = -937578943
2021-03-12 06:08:20,997 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:21,334 [main:67] - randomType = Collection<UInt>
2021-03-12 06:08:21,335 [main:106] - GETTING Int from List<String>
2021-03-12 06:08:21,363 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]]
2021-03-12 06:08:21,363 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]
2021-03-12 06:08:21,363 [main:117] - GENERATED CALL = (list).size.unaryPlus()
2021-03-12 06:08:21,363 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-12 06:08:21,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-12 06:08:21,363 [main:117] - GENERATED CALL = (list).size.takeHighestOneBit()
2021-03-12 06:08:21,363 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@42583d8d]]
2021-03-12 06:08:21,364 [main:117] - GENERATED CALL = (list).size.absoluteValue
2021-03-12 06:08:21,364 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]]
2021-03-12 06:08:21,364 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]
2021-03-12 06:08:21,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:21,624 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:21,627 [main:117] - GENERATED CALL = (list).size.coerceIn(-1923605681, 1381710953)
2021-03-12 06:08:21,627 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8c07622]]
2021-03-12 06:08:21,628 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:21,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:21,758 [main:117] - GENERATED CALL = (list).get(1201823504).length
2021-03-12 06:08:21,758 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-12 06:08:21,758 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:08:21,886 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:21,889 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:08:22,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:22,023 [main:117] - GENERATED CALL = (list).contains("tpxis").compareTo(false)
2021-03-12 06:08:22,023 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27f713bb]]
2021-03-12 06:08:22,023 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27f713bb]
2021-03-12 06:08:22,023 [main:117] - GENERATED CALL = (list).size.inc()
2021-03-12 06:08:22,023 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8]]
2021-03-12 06:08:22,023 [main:117] - GENERATED CALL = (list).size
2021-03-12 06:08:22,023 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddb00fa]]
2021-03-12 06:08:22,023 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddb00fa]
2021-03-12 06:08:22,153 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:22,156 [main:117] - GENERATED CALL = (list).size.or(-722573029)
2021-03-12 06:08:22,318 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7233c467]]
2021-03-12 06:08:22,318 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7233c467]
2021-03-12 06:08:22,319 [main:117] - GENERATED CALL = (list).size.inv()
2021-03-12 06:08:22,319 [main:114] - replacement of prope8 of type Int is (list).size.or(-722573029)
2021-03-12 06:08:22,448 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:22,449 [main:66] - Compilation checking started
2021-03-12 06:08:23,052 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:23,056 [main:107] - replacing (prope2, Continuation<String>?)
2021-03-12 06:08:23,056 [main:50] - replacing prope2 Continuation<String>?
2021-03-12 06:08:23,056 [main:54] - Getting value of type Continuation<String>?
2021-03-12 06:08:23,216 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:08:23,351 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:23,355 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:23,797 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:08:23,930 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:23,934 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:24,226 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:08:24,363 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:24,367 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:24,909 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 06:08:25,102 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:25,107 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:25,681 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:25,681 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:25,681 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:25,682 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:25,682 [main:58] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-12 06:08:25,865 [main:67] - randomType = LinkedHashMap<Kla4, Kla1>
2021-03-12 06:08:26,018 [main:302] - generating value of type = LinkedHashMap<Kla4, Kla1> false depth = 0
2021-03-12 06:08:26,178 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Kla4, Kla1>): LkedHashMap<Kla4, Kla1> = TODO()
2021-03-12 06:08:26,182 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Kla4, Kla1>): LkedHashMap<Kla4, Kla1> = TODO()
2021-03-12 06:08:26,320 [main:302] - generating value of type = Pair<Kla4, Kla1> false depth = 3
2021-03-12 06:08:26,477 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla4, second: Kla1): Pair<Kla4, Kla1> = TODO()
2021-03-12 06:08:26,482 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla4, second: Kla1): Pair<Kla4, Kla1> = TODO()
2021-03-12 06:08:26,639 [main:302] - generating value of type = Kla4 false depth = 6
2021-03-12 06:08:26,642 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:08:26,643 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-12 06:08:26,646 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:08:26,776 [main:194] - Type params = []
2021-03-12 06:08:26,932 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-12 06:08:27,086 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:27,091 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:27,430 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-12 06:08:27,586 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:27,590 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:28,129 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:28,129 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:28,129 [main:95] - GENERATED = Pair<Kla4, Kla1>(Kla4(), Kla1())
2021-03-12 06:08:28,130 [main:95] - GENERATED = linkedMapOf<Kla4, Kla1>(Pair<Kla4, Kla1>(Kla4(), Kla1()))
2021-03-12 06:08:28,261 [main:106] - GETTING Continuation<String>? from List<String>
2021-03-12 06:08:28,284 [main:106] - GETTING Continuation<String>? from Short
2021-03-12 06:08:28,313 [main:111] - Cant find and generate replacement for prope2 type Continuation<String>?
2021-03-12 06:08:28,313 [main:107] - replacing (prope6, Continuation<String>)
2021-03-12 06:08:28,313 [main:50] - replacing prope6 Continuation<String>
2021-03-12 06:08:28,313 [main:54] - Getting value of type Continuation<String>
2021-03-12 06:08:28,478 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:08:28,633 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:28,638 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:29,140 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:08:29,277 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:29,281 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:29,626 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:08:29,766 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:29,770 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:30,278 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:30,279 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:30,279 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:08:30,279 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 06:08:30,616 [main:67] - randomType = HashSet<UByte>
2021-03-12 06:08:30,745 [main:302] - generating value of type = HashSet<UByte> false depth = 0
2021-03-12 06:08:30,903 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): HashSet<UByte> = TODO()
2021-03-12 06:08:30,908 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): HashSet<UByte> = TODO()
2021-03-12 06:08:31,063 [main:95] - GENERATED = linkedSetOf<UByte>()
2021-03-12 06:08:31,195 [main:106] - GETTING Continuation<String> from Short
2021-03-12 06:08:31,224 [main:106] - GETTING Continuation<String> from List<String>
2021-03-12 06:08:31,247 [main:111] - Cant find and generate replacement for prope6 type Continuation<String>
2021-03-12 06:08:31,247 [main:107] - replacing ({ (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() }, Function0<Boolean>)
2021-03-12 06:08:31,247 [main:50] - replacing { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() } Function0<Boolean>
2021-03-12 06:08:31,247 [main:54] - Getting value of type Function0<Boolean>
2021-03-12 06:08:31,396 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-12 06:08:31,399 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:08:31,402 [main:58] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-12 06:08:31,403 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:31,582 [main:67] - randomType = Array<Kla2>
2021-03-12 06:08:31,710 [main:302] - generating value of type = Array<Kla2> false depth = 0
2021-03-12 06:08:31,865 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla2): Array<Kla2> = TODO()
2021-03-12 06:08:31,869 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla2): Array<Kla2> = TODO()
2021-03-12 06:08:32,359 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:08:32,362 [main:302] - generating value of type = Function1<Int, Kla2> false depth = 3
2021-03-12 06:08:32,366 [main:302] - generating value of type = Kla2 false depth = 4
2021-03-12 06:08:32,369 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:08:32,369 [main:95] - GENERATED = Array<Kla2>(-1245679957, {a: Int -> Kla2()})
2021-03-12 06:08:32,383 [main:106] - GETTING Function0<Boolean> from List<String>
2021-03-12 06:08:32,415 [main:106] - GETTING Function0<Boolean> from Short
2021-03-12 06:08:32,451 [main:114] - replacement of { (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite() } of type Function0<Boolean> is { true}
2021-03-12 06:08:32,592 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:08:32,593 [main:66] - Compilation checking started
2021-03-12 06:08:33,183 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        prope7.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:33,187 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 06:08:33,188 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 06:08:33,188 [main:54] - Getting value of type String
2021-03-12 06:08:33,344 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:33,347 [main:58] - GENERATED VALUE OF TYPE String = "vvkbd"
2021-03-12 06:08:33,347 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:33,359 [main:67] - randomType = Kla1
2021-03-12 06:08:33,510 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:08:33,513 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:08:33,642 [main:194] - Type params = []
2021-03-12 06:08:33,789 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:08:33,940 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:33,945 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:34,268 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:08:34,424 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:34,428 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:34,931 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 06:08:35,076 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:35,080 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:35,599 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:08:35,599 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:08:35,600 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:08:35,617 [main:106] - GETTING String from List<String>
2021-03-12 06:08:35,639 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d6e48c6]]
2021-03-12 06:08:35,639 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.min(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@2d6e48c6]
2021-03-12 06:08:35,640 [main:117] - GENERATED CALL = (list).min()
2021-03-12 06:08:35,640 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]]
2021-03-12 06:08:35,640 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:35,791 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:35,794 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]
2021-03-12 06:08:35,941 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:08:36,078 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:08:36,227 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:36,231 [main:117] - GENERATED CALL = (list).get(1645170416).replace('ä¹', '?', false)
2021-03-12 06:08:36,231 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]]
2021-03-12 06:08:36,231 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:36,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:36,392 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]
2021-03-12 06:08:36,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:36,676 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:36,827 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:08:36,967 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:08:36,971 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:08:37,310 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:08:37,313 [main:95] - GENERATED = StringBuilder(82508834)
2021-03-12 06:08:37,314 [main:117] - GENERATED CALL = (list).get(1757056880).replaceRange(-497737895, 1329142786, StringBuilder(82508834))
2021-03-12 06:08:37,314 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565362af]]
2021-03-12 06:08:37,314 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:37,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:37,449 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565362af]
2021-03-12 06:08:37,594 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:08:37,744 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:37,878 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:37,881 [main:117] - GENERATED CALL = (list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu")
2021-03-12 06:08:37,881 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]]
2021-03-12 06:08:37,881 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:38,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:38,049 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]
2021-03-12 06:08:38,050 [main:117] - GENERATED CALL = (list).get(1225823997).toLowerCase()
2021-03-12 06:08:38,050 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]]
2021-03-12 06:08:38,050 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:38,199 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:38,203 [main:117] - GENERATED CALL = (list).get(-1501194133)
2021-03-12 06:08:38,203 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20595b6a]]
2021-03-12 06:08:38,203 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:38,336 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:38,339 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20595b6a]
2021-03-12 06:08:38,339 [main:117] - GENERATED CALL = (list).get(-852336524).trimIndent()
2021-03-12 06:08:38,339 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@777ebf6b]]
2021-03-12 06:08:38,339 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.lastOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@777ebf6b]
2021-03-12 06:08:38,340 [main:117] - GENERATED CALL = (list).lastOrNull()
2021-03-12 06:08:38,340 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]]
2021-03-12 06:08:38,340 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]
2021-03-12 06:08:38,340 [main:117] - GENERATED CALL = (list).firstOrNull()
2021-03-12 06:08:38,340 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e563e3a]]
2021-03-12 06:08:38,340 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:38,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:38,502 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e563e3a]
2021-03-12 06:08:38,661 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:08:38,664 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:08:38,667 [main:117] - GENERATED CALL = (list).get(-53610274).replaceFirstChar({a: Char -> 'ä©º'})
2021-03-12 06:08:38,667 [main:114] - replacement of "tail-call optimization hit: method " of type String is (list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu")
2021-03-12 06:08:38,801 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:38,801 [main:66] - Compilation checking started
2021-03-12 06:08:39,350 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:39,352 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:08:39,353 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:08:39,353 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:08:39,499 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:08:39,502 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:08:39,653 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:08:39,657 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:08:39,966 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:08:39,966 [main:95] - GENERATED = println("wxadp")
2021-03-12 06:08:39,966 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("wxadp")}
2021-03-12 06:08:39,967 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:39,973 [main:67] - randomType = UInt
2021-03-12 06:08:40,123 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:08:40,165 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:08:40,211 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:08:40,248 [main:114] - replacement of prope10 of type Function0<Unit> is { println("wxadp")}
2021-03-12 06:08:40,396 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:08:40,396 [main:66] - Compilation checking started
2021-03-12 06:08:40,820 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        { println("wxadp")}()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:40,824 [main:107] - replacing (prope3.isSuccess, Boolean)
2021-03-12 06:08:40,825 [main:50] - replacing prope3.isSuccess Boolean
2021-03-12 06:08:40,825 [main:54] - Getting value of type Boolean
2021-03-12 06:08:40,991 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:40,995 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:08:40,995 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:41,001 [main:67] - randomType = Int
2021-03-12 06:08:41,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:41,195 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@689cedb7]
2021-03-12 06:08:41,196 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53619270]
2021-03-12 06:08:41,196 [main:78] - Generated call from random type = (1978250076).toChar().isHighSurrogate()
2021-03-12 06:08:41,197 [main:106] - GETTING Boolean from Short
2021-03-12 06:08:41,242 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]]
2021-03-12 06:08:41,242 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:08:41,242 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]
2021-03-12 06:08:41,243 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isFinite()
2021-03-12 06:08:41,243 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e083961]]
2021-03-12 06:08:41,243 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:08:41,243 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e083961]
2021-03-12 06:08:41,243 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().isFinite()
2021-03-12 06:08:41,243 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a81bfc]]
2021-03-12 06:08:41,243 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:41,243 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a81bfc]
2021-03-12 06:08:41,243 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isTitleCase()
2021-03-12 06:08:41,243 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d6f798d]]
2021-03-12 06:08:41,243 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:41,244 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d6f798d]
2021-03-12 06:08:41,244 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLowSurrogate()
2021-03-12 06:08:41,244 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:08:41,244 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:08:41,392 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:41,392 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:08:41,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:41,546 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("icyxt").and(false)
2021-03-12 06:08:41,546 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b9bc8]]
2021-03-12 06:08:41,546 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:41,546 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b9bc8]
2021-03-12 06:08:41,546 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isWhitespace()
2021-03-12 06:08:41,546 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]]
2021-03-12 06:08:41,546 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:08:41,681 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:41,682 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("dhbwp")
2021-03-12 06:08:41,682 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]]
2021-03-12 06:08:41,682 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:08:41,830 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:08:41,833 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]
2021-03-12 06:08:41,986 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:41,987 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.139131040032196).equals("cjlfs")
2021-03-12 06:08:41,987 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbd7d63]]
2021-03-12 06:08:41,987 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:08:41,987 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbd7d63]
2021-03-12 06:08:41,987 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLetter()
2021-03-12 06:08:41,987 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]]
2021-03-12 06:08:41,988 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:08:42,119 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:08:42,122 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]
2021-03-12 06:08:42,122 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.0022241530907355367).isNaN()
2021-03-12 06:08:42,122 [main:114] - replacement of prope3.isSuccess of type Boolean is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isTitleCase()
2021-03-12 06:08:42,272 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:42,275 [main:107] - replacing (c, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>)
2021-03-12 06:08:42,275 [main:50] - replacing c [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-12 06:08:42,275 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit>
2021-03-12 06:08:42,426 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 0
2021-03-12 06:08:42,429 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:08:42,574 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:08:42,578 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:08:42,912 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:08:42,912 [main:95] - GENERATED = print("lxswh")
2021-03-12 06:08:42,913 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> = {a: Kla0 -> print("lxswh")}
2021-03-12 06:08:42,913 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:43,253 [main:67] - randomType = Function1<Float, Short>
2021-03-12 06:08:43,257 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from List<String>
2021-03-12 06:08:43,295 [main:106] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> from Short
2021-03-12 06:08:43,336 [main:114] - replacement of c of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> is {a: Kla0 -> print("lxswh")}
2021-03-12 06:08:43,479 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:08:43,480 [main:66] - Compilation checking started
2021-03-12 06:08:43,859 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    {a: Kla0 -> print("lxswh")}.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            prope1.prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:43,862 [main:107] - replacing (prope1, Kla5)
2021-03-12 06:08:43,862 [main:50] - replacing prope1 Kla5
2021-03-12 06:08:43,862 [main:54] - Getting value of type Kla5
2021-03-12 06:08:44,013 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:08:44,016 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:08:44,017 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 06:08:44,017 [main:61] - GENERATED IS CALL =true
2021-03-12 06:08:44,023 [main:67] - randomType = Int
2021-03-12 06:08:44,172 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:44,230 [main:106] - GETTING Kla5 from Short
2021-03-12 06:08:44,287 [main:106] - GETTING Kla5 from List<String>
2021-03-12 06:08:44,321 [main:114] - replacement of prope1 of type Kla5 is Kla5()
2021-03-12 06:08:44,472 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:08:44,473 [main:66] - Compilation checking started
2021-03-12 06:08:45,085 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:45,087 [main:107] - replacing (prope3, Result<Any?>)
2021-03-12 06:08:45,088 [main:50] - replacing prope3 Result<Any?>
2021-03-12 06:08:45,088 [main:54] - Getting value of type Result<Any?>
2021-03-12 06:08:45,236 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 06:08:45,392 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:08:45,397 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:08:45,711 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 06:08:45,714 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:08:45,715 [main:95] - GENERATED = runCatching<Any?>({ "jbckk"})
2021-03-12 06:08:45,715 [main:58] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "jbckk"})
2021-03-12 06:08:45,715 [main:61] - GENERATED IS CALL =true
2021-03-12 06:08:45,721 [main:67] - randomType = Long
2021-03-12 06:08:45,878 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:08:45,932 [main:106] - GETTING Result<Any?> from Short
2021-03-12 06:08:45,986 [main:106] - GETTING Result<Any?> from List<String>
2021-03-12 06:08:46,018 [main:114] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "jbckk"})
2021-03-12 06:08:46,166 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:08:46,167 [main:66] - Compilation checking started
2021-03-12 06:08:46,888 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:46,893 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:08:46,893 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:08:46,893 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:08:47,068 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:08:47,072 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:08:47,230 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:08:47,234 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:08:47,577 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:08:47,580 [main:95] - GENERATED = check(true)
2021-03-12 06:08:47,580 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 06:08:47,580 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:47,749 [main:67] - randomType = Byte
2021-03-12 06:08:47,882 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:08:47,920 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:08:47,944 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:08:47,972 [main:114] - replacement of prope10 of type Function0<Unit> is { check(true)}
2021-03-12 06:08:48,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:08:48,122 [main:66] - Compilation checking started
2021-03-12 06:08:48,539 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            { check(true)}()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:48,542 [main:107] - replacing (fu6(), Boolean)
2021-03-12 06:08:48,542 [main:50] - replacing fu6() Boolean
2021-03-12 06:08:48,542 [main:54] - Getting value of type Boolean
2021-03-12 06:08:48,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:48,679 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:08:48,680 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:48,686 [main:67] - randomType = Long
2021-03-12 06:08:48,873 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:08:48,930 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@683527b3]
2021-03-12 06:08:48,931 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]
2021-03-12 06:08:49,126 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:49,126 [main:78] - Generated call from random type = (-1765866988853211251).toByte().equals("oizok")
2021-03-12 06:08:49,127 [main:106] - GETTING Boolean from List<String>
2021-03-12 06:08:49,166 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@764e3a1]]
2021-03-12 06:08:49,166 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:08:49,166 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@764e3a1]
2021-03-12 06:08:49,344 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:49,344 [main:117] - GENERATED CALL = (list).listIterator().equals("ulspl")
2021-03-12 06:08:49,344 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53e6bd1f]]
2021-03-12 06:08:49,344 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:49,497 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:49,500 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53e6bd1f]
2021-03-12 06:08:49,631 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:49,634 [main:117] - GENERATED CALL = (list).get(-17294266).matches("jnarx")
2021-03-12 06:08:49,634 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d65fbab]]
2021-03-12 06:08:49,634 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.isNotEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@3d65fbab]
2021-03-12 06:08:49,634 [main:117] - GENERATED CALL = (list).isNotEmpty()
2021-03-12 06:08:49,634 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:08:49,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:08:49,780 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:49,780 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:08:49,780 [main:117] - GENERATED CALL = (list).equals("dxmlu").not()
2021-03-12 06:08:49,780 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:08:49,780 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:08:49,936 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:49,940 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:08:50,072 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:50,072 [main:117] - GENERATED CALL = (list).contains("valij").equals("nwgkq")
2021-03-12 06:08:50,072 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]]
2021-03-12 06:08:50,073 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:08:50,218 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:50,222 [main:117] - GENERATED CALL = (list).contains("knzuz")
2021-03-12 06:08:50,222 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:08:50,222 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:08:50,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:50,373 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:08:50,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:50,507 [main:117] - GENERATED CALL = (list).contains("bgncv").xor(false)
2021-03-12 06:08:50,507 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d186c2f]]
2021-03-12 06:08:50,507 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:50,653 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:50,656 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d186c2f]
2021-03-12 06:08:50,803 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:50,944 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:08:50,947 [main:117] - GENERATED CALL = (list).get(81387156).startsWith("zvvjr", true)
2021-03-12 06:08:50,948 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:08:50,948 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:08:51,095 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:51,095 [main:117] - GENERATED CALL = (list).size.equals("kvbxr")
2021-03-12 06:08:51,095 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@6eb48ce3]]
2021-03-12 06:08:51,095 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e]
2021-03-12 06:08:51,095 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@6eb48ce3]
2021-03-12 06:08:51,242 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:08:51,242 [main:117] - GENERATED CALL = (list).iterator().equals("cdjaj")
2021-03-12 06:08:51,242 [main:114] - replacement of fu6() of type Boolean is (list).listIterator().equals("ulspl")
2021-03-12 06:08:51,372 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:51,372 [main:66] - Compilation checking started
2021-03-12 06:08:51,736 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.(list).listIterator().equals("ulspl")) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException("fail 3")
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:51,739 [main:107] - replacing ("fail 3", String)
2021-03-12 06:08:51,739 [main:50] - replacing "fail 3" String
2021-03-12 06:08:51,739 [main:54] - Getting value of type String
2021-03-12 06:08:51,887 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:51,890 [main:58] - GENERATED VALUE OF TYPE String = "dssli"
2021-03-12 06:08:51,890 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:52,236 [main:67] - randomType = Map<Kla4, Byte>
2021-03-12 06:08:52,237 [main:106] - GETTING String from List<String>
2021-03-12 06:08:52,272 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]]
2021-03-12 06:08:52,273 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:52,430 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:52,435 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]
2021-03-12 06:08:52,584 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:52,587 [main:117] - GENERATED CALL = (list).get(967538935).take(1488046264)
2021-03-12 06:08:52,588 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]]
2021-03-12 06:08:52,588 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:52,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:52,722 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-12 06:08:52,870 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:08:53,021 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:53,160 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:53,165 [main:117] - GENERATED CALL = (list).get(-1804638359).replaceAfter('ë»', "yfpbr", "fcfdr")
2021-03-12 06:08:53,166 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]]
2021-03-12 06:08:53,166 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:53,342 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:53,346 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]
2021-03-12 06:08:53,346 [main:117] - GENERATED CALL = (list).get(-1280203824).uppercase()
2021-03-12 06:08:53,346 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]]
2021-03-12 06:08:53,346 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:53,494 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:53,498 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]
2021-03-12 06:08:53,632 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:08:53,789 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:08:53,794 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:08:54,106 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:08:54,285 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:08:54,290 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 06:08:54,597 [main:302] - generating value of type = String true depth = 6
2021-03-12 06:08:54,600 [main:95] - GENERATED = StringBuilder("ymgoz")
2021-03-12 06:08:54,600 [main:95] - GENERATED = StringBuilder(StringBuilder("ymgoz"))
2021-03-12 06:08:54,601 [main:117] - GENERATED CALL = (list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz")))
2021-03-12 06:08:54,601 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4021890a]]
2021-03-12 06:08:54,601 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Iterable<T>.find(predicate: (T) -> kotlin.Boolean): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4021890a]
2021-03-12 06:08:54,756 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 06:08:54,759 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:08:54,762 [main:117] - GENERATED CALL = (list).find({a: T -> false})
2021-03-12 06:08:54,762 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]]
2021-03-12 06:08:54,762 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:54,912 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:54,916 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]
2021-03-12 06:08:55,052 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:08:55,212 [main:43] - GENERATING CALL OF fun <T> emptySet(): Iterable<Int> = TODO()
2021-03-12 06:08:55,216 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Iterable<Int> = TODO()
2021-03-12 06:08:55,372 [main:95] - GENERATED = emptySet<Int>()
2021-03-12 06:08:55,372 [main:117] - GENERATED CALL = (list).get(1595184971).slice(emptySet<Int>())
2021-03-12 06:08:55,372 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public abstract fun previous(): kotlin.String defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@2e637ce]]
2021-03-12 06:08:55,372 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:08:55,373 [main:149] - GENERATING call of type public abstract fun previous(): kotlin.String defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@2e637ce]
2021-03-12 06:08:55,373 [main:117] - GENERATED CALL = (list).listIterator().previous()
2021-03-12 06:08:55,373 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]]
2021-03-12 06:08:55,373 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:55,508 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:55,511 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]
2021-03-12 06:08:55,660 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:08:55,811 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:55,950 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:55,953 [main:117] - GENERATED CALL = (list).get(245374823).replaceAfterLast('ì£', "cxbix", "skptx")
2021-03-12 06:08:55,954 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]]
2021-03-12 06:08:55,954 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]
2021-03-12 06:08:56,106 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:08:56,109 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:08:56,763 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Map<UInt, Byte?>): R = TODO()
2021-03-12 06:08:56,767 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Map<UInt, Byte?>): R = TODO()
2021-03-12 06:08:57,266 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:08:57,266 [main:302] - generating value of type = Function0<Map<UInt, Byte?>> false depth = 4
2021-03-12 06:08:57,269 [main:302] - generating value of type = Map<UInt, Byte?> false depth = 5
2021-03-12 06:08:57,407 [main:43] - GENERATING CALL OF fun <K, V> mapOf(pairs: Pair<UInt, Byte?>): Map<UInt, Byte?> = TODO()
2021-03-12 06:08:57,412 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(pairs: Pair<UInt, Byte?>): Map<UInt, Byte?> = TODO()
2021-03-12 06:08:57,579 [main:302] - generating value of type = Pair<UInt, Byte?> false depth = 8
2021-03-12 06:08:57,735 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UInt, second: Byte?): Pair<UInt, Byte?> = TODO()
2021-03-12 06:08:57,739 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt, second: Byte?): Pair<UInt, Byte?> = TODO()
2021-03-12 06:08:57,883 [main:302] - generating value of type = UInt true depth = 11
2021-03-12 06:08:57,886 [main:302] - generating value of type = Byte true depth = 11
2021-03-12 06:08:57,889 [main:95] - GENERATED = Pair<UInt, Byte?>(1539786860.toUInt(), 109)
2021-03-12 06:08:57,889 [main:95] - GENERATED = mapOf<UInt, Byte?>(Pair<UInt, Byte?>(1539786860.toUInt(), 109))
2021-03-12 06:08:57,890 [main:95] - GENERATED = synchronized<Map<UInt, Byte?>>("nista", { mapOf<UInt, Byte?>(Pair<UInt, Byte?>(1539786860.toUInt(), 109))})
2021-03-12 06:08:57,890 [main:117] - GENERATED CALL = (list).maxByOrNull({a: T -> synchronized<Map<UInt, Byte?>>("nista", { mapOf<UInt, Byte?>(Pair<UInt, Byte?>(1539786860.toUInt(), 109))})})
2021-03-12 06:08:57,890 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]]
2021-03-12 06:08:57,890 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:08:58,045 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:58,048 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]
2021-03-12 06:08:58,048 [main:117] - GENERATED CALL = (list).get(478279537).toLowerCase()
2021-03-12 06:08:58,048 [main:114] - replacement of "fail 3" of type String is (list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz")))
2021-03-12 06:08:58,196 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:58,197 [main:66] - Compilation checking started
2021-03-12 06:08:58,785 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:08:58,789 [main:107] - replacing ("O", String)
2021-03-12 06:08:58,789 [main:50] - replacing "O" String
2021-03-12 06:08:58,789 [main:54] - Getting value of type String
2021-03-12 06:08:58,970 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:08:58,973 [main:58] - GENERATED VALUE OF TYPE String = "vcjxf"
2021-03-12 06:08:58,973 [main:61] - GENERATED IS CALL =false
2021-03-12 06:08:59,143 [main:67] - randomType = Double
2021-03-12 06:08:59,280 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:08:59,326 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@aca3507]
2021-03-12 06:08:59,326 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:08:59,491 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:08:59,495 [main:78] - Generated call from random type = (0.22297157695716863).toByte().toString(-1427222174)
2021-03-12 06:08:59,495 [main:114] - replacement of "O" of type String is (0.22297157695716863).toByte().toString(-1427222174)
2021-03-12 06:08:59,647 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:08:59,648 [main:66] - Compilation checking started
2021-03-12 06:09:00,088 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw RuntimeException("fail 4")
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = (0.22297157695716863).toByte().toString(-1427222174)

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:00,090 [main:107] - replacing (RuntimeException("fail 4"), RuntimeException)
2021-03-12 06:09:00,091 [main:50] - replacing RuntimeException("fail 4") RuntimeException
2021-03-12 06:09:00,091 [main:54] - Getting value of type RuntimeException
2021-03-12 06:09:00,252 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 06:09:00,259 [main:58] - GENERATED VALUE OF TYPE RuntimeException = IndexOutOfBoundsException()
2021-03-12 06:09:00,259 [main:61] - GENERATED IS CALL =true
2021-03-12 06:09:00,605 [main:67] - randomType = LinkedHashSet<Kla3<Boolean>>
2021-03-12 06:09:00,761 [main:302] - generating value of type = LinkedHashSet<Kla3<Boolean>> false depth = 0
2021-03-12 06:09:00,920 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla3<Boolean>): LkedHashSet<Kla3<Boolean>> = TODO()
2021-03-12 06:09:00,924 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla3<Boolean>): LkedHashSet<Kla3<Boolean>> = TODO()
2021-03-12 06:09:01,070 [main:302] - generating value of type = Kla3<Boolean> false depth = 3
2021-03-12 06:09:01,073 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:09:02,116 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-12 06:09:02,119 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:09:02,120 [main:95] - GENERATED = linkedSetOf<Kla3<Boolean>>(Kla6)
2021-03-12 06:09:02,257 [main:106] - GETTING RuntimeException from Short
2021-03-12 06:09:02,286 [main:106] - GETTING RuntimeException from List<String>
2021-03-12 06:09:02,308 [main:114] - replacement of RuntimeException("fail 4") of type RuntimeException is IndexOutOfBoundsException()
2021-03-12 06:09:02,459 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:09:02,459 [main:66] - Compilation checking started
2021-03-12 06:09:03,080 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if (!Kla0().fu6()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:03,083 [main:107] - replacing (!Kla0().fu6(), Boolean)
2021-03-12 06:09:03,084 [main:50] - replacing !Kla0().fu6() Boolean
2021-03-12 06:09:03,084 [main:54] - Getting value of type Boolean
2021-03-12 06:09:03,264 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:03,267 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:09:03,268 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:03,448 [main:67] - randomType = Kla4?
2021-03-12 06:09:03,582 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:09:03,585 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:09:03,591 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@1ee019ee]
2021-03-12 06:09:03,745 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:03,745 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:09:03,900 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:03,904 [main:78] - Generated call from random type = (Kla4())?.equals("qmykl").or(true)
2021-03-12 06:09:03,905 [main:106] - GETTING Boolean from List<String>
2021-03-12 06:09:03,945 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:09:03,945 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:09:04,090 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:04,094 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:09:04,251 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:04,255 [main:117] - GENERATED CALL = (list).contains("zvupu").or(false)
2021-03-12 06:09:04,255 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:09:04,255 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:09:04,406 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:04,407 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:09:04,546 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:04,549 [main:117] - GENERATED CALL = (list).equals("zazfu").xor(true)
2021-03-12 06:09:04,549 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]]
2021-03-12 06:09:04,549 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:09:04,704 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:04,707 [main:117] - GENERATED CALL = (list).contains("ejiuz")
2021-03-12 06:09:04,707 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@3cd4b54e]]
2021-03-12 06:09:04,708 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:09:04,708 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@3cd4b54e]
2021-03-12 06:09:04,708 [main:117] - GENERATED CALL = (list).listIterator().hasNext()
2021-03-12 06:09:04,708 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:09:04,708 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:09:04,858 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:04,858 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:09:04,999 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:04,999 [main:117] - GENERATED CALL = (list).equals("lgbdr").equals("tkeoc")
2021-03-12 06:09:04,999 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42d6458d]]
2021-03-12 06:09:04,999 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:05,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:05,164 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@42d6458d]
2021-03-12 06:09:05,164 [main:117] - GENERATED CALL = (list).get(-470184722).toBoolean()
2021-03-12 06:09:05,165 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:09:05,165 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:09:05,316 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:05,316 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:09:05,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:05,457 [main:117] - GENERATED CALL = (list).equals("kpscr").and(true)
2021-03-12 06:09:05,457 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e], public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@132ea25]]
2021-03-12 06:09:05,457 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e]
2021-03-12 06:09:05,457 [main:149] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@132ea25]
2021-03-12 06:09:05,457 [main:117] - GENERATED CALL = (list).iterator().hasNext()
2021-03-12 06:09:05,457 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@287abaee]]
2021-03-12 06:09:05,457 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@287abaee]
2021-03-12 06:09:05,611 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:05,611 [main:117] - GENERATED CALL = (list).equals("ulogd")
2021-03-12 06:09:05,612 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:09:05,612 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:09:05,762 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:05,766 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:09:05,904 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:05,908 [main:117] - GENERATED CALL = (list).contains("xpcpk").and(true)
2021-03-12 06:09:05,908 [main:114] - replacement of !Kla0().fu6() of type Boolean is (list).listIterator().hasNext()
2021-03-12 06:09:06,058 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:06,059 [main:66] - Compilation checking started
2021-03-12 06:09:06,796 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (prope5.fu6()) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:06,798 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 06:09:06,799 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 06:09:06,799 [main:54] - Getting value of type Result<Ty0>
2021-03-12 06:09:06,952 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 06:09:07,110 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:09:07,115 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:09:07,499 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:09:07,499 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 06:09:07,837 [main:67] - randomType = Array<Double>
2021-03-12 06:09:07,997 [main:302] - generating value of type = Array<Double> false depth = 0
2021-03-12 06:09:08,154 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Double): Array<Double> = TODO()
2021-03-12 06:09:08,158 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Double): Array<Double> = TODO()
2021-03-12 06:09:08,298 [main:302] - generating value of type = Double true depth = 3
2021-03-12 06:09:08,301 [main:95] - GENERATED = arrayOf<Double>(0.6539650824282185)
2021-03-12 06:09:08,313 [main:106] - GETTING Result<Ty0> from Short
2021-03-12 06:09:08,342 [main:106] - GETTING Result<Ty0> from List<String>
2021-03-12 06:09:08,365 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 06:09:08,365 [main:107] - replacing (prope5.fu6(), Boolean)
2021-03-12 06:09:08,365 [main:50] - replacing prope5.fu6() Boolean
2021-03-12 06:09:08,365 [main:54] - Getting value of type Boolean
2021-03-12 06:09:08,513 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:08,516 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:09:08,516 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:08,528 [main:67] - randomType = Kla4
2021-03-12 06:09:08,678 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:09:08,681 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:09:08,687 [main:149] - GENERATING call of type public final suspend fun fu10(): kotlin.Unit defined in Kla4[SimpleFunctionDescriptorImpl@50e7b444]
2021-03-12 06:09:08,688 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@3cbdbd82]
2021-03-12 06:09:08,821 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:08,822 [main:78] - Generated call from random type = (Kla4()).fu10().equals("zhcar")
2021-03-12 06:09:08,822 [main:106] - GETTING Boolean from Short
2021-03-12 06:09:08,852 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]]
2021-03-12 06:09:08,852 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:09:09,000 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:09,004 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]
2021-03-12 06:09:09,160 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:09,161 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(-89).equals("epnlo")
2021-03-12 06:09:09,161 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69ef1ff1]]
2021-03-12 06:09:09,161 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:09:09,161 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69ef1ff1]
2021-03-12 06:09:09,161 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().isInfinite()
2021-03-12 06:09:09,161 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47c67c19]]
2021-03-12 06:09:09,161 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:09:09,161 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47c67c19]
2021-03-12 06:09:09,162 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().isNaN()
2021-03-12 06:09:09,162 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]]
2021-03-12 06:09:09,162 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:09:09,296 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:09:09,299 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]
2021-03-12 06:09:09,429 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:09,430 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.22293208290224453).equals("stloj")
2021-03-12 06:09:09,430 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20da0119]]
2021-03-12 06:09:09,430 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:09,430 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20da0119]
2021-03-12 06:09:09,430 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLowerCase()
2021-03-12 06:09:09,430 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]]
2021-03-12 06:09:09,430 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:09,430 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]
2021-03-12 06:09:09,430 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isDigit()
2021-03-12 06:09:09,430 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b9bc8]]
2021-03-12 06:09:09,431 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:09,431 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b9bc8]
2021-03-12 06:09:09,431 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isWhitespace()
2021-03-12 06:09:09,431 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:09:09,431 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:09,580 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:09,581 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:09:09,732 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:09,732 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("njfxu").equals("sgqyv")
2021-03-12 06:09:09,732 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:09:09,732 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:09:09,732 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:09:09,867 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:09,867 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().equals("dtpqi")
2021-03-12 06:09:09,867 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]]
2021-03-12 06:09:09,867 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:09:09,868 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:10,024 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:10,024 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().equals("gptke")
2021-03-12 06:09:10,024 [main:114] - replacement of prope5.fu6() of type Boolean is false
2021-03-12 06:09:10,178 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:09:10,179 [main:66] - Compilation checking started
2021-03-12 06:09:10,744 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK") throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:10,748 [main:107] - replacing (false, Boolean)
2021-03-12 06:09:10,748 [main:50] - replacing false Boolean
2021-03-12 06:09:10,748 [main:54] - Getting value of type Boolean
2021-03-12 06:09:10,907 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:10,910 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:09:10,910 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:11,410 [main:67] - randomType = Sequence<Float?>
2021-03-12 06:09:11,411 [main:106] - GETTING Boolean from Short
2021-03-12 06:09:11,445 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:09:11,446 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:11,593 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:11,594 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:09:11,729 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:11,732 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("jqune").xor(true)
2021-03-12 06:09:11,732 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]]
2021-03-12 06:09:11,733 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:11,733 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]
2021-03-12 06:09:11,733 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isUpperCase()
2021-03-12 06:09:11,733 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]]
2021-03-12 06:09:11,733 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:11,733 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@188ff9c0]
2021-03-12 06:09:11,733 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isDigit()
2021-03-12 06:09:11,733 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e5975db]]
2021-03-12 06:09:11,733 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:09:11,733 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@1e5975db]
2021-03-12 06:09:11,734 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isInfinite()
2021-03-12 06:09:11,734 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:09:11,734 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:11,888 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:11,889 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:09:11,889 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("gwbyk").not()
2021-03-12 06:09:11,889 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]]
2021-03-12 06:09:11,889 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:09:11,889 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@164ee145]
2021-03-12 06:09:11,890 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isFinite()
2021-03-12 06:09:11,890 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]]
2021-03-12 06:09:11,890 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:12,042 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals(null)
2021-03-12 06:09:12,042 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a81bfc]]
2021-03-12 06:09:12,042 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:12,042 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@23a81bfc]
2021-03-12 06:09:12,042 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isTitleCase()
2021-03-12 06:09:12,042 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:09:12,042 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:09:12,042 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:09:12,185 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:12,186 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().equals("otbop")
2021-03-12 06:09:12,186 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]]
2021-03-12 06:09:12,186 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:09:12,339 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:12,343 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]
2021-03-12 06:09:12,492 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:12,493 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(29).equals("ngtim")
2021-03-12 06:09:12,493 [main:114] - replacement of false of type Boolean is false
2021-03-12 06:09:12,631 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:09:12,634 [main:107] - replacing ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK", Boolean)
2021-03-12 06:09:12,634 [main:50] - replacing (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK" Boolean
2021-03-12 06:09:12,634 [main:54] - Getting value of type Boolean
2021-03-12 06:09:12,785 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:12,788 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:09:12,788 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:12,969 [main:67] - randomType = Kla0?
2021-03-12 06:09:13,109 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:09:13,137 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:09:13,155 [main:149] - GENERATING call of type public final fun fu6(): kotlin.Boolean defined in Kla0[SimpleFunctionDescriptorImpl@199a4546]
2021-03-12 06:09:13,155 [main:78] - Generated call from random type = (Kla0())?.fu6()
2021-03-12 06:09:13,157 [main:106] - GETTING Boolean from Short
2021-03-12 06:09:13,195 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e083961]]
2021-03-12 06:09:13,195 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:09:13,195 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@e083961]
2021-03-12 06:09:13,195 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().isFinite()
2021-03-12 06:09:13,195 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66dbc869]]
2021-03-12 06:09:13,195 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:13,195 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66dbc869]
2021-03-12 06:09:13,196 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isISOControl()
2021-03-12 06:09:13,196 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20da0119]]
2021-03-12 06:09:13,196 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:13,196 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20da0119]
2021-03-12 06:09:13,196 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLowerCase()
2021-03-12 06:09:13,196 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:09:13,196 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:13,349 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:13,350 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:09:13,520 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:13,523 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("pjhli").and(true)
2021-03-12 06:09:13,524 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:09:13,524 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:09:13,524 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:09:13,669 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:13,669 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().equals("lzfif")
2021-03-12 06:09:13,670 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b9bc8]]
2021-03-12 06:09:13,670 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:13,670 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e3b9bc8]
2021-03-12 06:09:13,670 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isWhitespace()
2021-03-12 06:09:13,670 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3ba61775]]
2021-03-12 06:09:13,670 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:09:13,670 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3ba61775]
2021-03-12 06:09:13,824 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:13,825 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().equals("nrpng")
2021-03-12 06:09:13,825 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]]
2021-03-12 06:09:13,825 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:13,975 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:13,975 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")
2021-03-12 06:09:13,975 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e947b8c]]
2021-03-12 06:09:13,975 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:13,976 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1e947b8c]
2021-03-12 06:09:14,115 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:09:14,274 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:14,277 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().equals('?', false)
2021-03-12 06:09:14,277 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]]
2021-03-12 06:09:14,277 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:09:14,278 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]
2021-03-12 06:09:14,428 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:14,428 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().equals("rdwik")
2021-03-12 06:09:14,428 [main:114] - replacement of (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-281859067) != "OK" of type Boolean is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")
2021-03-12 06:09:14,566 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:14,567 [main:66] - Compilation checking started
2021-03-12 06:09:15,116 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})})
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:15,121 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 06:09:15,121 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 06:09:15,121 [main:54] - Getting value of type Ty0
2021-03-12 06:09:15,282 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:09:15,289 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:09:15,301 [main:67] - randomType = Kla4
2021-03-12 06:09:15,459 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:09:15,462 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:09:15,470 [main:106] - GETTING Ty0 from List<String>
2021-03-12 06:09:15,507 [main:106] - GETTING Ty0 from Short
2021-03-12 06:09:15,555 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 06:09:15,556 [main:107] - replacing (prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})}), Unit?)
2021-03-12 06:09:15,556 [main:50] - replacing prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})}) Unit?
2021-03-12 06:09:15,556 [main:54] - Getting value of type Unit?
2021-03-12 06:09:15,705 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 06:09:15,861 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:15,865 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:16,189 [main:302] - generating value of type = Boolean true depth = 3
2021-03-12 06:09:16,192 [main:95] - GENERATED = check(false)
2021-03-12 06:09:16,192 [main:58] - GENERATED VALUE OF TYPE Unit? = check(false)
2021-03-12 06:09:16,192 [main:61] - GENERATED IS CALL =true
2021-03-12 06:09:16,861 [main:67] - randomType = ArrayList<Collection<LinkedHashSet<UShort>>>
2021-03-12 06:09:16,993 [main:302] - generating value of type = ArrayList<Collection<LinkedHashSet<UShort>>> false depth = 0
2021-03-12 06:09:17,182 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Collection<LkedHashSet<UShort>>> = TODO()
2021-03-12 06:09:17,187 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Collection<LkedHashSet<UShort>>> = TODO()
2021-03-12 06:09:17,352 [main:95] - GENERATED = arrayListOf<Collection<LinkedHashSet<UShort>>>()
2021-03-12 06:09:17,559 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@4c98bc78]
2021-03-12 06:09:17,560 [main:149] - GENERATING call of type public final operator fun set(index: kotlin.Int, value: kotlin.Any?): kotlin.Unit defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@34311df5]
2021-03-12 06:09:17,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:17,870 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:17,871 [main:78] - Generated call from random type = (arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
2021-03-12 06:09:17,873 [main:106] - GETTING Unit? from List<String>
2021-03-12 06:09:17,913 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e], public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0c6305]]
2021-03-12 06:09:17,913 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e]
2021-03-12 06:09:17,913 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterator<T>.forEach(operation: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7f0c6305]
2021-03-12 06:09:18,049 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 06:09:18,052 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:09:18,212 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:09:18,216 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:09:18,718 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:09:18,721 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:09:18,724 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:09:18,724 [main:95] - GENERATED = require(true, { "azsuc"})
2021-03-12 06:09:18,725 [main:117] - GENERATED CALL = (list)?.iterator().forEach({a: T -> require(true, { "azsuc"})})
2021-03-12 06:09:18,725 [main:113] - Case = [@kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b1412eb]]
2021-03-12 06:09:18,725 [main:149] - GENERATING call of type @kotlin.internal.HidesMembers public inline fun <T> kotlin.collections.Iterable<T>.forEach(action: (T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4b1412eb]
2021-03-12 06:09:18,875 [main:302] - generating value of type = Function1<T, Unit> false depth = 0
2021-03-12 06:09:18,878 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:09:19,022 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:19,027 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:19,378 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:09:19,382 [main:95] - GENERATED = check(false)
2021-03-12 06:09:19,382 [main:117] - GENERATED CALL = (list)?.forEach({a: T -> check(false)})
2021-03-12 06:09:19,382 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34b2a6f4]]
2021-03-12 06:09:19,382 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.forEachIndexed(action: (index: kotlin.Int, T) -> kotlin.Unit): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34b2a6f4]
2021-03-12 06:09:19,514 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, T, Unit> false depth = 0
2021-03-12 06:09:19,517 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:09:19,675 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:09:19,680 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:09:20,009 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:09:20,009 [main:95] - GENERATED = print("zzejh")
2021-03-12 06:09:20,009 [main:117] - GENERATED CALL = (list)?.forEachIndexed({a: Int, b: T -> print("zzejh")})
2021-03-12 06:09:20,009 [main:114] - replacement of prope3.exceptionOrNull()?.let({a: Throwable -> check(true, { "dqpig"})}) of type Unit? is (arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
2021-03-12 06:09:20,162 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:20,162 [main:66] - Compilation checking started
2021-03-12 06:09:20,920 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:20,924 [main:107] - replacing (method, String)
2021-03-12 06:09:20,924 [main:50] - replacing method String
2021-03-12 06:09:20,924 [main:54] - Getting value of type String
2021-03-12 06:09:21,077 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:21,080 [main:58] - GENERATED VALUE OF TYPE String = "pugur"
2021-03-12 06:09:21,080 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:21,092 [main:67] - randomType = Kla4
2021-03-12 06:09:21,242 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:09:21,245 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + method + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:09:21,252 [main:106] - GETTING String from Short
2021-03-12 06:09:21,298 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:09:21,298 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:09:21,298 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:09:21,430 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:21,433 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().toString(-897037616)
2021-03-12 06:09:21,433 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:09:21,433 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:21,433 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:09:21,433 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().uppercase()
2021-03-12 06:09:21,434 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:09:21,434 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:09:21,582 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:21,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:09:21,736 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:21,739 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990)
2021-03-12 06:09:21,739 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:09:21,739 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:09:21,872 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:09:21,876 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:09:22,027 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:22,030 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(3422028372245942210).toString(-321206523)
2021-03-12 06:09:22,030 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]]
2021-03-12 06:09:22,030 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:09:22,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:09:22,172 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:22,176 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().toString(-754025723)
2021-03-12 06:09:22,176 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:09:22,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:09:22,318 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:22,322 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toString(-1273733693)
2021-03-12 06:09:22,322 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]]
2021-03-12 06:09:22,322 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:09:22,322 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:09:22,451 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:22,455 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().toString(2073855135)
2021-03-12 06:09:22,455 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:09:22,455 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:22,455 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:09:22,606 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:22,609 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().plus("xbfko")
2021-03-12 06:09:22,610 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]]
2021-03-12 06:09:22,610 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:22,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:09:22,610 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().lowercase()
2021-03-12 06:09:22,610 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]]
2021-03-12 06:09:22,610 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:09:22,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:09:22,761 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:22,764 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toString(-1286811877)
2021-03-12 06:09:22,764 [main:114] - replacement of method of type String is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990)
2021-03-12 06:09:22,902 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:22,902 [main:66] - Compilation checking started
2021-03-12 06:09:23,643 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = "K"
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:23,646 [main:107] - replacing (prope3, Result<Ty0>)
2021-03-12 06:09:23,646 [main:50] - replacing prope3 Result<Ty0>
2021-03-12 06:09:23,646 [main:54] - Getting value of type Result<Ty0>
2021-03-12 06:09:23,809 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 06:09:23,977 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:09:23,981 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:09:24,319 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 06:09:24,319 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 06:09:24,879 [main:67] - randomType = Function2<Function1<Short, Kla5>, Kla5, UByte>
2021-03-12 06:09:24,881 [main:106] - GETTING Result<Ty0> from Short
2021-03-12 06:09:24,922 [main:106] - GETTING Result<Ty0> from List<String>
2021-03-12 06:09:24,954 [main:111] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-12 06:09:24,954 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 06:09:24,954 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 06:09:24,954 [main:54] - Getting value of type Ty0
2021-03-12 06:09:25,127 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:09:25,134 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:09:25,141 [main:67] - randomType = Int
2021-03-12 06:09:25,273 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:25,312 [main:106] - GETTING Ty0 from List<String>
2021-03-12 06:09:25,335 [main:106] - GETTING Ty0 from Short
2021-03-12 06:09:25,363 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 06:09:25,363 [main:107] - replacing ("K", String)
2021-03-12 06:09:25,363 [main:50] - replacing "K" String
2021-03-12 06:09:25,363 [main:54] - Getting value of type String
2021-03-12 06:09:25,517 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:25,521 [main:58] - GENERATED VALUE OF TYPE String = "gjauj"
2021-03-12 06:09:25,521 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:25,534 [main:67] - randomType = Kla0
2021-03-12 06:09:25,711 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:09:25,715 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:09:25,727 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]
2021-03-12 06:09:25,728 [main:78] - Generated call from random type = (Kla0()).prope3.decapitalize()
2021-03-12 06:09:25,729 [main:106] - GETTING String from List<String>
2021-03-12 06:09:25,766 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]]
2021-03-12 06:09:25,766 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:25,899 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:25,903 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]
2021-03-12 06:09:26,070 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:09:26,232 [main:43] - GENERATING CALL OF fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:09:26,236 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOfNotNull(elements: Int): Iterable<Int> = TODO()
2021-03-12 06:09:26,384 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:09:26,388 [main:95] - GENERATED = listOfNotNull<Int>(1303438767)
2021-03-12 06:09:26,388 [main:117] - GENERATED CALL = (list).get(-464286808).slice(listOfNotNull<Int>(1303438767))
2021-03-12 06:09:26,388 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]]
2021-03-12 06:09:26,388 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:26,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:26,546 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]
2021-03-12 06:09:26,546 [main:117] - GENERATED CALL = (list).get(-145752807).capitalize()
2021-03-12 06:09:26,546 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]]
2021-03-12 06:09:26,546 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]
2021-03-12 06:09:26,699 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:09:26,702 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:09:27,024 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Kla6): R = TODO()
2021-03-12 06:09:27,029 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Kla6): R = TODO()
2021-03-12 06:09:27,350 [main:302] - generating value of type = Function0<Kla6> false depth = 4
2021-03-12 06:09:27,353 [main:302] - generating value of type = Kla6 false depth = 5
2021-03-12 06:09:27,356 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:09:27,357 [main:95] - GENERATED = run<Kla6>({ Kla6})
2021-03-12 06:09:27,357 [main:117] - GENERATED CALL = (list).maxByOrNull({a: T -> run<Kla6>({ Kla6})})
2021-03-12 06:09:27,357 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc50c30]]
2021-03-12 06:09:27,357 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component5(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5fc50c30]
2021-03-12 06:09:27,357 [main:117] - GENERATED CALL = (list).component5()
2021-03-12 06:09:27,357 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]]
2021-03-12 06:09:27,357 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:27,510 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:27,514 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]
2021-03-12 06:09:27,665 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:09:27,803 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:27,806 [main:117] - GENERATED CALL = (list).get(2078733538).substringBeforeLast('ë¾¾', "xsskv")
2021-03-12 06:09:27,807 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@357972dc]]
2021-03-12 06:09:27,807 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@357972dc]
2021-03-12 06:09:27,807 [main:117] - GENERATED CALL = (list).randomOrNull()
2021-03-12 06:09:27,807 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72373e0b]]
2021-03-12 06:09:27,807 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.random(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@72373e0b]
2021-03-12 06:09:27,807 [main:117] - GENERATED CALL = (list).random()
2021-03-12 06:09:27,807 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]]
2021-03-12 06:09:27,807 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:27,963 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:27,967 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]
2021-03-12 06:09:28,112 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:28,116 [main:117] - GENERATED CALL = (list).get(-1752777468).trimMargin("zskkv")
2021-03-12 06:09:28,116 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]]
2021-03-12 06:09:28,116 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:28,265 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:28,269 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]
2021-03-12 06:09:28,269 [main:117] - GENERATED CALL = (list).get(-1419292969).uppercase()
2021-03-12 06:09:28,269 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6294193]]
2021-03-12 06:09:28,269 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:28,430 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:28,434 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6294193]
2021-03-12 06:09:28,578 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:28,591 [main:117] - GENERATED CALL = (list).get(548406146).drop(-1068516702)
2021-03-12 06:09:28,591 [main:114] - replacement of "K" of type String is (list).get(-1752777468).trimMargin("zskkv")
2021-03-12 06:09:28,725 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:28,725 [main:66] - Compilation checking started
2021-03-12 06:09:29,351 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:29,354 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:09:29,354 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:09:29,354 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:09:29,532 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:09:29,535 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:09:29,694 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:09:29,699 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:09:30,035 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 06:09:30,039 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:09:30,199 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:09:30,204 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:09:30,721 [main:302] - generating value of type = Boolean true depth = 8
2021-03-12 06:09:30,725 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-12 06:09:30,728 [main:302] - generating value of type = Any false depth = 9
2021-03-12 06:09:30,728 [main:95] - GENERATED = check(false, { "ugcop"})
2021-03-12 06:09:30,729 [main:95] - GENERATED = contract({ check(false, { "ugcop"})})
2021-03-12 06:09:30,729 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(false, { "ugcop"})})}
2021-03-12 06:09:30,729 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:30,895 [main:67] - randomType = Kla6
2021-03-12 06:09:31,052 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:09:31,056 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:09:31,086 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:09:31,120 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:09:31,158 [main:114] - replacement of prope10 of type Function0<Unit> is { contract({ check(false, { "ugcop"})})}
2021-03-12 06:09:31,306 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:09:31,307 [main:66] - Compilation checking started
2021-03-12 06:09:31,704 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        { contract({ check(false, { "ugcop"})})} = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error("Wrong state-machine generated: it is finished early")
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:31,706 [main:107] - replacing (prope6, Continuation<String>)
2021-03-12 06:09:31,707 [main:50] - replacing prope6 Continuation<String>
2021-03-12 06:09:31,707 [main:54] - Getting value of type Continuation<String>
2021-03-12 06:09:31,872 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:09:32,035 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:09:32,040 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:09:32,567 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:09:32,713 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:09:32,718 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:09:33,082 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:09:33,234 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:09:33,238 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:09:33,776 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:09:33,776 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:09:33,776 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:09:33,776 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 06:09:33,783 [main:67] - randomType = String
2021-03-12 06:09:33,938 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:33,971 [main:106] - GETTING Continuation<String> from Short
2021-03-12 06:09:34,011 [main:106] - GETTING Continuation<String> from List<String>
2021-03-12 06:09:34,044 [main:111] - Cant find and generate replacement for prope6 type Continuation<String>
2021-03-12 06:09:34,044 [main:107] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-12 06:09:34,044 [main:50] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-12 06:09:34,044 [main:54] - Getting value of type String
2021-03-12 06:09:34,194 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:34,198 [main:58] - GENERATED VALUE OF TYPE String = "swkij"
2021-03-12 06:09:34,198 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:34,205 [main:67] - randomType = Boolean
2021-03-12 06:09:34,336 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:34,351 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:09:34,508 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:34,512 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:09:34,665 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:34,669 [main:78] - Generated call from random type = (false).compareTo(true).toString(1738246142)
2021-03-12 06:09:34,670 [main:106] - GETTING String from List<String>
2021-03-12 06:09:34,706 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]]
2021-03-12 06:09:34,706 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:34,846 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:34,850 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]
2021-03-12 06:09:35,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:35,166 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:09:35,170 [main:117] - GENERATED CALL = (list).get(1329391642).padEnd(-960590975, '?')
2021-03-12 06:09:35,170 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17bd50c9]]
2021-03-12 06:09:35,170 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:35,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:35,317 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17bd50c9]
2021-03-12 06:09:35,474 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:09:35,481 [main:117] - GENERATED CALL = (list).get(-339688691).removePrefix(StringBuilder())
2021-03-12 06:09:35,482 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]]
2021-03-12 06:09:35,482 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]
2021-03-12 06:09:35,642 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:09:35,648 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:09:35,805 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->String): R = TODO()
2021-03-12 06:09:35,810 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->String): R = TODO()
2021-03-12 06:09:36,347 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:09:36,347 [main:302] - generating value of type = Function0<String> false depth = 4
2021-03-12 06:09:36,350 [main:302] - generating value of type = String true depth = 5
2021-03-12 06:09:36,353 [main:95] - GENERATED = synchronized<String>("yhaso", { "kqfqf"})
2021-03-12 06:09:36,354 [main:117] - GENERATED CALL = (list).maxByOrNull({a: T -> synchronized<String>("yhaso", { "kqfqf"})})
2021-03-12 06:09:36,354 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:09:36,354 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:09:36,505 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:36,508 [main:117] - GENERATED CALL = (list).size.toString(649097907)
2021-03-12 06:09:36,508 [main:113] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67189d14]]
2021-03-12 06:09:36,508 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67189d14]
2021-03-12 06:09:36,509 [main:117] - GENERATED CALL = (list).minOrNull()
2021-03-12 06:09:36,509 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@116e349d]]
2021-03-12 06:09:36,509 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@116e349d]
2021-03-12 06:09:36,662 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:09:36,665 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:09:37,701 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Float, block: T.()->Kla3<Kla3<Byte>>): R = TODO()
2021-03-12 06:09:37,705 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Float, block: T.()->Kla3<Kla3<Byte>>): R = TODO()
2021-03-12 06:09:38,055 [main:302] - generating value of type = Float true depth = 4
2021-03-12 06:09:38,059 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, Kla3<Kla3<Byte>>> false depth = 4
2021-03-12 06:09:38,062 [main:302] - generating value of type = Kla3<Kla3<Byte>> false depth = 5
2021-03-12 06:09:38,066 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:09:38,769 [main:302] - generating value of type = Kla6 false depth = 7
2021-03-12 06:09:38,772 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:09:38,773 [main:95] - GENERATED = with<Float, Kla3<Kla3<Byte>>>(0.9129027f, { Kla6})
2021-03-12 06:09:38,773 [main:117] - GENERATED CALL = (list).minByOrNull({a: T -> with<Float, Kla3<Kla3<Byte>>>(0.9129027f, { Kla6})})
2021-03-12 06:09:38,773 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@25e085d7]]
2021-03-12 06:09:38,773 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.max(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@25e085d7]
2021-03-12 06:09:38,773 [main:117] - GENERATED CALL = (list).max()
2021-03-12 06:09:38,773 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7de34bb5]]
2021-03-12 06:09:38,773 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7de34bb5]
2021-03-12 06:09:38,910 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:09:38,913 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:09:39,109 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Kla2): R = TODO()
2021-03-12 06:09:39,113 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Kla2): R = TODO()
2021-03-12 06:09:39,616 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:09:39,617 [main:302] - generating value of type = Function0<Kla2> false depth = 4
2021-03-12 06:09:39,620 [main:302] - generating value of type = Kla2 false depth = 5
2021-03-12 06:09:39,623 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:09:39,624 [main:95] - GENERATED = synchronized<Kla2>("dkisg", { Kla2()})
2021-03-12 06:09:39,624 [main:117] - GENERATED CALL = (list).minBy({a: T -> synchronized<Kla2>("dkisg", { Kla2()})})
2021-03-12 06:09:39,624 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]]
2021-03-12 06:09:39,624 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]
2021-03-12 06:09:39,624 [main:117] - GENERATED CALL = (list).component1()
2021-03-12 06:09:39,625 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]]
2021-03-12 06:09:39,625 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:09:39,778 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:39,782 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]
2021-03-12 06:09:39,919 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:09:39,922 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:09:39,926 [main:117] - GENERATED CALL = (list).get(1331750067).takeLastWhile({a: Char -> false})
2021-03-12 06:09:39,926 [main:114] - replacement of "Wrong state-machine generated: it is finished early" of type String is (list).size.toString(649097907)
2021-03-12 06:09:40,082 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:40,083 [main:66] - Compilation checking started
2021-03-12 06:09:40,710 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:40,713 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:09:40,713 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:09:40,713 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:09:40,866 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:09:40,870 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:09:41,029 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:41,034 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:41,366 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:09:41,370 [main:95] - GENERATED = check(true)
2021-03-12 06:09:41,370 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 06:09:41,370 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:41,719 [main:67] - randomType = Array<Kla2>
2021-03-12 06:09:41,877 [main:302] - generating value of type = Array<Kla2> false depth = 0
2021-03-12 06:09:42,031 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Kla2> = TODO()
2021-03-12 06:09:42,045 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Kla2> = TODO()
2021-03-12 06:09:42,195 [main:95] - GENERATED = enumValues<Kla2>()
2021-03-12 06:09:42,213 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:09:42,246 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:09:42,275 [main:114] - replacement of prope10 of type Function0<Unit> is { check(true)}
2021-03-12 06:09:42,428 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:09:42,428 [main:66] - Compilation checking started
2021-03-12 06:09:42,857 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        { check(true)} = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:42,860 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i, String)
2021-03-12 06:09:42,860 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i String
2021-03-12 06:09:42,860 [main:54] - Getting value of type String
2021-03-12 06:09:43,016 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:43,020 [main:58] - GENERATED VALUE OF TYPE String = "rjhpj"
2021-03-12 06:09:43,020 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:43,034 [main:67] - randomType = Kla2
2021-03-12 06:09:43,188 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:09:43,192 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:09:43,214 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@187175b3]
2021-03-12 06:09:43,214 [main:78] - Generated call from random type = (Kla2()).prope3?.toString()!!
2021-03-12 06:09:43,214 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i of type String is (Kla2()).prope3?.toString()!!
2021-03-12 06:09:43,355 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(POSTFIX_EXPRESSION)
2021-03-12 06:09:43,356 [main:66] - Compilation checking started
2021-03-12 06:09:43,933 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:43,937 [main:107] - replacing ("\n", String)
2021-03-12 06:09:43,937 [main:50] - replacing "\n" String
2021-03-12 06:09:43,938 [main:54] - Getting value of type String
2021-03-12 06:09:44,101 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:44,104 [main:58] - GENERATED VALUE OF TYPE String = "tpljt"
2021-03-12 06:09:44,105 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:44,295 [main:67] - randomType = Array<Kla2>
2021-03-12 06:09:44,433 [main:302] - generating value of type = Array<Kla2> false depth = 0
2021-03-12 06:09:44,598 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Kla2> = TODO()
2021-03-12 06:09:44,602 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Kla2> = TODO()
2021-03-12 06:09:44,764 [main:95] - GENERATED = enumValues<Kla2>()
2021-03-12 06:09:44,779 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1205434f]
2021-03-12 06:09:44,780 [main:78] - Generated call from random type = (enumValues<Kla2>()).contentDeepToString()
2021-03-12 06:09:44,780 [main:114] - replacement of "\n" of type String is (enumValues<Kla2>()).contentDeepToString()
2021-03-12 06:09:44,921 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:44,921 [main:66] - Compilation checking started
2021-03-12 06:09:45,343 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = (enumValues<Kla2>()).contentDeepToString()))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:45,346 [main:107] - replacing (runCatching<Any?>({ "jbckk"}).getOrThrow(), Any?)
2021-03-12 06:09:45,346 [main:50] - replacing runCatching<Any?>({ "jbckk"}).getOrThrow() Any?
2021-03-12 06:09:45,346 [main:54] - Getting value of type Any?
2021-03-12 06:09:45,503 [main:58] - GENERATED VALUE OF TYPE Any? = null
2021-03-12 06:09:45,504 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:46,376 [main:67] - randomType = HashSet<Array<Double>>?
2021-03-12 06:09:46,531 [main:302] - generating value of type = HashSet<Array<Double>> false depth = 0
2021-03-12 06:09:46,699 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Array<Double>> = TODO()
2021-03-12 06:09:46,704 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Array<Double>> = TODO()
2021-03-12 06:09:46,851 [main:95] - GENERATED = hashSetOf<Array<Double>>()
2021-03-12 06:09:46,974 [main:149] - GENERATING call of type @kotlin.js.JsName public open fun toJSON(): kotlin.Any defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@63c0d023]
2021-03-12 06:09:46,974 [main:78] - Generated call from random type = (hashSetOf<Array<Double>>())?.toJSON()
2021-03-12 06:09:46,975 [main:106] - GETTING Any? from Short
2021-03-12 06:09:47,005 [main:106] - GETTING Any? from List<String>
2021-03-12 06:09:47,027 [main:114] - replacement of runCatching<Any?>({ "jbckk"}).getOrThrow() of type Any? is (hashSetOf<Array<Double>>())?.toJSON()
2021-03-12 06:09:47,187 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:09:47,187 [main:66] - Compilation checking started
2021-03-12 06:09:47,627 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = (hashSetOf<Array<Double>>())?.toJSON()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:47,630 [main:107] - replacing ({ c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 06:09:47,630 [main:50] - replacing { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 06:09:47,630 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 06:09:47,788 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 06:09:47,792 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:09:47,955 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:47,960 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:09:48,297 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:09:48,300 [main:95] - GENERATED = check(false)
2021-03-12 06:09:48,301 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(false)}
2021-03-12 06:09:48,301 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:49,043 [main:67] - randomType = Function1<Kla2?, Set<Int?>>
2021-03-12 06:09:49,045 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Short
2021-03-12 06:09:49,098 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 06:09:49,135 [main:114] - replacement of { c ->
        (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countOneBits()
        prope10 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(false)}
2021-03-12 06:09:49,271 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:09:49,272 [main:66] - Compilation checking started
2021-03-12 06:09:49,843 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:49,846 [main:107] - replacing (this.prope3, Any?)
2021-03-12 06:09:49,846 [main:50] - replacing this.prope3 Any?
2021-03-12 06:09:49,846 [main:54] - Getting value of type Any?
2021-03-12 06:09:50,010 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:50,011 [main:58] - GENERATED VALUE OF TYPE Any? = "ncmyt"
2021-03-12 06:09:50,011 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:50,186 [main:67] - randomType = Collection<Short>
2021-03-12 06:09:50,187 [main:106] - GETTING Any? from List<String>
2021-03-12 06:09:50,233 [main:106] - GETTING Any? from Short
2021-03-12 06:09:50,276 [main:114] - replacement of this.prope3 of type Any? is "ncmyt"
2021-03-12 06:09:50,411 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:09:50,411 [main:66] - Compilation checking started
2021-03-12 06:09:50,802 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"ncmyt" = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:50,804 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 06:09:50,804 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 06:09:50,804 [main:54] - Getting value of type Ty0
2021-03-12 06:09:50,957 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:09:50,963 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:09:50,976 [main:67] - randomType = Kla0
2021-03-12 06:09:51,132 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 06:09:51,136 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:09:51,149 [main:106] - GETTING Ty0 from List<String>
2021-03-12 06:09:51,187 [main:106] - GETTING Ty0 from Short
2021-03-12 06:09:51,243 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 06:09:51,243 [main:107] - replacing (prope8, Int)
2021-03-12 06:09:51,243 [main:50] - replacing prope8 Int
2021-03-12 06:09:51,243 [main:54] - Getting value of type Int
2021-03-12 06:09:51,382 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:51,386 [main:58] - GENERATED VALUE OF TYPE Int = 131128046
2021-03-12 06:09:51,386 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:51,769 [main:67] - randomType = HashSet<Kla4>
2021-03-12 06:09:51,905 [main:302] - generating value of type = HashSet<Kla4> false depth = 0
2021-03-12 06:09:52,066 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla4): HashSet<Kla4> = TODO()
2021-03-12 06:09:52,071 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla4): HashSet<Kla4> = TODO()
2021-03-12 06:09:52,222 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-12 06:09:52,235 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}
2021-03-12 06:09:52,235 [main:95] - GENERATED = linkedSetOf<Kla4>(Kla4())
2021-03-12 06:09:52,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@4210b6f8]
2021-03-12 06:09:52,511 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:52,511 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:09:52,670 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:52,674 [main:78] - Generated call from random type = (linkedSetOf<Kla4>(Kla4())).equals("ppsof").compareTo(false)
2021-03-12 06:09:52,675 [main:106] - GETTING Int from Short
2021-03-12 06:09:52,708 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]]
2021-03-12 06:09:52,709 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:09:52,858 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:52,862 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]
2021-03-12 06:09:53,001 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:53,004 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-5).rem(-64)
2021-03-12 06:09:53,004 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a9dced4]]
2021-03-12 06:09:53,005 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:09:53,005 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a9dced4]
2021-03-12 06:09:53,005 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().toRawBits()
2021-03-12 06:09:53,005 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-12 06:09:53,005 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:09:53,162 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:53,165 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:09:53,309 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:53,313 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-127).shr(-1223350659)
2021-03-12 06:09:53,313 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@a12cd23]]
2021-03-12 06:09:53,313 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:09:53,455 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:09:53,459 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(-521612924638732594).sign
2021-03-12 06:09:53,459 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@12eb0558]]
2021-03-12 06:09:53,459 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:09:53,459 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@12eb0558]
2021-03-12 06:09:53,589 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:53,592 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().times(-103)
2021-03-12 06:09:53,593 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3798f847]]
2021-03-12 06:09:53,593 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:09:53,593 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3798f847]
2021-03-12 06:09:53,593 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().toInt()
2021-03-12 06:09:53,593 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]]
2021-03-12 06:09:53,593 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:09:53,752 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:53,755 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]
2021-03-12 06:09:53,908 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:54,056 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:54,060 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-81).coerceIn(-655179589, 1144070221)
2021-03-12 06:09:54,220 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f34036a]]
2021-03-12 06:09:54,220 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:09:54,376 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:54,379 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7f34036a]
2021-03-12 06:09:54,523 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:54,527 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(17).xor(-988981063)
2021-03-12 06:09:54,527 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@580936b0]]
2021-03-12 06:09:54,527 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:09:54,670 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:54,673 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@580936b0]
2021-03-12 06:09:54,804 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:09:54,808 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-72).rotateRight(994685367)
2021-03-12 06:09:54,808 [main:113] - Case = [public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@56b4492c]]
2021-03-12 06:09:54,808 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@56b4492c]
2021-03-12 06:09:54,962 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:09:54,966 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).plus(-18)
2021-03-12 06:09:54,966 [main:114] - replacement of prope8 of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-72).rotateRight(994685367)
2021-03-12 06:09:55,114 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:55,114 [main:66] - Compilation checking started
2021-03-12 06:09:55,534 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
(listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-72).rotateRight(994685367) = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:55,537 [main:107] - replacing ((list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990), String)
2021-03-12 06:09:55,537 [main:50] - replacing (list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) String
2021-03-12 06:09:55,537 [main:54] - Getting value of type String
2021-03-12 06:09:55,691 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:55,695 [main:58] - GENERATED VALUE OF TYPE String = "ozpsu"
2021-03-12 06:09:55,695 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:55,709 [main:67] - randomType = String?
2021-03-12 06:09:55,862 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:09:55,897 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]
2021-03-12 06:09:56,035 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:56,036 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]
2021-03-12 06:09:56,189 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:09:56,193 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:09:56,196 [main:78] - Generated call from random type = ("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false})
2021-03-12 06:09:56,197 [main:114] - replacement of (list).get(443468722).replaceBeforeLast('ë¶', "ggntk", "dgitu") + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(82).toString(597941990) of type String is ("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false})
2021-03-12 06:09:56,339 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:09:56,340 [main:66] - Compilation checking started
2021-03-12 06:09:56,937 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { it?.methodName?.startsWith(method) == true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:09:56,940 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 06:09:56,940 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 06:09:56,940 [main:54] - Getting value of type Boolean
2021-03-12 06:09:57,108 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:57,111 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:09:57,111 [main:61] - GENERATED IS CALL =false
2021-03-12 06:09:58,158 [main:67] - randomType = Pair<Byte, MutableMap<Kla3<ULong>, String?>>
2021-03-12 06:09:58,305 [main:302] - generating value of type = Pair<Byte, MutableMap<Kla3<ULong>, String?>> false depth = 0
2021-03-12 06:09:58,459 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte, second: MutableMap<Kla3<ULong>, String?>): Pair<Byte, MutableMap<Kla3<ULong>, String?>> = TODO()
2021-03-12 06:09:58,463 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte, second: MutableMap<Kla3<ULong>, String?>): Pair<Byte, MutableMap<Kla3<ULong>, String?>> = TODO()
2021-03-12 06:09:58,600 [main:302] - generating value of type = Byte true depth = 3
2021-03-12 06:09:58,604 [main:302] - generating value of type = MutableMap<Kla3<ULong>, String?> false depth = 3
2021-03-12 06:09:58,776 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): MutableMap<Kla3<ULong>, Strg?> = TODO()
2021-03-12 06:09:58,780 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): MutableMap<Kla3<ULong>, Strg?> = TODO()
2021-03-12 06:09:58,938 [main:95] - GENERATED = linkedMapOf<Kla3<ULong>, String?>()
2021-03-12 06:09:58,938 [main:95] - GENERATED = Pair<Byte, MutableMap<Kla3<ULong>, String?>>(30, linkedMapOf<Kla3<ULong>, String?>())
2021-03-12 06:09:58,969 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]
2021-03-12 06:09:59,109 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:59,109 [main:78] - Generated call from random type = (Pair<Byte, MutableMap<Kla3<ULong>, String?>>(30, linkedMapOf<Kla3<ULong>, String?>())).first.equals("minpu")
2021-03-12 06:09:59,111 [main:106] - GETTING Boolean from Short
2021-03-12 06:09:59,160 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69ef1ff1]]
2021-03-12 06:09:59,160 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:09:59,160 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@69ef1ff1]
2021-03-12 06:09:59,160 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().isInfinite()
2021-03-12 06:09:59,160 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbd7d63]]
2021-03-12 06:09:59,160 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:59,160 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7dbd7d63]
2021-03-12 06:09:59,160 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLetter()
2021-03-12 06:09:59,161 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:09:59,161 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:59,315 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:59,315 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:09:59,457 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:59,461 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("ixgck").and(true)
2021-03-12 06:09:59,461 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:09:59,461 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:09:59,609 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:09:59,610 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:09:59,751 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:09:59,754 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("itycg").xor(true)
2021-03-12 06:09:59,754 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]]
2021-03-12 06:09:59,754 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:09:59,755 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]
2021-03-12 06:09:59,755 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isUpperCase()
2021-03-12 06:09:59,755 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]]
2021-03-12 06:09:59,755 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:09:59,910 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:09:59,913 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]
2021-03-12 06:09:59,914 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.06441577851810554).isNaN()
2021-03-12 06:09:59,914 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:09:59,914 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:09:59,914 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:10:00,058 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:00,059 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().equals("tlvyv")
2021-03-12 06:10:00,059 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]]
2021-03-12 06:10:00,059 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:10:00,208 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:10:00,211 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]
2021-03-12 06:10:00,342 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:00,343 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.8166531726540868).equals("lgdzy")
2021-03-12 06:10:00,343 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]]
2021-03-12 06:10:00,343 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:10:00,498 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:00,499 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("joeil")
2021-03-12 06:10:00,499 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d6f798d]]
2021-03-12 06:10:00,499 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:10:00,499 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d6f798d]
2021-03-12 06:10:00,499 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isLowSurrogate()
2021-03-12 06:10:00,499 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is true
2021-03-12 06:10:00,643 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:10:00,643 [main:66] - Compilation checking started
2021-03-12 06:10:01,215 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:01,217 [main:107] - replacing (prope3.getOrThrow(), Ty0)
2021-03-12 06:10:01,218 [main:50] - replacing prope3.getOrThrow() Ty0
2021-03-12 06:10:01,218 [main:54] - Getting value of type Ty0
2021-03-12 06:10:01,375 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:10:01,381 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:10:01,714 [main:67] - randomType = Collection<ULong>
2021-03-12 06:10:01,715 [main:106] - GETTING Ty0 from List<String>
2021-03-12 06:10:01,754 [main:106] - GETTING Ty0 from Short
2021-03-12 06:10:01,786 [main:111] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-12 06:10:01,786 [main:107] - replacing ({
        val list = listOf("O", "K")
"vxyat"
    }, Any?)
2021-03-12 06:10:01,786 [main:50] - replacing {
        val list = listOf("O", "K")
"vxyat"
    } Any?
2021-03-12 06:10:01,786 [main:54] - Getting value of type Any?
2021-03-12 06:10:01,939 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:01,939 [main:58] - GENERATED VALUE OF TYPE Any? = "rjqow"
2021-03-12 06:10:01,940 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:02,124 [main:67] - randomType = Kla2?
2021-03-12 06:10:02,263 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:10:02,266 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:10:02,289 [main:78] - Generated call from random type = (Kla2())?.prope3
2021-03-12 06:10:02,290 [main:106] - GETTING Any? from Short
2021-03-12 06:10:02,329 [main:106] - GETTING Any? from List<String>
2021-03-12 06:10:02,353 [main:114] - replacement of {
        val list = listOf("O", "K")
"vxyat"
    } of type Any? is "rjqow"
2021-03-12 06:10:02,503 [main:33] - Trying to replace BLOCK on Element(STRING_TEMPLATE)
2021-03-12 06:10:02,504 [main:66] - Compilation checking started
2021-03-12 06:10:02,511 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:10:02,511 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) "rjqow"
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + prope8)
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:02,514 [main:107] - replacing (Kla0().prope2, Continuation<String>?)
2021-03-12 06:10:02,514 [main:50] - replacing Kla0().prope2 Continuation<String>?
2021-03-12 06:10:02,514 [main:54] - Getting value of type Continuation<String>?
2021-03-12 06:10:02,655 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:10:02,808 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:02,812 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:03,313 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:10:03,457 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:03,461 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:03,806 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:10:03,966 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:03,970 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:04,492 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 06:10:04,677 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:04,681 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:05,170 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:05,170 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:05,170 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:05,170 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:05,170 [main:58] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-12 06:10:05,182 [main:67] - randomType = Kla1
2021-03-12 06:10:05,337 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:10:05,340 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:10:05,482 [main:194] - Type params = []
2021-03-12 06:10:05,628 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:10:05,764 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:05,768 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:06,120 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:10:06,266 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:06,271 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:06,783 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:06,783 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:06,801 [main:106] - GETTING Continuation<String>? from Short
2021-03-12 06:10:06,845 [main:106] - GETTING Continuation<String>? from List<String>
2021-03-12 06:10:06,867 [main:111] - Cant find and generate replacement for Kla0().prope2 type Continuation<String>?
2021-03-12 06:10:06,867 [main:107] - replacing (prope2, Continuation<String>?)
2021-03-12 06:10:06,868 [main:50] - replacing prope2 Continuation<String>?
2021-03-12 06:10:06,868 [main:54] - Getting value of type Continuation<String>?
2021-03-12 06:10:07,014 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:10:07,161 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:07,166 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:07,652 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:10:07,798 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:07,803 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:08,113 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:10:08,283 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:08,288 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:08,766 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-12 06:10:08,946 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:08,950 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:09,430 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-12 06:10:09,615 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:09,619 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:10,098 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-12 06:10:10,285 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:10:10,290 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:10:10,772 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 18
2021-03-12 06:10:10,772 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 06:10:10,772 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:10,772 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 06:10:10,772 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:10,772 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:10,772 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:10,772 [main:58] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-12 06:10:10,778 [main:67] - randomType = Int
2021-03-12 06:10:10,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:11,008 [main:106] - GETTING Continuation<String>? from List<String>
2021-03-12 06:10:11,048 [main:106] - GETTING Continuation<String>? from Short
2021-03-12 06:10:11,089 [main:111] - Cant find and generate replacement for prope2 type Continuation<String>?
2021-03-12 06:10:11,089 [main:107] - replacing (prope8, Int)
2021-03-12 06:10:11,089 [main:50] - replacing prope8 Int
2021-03-12 06:10:11,090 [main:54] - Getting value of type Int
2021-03-12 06:10:11,235 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:11,238 [main:58] - GENERATED VALUE OF TYPE Int = 293587595
2021-03-12 06:10:11,238 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:11,420 [main:67] - randomType = List<UInt>
2021-03-12 06:10:11,421 [main:106] - GETTING Int from Short
2021-03-12 06:10:11,465 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17fa3fb2]]
2021-03-12 06:10:11,466 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:11,466 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17fa3fb2]
2021-03-12 06:10:11,466 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().countTrailingZeroBits()
2021-03-12 06:10:11,466 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@152eed97]]
2021-03-12 06:10:11,466 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:11,618 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:11,621 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@152eed97]
2021-03-12 06:10:11,763 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:11,767 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-78).ushr(-184310094)
2021-03-12 06:10:11,767 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4c616]]
2021-03-12 06:10:11,767 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:10:11,767 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4c616]
2021-03-12 06:10:11,768 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().countLeadingZeroBits()
2021-03-12 06:10:11,768 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17fa3fb2]]
2021-03-12 06:10:11,768 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:11,911 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:11,915 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@17fa3fb2]
2021-03-12 06:10:11,915 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-38).countTrailingZeroBits()
2021-03-12 06:10:11,915 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@98ee9e7]]
2021-03-12 06:10:11,915 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:10:11,915 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@98ee9e7]
2021-03-12 06:10:11,915 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().toInt()
2021-03-12 06:10:11,915 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16c4dc4f]]
2021-03-12 06:10:11,916 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:11,916 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@16c4dc4f]
2021-03-12 06:10:12,046 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:12,050 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().div(-69)
2021-03-12 06:10:12,050 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19ea9ec1]]
2021-03-12 06:10:12,050 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19ea9ec1]
2021-03-12 06:10:12,200 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:12,204 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4)
2021-03-12 06:10:12,204 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4c616]]
2021-03-12 06:10:12,204 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:10:12,345 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:10:12,348 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4c616]
2021-03-12 06:10:12,348 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(-250006454928194928).countLeadingZeroBits()
2021-03-12 06:10:12,348 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@24a2fc2f]]
2021-03-12 06:10:12,349 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:10:12,349 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@24a2fc2f]
2021-03-12 06:10:12,349 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().unaryMinus()
2021-03-12 06:10:12,349 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@255ba6e1]]
2021-03-12 06:10:12,349 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:10:12,492 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:10:12,495 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@255ba6e1]
2021-03-12 06:10:12,495 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.41140924416831715).roundToInt()
2021-03-12 06:10:12,495 [main:114] - replacement of prope8 of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4)
2021-03-12 06:10:12,625 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:12,625 [main:66] - Compilation checking started
2021-03-12 06:10:13,188 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:13,191 [main:107] - replacing (prope2, Continuation<String>?)
2021-03-12 06:10:13,191 [main:50] - replacing prope2 Continuation<String>?
2021-03-12 06:10:13,191 [main:54] - Getting value of type Continuation<String>?
2021-03-12 06:10:13,339 [main:58] - GENERATED VALUE OF TYPE Continuation<String>? = null
2021-03-12 06:10:13,339 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:13,510 [main:67] - randomType = UShort?
2021-03-12 06:10:13,655 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:10:13,699 [main:106] - GETTING Continuation<String>? from List<String>
2021-03-12 06:10:13,730 [main:106] - GETTING Continuation<String>? from Short
2021-03-12 06:10:13,758 [main:114] - replacement of prope2 of type Continuation<String>? is null
2021-03-12 06:10:13,920 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(NULL)
2021-03-12 06:10:13,921 [main:66] - Compilation checking started
2021-03-12 06:10:14,337 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = prope2 != null
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        null = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:14,339 [main:107] - replacing (prope2 != null, Boolean)
2021-03-12 06:10:14,339 [main:50] - replacing prope2 != null Boolean
2021-03-12 06:10:14,339 [main:54] - Getting value of type Boolean
2021-03-12 06:10:14,496 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:14,499 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:10:14,499 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:14,679 [main:67] - randomType = Kla6
2021-03-12 06:10:14,813 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:10:14,817 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:10:14,841 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla6[DeserializedSimpleFunctionDescriptor@24ef3207]
2021-03-12 06:10:14,994 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:14,994 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:10:15,137 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:15,141 [main:78] - Generated call from random type = (Kla6).equals("iqyec").or(false)
2021-03-12 06:10:15,141 [main:114] - replacement of prope2 != null of type Boolean is (Kla6).equals("iqyec").or(false)
2021-03-12 06:10:15,286 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:15,287 [main:66] - Compilation checking started
2021-03-12 06:10:15,866 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException("equal references")

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:15,868 [main:107] - replacing (RuntimeException("equal references"), RuntimeException)
2021-03-12 06:10:15,869 [main:50] - replacing RuntimeException("equal references") RuntimeException
2021-03-12 06:10:15,869 [main:54] - Getting value of type RuntimeException
2021-03-12 06:10:16,028 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 06:10:16,180 [main:43] - GENERATING CALL OF fun RuntimeException(cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-12 06:10:16,185 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-12 06:10:16,495 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 06:10:16,658 [main:43] - GENERATING CALL OF fun AssertionError(message: kotlin.Any?): Throwable = TODO()
2021-03-12 06:10:16,663 [main:61] - WITHOUT TYPE PARAMS = fun AssertionError(message: kotlin.Any?): Throwable = TODO()
2021-03-12 06:10:16,988 [main:302] - generating value of type = Any false depth = 6
2021-03-12 06:10:16,989 [main:95] - GENERATED = AssertionError("ylmuk")
2021-03-12 06:10:16,989 [main:95] - GENERATED = RuntimeException(AssertionError("ylmuk"))
2021-03-12 06:10:16,989 [main:58] - GENERATED VALUE OF TYPE RuntimeException = RuntimeException(AssertionError("ylmuk"))
2021-03-12 06:10:16,989 [main:61] - GENERATED IS CALL =true
2021-03-12 06:10:17,492 [main:67] - randomType = ArrayList<Short?>?
2021-03-12 06:10:17,637 [main:302] - generating value of type = ArrayList<Short?> false depth = 0
2021-03-12 06:10:17,773 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Short?): ArrayList<Short?> = TODO()
2021-03-12 06:10:17,778 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Short?): ArrayList<Short?> = TODO()
2021-03-12 06:10:17,943 [main:302] - generating value of type = Short true depth = 3
2021-03-12 06:10:17,947 [main:95] - GENERATED = arrayListOf<Short?>(-30847)
2021-03-12 06:10:18,129 [main:106] - GETTING RuntimeException from Short
2021-03-12 06:10:18,174 [main:106] - GETTING RuntimeException from List<String>
2021-03-12 06:10:18,209 [main:114] - replacement of RuntimeException("equal references") of type RuntimeException is RuntimeException(AssertionError("ylmuk"))
2021-03-12 06:10:18,350 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:10:18,350 [main:66] - Compilation checking started
2021-03-12 06:10:18,925 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = 0
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:18,928 [main:107] - replacing (prope2, Continuation<String>?)
2021-03-12 06:10:18,928 [main:50] - replacing prope2 Continuation<String>?
2021-03-12 06:10:18,928 [main:54] - Getting value of type Continuation<String>?
2021-03-12 06:10:19,086 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:10:19,238 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:19,243 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:19,752 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:10:19,903 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:19,908 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:20,230 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:10:20,406 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:20,411 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:20,907 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:20,907 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:20,907 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:20,907 [main:58] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-12 06:10:21,276 [main:67] - randomType = List<Kla1>
2021-03-12 06:10:21,278 [main:106] - GETTING Continuation<String>? from List<String>
2021-03-12 06:10:21,314 [main:106] - GETTING Continuation<String>? from Short
2021-03-12 06:10:21,356 [main:111] - Cant find and generate replacement for prope2 type Continuation<String>?
2021-03-12 06:10:21,356 [main:107] - replacing (0, Int)
2021-03-12 06:10:21,357 [main:50] - replacing 0 Int
2021-03-12 06:10:21,357 [main:54] - Getting value of type Int
2021-03-12 06:10:21,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:21,496 [main:58] - GENERATED VALUE OF TYPE Int = 14180283
2021-03-12 06:10:21,496 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:21,503 [main:67] - randomType = Int
2021-03-12 06:10:21,656 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:21,702 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@667dabf5]
2021-03-12 06:10:21,702 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@24a2fc2f]
2021-03-12 06:10:21,703 [main:78] - Generated call from random type = (-1182941098).toByte().unaryMinus()
2021-03-12 06:10:21,703 [main:106] - GETTING Int from Short
2021-03-12 06:10:21,738 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6aa5d9a8]]
2021-03-12 06:10:21,738 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:10:21,738 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6aa5d9a8]
2021-03-12 06:10:21,888 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:21,892 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().compareTo(-20)
2021-03-12 06:10:21,892 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17cf2c59]]
2021-03-12 06:10:21,892 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:10:21,893 [main:149] - GENERATING call of type @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin public fun kotlin.Char.digitToInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17cf2c59]
2021-03-12 06:10:21,893 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().digitToInt()
2021-03-12 06:10:21,893 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@10d4d67d]]
2021-03-12 06:10:21,893 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@6ce31b14]
2021-03-12 06:10:21,893 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@10d4d67d]
2021-03-12 06:10:22,033 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:22,038 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toLong().compareTo(71)
2021-03-12 06:10:22,038 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ad01195]]
2021-03-12 06:10:22,038 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:10:22,039 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ad01195]
2021-03-12 06:10:22,194 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:22,198 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
2021-03-12 06:10:22,198 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68a891]]
2021-03-12 06:10:22,198 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:22,343 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:22,347 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@68a891]
2021-03-12 06:10:22,495 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:22,499 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(7).times(-116)
2021-03-12 06:10:22,499 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]]
2021-03-12 06:10:22,499 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:22,499 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@179ec87a]
2021-03-12 06:10:22,634 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:22,637 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().minus(-87)
2021-03-12 06:10:22,638 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]]
2021-03-12 06:10:22,638 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:22,638 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]
2021-03-12 06:10:22,790 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:22,794 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().rem(-96)
2021-03-12 06:10:22,794 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@152eed97]]
2021-03-12 06:10:22,794 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:22,794 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@152eed97]
2021-03-12 06:10:22,938 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:22,942 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().ushr(-1266858754)
2021-03-12 06:10:22,942 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4c616]]
2021-03-12 06:10:22,942 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1a12640b]
2021-03-12 06:10:23,107 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:10:23,110 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@5d4c616]
2021-03-12 06:10:23,111 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4210445260220591180).countLeadingZeroBits()
2021-03-12 06:10:23,111 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d294cdb]]
2021-03-12 06:10:23,111 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:23,243 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:23,247 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d294cdb]
2021-03-12 06:10:23,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:23,402 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-74).and(-1644412188)
2021-03-12 06:10:23,402 [main:114] - replacement of 0 of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
2021-03-12 06:10:23,544 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:23,544 [main:66] - Compilation checking started
2021-03-12 06:10:24,149 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in 1..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:24,152 [main:107] - replacing (prope2!!, Continuation<String>)
2021-03-12 06:10:24,152 [main:50] - replacing prope2!! Continuation<String>
2021-03-12 06:10:24,152 [main:54] - Getting value of type Continuation<String>
2021-03-12 06:10:24,335 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:10:24,491 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:24,496 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:25,012 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:10:25,167 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:25,172 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:25,496 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:10:25,673 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:25,678 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:26,174 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:26,175 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:26,175 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:26,175 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 06:10:26,182 [main:67] - randomType = Char
2021-03-12 06:10:26,346 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:10:26,371 [main:106] - GETTING Continuation<String> from List<String>
2021-03-12 06:10:26,399 [main:106] - GETTING Continuation<String> from Short
2021-03-12 06:10:26,432 [main:111] - Cant find and generate replacement for prope2!! type Continuation<String>
2021-03-12 06:10:26,433 [main:107] - replacing (1, Int)
2021-03-12 06:10:26,433 [main:50] - replacing 1 Int
2021-03-12 06:10:26,433 [main:54] - Getting value of type Int
2021-03-12 06:10:26,586 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:26,589 [main:58] - GENERATED VALUE OF TYPE Int = -586654737
2021-03-12 06:10:26,589 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:26,753 [main:67] - randomType = ULong
2021-03-12 06:10:26,910 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:10:26,955 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@7d851ec3]
2021-03-12 06:10:26,955 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@9417214]
2021-03-12 06:10:27,115 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:27,119 [main:78] - Generated call from random type = (1969497951295847655.toULong()).toByte().rem(93)
2021-03-12 06:10:27,120 [main:106] - GETTING Int from Short
2021-03-12 06:10:27,165 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fb9fa70]]
2021-03-12 06:10:27,165 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:27,166 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fb9fa70]
2021-03-12 06:10:27,305 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:27,309 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)
2021-03-12 06:10:27,309 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a9dced4]]
2021-03-12 06:10:27,309 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:10:27,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@6a9dced4]
2021-03-12 06:10:27,309 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().toRawBits()
2021-03-12 06:10:27,309 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74409dc9]]
2021-03-12 06:10:27,309 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:27,309 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@74409dc9]
2021-03-12 06:10:27,310 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().countLeadingZeroBits()
2021-03-12 06:10:27,310 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]]
2021-03-12 06:10:27,310 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:27,466 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:27,469 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4d40e84]
2021-03-12 06:10:27,616 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:27,620 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-113).rem(-110)
2021-03-12 06:10:27,620 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-12 06:10:27,620 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:27,769 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:27,773 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:10:27,909 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:27,913 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(37).shr(1020250284)
2021-03-12 06:10:27,913 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19ea9ec1]]
2021-03-12 06:10:27,913 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:10:27,913 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@19ea9ec1]
2021-03-12 06:10:28,081 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:28,085 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().div(-73)
2021-03-12 06:10:28,086 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e76656]]
2021-03-12 06:10:28,086 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:28,086 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e76656]
2021-03-12 06:10:28,086 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().dec()
2021-03-12 06:10:28,086 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]]
2021-03-12 06:10:28,086 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:28,233 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:28,237 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]
2021-03-12 06:10:28,237 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(53).unaryPlus()
2021-03-12 06:10:28,238 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56dbd054]]
2021-03-12 06:10:28,238 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:28,387 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:28,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@56dbd054]
2021-03-12 06:10:28,391 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(-19).takeLowestOneBit()
2021-03-12 06:10:28,391 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]]
2021-03-12 06:10:28,391 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:28,391 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6be2b929]
2021-03-12 06:10:28,526 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:28,686 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:28,690 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().coerceIn(-1044873088, -2141543822)
2021-03-12 06:10:28,690 [main:114] - replacement of 1 of type Int is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)
2021-03-12 06:10:28,850 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:28,850 [main:66] - Compilation checking started
2021-03-12 06:10:29,453 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:29,458 [main:107] - replacing (b, Function0<Unit>)
2021-03-12 06:10:29,459 [main:50] - replacing b Function0<Unit>
2021-03-12 06:10:29,459 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:10:29,616 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:10:29,620 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:10:29,627 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println()}
2021-03-12 06:10:29,628 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:29,635 [main:67] - randomType = Char
2021-03-12 06:10:29,811 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:10:29,838 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:10:29,874 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:10:29,921 [main:114] - replacement of b of type Function0<Unit> is { println()}
2021-03-12 06:10:30,061 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:10:30,062 [main:66] - Compilation checking started
2021-03-12 06:10:30,463 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz"))))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
{ println()}()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:30,466 [main:107] - replacing (RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz")))), RuntimeException)
2021-03-12 06:10:30,467 [main:50] - replacing RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz")))) RuntimeException
2021-03-12 06:10:30,467 [main:54] - Getting value of type RuntimeException
2021-03-12 06:10:30,627 [main:302] - generating value of type = RuntimeException false depth = 0
2021-03-12 06:10:30,781 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-12 06:10:30,787 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): RuntimeException = TODO()
2021-03-12 06:10:31,297 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:10:31,301 [main:302] - generating value of type = Throwable false depth = 3
2021-03-12 06:10:31,455 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 06:10:31,460 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-12 06:10:31,777 [main:302] - generating value of type = Throwable false depth = 6
2021-03-12 06:10:31,784 [main:95] - GENERATED = UninitializedPropertyAccessException(IndexOutOfBoundsException())
2021-03-12 06:10:31,784 [main:95] - GENERATED = IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
2021-03-12 06:10:31,784 [main:58] - GENERATED VALUE OF TYPE RuntimeException = IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
2021-03-12 06:10:31,784 [main:61] - GENERATED IS CALL =true
2021-03-12 06:10:31,792 [main:67] - randomType = String
2021-03-12 06:10:31,952 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:31,984 [main:106] - GETTING RuntimeException from Short
2021-03-12 06:10:32,019 [main:106] - GETTING RuntimeException from List<String>
2021-03-12 06:10:32,049 [main:114] - replacement of RuntimeException((list).get(-678481348).removeSuffix(StringBuilder(StringBuilder("ymgoz")))) of type RuntimeException is IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
2021-03-12 06:10:32,201 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:10:32,202 [main:66] - Compilation checking started
2021-03-12 06:10:32,769 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:32,773 [main:107] - replacing (prope10, Function0<Unit>)
2021-03-12 06:10:32,774 [main:50] - replacing prope10 Function0<Unit>
2021-03-12 06:10:32,774 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:10:32,931 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:10:32,934 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:10:33,087 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:10:33,092 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:10:33,406 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:10:33,406 [main:95] - GENERATED = println("tfkqn")
2021-03-12 06:10:33,407 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("tfkqn")}
2021-03-12 06:10:33,407 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:33,840 [main:67] - randomType = LinkedHashMap<String, String>
2021-03-12 06:10:33,995 [main:302] - generating value of type = LinkedHashMap<String, String> false depth = 0
2021-03-12 06:10:34,173 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<String, String> = TODO()
2021-03-12 06:10:34,178 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int): LinkedHashMap<String, String> = TODO()
2021-03-12 06:10:34,503 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:10:34,507 [main:95] - GENERATED = LinkedHashMap<String, String>(-1327783067)
2021-03-12 06:10:34,635 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:10:34,658 [main:106] - GETTING Function0<Unit> from Short
2021-03-12 06:10:34,686 [main:114] - replacement of prope10 of type Function0<Unit> is { println("tfkqn")}
2021-03-12 06:10:34,840 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:10:34,840 [main:66] - Compilation checking started
2021-03-12 06:10:35,295 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if (prope9) error((list).size.toString(649097907))
        { println("tfkqn")}()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:35,298 [main:107] - replacing (prope9, Boolean)
2021-03-12 06:10:35,299 [main:50] - replacing prope9 Boolean
2021-03-12 06:10:35,299 [main:54] - Getting value of type Boolean
2021-03-12 06:10:35,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:35,456 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:10:35,456 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:36,343 [main:67] - randomType = HashMap<Long?, Kla3<UByte>>
2021-03-12 06:10:36,482 [main:302] - generating value of type = HashMap<Long?, Kla3<UByte>> false depth = 0
2021-03-12 06:10:36,622 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): HashMap<Long?, Kla3<UByte>> = TODO()
2021-03-12 06:10:36,627 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): HashMap<Long?, Kla3<UByte>> = TODO()
2021-03-12 06:10:36,796 [main:95] - GENERATED = LinkedHashMap<Long?, Kla3<UByte>>()
2021-03-12 06:10:36,937 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.MutableSet[DeserializedSimpleFunctionDescriptor@3bf00c86]
2021-03-12 06:10:37,089 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:37,090 [main:78] - Generated call from random type = (LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")
2021-03-12 06:10:37,091 [main:106] - GETTING Boolean from List<String>
2021-03-12 06:10:37,126 [main:113] - Case = [public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@764e3a1]]
2021-03-12 06:10:37,126 [main:149] - GENERATING call of type public abstract fun listIterator(): kotlin.collections.ListIterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@4243ecf2]
2021-03-12 06:10:37,126 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ListIterator[DeserializedSimpleFunctionDescriptor@764e3a1]
2021-03-12 06:10:37,260 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:37,261 [main:117] - GENERATED CALL = (list).listIterator().equals("nldyl")
2021-03-12 06:10:37,261 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8658ba9]]
2021-03-12 06:10:37,261 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8658ba9]
2021-03-12 06:10:37,261 [main:117] - GENERATED CALL = (list).isNullOrEmpty()
2021-03-12 06:10:37,261 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@30fab0b7]]
2021-03-12 06:10:37,261 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:37,427 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:37,431 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@30fab0b7]
2021-03-12 06:10:37,578 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:37,579 [main:117] - GENERATED CALL = (list).get(-1694735382).equals("fwgob")
2021-03-12 06:10:37,579 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:10:37,579 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@10f7f2ff]
2021-03-12 06:10:37,726 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:37,729 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:10:37,867 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:37,867 [main:117] - GENERATED CALL = (list).contains("wiynp").equals("haycx")
2021-03-12 06:10:37,868 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:10:37,868 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:10:38,028 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:38,028 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:10:38,177 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:38,181 [main:117] - GENERATED CALL = (list).equals("myfzv").xor(true)
2021-03-12 06:10:38,181 [main:113] - Case = [public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.String>): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1746b65d]]
2021-03-12 06:10:38,181 [main:149] - GENERATING call of type public abstract fun containsAll(elements: kotlin.collections.Collection<kotlin.String>): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@1746b65d]
2021-03-12 06:10:38,333 [main:302] - generating value of type = Collection<String> false depth = 0
2021-03-12 06:10:38,478 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: String): Collection<Strg> = TODO()
2021-03-12 06:10:38,483 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: String): Collection<Strg> = TODO()
2021-03-12 06:10:38,654 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:10:38,658 [main:95] - GENERATED = arrayListOf<String>("fyobs")
2021-03-12 06:10:38,659 [main:117] - GENERATED CALL = (list).containsAll(arrayListOf<String>("fyobs"))
2021-03-12 06:10:38,659 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:10:38,659 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:10:38,803 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:38,804 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:10:38,804 [main:117] - GENERATED CALL = (list).equals("tqmob").not()
2021-03-12 06:10:38,804 [main:113] - Case = [public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@7da685]]
2021-03-12 06:10:38,804 [main:149] - GENERATING call of type public abstract fun isEmpty(): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@7da685]
2021-03-12 06:10:38,804 [main:117] - GENERATED CALL = (list).isEmpty()
2021-03-12 06:10:38,804 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e], public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@132ea25]]
2021-03-12 06:10:38,804 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e]
2021-03-12 06:10:38,804 [main:149] - GENERATING call of type public abstract operator fun hasNext(): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@132ea25]
2021-03-12 06:10:38,805 [main:117] - GENERATED CALL = (list).iterator().hasNext()
2021-03-12 06:10:38,805 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:10:38,805 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@5bbcca96]
2021-03-12 06:10:38,955 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:38,956 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:10:39,093 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:39,097 [main:117] - GENERATED CALL = (list).equals("dbsmt").and(false)
2021-03-12 06:10:39,097 [main:114] - replacement of prope9 of type Boolean is (LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")
2021-03-12 06:10:39,253 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:39,253 [main:66] - Compilation checking started
2021-03-12 06:10:39,948 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:39,951 [main:107] - replacing (prope6, Continuation<String>)
2021-03-12 06:10:39,951 [main:50] - replacing prope6 Continuation<String>
2021-03-12 06:10:39,951 [main:54] - Getting value of type Continuation<String>
2021-03-12 06:10:40,123 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:10:40,293 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:40,299 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:40,852 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:10:41,009 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:41,014 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:41,357 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:10:41,558 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:41,563 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:42,083 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:42,084 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:42,084 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:42,084 [main:58] - GENERATED VALUE OF TYPE Continuation<String> = 
2021-03-12 06:10:42,277 [main:67] - randomType = UShort?
2021-03-12 06:10:42,423 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:10:42,463 [main:106] - GETTING Continuation<String> from List<String>
2021-03-12 06:10:42,504 [main:106] - GETTING Continuation<String> from Short
2021-03-12 06:10:42,547 [main:111] - Cant find and generate replacement for prope6 type Continuation<String>
2021-03-12 06:10:42,548 [main:107] - replacing ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions, IntRange)
2021-03-12 06:10:42,548 [main:50] - replacing (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions IntRange
2021-03-12 06:10:42,548 [main:54] - Getting value of type IntRange
2021-03-12 06:10:42,693 [main:302] - generating value of type = IntRange false depth = 0
2021-03-12 06:10:42,857 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:10:42,862 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-12 06:10:43,353 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:10:43,357 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:10:43,361 [main:95] - GENERATED = IntRange(330284986, -1328870224)
2021-03-12 06:10:43,361 [main:58] - GENERATED VALUE OF TYPE IntRange = IntRange(330284986, -1328870224)
2021-03-12 06:10:43,361 [main:61] - GENERATED IS CALL =true
2021-03-12 06:10:43,375 [main:67] - randomType = Kla5
2021-03-12 06:10:43,531 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:10:43,535 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:10:43,545 [main:106] - GETTING IntRange from Short
2021-03-12 06:10:43,580 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6795c28a]]
2021-03-12 06:10:43,580 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:43,580 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6795c28a]
2021-03-12 06:10:43,727 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:43,731 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)
2021-03-12 06:10:43,731 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]]
2021-03-12 06:10:43,731 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:10:43,731 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:10:43,882 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:43,886 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rangeTo(-39)
2021-03-12 06:10:43,886 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f2164c7]]
2021-03-12 06:10:43,886 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:44,022 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,026 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f2164c7]
2021-03-12 06:10:44,183 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,188 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(67).rangeTo(64)
2021-03-12 06:10:44,188 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4da2024c]]
2021-03-12 06:10:44,188 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:10:44,188 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4da2024c]
2021-03-12 06:10:44,335 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,340 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().rangeTo(-51)
2021-03-12 06:10:44,340 [main:113] - Case = [public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@57f5be22]]
2021-03-12 06:10:44,340 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4de17245]
2021-03-12 06:10:44,340 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@57f5be22]
2021-03-12 06:10:44,496 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,500 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().until(-121)
2021-03-12 06:10:44,500 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c8d8d80]]
2021-03-12 06:10:44,500 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:10:44,500 [main:149] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@4c8d8d80]
2021-03-12 06:10:44,644 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,648 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toByte().until(-46)
2021-03-12 06:10:44,648 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f2164c7]]
2021-03-12 06:10:44,648 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@39dbc612]
2021-03-12 06:10:44,648 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1f2164c7]
2021-03-12 06:10:44,813 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,818 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().rangeTo(-36)
2021-03-12 06:10:44,818 [main:113] - Case = [public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6795c28a]]
2021-03-12 06:10:44,818 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2bcb946e]
2021-03-12 06:10:44,970 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:44,974 [main:149] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6795c28a]
2021-03-12 06:10:45,127 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:45,131 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).compareTo(73).until(-98)
2021-03-12 06:10:45,287 [main:113] - Case = [public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@57f5be22]]
2021-03-12 06:10:45,287 [main:149] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@57f5be22]
2021-03-12 06:10:45,445 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:45,449 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).until(124)
2021-03-12 06:10:45,449 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]]
2021-03-12 06:10:45,449 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:10:45,598 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:45,603 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(-56)
2021-03-12 06:10:45,603 [main:114] - replacement of (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().compareTo(-42)..numberOfSuspensions of type IntRange is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)
2021-03-12 06:10:45,756 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:45,757 [main:66] - Compilation checking started
2021-03-12 06:10:46,382 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((Kla2()).prope3?.toString()!! + ", got " + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:46,385 [main:107] - replacing ((Kla2()).prope3?.toString()!! + ", got ", String)
2021-03-12 06:10:46,386 [main:50] - replacing (Kla2()).prope3?.toString()!! + ", got " String
2021-03-12 06:10:46,386 [main:54] - Getting value of type String
2021-03-12 06:10:46,559 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:46,563 [main:58] - GENERATED VALUE OF TYPE String = "jstnm"
2021-03-12 06:10:46,563 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:46,571 [main:67] - randomType = UInt
2021-03-12 06:10:46,727 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 06:10:46,801 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6c2cc36d]
2021-03-12 06:10:46,802 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:10:46,996 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:47,000 [main:78] - Generated call from random type = (1804391813.toUInt()).toUShort().toString(-571896848)
2021-03-12 06:10:47,000 [main:114] - replacement of (Kla2()).prope3?.toString()!! + ", got " of type String is (1804391813.toUInt()).toUShort().toString(-571896848)
2021-03-12 06:10:47,161 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:47,162 [main:66] - Compilation checking started
2021-03-12 06:10:47,813 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + " has no state-machine " +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:47,816 [main:107] - replacing (" has no state-machine ", String)
2021-03-12 06:10:47,816 [main:50] - replacing " has no state-machine " String
2021-03-12 06:10:47,816 [main:54] - Getting value of type String
2021-03-12 06:10:47,974 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:47,978 [main:58] - GENERATED VALUE OF TYPE String = "okilk"
2021-03-12 06:10:47,978 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:47,986 [main:67] - randomType = Boolean
2021-03-12 06:10:48,135 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:48,151 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:10:48,302 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:48,306 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:10:48,444 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:48,448 [main:78] - Generated call from random type = (false).compareTo(false).toString(-1915884473)
2021-03-12 06:10:48,448 [main:114] - replacement of " has no state-machine " of type String is (false).compareTo(false).toString(-1915884473)
2021-03-12 06:10:48,606 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:48,607 [main:66] - Compilation checking started
2021-03-12 06:10:49,235 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + (false).compareTo(false).toString(-1915884473) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:49,238 [main:107] - replacing (prope2, Continuation<String>?)
2021-03-12 06:10:49,238 [main:50] - replacing prope2 Continuation<String>?
2021-03-12 06:10:49,238 [main:54] - Getting value of type Continuation<String>?
2021-03-12 06:10:49,404 [main:302] - generating value of type = Continuation<String> false depth = 0
2021-03-12 06:10:49,563 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:49,569 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:50,105 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-12 06:10:50,263 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:50,268 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:50,610 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-12 06:10:50,795 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:50,800 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:51,321 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:10:51,322 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:10:51,322 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<String>)->kotlin.Unit): Contuation<Strg> = TODO()
2021-03-12 06:10:51,322 [main:58] - GENERATED VALUE OF TYPE Continuation<String>? = 
2021-03-12 06:10:51,329 [main:67] - randomType = UByte
2021-03-12 06:10:51,489 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:10:51,532 [main:106] - GETTING Continuation<String>? from Short
2021-03-12 06:10:51,570 [main:106] - GETTING Continuation<String>? from List<String>
2021-03-12 06:10:51,602 [main:111] - Cant find and generate replacement for prope2 type Continuation<String>?
2021-03-12 06:10:51,602 [main:107] - replacing ({ prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    }, Function1<Continuation<String>, Any?>)
2021-03-12 06:10:51,602 [main:50] - replacing { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    } Function1<Continuation<String>, Any?>
2021-03-12 06:10:51,602 [main:54] - Getting value of type Function1<Continuation<String>, Any?>
2021-03-12 06:10:51,761 [main:302] - generating value of type = Function1<Continuation<String>, Any?> false depth = 0
2021-03-12 06:10:51,765 [main:302] - generating value of type = Any false depth = 1
2021-03-12 06:10:51,765 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<String>, Any?> = {a: Continuation<String> -> "ddlra"}
2021-03-12 06:10:51,765 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:52,302 [main:67] - randomType = ArrayList<Float>
2021-03-12 06:10:52,457 [main:302] - generating value of type = ArrayList<Float> false depth = 0
2021-03-12 06:10:52,602 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-12 06:10:52,607 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): ArrayList<Float> = TODO()
2021-03-12 06:10:52,787 [main:95] - GENERATED = arrayListOf<Float>()
2021-03-12 06:10:52,943 [main:106] - GETTING Function1<Continuation<String>, Any?> from Short
2021-03-12 06:10:52,990 [main:106] - GETTING Function1<Continuation<String>, Any?> from List<String>
2021-03-12 06:10:53,023 [main:114] - replacement of { prope6 ->
        prope2 = prope6
        COROUTINE_SUSPENDED
    } of type Function1<Continuation<String>, Any?> is {a: Continuation<String> -> "ddlra"}
2021-03-12 06:10:53,168 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:10:53,169 [main:66] - Compilation checking started
2021-03-12 06:10:53,807 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + (false).compareTo(false).toString(-1915884473) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:53,810 [main:107] - replacing (prope9, Boolean)
2021-03-12 06:10:53,810 [main:50] - replacing prope9 Boolean
2021-03-12 06:10:53,810 [main:54] - Getting value of type Boolean
2021-03-12 06:10:53,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:53,973 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:10:53,973 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:54,156 [main:67] - randomType = ULong
2021-03-12 06:10:54,308 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:10:54,346 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@28a2209d]
2021-03-12 06:10:54,347 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]
2021-03-12 06:10:54,347 [main:78] - Generated call from random type = (8319580394527007469.toULong()).toDouble().isNaN()
2021-03-12 06:10:54,348 [main:106] - GETTING Boolean from Short
2021-03-12 06:10:54,387 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:10:54,387 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:10:54,547 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:54,548 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:10:54,698 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:54,698 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yvbbg").equals("auqpe")
2021-03-12 06:10:54,699 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]]
2021-03-12 06:10:54,699 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:10:54,699 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]
2021-03-12 06:10:54,699 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().isNaN()
2021-03-12 06:10:54,699 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:10:54,699 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:10:54,852 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:54,852 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:10:54,995 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:10:54,999 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("hvrwo").xor(true)
2021-03-12 06:10:54,999 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47c67c19]]
2021-03-12 06:10:54,999 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2300c37f]
2021-03-12 06:10:54,999 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@47c67c19]
2021-03-12 06:10:55,000 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toFloat().isNaN()
2021-03-12 06:10:55,000 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]]
2021-03-12 06:10:55,000 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:10:55,000 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]
2021-03-12 06:10:55,000 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isUpperCase()
2021-03-12 06:10:55,000 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]]
2021-03-12 06:10:55,000 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@82a380d]
2021-03-12 06:10:55,162 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:10:55,166 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@84a9f40]
2021-03-12 06:10:55,166 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.8520620652303829).isNaN()
2021-03-12 06:10:55,167 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]]
2021-03-12 06:10:55,167 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@599f178a]
2021-03-12 06:10:55,167 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@70002d9]
2021-03-12 06:10:55,317 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:55,317 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toDouble().equals("zjbvd")
2021-03-12 06:10:55,322 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f07bdd]]
2021-03-12 06:10:55,322 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:10:55,322 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49f07bdd]
2021-03-12 06:10:55,322 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().isDefined()
2021-03-12 06:10:55,322 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:10:55,323 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@6972eeba]
2021-03-12 06:10:55,478 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:55,478 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:10:55,478 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("gptrc").not()
2021-03-12 06:10:55,479 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]]
2021-03-12 06:10:55,479 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@254e3d09]
2021-03-12 06:10:55,634 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:10:55,638 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@729f0033]
2021-03-12 06:10:55,809 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:10:55,810 [main:117] - GENERATED CALL = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rangeTo(45).equals("nmogp")
2021-03-12 06:10:55,810 [main:114] - replacement of prope9 of type Boolean is (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.8520620652303829).isNaN()
2021-03-12 06:10:55,960 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:10:55,961 [main:66] - Compilation checking started
2021-03-12 06:10:56,416 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error(("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + (false).compareTo(false).toString(-1915884473) +
                prope7.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().(listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(0.8520620652303829).isNaN() = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:10:56,419 [main:107] - replacing (("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + (false).compareTo(false).toString(-1915884473) +
                prope7.joinToString(separator = "\n"), String)
2021-03-12 06:10:56,419 [main:50] - replacing ("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + (false).compareTo(false).toString(-1915884473) +
                prope7.joinToString(separator = "\n") String
2021-03-12 06:10:56,419 [main:54] - Getting value of type String
2021-03-12 06:10:56,577 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:56,581 [main:58] - GENERATED VALUE OF TYPE String = "vaqpz"
2021-03-12 06:10:56,581 [main:61] - GENERATED IS CALL =false
2021-03-12 06:10:56,934 [main:67] - randomType = ArrayDeque<Long>
2021-03-12 06:10:57,085 [main:302] - generating value of type = ArrayDeque<Long> false depth = 0
2021-03-12 06:10:57,255 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Long> = TODO()
2021-03-12 06:10:57,260 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Long> = TODO()
2021-03-12 06:10:57,421 [main:95] - GENERATED = ArrayDeque<Long>()
2021-03-12 06:10:57,600 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@53867d1f]
2021-03-12 06:10:57,600 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@75541428]
2021-03-12 06:10:57,600 [main:78] - Generated call from random type = (ArrayDeque<Long>()).toArray().contentToString()
2021-03-12 06:10:57,601 [main:106] - GETTING String from List<String>
2021-03-12 06:10:57,636 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2dad82]]
2021-03-12 06:10:57,636 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:57,772 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:57,775 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2dad82]
2021-03-12 06:10:57,935 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:10:58,088 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:58,092 [main:117] - GENERATED CALL = (list).get(-320403053).substringBefore('ã¦ª', "wckay")
2021-03-12 06:10:58,092 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2479a6a6]]
2021-03-12 06:10:58,092 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:58,244 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:58,248 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2479a6a6]
2021-03-12 06:10:58,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:58,551 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:10:58,555 [main:117] - GENERATED CALL = (list).get(-95611350).padStart(1235257169, 'àµ³')
2021-03-12 06:10:58,556 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]]
2021-03-12 06:10:58,556 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:58,703 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:58,707 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]
2021-03-12 06:10:58,861 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:10:59,005 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:10:59,009 [main:117] - GENERATED CALL = (list).get(-2043809094).substringBeforeLast('ã', "uhefv")
2021-03-12 06:10:59,009 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e563e3a]]
2021-03-12 06:10:59,009 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:59,172 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:59,176 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e563e3a]
2021-03-12 06:10:59,323 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:10:59,327 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:10:59,331 [main:117] - GENERATED CALL = (list).get(-1788491612).replaceFirstChar({a: Char -> 'ë¨º'})
2021-03-12 06:10:59,331 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]]
2021-03-12 06:10:59,331 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:59,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:59,486 [main:117] - GENERATED CALL = (list).get(-955729499)
2021-03-12 06:10:59,487 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401de656]]
2021-03-12 06:10:59,487 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:10:59,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:10:59,631 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401de656]
2021-03-12 06:10:59,792 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:10:59,947 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:11:00,106 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:11:00,110 [main:117] - GENERATED CALL = (list).get(1255332327).replaceFirst('?', 'ã£', false)
2021-03-12 06:11:00,111 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]]
2021-03-12 06:11:00,111 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:00,253 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:00,257 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]
2021-03-12 06:11:00,418 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:00,573 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:11:00,579 [main:117] - GENERATED CALL = (list).get(-1853723589).padEnd(283764992, 'á')
2021-03-12 06:11:00,579 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]]
2021-03-12 06:11:00,580 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:00,737 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:00,741 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]
2021-03-12 06:11:00,882 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:11:00,886 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:11:00,890 [main:117] - GENERATED CALL = (list).get(1467463062).filterNot({a: Char -> true})
2021-03-12 06:11:00,890 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]]
2021-03-12 06:11:00,890 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:01,057 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:01,062 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]
2021-03-12 06:11:01,214 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:01,221 [main:117] - GENERATED CALL = (list).get(1979028207).removeSuffix("safeu")
2021-03-12 06:11:01,221 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@29e4ad7a]]
2021-03-12 06:11:01,221 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.getOrNull(index: kotlin.Int): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@29e4ad7a]
2021-03-12 06:11:01,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:01,381 [main:117] - GENERATED CALL = (list).getOrNull(-1457375286)
2021-03-12 06:11:01,381 [main:114] - replacement of ("eqvbo")?.plus("mbmvs").filterNot({a: Char -> false}) + (false).compareTo(false).toString(-1915884473) +
                prope7.joinToString(separator = "\n") of type String is (list).get(1979028207).removeSuffix("safeu")
2021-03-12 06:11:01,523 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:01,524 [main:66] - Compilation checking started
2021-03-12 06:11:02,142 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:11:02,145 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 06:11:02,145 [main:50] - replacing getOrThrow() Ty0
2021-03-12 06:11:02,145 [main:54] - Getting value of type Ty0
2021-03-12 06:11:02,307 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 06:11:02,314 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 06:11:03,639 [main:67] - randomType = Function2<Map<ULong?, Char>, MutableMap<UByte, Char>, Map<Int, Boolean>>
2021-03-12 06:11:03,640 [main:106] - GETTING Ty0 from List<String>
2021-03-12 06:11:03,674 [main:106] - GETTING Ty0 from Short
2021-03-12 06:11:03,709 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 06:11:03,709 [main:107] - replacing (Kla1, Kla7)
2021-03-12 06:11:03,709 [main:50] - replacing Kla1 Kla7
2021-03-12 06:11:03,709 [main:54] - Getting value of type Kla7
2021-03-12 06:11:03,865 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 06:11:03,868 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-12 06:11:03,868 [main:58] - GENERATED VALUE OF TYPE Kla7 = 
2021-03-12 06:11:03,876 [main:67] - randomType = Int
2021-03-12 06:11:04,014 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:04,066 [main:106] - GETTING Kla7 from Short
2021-03-12 06:11:04,095 [main:106] - GETTING Kla7 from List<String>
2021-03-12 06:11:04,117 [main:111] - Cant find and generate replacement for Kla1 type Kla7
2021-03-12 06:11:04,118 [main:107] - replacing (exception, Throwable)
2021-03-12 06:11:04,118 [main:50] - replacing exception Throwable
2021-03-12 06:11:04,118 [main:54] - Getting value of type Throwable
2021-03-12 06:11:04,292 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:11:04,448 [main:43] - GENERATING CALL OF fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:11:04,454 [main:61] - WITHOUT TYPE PARAMS = fun NumberFormatException(message: kotlin.String?): Throwable = TODO()
2021-03-12 06:11:04,774 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:11:04,778 [main:95] - GENERATED = NumberFormatException("gtqis")
2021-03-12 06:11:04,778 [main:58] - GENERATED VALUE OF TYPE Throwable = NumberFormatException("gtqis")
2021-03-12 06:11:04,778 [main:61] - GENERATED IS CALL =true
2021-03-12 06:11:04,972 [main:67] - randomType = Sequence<Kla4>
2021-03-12 06:11:04,973 [main:106] - GETTING Throwable from List<String>
2021-03-12 06:11:05,008 [main:106] - GETTING Throwable from Short
2021-03-12 06:11:05,040 [main:114] - replacement of exception of type Throwable is NumberFormatException("gtqis")
2021-03-12 06:11:05,196 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:11:05,196 [main:66] - Compilation checking started
2021-03-12 06:11:05,788 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:05,791 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 06:11:05,791 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 06:11:05,791 [main:54] - Getting value of type String
2021-03-12 06:11:05,956 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:11:05,960 [main:58] - GENERATED VALUE OF TYPE String = "orpdc"
2021-03-12 06:11:05,960 [main:61] - GENERATED IS CALL =false
2021-03-12 06:11:06,134 [main:67] - randomType = Long
2021-03-12 06:11:06,290 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:11:06,337 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@19a81f9d]
2021-03-12 06:11:06,338 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:11:06,338 [main:78] - Generated call from random type = (-476214440755098510).toChar().titlecase()
2021-03-12 06:11:06,339 [main:106] - GETTING String from List<String>
2021-03-12 06:11:06,375 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.last(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c3f358c]]
2021-03-12 06:11:06,376 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.last(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7c3f358c]
2021-03-12 06:11:06,376 [main:117] - GENERATED CALL = (list).last()
2021-03-12 06:11:06,376 [main:113] - Case = [@kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67189d14]]
2021-03-12 06:11:06,376 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun <T : kotlin.Comparable<T>> kotlin.collections.Iterable<T>.minOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@67189d14]
2021-03-12 06:11:06,376 [main:117] - GENERATED CALL = (list).minOrNull()
2021-03-12 06:11:06,376 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e], public abstract operator fun next(): kotlin.String defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@3bdd951a]]
2021-03-12 06:11:06,376 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@a3e2e8e]
2021-03-12 06:11:06,376 [main:149] - GENERATING call of type public abstract operator fun next(): kotlin.String defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@3bdd951a]
2021-03-12 06:11:06,377 [main:117] - GENERATED CALL = (list).iterator().next()
2021-03-12 06:11:06,377 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbd71b]]
2021-03-12 06:11:06,377 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:06,534 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:06,538 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbd71b]
2021-03-12 06:11:06,686 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:06,845 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:06,850 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:07,188 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:11:07,342 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:11:07,347 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:11:07,662 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:11:07,666 [main:95] - GENERATED = StringBuilder(1763539062)
2021-03-12 06:11:07,666 [main:95] - GENERATED = StringBuilder(StringBuilder(1763539062))
2021-03-12 06:11:07,666 [main:117] - GENERATED CALL = (list).get(-1308870093).removeSurrounding(StringBuilder(StringBuilder(1763539062)))
2021-03-12 06:11:07,666 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@4006e8f8], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:11:07,666 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:11:07,828 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:07,832 [main:117] - GENERATED CALL = (list).size.toString(-1413276652)
2021-03-12 06:11:07,833 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c75ac24]]
2021-03-12 06:11:07,833 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:07,980 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:07,984 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3c75ac24]
2021-03-12 06:11:08,137 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:11:08,141 [main:117] - GENERATED CALL = (list).get(-430138352).replaceIndent("qvlev")
2021-03-12 06:11:08,141 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]]
2021-03-12 06:11:08,141 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:08,282 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:08,285 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]
2021-03-12 06:11:08,446 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:11:08,447 [main:117] - GENERATED CALL = (list).get(-882673001).plus("rivik")
2021-03-12 06:11:08,447 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34e79514]]
2021-03-12 06:11:08,447 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@34e79514]
2021-03-12 06:11:08,447 [main:117] - GENERATED CALL = (list).first()
2021-03-12 06:11:08,447 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]]
2021-03-12 06:11:08,447 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:08,601 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:08,605 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]
2021-03-12 06:11:08,756 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:11:08,901 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:11:09,062 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:11:09,067 [main:117] - GENERATED CALL = (list).get(1818035165).replace('ä', 'î', true)
2021-03-12 06:11:09,067 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]]
2021-03-12 06:11:09,067 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:09,219 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:09,225 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]
2021-03-12 06:11:09,377 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:09,381 [main:117] - GENERATED CALL = (list).get(997527722).take(-2038110359)
2021-03-12 06:11:09,381 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is (list).size.toString(-1413276652)
2021-03-12 06:11:09,521 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:09,521 [main:66] - Compilation checking started
2021-03-12 06:11:10,110 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:10,113 [main:107] - replacing ((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4), String)
2021-03-12 06:11:10,113 [main:50] - replacing (1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4) String
2021-03-12 06:11:10,114 [main:54] - Getting value of type String
2021-03-12 06:11:10,271 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:11:10,275 [main:58] - GENERATED VALUE OF TYPE String = "uhrdz"
2021-03-12 06:11:10,275 [main:61] - GENERATED IS CALL =false
2021-03-12 06:11:10,283 [main:67] - randomType = Short
2021-03-12 06:11:10,430 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:11:10,487 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@676731a4]
2021-03-12 06:11:10,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:11:10,487 [main:78] - Generated call from random type = (-18620).toChar().titlecase()
2021-03-12 06:11:10,488 [main:106] - GETTING String from List<String>
2021-03-12 06:11:10,520 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@357972dc]]
2021-03-12 06:11:10,520 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>.randomOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@357972dc]
2021-03-12 06:11:10,520 [main:117] - GENERATED CALL = (list).randomOrNull()
2021-03-12 06:11:10,520 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ac397d6]]
2021-03-12 06:11:10,520 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7ac397d6]
2021-03-12 06:11:10,662 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:10,810 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:10,814 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:11,161 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:11:11,319 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:11:11,325 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:11:11,664 [main:302] - generating value of type = Int true depth = 6
2021-03-12 06:11:11,668 [main:95] - GENERATED = StringBuilder(-1744045416)
2021-03-12 06:11:11,669 [main:95] - GENERATED = StringBuilder(StringBuilder(-1744045416))
2021-03-12 06:11:11,816 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:11,974 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:11,979 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:12,316 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:11:12,468 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:12,473 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:12,793 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 06:11:12,800 [main:95] - GENERATED = StringBuilder("puosg")
2021-03-12 06:11:12,800 [main:95] - GENERATED = StringBuilder(StringBuilder("puosg"))
2021-03-12 06:11:12,957 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:13,114 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:13,119 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:11:13,443 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:11:13,450 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 06:11:13,613 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:13,765 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:13,926 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 06:11:13,929 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:11:13,937 [main:117] - GENERATED CALL = (list).joinToString(StringBuilder(StringBuilder(-1744045416)), StringBuilder(StringBuilder("puosg")), StringBuilder(StringBuilder()), 334623653, "kjzoo", {a: T -> "oeqiz"})
2021-03-12 06:11:13,937 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3933679d]]
2021-03-12 06:11:13,937 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:14,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:14,085 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3933679d]
2021-03-12 06:11:14,245 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:14,398 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:14,403 [main:117] - GENERATED CALL = (list).get(637235520).removeRange(-1793154083, -734487728)
2021-03-12 06:11:14,403 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7957eec3]]
2021-03-12 06:11:14,403 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.collections.Iterable<T>.minWith(comparator: kotlin.Comparator<in T>): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7957eec3]
2021-03-12 06:11:14,555 [main:302] - generating value of type = Comparator<in T> false depth = 0
2021-03-12 06:11:14,710 [main:43] - GENERATING CALL OF fun <T> naturalOrder(): Comparator<T> = TODO()
2021-03-12 06:11:14,715 [main:61] - WITHOUT TYPE PARAMS = fun <T> naturalOrder(): Comparator<T> = TODO()
2021-03-12 06:11:14,885 [main:95] - GENERATED = naturalOrder<T>()
2021-03-12 06:11:14,885 [main:117] - GENERATED CALL = (list).minWith(naturalOrder<T>())
2021-03-12 06:11:14,886 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11aa22c6]]
2021-03-12 06:11:14,886 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:15,036 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:15,040 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11aa22c6]
2021-03-12 06:11:15,195 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:11:15,199 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:11:15,203 [main:117] - GENERATED CALL = (list).get(-2024589120).dropLastWhile({a: Char -> true})
2021-03-12 06:11:15,203 [main:113] - Case = [@kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]]
2021-03-12 06:11:15,204 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.maxByOrNull(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4515ab2]
2021-03-12 06:11:15,347 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 06:11:15,350 [main:302] - generating value of type = R false depth = 1
2021-03-12 06:11:15,535 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla5, block: T.()->UInt): R = TODO()
2021-03-12 06:11:15,540 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla5, block: T.()->UInt): R = TODO()
2021-03-12 06:11:15,879 [main:302] - generating value of type = Kla5 false depth = 4
2021-03-12 06:11:15,883 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error((1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4))
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}
2021-03-12 06:11:15,883 [main:385] - Cant generate call of fun <T, R> with(receiver: Kla5, block: T.()->UInt): R = TODO()
2021-03-12 06:11:15,883 [main:117] - GENERATED CALL = (list).maxByOrNull({a: T -> })
2021-03-12 06:11:15,883 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]]
2021-03-12 06:11:15,884 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component1(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5be38ef2]
2021-03-12 06:11:15,884 [main:117] - GENERATED CALL = (list).component1()
2021-03-12 06:11:15,884 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401de656]]
2021-03-12 06:11:15,884 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:16,024 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:16,028 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401de656]
2021-03-12 06:11:16,193 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:11:16,346 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:11:16,503 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:11:16,507 [main:117] - GENERATED CALL = (list).get(1309346337).replaceFirst('âº', 'ã¬º', false)
2021-03-12 06:11:16,507 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4088af]]
2021-03-12 06:11:16,507 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:16,650 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:16,654 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4088af]
2021-03-12 06:11:16,812 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:16,816 [main:117] - GENERATED CALL = (list).get(1858054957).takeLast(-294374840)
2021-03-12 06:11:16,816 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44bb53a3]]
2021-03-12 06:11:16,817 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@61bfe2aa]
2021-03-12 06:11:16,966 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:16,970 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44bb53a3]
2021-03-12 06:11:17,132 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:11:17,136 [main:117] - GENERATED CALL = (list).get(1999059432).concat("xlwrb")
2021-03-12 06:11:17,136 [main:114] - replacement of (1804391813.toUInt()).toUShort().toString(-571896848) + (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).div(4) of type String is "uhrdz"
2021-03-12 06:11:17,275 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:11:17,276 [main:66] - Compilation checking started
2021-03-12 06:11:17,832 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(true, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:17,834 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:11:17,835 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:11:17,835 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:11:17,990 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:11:17,996 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:11:18,003 [main:67] - randomType = UShort
2021-03-12 06:11:18,149 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:11:18,184 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 06:11:18,222 [main:106] - GETTING EmptyCoroutineContext from Short
2021-03-12 06:11:18,264 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 06:11:18,405 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 06:11:18,536 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 06:11:18,536 [main:66] - Compilation checking started
2021-03-12 06:11:19,083 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:19,084 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:19,243 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 06:11:19,243 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:19,390 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:19,390 [main:66] - Compilation checking started
2021-03-12 06:11:19,823 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(1979028207, {a: Short, b: Char -> -18273})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:19,824 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:20,003 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:20,004 [main:66] - Compilation checking started
2021-03-12 06:11:20,612 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:20,612 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 06:11:20,778 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:11:20,779 [main:66] - Compilation checking started
2021-03-12 06:11:21,236 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(fu6(), { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(441475030, 537808783)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:21,236 [main:141] - TRYING TO REPLACE CONSTANT 441475030
2021-03-12 06:11:21,398 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:21,399 [main:66] - Compilation checking started
2021-03-12 06:11:22,014 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 537808783)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:22,014 [main:141] - TRYING TO REPLACE CONSTANT 537808783
2021-03-12 06:11:22,179 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:22,180 [main:66] - Compilation checking started
2021-03-12 06:11:22,801 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((326951012.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:22,802 [main:141] - TRYING TO REPLACE CONSTANT 326951012
2021-03-12 06:11:22,965 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:22,965 [main:66] - Compilation checking started
2021-03-12 06:11:23,573 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(-1315140850) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:23,573 [main:141] - TRYING TO REPLACE CONSTANT 1315140850
2021-03-12 06:11:23,735 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:23,736 [main:66] - Compilation checking started
2021-03-12 06:11:24,356 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:24,357 [main:141] - TRYING TO REPLACE CONSTANT 531336230
2021-03-12 06:11:24,513 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:11:24,513 [main:66] - Compilation checking started
2021-03-12 06:11:24,956 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and(-724275818) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(size).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:24,957 [main:141] - TRYING TO REPLACE CONSTANT 724275818
2021-03-12 06:11:25,120 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:25,121 [main:66] - Compilation checking started
2021-03-12 06:11:25,732 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:25,732 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:25,887 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:11:25,888 [main:66] - Compilation checking started
2021-03-12 06:11:26,359 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>(toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:26,360 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:26,515 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:26,515 [main:66] - Compilation checking started
2021-03-12 06:11:27,138 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:27,139 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:27,293 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:11:27,293 [main:66] - Compilation checking started
2021-03-12 06:11:27,740 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> size})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:27,741 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 06:11:27,897 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 06:11:27,898 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:28,044 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 06:11:28,045 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:28,200 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:28,200 [main:66] - Compilation checking started
2021-03-12 06:11:28,603 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>((list).size, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:28,603 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:28,757 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:11:28,758 [main:66] - Compilation checking started
2021-03-12 06:11:29,196 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> and((list).size)})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(24))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:29,196 [main:141] - TRYING TO REPLACE CONSTANT 24
2021-03-12 06:11:29,328 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:29,329 [main:66] - Compilation checking started
2021-03-12 06:11:29,873 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:29,873 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:30,028 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 06:11:30,029 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:30,179 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:30,179 [main:66] - Compilation checking started
2021-03-12 06:11:30,599 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(1315140850, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:30,599 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:30,753 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:11:30,753 [main:66] - Compilation checking started
2021-03-12 06:11:31,211 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(-722573029) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> and((list).size)})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:31,211 [main:141] - TRYING TO REPLACE CONSTANT 722573029
2021-03-12 06:11:31,360 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:31,361 [main:66] - Compilation checking started
2021-03-12 06:11:31,979 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { true}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:31,980 [main:141] - TRYING TO REPLACE CONSTANT true
2021-03-12 06:11:32,174 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:32,175 [main:66] - Compilation checking started
2021-03-12 06:11:32,772 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:32,773 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:32,922 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 06:11:32,923 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:33,067 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:11:33,067 [main:66] - Compilation checking started
2021-03-12 06:11:33,523 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(prope8, {a: Short, b: Char -> -18273})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:33,524 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:33,677 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:33,677 [main:66] - Compilation checking started
2021-03-12 06:11:34,275 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:34,275 [main:141] - TRYING TO REPLACE CONSTANT 1764098323
2021-03-12 06:11:34,426 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:11:34,427 [main:66] - Compilation checking started
2021-03-12 06:11:34,878 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(prope8, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:34,879 [main:141] - TRYING TO REPLACE CONSTANT 1752777468
2021-03-12 06:11:35,015 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 06:11:35,016 [main:66] - Compilation checking started
2021-03-12 06:11:35,427 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(prope8).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(649097907))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:35,427 [main:141] - TRYING TO REPLACE CONSTANT 649097907
2021-03-12 06:11:35,580 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 06:11:35,580 [main:66] - Compilation checking started
2021-03-12 06:11:36,182 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:36,183 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 06:11:36,337 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:11:36,337 [main:66] - Compilation checking started
2021-03-12 06:11:36,941 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(false)
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:36,942 [main:141] - TRYING TO REPLACE CONSTANT false
2021-03-12 06:11:37,095 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:11:37,096 [main:66] - Compilation checking started
2021-03-12 06:11:37,718 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:37,719 [main:141] - TRYING TO REPLACE CONSTANT 31
2021-03-12 06:11:37,881 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 06:11:37,881 [main:66] - Compilation checking started
2021-03-12 06:11:38,375 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(toInt())
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:38,376 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:38,527 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:38,527 [main:66] - Compilation checking started
2021-03-12 06:11:39,160 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:39,160 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:39,319 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:39,320 [main:66] - Compilation checking started
2021-03-12 06:11:39,799 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(1764098323, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:39,800 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:39,952 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:39,953 [main:66] - Compilation checking started
2021-03-12 06:11:40,414 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> 537808783})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(107)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:40,415 [main:141] - TRYING TO REPLACE CONSTANT 107
2021-03-12 06:11:40,548 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:40,549 [main:66] - Compilation checking started
2021-03-12 06:11:41,117 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:41,118 [main:141] - TRYING TO REPLACE CONSTANT 'à¦º'
2021-03-12 06:11:41,271 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(CHARACTER_CONSTANT)
2021-03-12 06:11:41,271 [main:141] - TRYING TO REPLACE CONSTANT 28401
2021-03-12 06:11:41,419 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:41,419 [main:66] - Compilation checking started
2021-03-12 06:11:42,017 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:42,017 [main:141] - TRYING TO REPLACE CONSTANT 18273
2021-03-12 06:11:42,172 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:42,172 [main:66] - Compilation checking started
2021-03-12 06:11:42,625 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(1979028207).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> 531336230})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:42,626 [main:141] - TRYING TO REPLACE CONSTANT 1979028207
2021-03-12 06:11:42,759 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 06:11:42,760 [main:66] - Compilation checking started
2021-03-12 06:11:43,311 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:43,311 [main:141] - TRYING TO REPLACE CONSTANT 1413276652
2021-03-12 06:11:43,474 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:11:43,474 [main:66] - Compilation checking started
2021-03-12 06:11:43,914 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(and((list).size)))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:43,915 [main:41] - AFTER TRY 1 res = //WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}


2021-03-12 06:11:44,211 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:11:44,211 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:11:44,358 [main:194] - Type params = []
2021-03-12 06:11:44,510 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 06:11:44,660 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:11:44,665 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:11:45,019 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 06:11:45,183 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:11:45,188 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:11:45,720 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:11:45,720 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:11:45,720 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:11:45,721 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:11:46,556 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-12 06:11:46,560 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:11:46,561 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}
2021-03-12 06:11:46,561 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}
2021-03-12 06:11:46,561 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:11:46,561 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}
2021-03-12 06:11:46,562 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}
2021-03-12 06:11:46,562 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-12 06:11:46,915 [main:43] - GENERATING CALL OF public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:11:47,479 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T, R> Iterable<Int>.fold2(initial: List<Double>, operation: (List<Double>, Int) -> List<Double>): List<Double> {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:11:47,899 [main:302] - generating value of type = List<Double> false depth = 1
2021-03-12 06:11:48,047 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Double): List<Double> = TODO()
2021-03-12 06:11:48,052 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->Double): List<Double> = TODO()
2021-03-12 06:11:48,570 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:11:48,574 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Double> false depth = 4
2021-03-12 06:11:48,577 [main:302] - generating value of type = Double true depth = 5
2021-03-12 06:11:48,581 [main:95] - GENERATED = List<Double>(1589861731, {a: Int -> 0.5155449036325006})
2021-03-12 06:11:48,581 [main:302] - generating value of type = Function2<List<Double>, Int, List<Double>> false depth = 1
2021-03-12 06:11:48,585 [main:302] - generating value of type = List<Double> false depth = 2
2021-03-12 06:11:48,746 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Double): List<Double> = TODO()
2021-03-12 06:11:48,751 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Double): List<Double> = TODO()
2021-03-12 06:11:48,900 [main:302] - generating value of type = Double true depth = 5
2021-03-12 06:11:48,904 [main:95] - GENERATED = mutableListOf<Double>(0.5587873303690923)
2021-03-12 06:11:48,904 [main:302] - generating value of type = Iterable<Int> false depth = 1
2021-03-12 06:11:49,088 [main:43] - GENERATING CALL OF fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 06:11:49,093 [main:61] - WITHOUT TYPE PARAMS = fun <T> MutableList(size: kotlin.Int, init: (index: kotlin.Int)->Int): Iterable<Int> = TODO()
2021-03-12 06:11:49,585 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:11:49,589 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, Int> false depth = 4
2021-03-12 06:11:49,592 [main:302] - generating value of type = Int true depth = 5
2021-03-12 06:11:49,596 [main:95] - GENERATED = MutableList<Int>(777028788, {a: Int -> 2127166449})
2021-03-12 06:11:49,596 [main:95] - GENERATED = MutableList<Int>(777028788, {a: Int -> 2127166449}).fold2<Int, List<Double>>(List<Double>(1589861731, {a: Int -> 0.5155449036325006}), {a: List<Double>, b: Int -> mutableListOf<Double>(0.5587873303690923)})
2021-03-12 06:11:49,775 [main:43] - GENERATING CALL OF fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}
2021-03-12 06:11:49,778 [main:61] - WITHOUT TYPE PARAMS = fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}
2021-03-12 06:11:50,134 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-12 06:11:50,140 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:11:50,296 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:11:50,301 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:11:50,661 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:11:50,661 [main:95] - GENERATED = println("tccuu")
2021-03-12 06:11:50,662 [main:95] - GENERATED = fu0({a: Kla0 -> println("tccuu")})
2021-03-12 06:11:50,815 [main:43] - GENERATING CALL OF private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}
2021-03-12 06:11:50,819 [main:61] - WITHOUT TYPE PARAMS = private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}
2021-03-12 06:11:50,970 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-12 06:11:50,973 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:11:50,974 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-12 06:11:50,977 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:11:50,977 [main:95] - GENERATED = fu1(Kla0(), Kla0())
2021-03-12 06:11:51,143 [main:43] - GENERATING CALL OF inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}
2021-03-12 06:11:51,147 [main:61] - WITHOUT TYPE PARAMS = inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}
2021-03-12 06:11:51,479 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 06:11:51,483 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:11:51,490 [main:95] - GENERATED = fu2({ println()})
2021-03-12 06:11:51,628 [main:43] - GENERATING CALL OF fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}
2021-03-12 06:11:52,167 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(prope6: (ArrayList<Float?>) -> Unit): Continuation<ArrayList<Float?>> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}
2021-03-12 06:11:52,511 [main:302] - generating value of type = Function1<ArrayList<Float?>, Unit> false depth = 1
2021-03-12 06:11:52,515 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:11:52,689 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:11:52,694 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:11:53,231 [main:302] - generating value of type = Int true depth = 5
2021-03-12 06:11:53,235 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-12 06:11:53,238 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 06:11:53,397 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:11:53,401 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:11:53,717 [main:302] - generating value of type = Boolean true depth = 9
2021-03-12 06:11:53,721 [main:95] - GENERATED = require(false)
2021-03-12 06:11:53,721 [main:95] - GENERATED = repeat(-1404770324, {a: Int -> require(false)})
2021-03-12 06:11:53,721 [main:95] - GENERATED = fu3<ArrayList<Float?>>({a: ArrayList<Float?> -> repeat(-1404770324, {a: Int -> require(false)})})
2021-03-12 06:11:53,886 [main:43] - GENERATING CALL OF fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}
2021-03-12 06:11:53,889 [main:61] - WITHOUT TYPE PARAMS = fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}
2021-03-12 06:11:54,222 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 06:11:54,226 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:11:54,369 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:11:54,374 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:11:54,723 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 06:11:54,727 [main:95] - GENERATED = require(true)
2021-03-12 06:11:54,727 [main:95] - GENERATED = fu4({a: Throwable -> require(true)})
2021-03-12 06:11:54,919 [main:43] - Try â1
2021-03-12 06:11:55,780 [main:69] - Trying to insert fun fu15(s: String) {}
2021-03-12 06:11:55,976 [main:66] - Compilation checking started
2021-03-12 06:11:56,991 [main:103] - Trying to change 10 nodes
2021-03-12 06:11:56,991 [main:107] - replacing (prope13, String)
2021-03-12 06:11:56,993 [main:50] - replacing prope13 String
2021-03-12 06:11:56,993 [main:54] - Getting value of type String
2021-03-12 06:11:57,157 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:11:57,161 [main:58] - GENERATED VALUE OF TYPE String = "ldlfp"
2021-03-12 06:11:57,161 [main:61] - GENERATED IS CALL =false
2021-03-12 06:11:57,347 [main:67] - randomType = Kla6?
2021-03-12 06:11:57,522 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:11:57,526 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:11:57,554 [main:106] - GETTING String from Continuation<ArrayList<Float?>>
2021-03-12 06:11:57,566 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 06:11:57,584 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:11:57,590 [main:106] - GETTING String from String
2021-03-12 06:11:57,609 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]]
2021-03-12 06:11:57,609 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]
2021-03-12 06:11:57,609 [main:117] - GENERATED CALL = ((list).get(-1752777468)).toLowerCase()
2021-03-12 06:11:57,609 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbd71b]]
2021-03-12 06:11:57,609 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbd71b]
2021-03-12 06:11:57,782 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:57,792 [main:117] - GENERATED CALL = ((list).get(-1752777468)).removeSurrounding("dmmai")
2021-03-12 06:11:57,792 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]]
2021-03-12 06:11:57,792 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2021b349]
2021-03-12 06:11:57,793 [main:117] - GENERATED CALL = ((list).get(-1752777468)).plus(Kla2().prope3)
2021-03-12 06:11:57,793 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]]
2021-03-12 06:11:57,793 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]
2021-03-12 06:11:57,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:57,953 [main:117] - GENERATED CALL = ((list).get(-1752777468)).repeat(-791602379)
2021-03-12 06:11:57,953 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20595b6a]]
2021-03-12 06:11:57,953 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20595b6a]
2021-03-12 06:11:57,954 [main:117] - GENERATED CALL = ((list).get(-1752777468)).trimIndent()
2021-03-12 06:11:57,954 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]]
2021-03-12 06:11:57,954 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]
2021-03-12 06:11:57,954 [main:117] - GENERATED CALL = ((list).get(-1752777468)).trimMargin((list).get(-1752777468))
2021-03-12 06:11:57,954 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e07cfe2]]
2021-03-12 06:11:57,954 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e07cfe2]
2021-03-12 06:11:58,096 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:11:58,100 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:11:58,104 [main:117] - GENERATED CALL = ((list).get(-1752777468)).filterIndexed({a: Int, b: Char -> true})
2021-03-12 06:11:58,104 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]]
2021-03-12 06:11:58,104 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]
2021-03-12 06:11:58,104 [main:117] - GENERATED CALL = ((list).get(-1752777468)).decapitalize()
2021-03-12 06:11:58,104 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]]
2021-03-12 06:11:58,104 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]
2021-03-12 06:11:58,104 [main:117] - GENERATED CALL = ((list).get(-1752777468)).capitalize()
2021-03-12 06:11:58,104 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]]
2021-03-12 06:11:58,104 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]
2021-03-12 06:11:58,274 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:11:58,281 [main:117] - GENERATED CALL = ((list).get(-1752777468)).commonPrefixWith(StringBuilder(), Kla5().prope9)
2021-03-12 06:11:58,281 [main:114] - replacement of prope13 of type String is ((list).get(-1752777468)).trimIndent()
2021-03-12 06:11:58,436 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:58,437 [main:66] - Compilation checking started
2021-03-12 06:11:59,068 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15({ prope13 }());
        { fu15(((list).get(-1752777468)).trimIndent()) }()
    }
}

fun fu15(s: String) {}


2021-03-12 06:11:59,069 [main:107] - replacing ({ prope13 }(), String)
2021-03-12 06:11:59,069 [main:50] - replacing { prope13 }() String
2021-03-12 06:11:59,069 [main:54] - Getting value of type String
2021-03-12 06:11:59,242 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:11:59,246 [main:58] - GENERATED VALUE OF TYPE String = "ggopy"
2021-03-12 06:11:59,246 [main:61] - GENERATED IS CALL =false
2021-03-12 06:11:59,432 [main:67] - randomType = UShort?
2021-03-12 06:11:59,588 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:11:59,631 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@79d17488]
2021-03-12 06:11:59,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:11:59,777 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:11:59,781 [main:78] - Generated call from random type = (1652.toUShort())?.toLong().toString(198116729)
2021-03-12 06:11:59,781 [main:114] - replacement of { prope13 }() of type String is (1652.toUShort())?.toLong().toString(198116729)
2021-03-12 06:11:59,956 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:11:59,957 [main:66] - Compilation checking started
2021-03-12 06:12:00,623 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15((1652.toUShort())?.toLong().toString(198116729));
        { fu15(((list).get(-1752777468)).trimIndent()) }()
    }
}

fun fu15(s: String) {}


2021-03-12 06:12:00,818 [main:141] - TRYING TO REPLACE CONSTANT 1752777468
2021-03-12 06:12:00,978 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 06:12:00,978 [main:66] - Compilation checking started
2021-03-12 06:12:01,590 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15((1652.toUShort())?.toLong().toString(198116729));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}


2021-03-12 06:12:01,591 [main:141] - TRYING TO REPLACE CONSTANT 1652
2021-03-12 06:12:01,768 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:01,769 [main:66] - Compilation checking started
2021-03-12 06:12:02,459 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString(198116729));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}


2021-03-12 06:12:02,459 [main:141] - TRYING TO REPLACE CONSTANT 198116729
2021-03-12 06:12:02,641 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:02,641 [main:66] - Compilation checking started
2021-03-12 06:12:03,302 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}


2021-03-12 06:12:03,302 [main:41] - AFTER TRY 2 res = //WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}


2021-03-12 06:12:03,639 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:12:03,639 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:12:03,805 [main:194] - Type params = []
2021-03-12 06:12:03,956 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-12 06:12:04,142 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:12:04,149 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:12:04,529 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-12 06:12:04,694 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:12:04,700 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:12:05,322 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:12:05,322 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:12:05,323 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:12:05,323 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:12:06,096 [main:302] - generating value of type = Kla6 false depth = 1
2021-03-12 06:12:06,102 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:12:06,102 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}
2021-03-12 06:12:06,102 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}
2021-03-12 06:12:06,103 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:12:06,103 [main:112] - generating klass Kla8 text = class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}
2021-03-12 06:12:06,103 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}
2021-03-12 06:12:06,103 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}
2021-03-12 06:12:06,103 [main:112] - generating klass Kla7 text = companion object Kla7 : Kla1()
2021-03-12 06:12:06,103 [main:112] - generating klass Kla9 text = private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }
2021-03-12 06:12:06,465 [main:43] - GENERATING CALL OF public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:12:06,501 [main:61] - WITHOUT TYPE PARAMS = public inline fun <T, R> Iterable<Int>.fold2(initial: Kla0, operation: (Kla0, Int) -> Kla0): Kla0 {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}
2021-03-12 06:12:06,873 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-12 06:12:06,879 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:12:06,879 [main:302] - generating value of type = Function2<Kla0, Int, Kla0> false depth = 1
2021-03-12 06:12:06,884 [main:302] - generating value of type = Kla0 false depth = 2
2021-03-12 06:12:06,888 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:12:06,889 [main:302] - generating value of type = Iterable<Int> false depth = 1
2021-03-12 06:12:07,280 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 06:12:07,287 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 06:12:07,644 [main:302] - generating value of type = Int true depth = 4
2021-03-12 06:12:07,650 [main:95] - GENERATED = ArrayDeque<Byte>(-138112654)
2021-03-12 06:12:07,650 [main:95] - GENERATED = ArrayDeque<Byte>(-138112654).fold2<Int, Kla0>(Kla0(), {a: Kla0, b: Int -> Kla0()})
2021-03-12 06:12:07,828 [main:43] - GENERATING CALL OF fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}
2021-03-12 06:12:07,833 [main:61] - WITHOUT TYPE PARAMS = fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}
2021-03-12 06:12:08,223 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla0, Unit> false depth = 1
2021-03-12 06:12:08,228 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:12:08,386 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:12:08,392 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:12:08,796 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 06:12:08,802 [main:95] - GENERATED = require(true)
2021-03-12 06:12:08,802 [main:95] - GENERATED = fu0({a: Kla0 -> require(true)})
2021-03-12 06:12:08,985 [main:43] - GENERATING CALL OF private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}
2021-03-12 06:12:08,990 [main:61] - WITHOUT TYPE PARAMS = private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}
2021-03-12 06:12:09,151 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-12 06:12:09,156 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:12:09,157 [main:302] - generating value of type = Kla0 false depth = 1
2021-03-12 06:12:09,161 [main:112] - generating klass Kla0 text = class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}
2021-03-12 06:12:09,162 [main:95] - GENERATED = fu1(Kla0(), Kla0())
2021-03-12 06:12:09,341 [main:43] - GENERATING CALL OF inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}
2021-03-12 06:12:09,346 [main:61] - WITHOUT TYPE PARAMS = inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}
2021-03-12 06:12:09,740 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 06:12:09,747 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:12:09,902 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:12:09,908 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:12:10,502 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 06:12:10,507 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 06:12:10,512 [main:302] - generating value of type = Any false depth = 6
2021-03-12 06:12:10,512 [main:95] - GENERATED = check(true, { "ghgqq"})
2021-03-12 06:12:10,512 [main:95] - GENERATED = fu2({ check(true, { "ghgqq"})})
2021-03-12 06:12:10,657 [main:43] - GENERATING CALL OF fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}
2021-03-12 06:12:11,068 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu3(prope6: (Byte?) -> Unit): Continuation<Byte?> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}
2021-03-12 06:12:11,426 [main:302] - generating value of type = Function1<Byte?, Unit> false depth = 1
2021-03-12 06:12:11,432 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:12:11,621 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:12:11,628 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:12:12,002 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:12:12,002 [main:95] - GENERATED = print("phstu")
2021-03-12 06:12:12,003 [main:95] - GENERATED = fu3<Byte?>({a: Byte? -> print("phstu")})
2021-03-12 06:12:12,159 [main:43] - GENERATING CALL OF fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}
2021-03-12 06:12:12,164 [main:61] - WITHOUT TYPE PARAMS = fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}
2021-03-12 06:12:12,571 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-12 06:12:12,576 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 06:12:12,749 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:12:12,755 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:12:13,132 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 06:12:13,138 [main:95] - GENERATED = require(true)
2021-03-12 06:12:13,138 [main:95] - GENERATED = fu4({a: Throwable -> require(true)})
2021-03-12 06:12:13,317 [main:43] - GENERATING CALL OF fun fu15(s: String) {}
2021-03-12 06:12:13,322 [main:61] - WITHOUT TYPE PARAMS = fun fu15(s: String) {}
2021-03-12 06:12:13,495 [main:302] - generating value of type = String true depth = 1
2021-03-12 06:12:13,501 [main:95] - GENERATED = fu15("sussc")
2021-03-12 06:12:13,683 [main:43] - Try â2
2021-03-12 06:12:18,180 [main:48] - Already checked
2021-03-12 06:12:20,914 [main:69] - Trying to insert fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }
2021-03-12 06:12:21,042 [main:66] - Compilation checking started
2021-03-12 06:12:22,436 [main:103] - Trying to change 152 nodes
2021-03-12 06:12:22,436 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 06:12:22,437 [main:50] - replacing getOrThrow() Any?
2021-03-12 06:12:22,437 [main:54] - Getting value of type Any?
2021-03-12 06:12:22,626 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:12:22,627 [main:58] - GENERATED VALUE OF TYPE Any? = "kbcde"
2021-03-12 06:12:22,627 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:22,657 [main:67] - randomType = Kla2
2021-03-12 06:12:22,883 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:12:22,891 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:12:22,912 [main:78] - Generated call from random type = (Kla2()).prope3
2021-03-12 06:12:22,913 [main:106] - GETTING Any? from Boolean
2021-03-12 06:12:22,925 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 06:12:22,936 [main:106] - GETTING Any? from Kla0
2021-03-12 06:12:22,948 [main:106] - GETTING Any? from String
2021-03-12 06:12:22,970 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 06:12:22,981 [main:106] - GETTING Any? from Continuation<String>?
2021-03-12 06:12:22,991 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 06:12:23,001 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 06:12:23,002 [main:106] - GETTING Any? from Any?
2021-03-12 06:12:23,008 [main:106] - GETTING Any? from String
2021-03-12 06:12:23,009 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 06:12:23,010 [main:106] - GETTING Any? from Boolean
2021-03-12 06:12:23,011 [main:106] - GETTING Any? from Continuation<Byte?>
2021-03-12 06:12:23,023 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 06:12:23,047 [main:106] - GETTING Any? from List<String>
2021-03-12 06:12:23,096 [main:106] - GETTING Any? from String
2021-03-12 06:12:23,097 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 06:12:23,098 [main:106] - GETTING Any? from List<String>
2021-03-12 06:12:23,098 [main:114] - replacement of getOrThrow() of type Any? is "kbcde"
2021-03-12 06:12:23,290 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:12:23,290 [main:66] - Compilation checking started
2021-03-12 06:12:23,833 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println(prope24)
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16."kbcde"
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu26(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (prope24 in 1..numberOfSuspensions) {
            if (prope18 != prope24) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope24 + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:23,836 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 06:12:23,836 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 06:12:23,836 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:12:24,079 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:12:24,087 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:12:24,310 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:12:24,319 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:12:25,073 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:12:25,081 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:12:25,088 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:12:25,089 [main:95] - GENERATED = require(false, { "kjlfw"})
2021-03-12 06:12:25,089 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "kjlfw"})}
2021-03-12 06:12:25,089 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:25,321 [main:67] - randomType = Byte
2021-03-12 06:12:25,539 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:12:25,583 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 06:12:25,598 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 06:12:25,608 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 06:12:25,613 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 06:12:25,622 [main:114] - replacement of prope20 of type Function0<Unit> is { require(false, { "kjlfw"})}
2021-03-12 06:12:25,851 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:12:25,851 [main:66] - Compilation checking started
2021-03-12 06:12:26,397 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println(prope24)
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu26(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        { require(false, { "kjlfw"})} = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (prope24 in 1..numberOfSuspensions) {
            if (prope18 != prope24) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope24 + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:26,399 [main:107] - replacing (prope18 != prope24, Boolean)
2021-03-12 06:12:26,400 [main:50] - replacing prope18 != prope24 Boolean
2021-03-12 06:12:26,400 [main:54] - Getting value of type Boolean
2021-03-12 06:12:26,618 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:26,626 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:12:26,626 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:26,656 [main:67] - randomType = Kla11
2021-03-12 06:12:26,881 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 06:12:26,892 [main:112] - generating klass Kla11 text = class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}
2021-03-12 06:12:26,913 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla11[DeserializedSimpleFunctionDescriptor@734f62be]
2021-03-12 06:12:27,104 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:12:27,105 [main:78] - Generated call from random type = (Kla11()).equals("wspaw")
2021-03-12 06:12:27,105 [main:106] - GETTING Boolean from Boolean
2021-03-12 06:12:27,113 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:12:27,113 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:12:27,113 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:12:27,333 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:27,341 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).or(true)
2021-03-12 06:12:27,341 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:12:27,341 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:12:27,341 [main:117] - GENERATED CALL = (Kla0().fu6()).xor(Kla5().prope9)
2021-03-12 06:12:27,341 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:12:27,341 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:12:27,341 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:12:27,342 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).equals(Kla2().prope3)
2021-03-12 06:12:27,342 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:12:27,342 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:12:27,342 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3)
2021-03-12 06:12:27,342 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:12:27,342 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:12:27,342 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:12:27,343 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).not()
2021-03-12 06:12:27,343 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:12:27,343 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:12:27,343 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:12:27,343 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).xor(Kla5().prope9)
2021-03-12 06:12:27,343 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:12:27,343 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:27,344 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:12:27,344 [main:117] - GENERATED CALL = (Kla0().fu6()).compareTo(Kla0().fu6()).equals(Kla2().prope3)
2021-03-12 06:12:27,344 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:12:27,344 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:12:27,344 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:12:27,552 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:27,559 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).and(false)
2021-03-12 06:12:27,559 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:12:27,559 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:12:27,560 [main:117] - GENERATED CALL = (Kla0().fu6()).not()
2021-03-12 06:12:27,560 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:12:27,560 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:12:27,560 [main:117] - GENERATED CALL = (Kla0().fu6()).or(Kla0().fu6())
2021-03-12 06:12:27,560 [main:114] - replacement of prope18 != prope24 of type Boolean is (Kla0().fu6()).equals(Kla2().prope3).or(true)
2021-03-12 06:12:27,750 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:27,750 [main:66] - Compilation checking started
2021-03-12 06:12:28,528 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println(prope24)
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu26(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..numberOfSuspensions) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope24 + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:28,530 [main:107] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope24, String)
2021-03-12 06:12:28,530 [main:50] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope24 String
2021-03-12 06:12:28,530 [main:54] - Getting value of type String
2021-03-12 06:12:28,766 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:12:28,776 [main:58] - GENERATED VALUE OF TYPE String = "hvhon"
2021-03-12 06:12:28,776 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:28,792 [main:67] - randomType = Long
2021-03-12 06:12:29,007 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:12:29,060 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@19a81f9d]
2021-03-12 06:12:29,060 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4720ab4f]
2021-03-12 06:12:29,061 [main:78] - Generated call from random type = (4450916173024868412).toChar().lowercase()
2021-03-12 06:12:29,061 [main:106] - GETTING String from String
2021-03-12 06:12:29,087 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:12:29,087 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93]
2021-03-12 06:12:29,274 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:29,281 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:12:29,281 [main:117] - GENERATED CALL = ((list).get(-1752777468)).get(-1169233380).titlecase()
2021-03-12 06:12:29,281 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc4dd28]]
2021-03-12 06:12:29,281 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:12:29,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:29,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:29,739 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc4dd28]
2021-03-12 06:12:29,931 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:12:30,163 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:12:30,173 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:12:30,955 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:12:30,963 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:12:31,183 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: RegexOption): Set<RegexOption> = TODO()
2021-03-12 06:12:31,193 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: RegexOption): Set<RegexOption> = TODO()
2021-03-12 06:12:31,400 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 06:12:31,410 [main:95] - GENERATED = setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 06:12:31,410 [main:95] - GENERATED = Regex("zyxzq", setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 06:12:31,629 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:12:31,636 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:12:31,648 [main:117] - GENERATED CALL = ((list).get(-1752777468)).subSequence(406705979, -43885426).replace(Regex("zyxzq", setOfNotNull<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> "ohkkw"})
2021-03-12 06:12:31,648 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]]
2021-03-12 06:12:31,648 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a55c924]
2021-03-12 06:12:31,648 [main:117] - GENERATED CALL = ((list).get(-1752777468)).lowercase()
2021-03-12 06:12:31,648 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]]
2021-03-12 06:12:31,648 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]
2021-03-12 06:12:31,862 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:12:31,869 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:12:31,877 [main:117] - GENERATED CALL = ((list).get(-1752777468)).takeLastWhile({a: Char -> true})
2021-03-12 06:12:31,877 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1751df14]]
2021-03-12 06:12:31,877 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1751df14]
2021-03-12 06:12:32,070 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:12:32,079 [main:117] - GENERATED CALL = ((list).get(-1752777468)).substringAfterLast('î¦', (list).get(-1752777468))
2021-03-12 06:12:32,079 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]]
2021-03-12 06:12:32,079 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]
2021-03-12 06:12:32,296 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:12:32,307 [main:117] - GENERATED CALL = ((list).get(-1752777468)).commonPrefixWith("rtcse", Kla0().fu6())
2021-03-12 06:12:32,307 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@8c07622], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:12:32,307 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:12:32,519 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:32,526 [main:117] - GENERATED CALL = ((list).get(-1752777468)).length.toString(-610670646)
2021-03-12 06:12:32,526 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]]
2021-03-12 06:12:32,527 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]
2021-03-12 06:12:32,723 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:12:32,730 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:12:32,738 [main:117] - GENERATED CALL = ((list).get(-1752777468)).takeWhile({a: Char -> true})
2021-03-12 06:12:32,738 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e69f73]]
2021-03-12 06:12:32,738 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e69f73]
2021-03-12 06:12:32,738 [main:117] - GENERATED CALL = ((list).get(-1752777468)).reversed()
2021-03-12 06:12:32,738 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]]
2021-03-12 06:12:32,739 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93]
2021-03-12 06:12:32,957 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:32,965 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@629ba546]
2021-03-12 06:12:32,965 [main:117] - GENERATED CALL = ((list).get(-1752777468)).get(-137016960).uppercase()
2021-03-12 06:12:32,966 [main:114] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + prope24 of type String is ((list).get(-1752777468)).get(-137016960).uppercase()
2021-03-12 06:12:33,180 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:33,180 [main:66] - Compilation checking started
2021-03-12 06:12:34,005 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println(prope24)
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu26(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..numberOfSuspensions) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:34,006 [main:107] - replacing (prope24, String)
2021-03-12 06:12:34,008 [main:50] - replacing prope24 String
2021-03-12 06:12:34,008 [main:54] - Getting value of type String
2021-03-12 06:12:34,228 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:12:34,236 [main:58] - GENERATED VALUE OF TYPE String = "zbzvi"
2021-03-12 06:12:34,236 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:34,267 [main:67] - randomType = Kla14
2021-03-12 06:12:34,486 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 06:12:34,494 [main:112] - generating klass Kla14 text = class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..numberOfSuspensions) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 06:12:34,505 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 06:12:34,516 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:12:34,526 [main:106] - GETTING String from Boolean
2021-03-12 06:12:34,539 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:12:34,539 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:34,539 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:12:34,734 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:34,742 [main:117] - GENERATED CALL = (Kla0().fu6()).compareTo(Kla0().fu6()).toString(-2091635728)
2021-03-12 06:12:34,742 [main:114] - replacement of prope24 of type String is "zbzvi"
2021-03-12 06:12:34,971 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:12:34,972 [main:66] - Compilation checking started
2021-03-12 06:12:35,820 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu26(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..numberOfSuspensions) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:35,822 [main:107] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n"), String)
2021-03-12 06:12:35,824 [main:50] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n") String
2021-03-12 06:12:35,824 [main:54] - Getting value of type String
2021-03-12 06:12:36,047 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:12:36,055 [main:58] - GENERATED VALUE OF TYPE String = "hyldl"
2021-03-12 06:12:36,055 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:36,073 [main:67] - randomType = Short
2021-03-12 06:12:36,290 [main:302] - generating value of type = Short true depth = 0
2021-03-12 06:12:36,347 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@128d2224]
2021-03-12 06:12:36,348 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73ecdbd9]
2021-03-12 06:12:36,582 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:36,590 [main:78] - Generated call from random type = (-12740).toByte().toString(751892721)
2021-03-12 06:12:36,590 [main:106] - GETTING String from Function0<Unit>
2021-03-12 06:12:36,603 [main:106] - GETTING String from Any?
2021-03-12 06:12:36,607 [main:113] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@187175b3]]
2021-03-12 06:12:36,607 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@187175b3]
2021-03-12 06:12:36,607 [main:117] - GENERATED CALL = (Kla2().prope3).toString()
2021-03-12 06:12:36,607 [main:114] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope17.joinToString(separator = "\n") of type String is (-12740).toByte().toString(751892721)
2021-03-12 06:12:36,834 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:36,834 [main:66] - Compilation checking started
2021-03-12 06:12:37,722 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n")) }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..numberOfSuspensions) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:37,724 [main:107] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n"), String)
2021-03-12 06:12:37,726 [main:50] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n") String
2021-03-12 06:12:37,726 [main:54] - Getting value of type String
2021-03-12 06:12:37,957 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:12:37,965 [main:58] - GENERATED VALUE OF TYPE String = "ehkhz"
2021-03-12 06:12:37,965 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:37,997 [main:67] - randomType = Kla11
2021-03-12 06:12:38,221 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 06:12:38,229 [main:112] - generating klass Kla11 text = class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}
2021-03-12 06:12:38,251 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@187175b3]
2021-03-12 06:12:38,252 [main:78] - Generated call from random type = (Kla11()).prope16?.toString()!!
2021-03-12 06:12:38,252 [main:106] - GETTING String from Continuation<Byte?>
2021-03-12 06:12:38,265 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:12:38,274 [main:106] - GETTING String from Function0<Unit>
2021-03-12 06:12:38,288 [main:106] - GETTING String from Boolean
2021-03-12 06:12:38,301 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:12:38,301 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:38,498 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:38,506 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:12:38,724 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:38,733 [main:117] - GENERATED CALL = (Kla0().fu6()).compareTo(false).toString(-631103411)
2021-03-12 06:12:38,733 [main:114] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope17.joinToString(separator = "\n") of type String is "ehkhz"
2021-03-12 06:12:38,956 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:12:38,957 [main:66] - Compilation checking started
2021-03-12 06:12:39,823 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..numberOfSuspensions) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:39,825 [main:107] - replacing (numberOfSuspensions, Int)
2021-03-12 06:12:39,825 [main:50] - replacing numberOfSuspensions Int
2021-03-12 06:12:39,825 [main:54] - Getting value of type Int
2021-03-12 06:12:40,049 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:40,058 [main:58] - GENERATED VALUE OF TYPE Int = -120602417
2021-03-12 06:12:40,058 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:40,381 [main:67] - randomType = Function1<UByte, Kla10>
2021-03-12 06:12:40,382 [main:106] - GETTING Int from Boolean
2021-03-12 06:12:40,395 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@580936b0]]
2021-03-12 06:12:40,396 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:40,396 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@580936b0]
2021-03-12 06:12:40,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:40,599 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla5().prope9).rotateRight(1725089485)
2021-03-12 06:12:40,600 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27f713bb]]
2021-03-12 06:12:40,600 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:40,819 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:40,827 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@27f713bb]
2021-03-12 06:12:40,827 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(false).inc()
2021-03-12 06:12:40,827 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]]
2021-03-12 06:12:40,827 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:40,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3aaede52]
2021-03-12 06:12:40,828 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla0().fu6()).takeHighestOneBit()
2021-03-12 06:12:40,828 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]]
2021-03-12 06:12:40,828 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:41,048 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:41,057 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@53bf821c]
2021-03-12 06:12:41,258 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:41,266 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(true).shr(-1689974707)
2021-03-12 06:12:41,266 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]]
2021-03-12 06:12:41,266 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:41,267 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@21f36116]
2021-03-12 06:12:41,267 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla0().fu6()).unaryPlus()
2021-03-12 06:12:41,267 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fb9fa70]]
2021-03-12 06:12:41,267 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:41,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:41,495 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fb9fa70]
2021-03-12 06:12:41,715 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:12:41,723 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(true).compareTo(-123)
2021-03-12 06:12:41,723 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b5aaf90]]
2021-03-12 06:12:41,723 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:41,724 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4b5aaf90]
2021-03-12 06:12:41,924 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:41,932 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla0().fu6()).rotateLeft(-777943745)
2021-03-12 06:12:41,932 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@586415]]
2021-03-12 06:12:41,932 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:41,932 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@586415]
2021-03-12 06:12:42,156 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:42,165 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)
2021-03-12 06:12:42,165 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e76656]]
2021-03-12 06:12:42,165 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:42,165 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@20e76656]
2021-03-12 06:12:42,165 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla5().prope9).dec()
2021-03-12 06:12:42,165 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddb00fa]]
2021-03-12 06:12:42,165 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:12:42,380 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:42,399 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ddb00fa]
2021-03-12 06:12:42,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:42,607 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(true).or(1062878919)
2021-03-12 06:12:42,608 [main:114] - replacement of numberOfSuspensions of type Int is (Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)
2021-03-12 06:12:42,796 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:42,797 [main:66] - Compilation checking started
2021-03-12 06:12:43,609 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return prope16
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:43,611 [main:107] - replacing (prope16, String)
2021-03-12 06:12:43,611 [main:50] - replacing prope16 String
2021-03-12 06:12:43,611 [main:54] - Getting value of type String
2021-03-12 06:12:43,831 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:12:43,839 [main:58] - GENERATED VALUE OF TYPE String = "ommbr"
2021-03-12 06:12:43,840 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:44,131 [main:67] - randomType = Array<UShort>
2021-03-12 06:12:44,333 [main:302] - generating value of type = Array<UShort> false depth = 0
2021-03-12 06:12:44,572 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<UShort> = TODO()
2021-03-12 06:12:44,582 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<UShort> = TODO()
2021-03-12 06:12:44,815 [main:95] - GENERATED = emptyArray<UShort>()
2021-03-12 06:12:44,831 [main:149] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.UShort defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@7f88603]
2021-03-12 06:12:45,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:45,043 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:12:45,266 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:45,275 [main:78] - Generated call from random type = (emptyArray<UShort>()).get(990179170).toString(1510318629)
2021-03-12 06:12:45,275 [main:114] - replacement of prope16 of type String is (emptyArray<UShort>()).get(990179170).toString(1510318629)
2021-03-12 06:12:45,492 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:45,493 [main:66] - Compilation checking started
2021-03-12 06:12:46,337 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        prope16.exceptionOrNull()?.let(x)
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:46,339 [main:107] - replacing (x, Function1<Throwable, Unit>)
2021-03-12 06:12:46,340 [main:50] - replacing x Function1<Throwable, Unit>
2021-03-12 06:12:46,341 [main:54] - Getting value of type Function1<Throwable, Unit>
2021-03-12 06:12:46,574 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 0
2021-03-12 06:12:46,582 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:12:46,594 [main:58] - GENERATED VALUE OF TYPE Function1<Throwable, Unit> = {a: Throwable -> println()}
2021-03-12 06:12:46,594 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:46,882 [main:67] - randomType = Int?
2021-03-12 06:12:47,089 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:47,135 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Byte?>
2021-03-12 06:12:47,143 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 06:12:47,149 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 06:12:47,158 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 06:12:47,174 [main:106] - GETTING Function1<Throwable, Unit> from Boolean
2021-03-12 06:12:47,175 [main:106] - GETTING Function1<Throwable, Unit> from List<String>
2021-03-12 06:12:47,199 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 06:12:47,200 [main:106] - GETTING Function1<Throwable, Unit> from Kla0
2021-03-12 06:12:47,209 [main:106] - GETTING Function1<Throwable, Unit> from EmptyCoroutineContext
2021-03-12 06:12:47,222 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 06:12:47,223 [main:106] - GETTING Function1<Throwable, Unit> from Any?
2021-03-12 06:12:47,227 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<Any?>
2021-03-12 06:12:47,235 [main:106] - GETTING Function1<Throwable, Unit> from Continuation<String>?
2021-03-12 06:12:47,242 [main:106] - GETTING Function1<Throwable, Unit> from String
2021-03-12 06:12:47,243 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 06:12:47,252 [main:106] - GETTING Function1<Throwable, Unit> from Function0<Unit>
2021-03-12 06:12:47,254 [main:106] - GETTING Function1<Throwable, Unit> from List<String>
2021-03-12 06:12:47,255 [main:106] - GETTING Function1<Throwable, Unit> from CoroutineContext
2021-03-12 06:12:47,255 [main:114] - replacement of x of type Function1<Throwable, Unit> is {a: Throwable -> println()}
2021-03-12 06:12:47,478 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:12:47,478 [main:66] - Compilation checking started
2021-03-12 06:12:48,398 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:48,400 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 06:12:48,400 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 06:12:48,400 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:12:48,641 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:12:48,650 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:12:48,885 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:12:48,895 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:12:49,402 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:12:49,402 [main:95] - GENERATED = print("oorev")
2021-03-12 06:12:49,402 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("oorev")}
2021-03-12 06:12:49,402 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:50,230 [main:67] - randomType = Collection<ArrayList<Float>>
2021-03-12 06:12:50,230 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 06:12:50,241 [main:114] - replacement of prope20 of type Function0<Unit> is {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }
2021-03-12 06:12:50,468 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:12:50,469 [main:66] - Compilation checking started
2021-03-12 06:12:51,077 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:51,079 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 06:12:51,079 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 06:12:51,079 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:12:51,318 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:12:51,326 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:12:51,556 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:12:51,565 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 06:12:52,088 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:12:52,096 [main:95] - GENERATED = check(true)
2021-03-12 06:12:52,096 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 06:12:52,096 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:52,382 [main:67] - randomType = Byte?
2021-03-12 06:12:52,580 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:12:52,621 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 06:12:52,626 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 06:12:52,640 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 06:12:52,641 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:12:52,657 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 06:12:52,665 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 06:12:52,666 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:12:52,689 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:12:52,689 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 06:12:52,697 [main:114] - replacement of prope20 of type Function0<Unit> is { check(true)}
2021-03-12 06:12:52,925 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:12:52,926 [main:66] - Compilation checking started
2021-03-12 06:12:53,553 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        { check(true)}()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:53,555 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 06:12:53,556 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 06:12:53,556 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:12:53,781 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:12:53,790 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:12:54,029 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:12:54,039 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:12:54,561 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 06:12:54,569 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:12:54,581 [main:95] - GENERATED = contract({ println()})
2021-03-12 06:12:54,581 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println()})}
2021-03-12 06:12:54,581 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:54,615 [main:67] - randomType = Kla6
2021-03-12 06:12:54,843 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 06:12:54,852 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:12:54,882 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 06:12:54,902 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:12:54,928 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 06:12:54,938 [main:106] - GETTING Function0<Unit> from Continuation<String>?
2021-03-12 06:12:54,950 [main:106] - GETTING Function0<Unit> from Continuation<Byte?>
2021-03-12 06:12:54,962 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 06:12:54,976 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:12:54,977 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 06:12:54,978 [main:106] - GETTING Function0<Unit> from Any?
2021-03-12 06:12:54,984 [main:106] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-12 06:12:54,996 [main:106] - GETTING Function0<Unit> from Kla0
2021-03-12 06:12:55,010 [main:106] - GETTING Function0<Unit> from Boolean
2021-03-12 06:12:55,011 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:12:55,039 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 06:12:55,046 [main:114] - replacement of prope20 of type Function0<Unit> is { contract({ println()})}
2021-03-12 06:12:55,296 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:12:55,296 [main:66] - Compilation checking started
2021-03-12 06:12:55,930 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.{ contract({ println()})} = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:55,932 [main:107] - replacing (prope23, String)
2021-03-12 06:12:55,932 [main:50] - replacing prope23 String
2021-03-12 06:12:55,932 [main:54] - Getting value of type String
2021-03-12 06:12:56,157 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:12:56,165 [main:58] - GENERATED VALUE OF TYPE String = "zaukc"
2021-03-12 06:12:56,165 [main:61] - GENERATED IS CALL =false
2021-03-12 06:12:56,709 [main:67] - randomType = ArrayList<Short?>
2021-03-12 06:12:56,936 [main:302] - generating value of type = ArrayList<Short?> false depth = 0
2021-03-12 06:12:57,173 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<Short?>): ArrayList<Short?> = TODO()
2021-03-12 06:12:57,183 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<Short?>): ArrayList<Short?> = TODO()
2021-03-12 06:12:57,712 [main:302] - generating value of type = Collection<Short?> false depth = 3
2021-03-12 06:12:57,946 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Collection<Short?> = TODO()
2021-03-12 06:12:57,956 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Collection<Short?> = TODO()
2021-03-12 06:12:58,177 [main:95] - GENERATED = mutableSetOf<Short?>()
2021-03-12 06:12:58,177 [main:95] - GENERATED = ArrayList<Short?>(mutableSetOf<Short?>())
2021-03-12 06:12:58,299 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:12:58,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:12:58,534 [main:78] - Generated call from random type = (ArrayList<Short?>(mutableSetOf<Short?>())).modCount.toString(933049239)
2021-03-12 06:12:58,534 [main:114] - replacement of prope23 of type String is (ArrayList<Short?>(mutableSetOf<Short?>())).modCount.toString(933049239)
2021-03-12 06:12:58,757 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:12:58,758 [main:66] - Compilation checking started
2021-03-12 06:12:59,391 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = (ArrayList<Short?>(mutableSetOf<Short?>())).modCount.toString(933049239)
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:12:59,393 [main:107] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-12 06:12:59,394 [main:50] - replacing c !is CoroutineStackFrame Boolean
2021-03-12 06:12:59,394 [main:54] - Getting value of type Boolean
2021-03-12 06:12:59,661 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:12:59,674 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:12:59,675 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:00,035 [main:67] - randomType = Kla11?
2021-03-12 06:13:00,239 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 06:13:00,247 [main:112] - generating klass Kla11 text = class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}
2021-03-12 06:13:00,269 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla11[DeserializedSimpleFunctionDescriptor@328b23db]
2021-03-12 06:13:00,269 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:00,269 [main:78] - Generated call from random type = (Kla11())?.equals(Kla2().prope3).and(Kla0().fu6())
2021-03-12 06:13:00,269 [main:106] - GETTING Boolean from Boolean
2021-03-12 06:13:00,279 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:13:00,279 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:13:00,279 [main:117] - GENERATED CALL = (Kla5().prope9).or(Kla5().prope9)
2021-03-12 06:13:00,279 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:13:00,279 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:13:00,279 [main:117] - GENERATED CALL = (Kla5().prope9).xor(Kla0().fu6())
2021-03-12 06:13:00,279 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:13:00,279 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:13:00,279 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:13:00,280 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla5().prope9).equals(Kla2().prope3)
2021-03-12 06:13:00,280 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:13:00,280 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:13:00,280 [main:117] - GENERATED CALL = (Kla5().prope9).not()
2021-03-12 06:13:00,280 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:13:00,280 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:00,280 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:13:00,280 [main:117] - GENERATED CALL = (Kla5().prope9).equals(Kla2().prope3).not()
2021-03-12 06:13:00,280 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:13:00,280 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:00,280 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:13:00,281 [main:117] - GENERATED CALL = (Kla5().prope9).equals(Kla2().prope3).or(Kla0().fu6())
2021-03-12 06:13:00,281 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:13:00,281 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:00,281 [main:117] - GENERATED CALL = (Kla5().prope9).and(Kla0().fu6())
2021-03-12 06:13:00,281 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:13:00,281 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:00,281 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:00,509 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:00,518 [main:117] - GENERATED CALL = (Kla5().prope9).equals(Kla2().prope3).and(false)
2021-03-12 06:13:00,518 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:13:00,518 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:00,519 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:13:00,519 [main:117] - GENERATED CALL = (Kla5().prope9).equals(Kla2().prope3).xor(Kla5().prope9)
2021-03-12 06:13:00,519 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:13:00,519 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:13:00,748 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:00,748 [main:117] - GENERATED CALL = (Kla5().prope9).equals("rpnds")
2021-03-12 06:13:00,748 [main:114] - replacement of c !is CoroutineStackFrame of type Boolean is (Kla5().prope9).or(Kla5().prope9)
2021-03-12 06:13:00,949 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:00,949 [main:66] - Compilation checking started
2021-03-12 06:13:01,549 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if ((Kla5().prope9).or(Kla5().prope9)) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:01,552 [main:107] - replacing (prope20, Function0<Unit>)
2021-03-12 06:13:01,552 [main:50] - replacing prope20 Function0<Unit>
2021-03-12 06:13:01,552 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:13:01,790 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:13:01,799 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:13:02,037 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:13:02,047 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:13:02,556 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:13:02,557 [main:95] - GENERATED = print("kddot")
2021-03-12 06:13:02,557 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("kddot")}
2021-03-12 06:13:02,557 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:03,173 [main:67] - randomType = LinkedHashMap<Kla6?, Kla10>
2021-03-12 06:13:03,403 [main:302] - generating value of type = LinkedHashMap<Kla6?, Kla10> false depth = 0
2021-03-12 06:13:03,642 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla6?, Kla10>): LinkedHashMap<Kla6?, Kla10> = TODO()
2021-03-12 06:13:03,653 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(original: kotlin.collections.Map<Kla6?, Kla10>): LinkedHashMap<Kla6?, Kla10> = TODO()
2021-03-12 06:13:04,210 [main:302] - generating value of type = Map<Kla6?, Kla10> false depth = 3
2021-03-12 06:13:04,448 [main:43] - GENERATING CALL OF fun <K, V> emptyMap(): Map<Kla6?, Kla10> = TODO()
2021-03-12 06:13:04,458 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> emptyMap(): Map<Kla6?, Kla10> = TODO()
2021-03-12 06:13:04,683 [main:95] - GENERATED = emptyMap<Kla6?, Kla10>()
2021-03-12 06:13:04,683 [main:95] - GENERATED = LinkedHashMap<Kla6?, Kla10>(emptyMap<Kla6?, Kla10>())
2021-03-12 06:13:04,799 [main:106] - GETTING Function0<Unit> from String
2021-03-12 06:13:04,815 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 06:13:04,828 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 06:13:04,835 [main:114] - replacement of prope20 of type Function0<Unit> is {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }
2021-03-12 06:13:05,063 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 06:13:05,064 [main:66] - Compilation checking started
2021-03-12 06:13:05,692 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if (prope18 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:05,694 [main:107] - replacing (prope18 != numberOfSuspensions, Boolean)
2021-03-12 06:13:05,694 [main:50] - replacing prope18 != numberOfSuspensions Boolean
2021-03-12 06:13:05,694 [main:54] - Getting value of type Boolean
2021-03-12 06:13:05,956 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:05,964 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:13:05,964 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:06,272 [main:67] - randomType = Kla2?
2021-03-12 06:13:06,477 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:13:06,485 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:13:06,504 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@39fc383a]
2021-03-12 06:13:06,736 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:06,736 [main:78] - Generated call from random type = (Kla2())?.context.equals("bostx")
2021-03-12 06:13:06,736 [main:106] - GETTING Boolean from Boolean
2021-03-12 06:13:06,748 [main:113] - Case = [public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:13:06,749 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:13:06,749 [main:117] - GENERATED CALL = (Kla0().fu6()).or(Kla5().prope9)
2021-03-12 06:13:06,749 [main:113] - Case = [public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:13:06,749 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:13:06,749 [main:117] - GENERATED CALL = (Kla0().fu6()).xor(Kla0().fu6())
2021-03-12 06:13:06,749 [main:113] - Case = [public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:13:06,749 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:06,977 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:06,985 [main:117] - GENERATED CALL = (Kla0().fu6()).and(false)
2021-03-12 06:13:06,986 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:13:06,986 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:13:06,986 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:13:06,986 [main:117] - GENERATED CALL = (Kla0().fu6()).compareTo(Kla0().fu6()).equals(Kla2().prope3)
2021-03-12 06:13:06,986 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:13:06,986 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:13:06,986 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3)
2021-03-12 06:13:06,986 [main:113] - Case = [public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:13:06,986 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:13:06,987 [main:117] - GENERATED CALL = (Kla0().fu6()).not()
2021-03-12 06:13:06,987 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:13:06,987 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:06,987 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:13:06,987 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).or(Kla0().fu6())
2021-03-12 06:13:06,987 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:13:06,987 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:06,987 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:13:06,987 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).not()
2021-03-12 06:13:06,987 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:13:06,987 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:06,987 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:13:07,200 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:07,200 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).equals("lodka")
2021-03-12 06:13:07,200 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:13:07,200 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@4ed03232]
2021-03-12 06:13:07,200 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:07,433 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:07,442 [main:117] - GENERATED CALL = (Kla0().fu6()).equals(Kla2().prope3).and(true)
2021-03-12 06:13:07,442 [main:114] - replacement of prope18 != numberOfSuspensions of type Boolean is (Kla0().fu6()).equals(Kla2().prope3).not()
2021-03-12 06:13:07,658 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:07,658 [main:66] - Compilation checking started
2021-03-12 06:13:08,550 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(prope16.exceptionOrNull()!!)
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:08,553 [main:107] - replacing (prope16.exceptionOrNull()!!, Throwable)
2021-03-12 06:13:08,554 [main:50] - replacing prope16.exceptionOrNull()!! Throwable
2021-03-12 06:13:08,554 [main:54] - Getting value of type Throwable
2021-03-12 06:13:08,790 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:13:08,803 [main:58] - GENERATED VALUE OF TYPE Throwable = NoSuchElementException()
2021-03-12 06:13:08,803 [main:61] - GENERATED IS CALL =true
2021-03-12 06:13:09,100 [main:67] - randomType = String?
2021-03-12 06:13:09,308 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:09,347 [main:106] - GETTING Throwable from Boolean
2021-03-12 06:13:09,360 [main:106] - GETTING Throwable from List<String>
2021-03-12 06:13:09,383 [main:106] - GETTING Throwable from String
2021-03-12 06:13:09,400 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 06:13:09,405 [main:106] - GETTING Throwable from Kla0
2021-03-12 06:13:09,413 [main:106] - GETTING Throwable from Any?
2021-03-12 06:13:09,417 [main:106] - GETTING Throwable from Continuation<Byte?>
2021-03-12 06:13:09,425 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 06:13:09,426 [main:106] - GETTING Throwable from Continuation<Any?>
2021-03-12 06:13:09,433 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 06:13:09,441 [main:106] - GETTING Throwable from List<String>
2021-03-12 06:13:09,442 [main:106] - GETTING Throwable from Boolean
2021-03-12 06:13:09,443 [main:106] - GETTING Throwable from String
2021-03-12 06:13:09,444 [main:106] - GETTING Throwable from String
2021-03-12 06:13:09,445 [main:106] - GETTING Throwable from CoroutineContext
2021-03-12 06:13:09,446 [main:106] - GETTING Throwable from EmptyCoroutineContext
2021-03-12 06:13:09,460 [main:106] - GETTING Throwable from Function0<Unit>
2021-03-12 06:13:09,461 [main:106] - GETTING Throwable from Continuation<String>?
2021-03-12 06:13:09,467 [main:114] - replacement of prope16.exceptionOrNull()!! of type Throwable is NoSuchElementException()
2021-03-12 06:13:09,694 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:13:09,695 [main:66] - Compilation checking started
2021-03-12 06:13:10,604 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = "123"
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:10,606 [main:107] - replacing ("123", String)
2021-03-12 06:13:10,606 [main:50] - replacing "123" String
2021-03-12 06:13:10,606 [main:54] - Getting value of type String
2021-03-12 06:13:10,833 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:10,842 [main:58] - GENERATED VALUE OF TYPE String = "wermj"
2021-03-12 06:13:10,842 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:11,429 [main:67] - randomType = Kla3<Byte>
2021-03-12 06:13:11,660 [main:302] - generating value of type = Kla3<Byte> false depth = 0
2021-03-12 06:13:11,668 [main:112] - generating klass Kla3 text = abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 06:13:12,483 [main:302] - generating value of type = Kla6 false depth = 2
2021-03-12 06:13:12,491 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}
2021-03-12 06:13:12,508 [main:106] - GETTING String from String
2021-03-12 06:13:12,528 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]]
2021-03-12 06:13:12,528 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93]
2021-03-12 06:13:12,754 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:12,763 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b5a56eb]
2021-03-12 06:13:12,764 [main:117] - GENERATED CALL = (Kla0().prope3).get(-437288271).plus(var prope12 = (list).get(-1752777468).trimMargin("zskkv")
2021-03-12 06:13:12,764 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]]
2021-03-12 06:13:12,764 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6292d062]
2021-03-12 06:13:12,977 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:13,214 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:13,223 [main:117] - GENERATED CALL = (Kla0().prope3).substringBeforeLast('ä', "exnsw")
2021-03-12 06:13:13,223 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2dad82]]
2021-03-12 06:13:13,223 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2dad82]
2021-03-12 06:13:13,463 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:13,472 [main:117] - GENERATED CALL = (Kla0().prope3).substringBefore('ì¤', Kla0().fu5())
2021-03-12 06:13:13,472 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]]
2021-03-12 06:13:13,472 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]
2021-03-12 06:13:13,472 [main:117] - GENERATED CALL = (Kla0().prope3).decapitalize()
2021-03-12 06:13:13,472 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]]
2021-03-12 06:13:13,472 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-12 06:13:13,682 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:13,942 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:13,952 [main:117] - GENERATED CALL = (Kla0().prope3).replaceAfter('ä¬¬', "suaoj", (list).get(-1752777468))
2021-03-12 06:13:13,952 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]]
2021-03-12 06:13:13,952 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:13:14,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:14,399 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:14,408 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]
2021-03-12 06:13:14,634 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:13:14,879 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:13:14,889 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:13:15,404 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:13:15,413 [main:95] - GENERATED = StringBuilder(-1158513939)
2021-03-12 06:13:15,413 [main:117] - GENERATED CALL = (Kla0().prope3).subSequence(-51017774, -1076512188).commonPrefixWith(StringBuilder(-1158513939), Kla5().prope9)
2021-03-12 06:13:15,414 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559a6a44]]
2021-03-12 06:13:15,414 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559a6a44]
2021-03-12 06:13:15,651 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:15,660 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:15,668 [main:117] - GENERATED CALL = (Kla0().prope3).filter({a: Char -> true})
2021-03-12 06:13:15,668 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]]
2021-03-12 06:13:15,669 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]
2021-03-12 06:13:15,879 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:13:16,122 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 06:13:16,132 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 06:13:16,382 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-12 06:13:16,383 [main:117] - GENERATED CALL = (Kla0().prope3).slice(linkedSetOf<Int>())
2021-03-12 06:13:16,383 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]]
2021-03-12 06:13:16,383 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]
2021-03-12 06:13:16,589 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:16,598 [main:117] - GENERATED CALL = (Kla0().prope3).repeat(317329733)
2021-03-12 06:13:16,598 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]]
2021-03-12 06:13:16,599 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]
2021-03-12 06:13:16,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:16,837 [main:117] - GENERATED CALL = (Kla0().prope3).take(-654251033)
2021-03-12 06:13:16,837 [main:114] - replacement of "123" of type String is (Kla0().prope3).slice(linkedSetOf<Int>())
2021-03-12 06:13:17,086 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:17,087 [main:66] - Compilation checking started
2021-03-12 06:13:18,000 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:18,003 [main:107] - replacing (getOrThrow(), Any?)
2021-03-12 06:13:18,004 [main:50] - replacing getOrThrow() Any?
2021-03-12 06:13:18,004 [main:54] - Getting value of type Any?
2021-03-12 06:13:18,250 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:18,250 [main:58] - GENERATED VALUE OF TYPE Any? = "yecba"
2021-03-12 06:13:18,250 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:18,285 [main:67] - randomType = Kla4
2021-03-12 06:13:18,522 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 06:13:18,530 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}
2021-03-12 06:13:18,539 [main:106] - GETTING Any? from Boolean
2021-03-12 06:13:18,552 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 06:13:18,561 [main:106] - GETTING Any? from List<String>
2021-03-12 06:13:18,596 [main:106] - GETTING Any? from Boolean
2021-03-12 06:13:18,597 [main:106] - GETTING Any? from EmptyCoroutineContext
2021-03-12 06:13:18,618 [main:106] - GETTING Any? from String
2021-03-12 06:13:18,643 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 06:13:18,644 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 06:13:18,657 [main:106] - GETTING Any? from Continuation<Byte?>
2021-03-12 06:13:18,668 [main:106] - GETTING Any? from List<String>
2021-03-12 06:13:18,669 [main:106] - GETTING Any? from Any?
2021-03-12 06:13:18,675 [main:106] - GETTING Any? from CoroutineContext
2021-03-12 06:13:18,676 [main:106] - GETTING Any? from Kla0
2021-03-12 06:13:18,689 [main:106] - GETTING Any? from Continuation<String>?
2021-03-12 06:13:18,701 [main:106] - GETTING Any? from Function0<Unit>
2021-03-12 06:13:18,702 [main:106] - GETTING Any? from String
2021-03-12 06:13:18,703 [main:106] - GETTING Any? from Continuation<Any?>
2021-03-12 06:13:18,714 [main:106] - GETTING Any? from String
2021-03-12 06:13:18,714 [main:114] - replacement of getOrThrow() of type Any? is "yecba"
2021-03-12 06:13:18,926 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:13:18,927 [main:66] - Compilation checking started
2021-03-12 06:13:19,547 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16."yecba"
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            prope15.prope19 = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:19,550 [main:107] - replacing (prope15.prope19, Boolean)
2021-03-12 06:13:19,550 [main:50] - replacing prope15.prope19 Boolean
2021-03-12 06:13:19,550 [main:54] - Getting value of type Boolean
2021-03-12 06:13:19,784 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:19,794 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 06:13:19,794 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:20,117 [main:67] - randomType = Kla2?
2021-03-12 06:13:20,331 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 06:13:20,340 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}
2021-03-12 06:13:20,358 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.EmptyCoroutineContext[DeserializedSimpleFunctionDescriptor@475b1c0c]
2021-03-12 06:13:20,596 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:20,597 [main:78] - Generated call from random type = (Kla2())?.context.equals("plfvg")
2021-03-12 06:13:20,597 [main:114] - replacement of prope15.prope19 of type Boolean is (Kla2())?.context.equals("plfvg")
2021-03-12 06:13:20,831 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:20,831 [main:66] - Compilation checking started
2021-03-12 06:13:21,460 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = {
            (Kla2())?.context.equals("plfvg") = true
        }
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:21,463 [main:107] - replacing ({
            prope15.prope19 = true
        }, Function0<Unit>)
2021-03-12 06:13:21,463 [main:50] - replacing {
            prope15.prope19 = true
        } Function0<Unit>
2021-03-12 06:13:21,463 [main:54] - Getting value of type Function0<Unit>
2021-03-12 06:13:21,701 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 06:13:21,709 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:13:21,957 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:13:21,968 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:13:22,797 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:13:22,806 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:13:22,814 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:13:22,814 [main:95] - GENERATED = require(false, { "woqir"})
2021-03-12 06:13:22,814 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "woqir"})}
2021-03-12 06:13:22,815 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:23,112 [main:67] - randomType = ArrayList<Kla13>
2021-03-12 06:13:23,350 [main:302] - generating value of type = ArrayList<Kla13> false depth = 0
2021-03-12 06:13:23,594 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla13): ArrayList<Kla13> = TODO()
2021-03-12 06:13:23,604 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla13): ArrayList<Kla13> = TODO()
2021-03-12 06:13:23,832 [main:302] - generating value of type = Kla13 false depth = 3
2021-03-12 06:13:23,842 [main:112] - generating klass Kla13 text = class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}
2021-03-12 06:13:23,842 [main:95] - GENERATED = arrayListOf<Kla13>(Kla13())
2021-03-12 06:13:23,958 [main:106] - GETTING Function0<Unit> from List<String>
2021-03-12 06:13:23,981 [main:106] - GETTING Function0<Unit> from CoroutineContext
2021-03-12 06:13:23,987 [main:106] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-12 06:13:23,999 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 06:13:24,007 [main:114] - replacement of {
            prope15.prope19 = true
        } of type Function0<Unit> is Kla5().prope10
2021-03-12 06:13:24,240 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:24,241 [main:66] - Compilation checking started
2021-03-12 06:13:25,176 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (prope16.isSuccess) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:25,179 [main:107] - replacing (prope16.isSuccess, Boolean)
2021-03-12 06:13:25,179 [main:50] - replacing prope16.isSuccess Boolean
2021-03-12 06:13:25,179 [main:54] - Getting value of type Boolean
2021-03-12 06:13:25,414 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:25,422 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:13:25,423 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:25,732 [main:67] - randomType = ArrayList<UInt>
2021-03-12 06:13:25,947 [main:302] - generating value of type = ArrayList<UInt> false depth = 0
2021-03-12 06:13:26,223 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-12 06:13:26,234 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: UInt): ArrayList<UInt> = TODO()
2021-03-12 06:13:26,481 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 06:13:26,490 [main:95] - GENERATED = arrayListOf<UInt>(894030129.toUInt())
2021-03-12 06:13:26,661 [main:149] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@44bc1ed1]
2021-03-12 06:13:26,662 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.Array<out T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7a1be5d6]
2021-03-12 06:13:26,863 [main:78] - Generated call from random type = (arrayListOf<UInt>(894030129.toUInt())).toArray().contains(null)
2021-03-12 06:13:26,864 [main:106] - GETTING Boolean from Function0<Unit>
2021-03-12 06:13:26,875 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:13:26,875 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]
2021-03-12 06:13:26,875 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:13:26,876 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).equals(Kla2().prope3).equals(Kla2().prope3)
2021-03-12 06:13:26,876 [main:113] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@5293c898], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@317a77e4]]
2021-03-12 06:13:26,876 [main:149] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@5293c898]
2021-03-12 06:13:26,876 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@317a77e4]
2021-03-12 06:13:26,876 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)
2021-03-12 06:13:26,876 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]]
2021-03-12 06:13:26,876 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]
2021-03-12 06:13:27,120 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:27,121 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).equals("rzhky")
2021-03-12 06:13:27,121 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:13:27,121 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]
2021-03-12 06:13:27,121 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:27,121 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).equals(Kla2().prope3).and(Kla5().prope9)
2021-03-12 06:13:27,121 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:13:27,121 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]
2021-03-12 06:13:27,362 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:27,362 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:13:27,362 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).equals("lmnxl").not()
2021-03-12 06:13:27,362 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:13:27,362 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]
2021-03-12 06:13:27,363 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:13:27,363 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).equals(Kla2().prope3).xor(Kla0().fu6())
2021-03-12 06:13:27,363 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:13:27,363 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@2ffd52a0]
2021-03-12 06:13:27,363 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:13:27,364 [main:117] - GENERATED CALL = ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).equals(Kla2().prope3).or(Kla5().prope9)
2021-03-12 06:13:27,364 [main:114] - replacement of prope16.isSuccess of type Boolean is ({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)
2021-03-12 06:13:27,580 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:27,580 [main:66] - Compilation checking started
2021-03-12 06:13:28,474 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:28,477 [main:107] - replacing ("Wrong state-machine generated: it is not finished yet", String)
2021-03-12 06:13:28,477 [main:50] - replacing "Wrong state-machine generated: it is not finished yet" String
2021-03-12 06:13:28,477 [main:54] - Getting value of type String
2021-03-12 06:13:28,726 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:28,734 [main:58] - GENERATED VALUE OF TYPE String = "fsjqv"
2021-03-12 06:13:28,735 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:28,753 [main:67] - randomType = Char
2021-03-12 06:13:28,986 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:29,019 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@70b0d64]
2021-03-12 06:13:29,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:13:29,240 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:29,248 [main:78] - Generated call from random type = ('?').toLong().toString(1136001417)
2021-03-12 06:13:29,249 [main:106] - GETTING String from List<String>
2021-03-12 06:13:29,279 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]]
2021-03-12 06:13:29,280 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:13:29,518 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:29,527 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]
2021-03-12 06:13:29,763 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:13:29,985 [main:43] - GENERATING CALL OF fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-12 06:13:29,996 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(element: Int): Iterable<Int> = TODO()
2021-03-12 06:13:30,281 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:13:30,290 [main:95] - GENERATED = listOf<Int>(-2122727792)
2021-03-12 06:13:30,291 [main:117] - GENERATED CALL = ((list)).get(-1472947521).slice(listOf<Int>(-2122727792))
2021-03-12 06:13:30,291 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]]
2021-03-12 06:13:30,291 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.firstOrNull(): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@381711cd]
2021-03-12 06:13:30,291 [main:117] - GENERATED CALL = ((list)).firstOrNull()
2021-03-12 06:13:30,291 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]]
2021-03-12 06:13:30,291 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:13:30,525 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:30,534 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]
2021-03-12 06:13:30,753 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:30,763 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:30,772 [main:117] - GENERATED CALL = ((list)).get(1583085238).filterNot({a: Char -> true})
2021-03-12 06:13:30,772 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]]
2021-03-12 06:13:30,772 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:13:31,009 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:31,018 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@66d761c5]
2021-03-12 06:13:31,257 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:13:31,270 [main:117] - GENERATED CALL = ((list)).get(583605866).removeSuffix("rduks")
2021-03-12 06:13:31,270 [main:113] - Case = [public fun <T> kotlin.collections.List<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27746048]]
2021-03-12 06:13:31,270 [main:149] - GENERATING call of type public fun <T> kotlin.collections.List<T>.single(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@27746048]
2021-03-12 06:13:31,270 [main:117] - GENERATED CALL = ((list)).single()
2021-03-12 06:13:31,270 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3933679d]]
2021-03-12 06:13:31,270 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:13:31,489 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:31,498 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3933679d]
2021-03-12 06:13:31,737 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:31,984 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:31,993 [main:117] - GENERATED CALL = ((list)).get(622485708).removeRange(1843325442, -1297076053)
2021-03-12 06:13:31,993 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@482741af]]
2021-03-12 06:13:31,993 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component2(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@482741af]
2021-03-12 06:13:31,993 [main:117] - GENERATED CALL = ((list)).component2()
2021-03-12 06:13:31,993 [main:113] - Case = [@kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component4(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fb31dfb]]
2021-03-12 06:13:31,993 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun <T> kotlin.collections.List<T>.component4(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@1fb31dfb]
2021-03-12 06:13:31,994 [main:117] - GENERATED CALL = ((list)).component4()
2021-03-12 06:13:31,994 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]]
2021-03-12 06:13:31,994 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:13:32,214 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:32,223 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@87acf9d]
2021-03-12 06:13:32,462 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:32,471 [main:117] - GENERATED CALL = ((list)).get(85966665).take(-1188224069)
2021-03-12 06:13:32,627 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]]
2021-03-12 06:13:32,627 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:13:32,852 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:32,860 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@719981e]
2021-03-12 06:13:33,068 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:33,312 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:33,321 [main:117] - GENERATED CALL = ((list)).get(1329597804).replaceAfterLast('è', "senzc", var prope6 =
2021-03-12 06:13:33,321 [main:114] - replacement of "Wrong state-machine generated: it is not finished yet" of type String is ((list)).get(583605866).removeSuffix("rduks")
2021-03-12 06:13:33,554 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:33,554 [main:66] - Compilation checking started
2021-03-12 06:13:34,451 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = "fail 2"
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:34,453 [main:107] - replacing ("fail 2", String)
2021-03-12 06:13:34,453 [main:50] - replacing "fail 2" String
2021-03-12 06:13:34,453 [main:54] - Getting value of type String
2021-03-12 06:13:34,727 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:34,736 [main:58] - GENERATED VALUE OF TYPE String = "qszlh"
2021-03-12 06:13:34,737 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:34,755 [main:67] - randomType = Char
2021-03-12 06:13:34,986 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:35,019 [main:149] - GENERATING call of type public final fun toShort(): kotlin.Short defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@334a373a]
2021-03-12 06:13:35,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ff2288d]
2021-03-12 06:13:35,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:35,246 [main:78] - Generated call from random type = ('?').toShort().toString(-1766057806)
2021-03-12 06:13:35,247 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:13:35,256 [main:106] - GETTING String from Continuation<String>?
2021-03-12 06:13:35,266 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 06:13:35,274 [main:106] - GETTING String from Function0<Unit>
2021-03-12 06:13:35,282 [main:106] - GETTING String from Function0<Unit>
2021-03-12 06:13:35,282 [main:106] - GETTING String from EmptyCoroutineContext
2021-03-12 06:13:35,295 [main:106] - GETTING String from Kla0
2021-03-12 06:13:35,302 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2479a6a6]]
2021-03-12 06:13:35,302 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2479a6a6]
2021-03-12 06:13:35,537 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:35,783 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:35,792 [main:117] - GENERATED CALL = (Kla0()).prope3.padStart(-1757011289, 'ã')
2021-03-12 06:13:35,792 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e07cfe2]]
2021-03-12 06:13:35,792 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e07cfe2]
2021-03-12 06:13:36,011 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:13:36,020 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:36,030 [main:117] - GENERATED CALL = (Kla0()).prope3.filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:13:36,030 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11aa22c6]]
2021-03-12 06:13:36,030 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@11aa22c6]
2021-03-12 06:13:36,268 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:36,277 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:36,286 [main:117] - GENERATED CALL = (Kla0()).prope3.dropLastWhile({a: Char -> true})
2021-03-12 06:13:36,286 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]]
2021-03-12 06:13:36,286 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]
2021-03-12 06:13:36,522 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:36,531 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:36,540 [main:117] - GENERATED CALL = (Kla0()).prope3.takeWhile({a: Char -> false})
2021-03-12 06:13:36,540 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]]
2021-03-12 06:13:36,540 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1c84dc97]
2021-03-12 06:13:36,758 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:36,769 [main:117] - GENERATED CALL = (Kla0()).prope3.replaceAfter('íº', Kla0().fu5(), Kla0().prope3)
2021-03-12 06:13:36,769 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17bd50c9]]
2021-03-12 06:13:36,769 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17bd50c9]
2021-03-12 06:13:37,008 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:13:37,020 [main:117] - GENERATED CALL = (Kla0()).prope3.removePrefix("cfqtd")
2021-03-12 06:13:37,020 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da166d3]]
2021-03-12 06:13:37,020 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6da166d3]
2021-03-12 06:13:37,021 [main:117] - GENERATED CALL = (Kla0()).prope3.toUpperCase()
2021-03-12 06:13:37,021 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]]
2021-03-12 06:13:37,021 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd6bcb7]
2021-03-12 06:13:37,264 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:37,273 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:37,282 [main:117] - GENERATED CALL = (Kla0()).prope3.filterNot({a: Char -> false})
2021-03-12 06:13:37,282 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76594dc8]]
2021-03-12 06:13:37,282 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76594dc8]
2021-03-12 06:13:37,500 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:37,509 [main:117] - GENERATED CALL = (Kla0()).prope3.dropLast(-2119224743)
2021-03-12 06:13:37,665 [main:113] - Case = [public final var prope3: kotlin.String defined in Kla0[PropertyDescriptorImpl@47f6071b], public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]]
2021-03-12 06:13:37,665 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@101ee889]
2021-03-12 06:13:37,665 [main:117] - GENERATED CALL = (Kla0()).prope3.decapitalize()
2021-03-12 06:13:37,665 [main:114] - replacement of "fail 2" of type String is ('?').toShort().toString(-1766057806)
2021-03-12 06:13:37,900 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:37,901 [main:66] - Compilation checking started
2021-03-12 06:13:38,818 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:38,820 [main:107] - replacing ({ c ->
        prope18++
        prope20 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 06:13:38,820 [main:50] - replacing { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-12 06:13:38,820 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 06:13:39,061 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 06:13:39,071 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:13:39,323 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:13:39,334 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:13:40,175 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:13:40,184 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:13:40,193 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:13:40,193 [main:95] - GENERATED = require(true, { "mdxam"})
2021-03-12 06:13:40,193 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true, { "mdxam"})}
2021-03-12 06:13:40,194 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:40,230 [main:67] - randomType = Kla1
2021-03-12 06:13:40,443 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 06:13:40,451 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}
2021-03-12 06:13:40,698 [main:194] - Type params = []
2021-03-12 06:13:40,932 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:13:41,155 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:13:41,166 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:13:41,745 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:13:41,978 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:13:41,989 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:13:42,869 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:13:42,869 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:13:42,888 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Byte?>
2021-03-12 06:13:42,899 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 06:13:42,908 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:13:42,927 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 06:13:42,934 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 06:13:42,939 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 06:13:42,949 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:13:42,950 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 06:13:42,962 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<String>?
2021-03-12 06:13:42,971 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 06:13:42,972 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 06:13:42,974 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:13:42,975 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 06:13:43,006 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 06:13:43,020 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 06:13:43,022 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 06:13:43,023 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 06:13:43,031 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 06:13:43,031 [main:114] - replacement of { c ->
        prope18++
        prope20 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true, { "mdxam"})}
2021-03-12 06:13:43,270 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:13:43,270 [main:66] - Compilation checking started
2021-03-12 06:13:44,238 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:44,240 [main:107] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-12 06:13:44,241 [main:50] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-12 06:13:44,241 [main:54] - Getting value of type Boolean
2021-03-12 06:13:44,443 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:44,452 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:13:44,452 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:44,470 [main:67] - randomType = String
2021-03-12 06:13:44,705 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:44,736 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:13:44,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:45,207 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:45,218 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2110ba84]
2021-03-12 06:13:45,457 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:45,465 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:45,474 [main:78] - Generated call from random type = ("ivcof").subSequence(-1438110164, 10170754).all({a: Char -> false})
2021-03-12 06:13:45,475 [main:106] - GETTING Boolean from Continuation<Any?>
2021-03-12 06:13:45,485 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:13:45,485 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:13:45,723 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:45,723 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:13:45,724 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).equals("ihfnb").and(Kla0().fu6())
2021-03-12 06:13:45,724 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:13:45,724 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:13:45,724 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:13:45,724 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).equals(Kla2().prope3).or(Kla5().prope9)
2021-03-12 06:13:45,724 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:13:45,724 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:13:45,724 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:13:45,953 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:45,954 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).equals(Kla2().prope3).equals("osfku")
2021-03-12 06:13:45,954 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:13:45,954 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:13:45,954 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:13:45,954 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).equals(Kla2().prope3).not()
2021-03-12 06:13:45,954 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]]
2021-03-12 06:13:45,955 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:13:45,955 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).equals(Kla2().prope3)
2021-03-12 06:13:45,955 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6f7d3df6], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@58ddd2fe]]
2021-03-12 06:13:45,955 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@6f7d3df6]
2021-03-12 06:13:46,194 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-12 06:13:46,452 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:13:46,463 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-12 06:13:47,010 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-12 06:13:47,019 [main:302] - generating value of type = Any false depth = 4
2021-03-12 06:13:47,020 [main:95] - GENERATED = runCatching<Any?>({ "xsmuu"})
2021-03-12 06:13:47,020 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@58ddd2fe]
2021-03-12 06:13:47,020 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).resumeWith(runCatching<Any?>({ "xsmuu"})).equals(Kla2().prope3)
2021-03-12 06:13:47,020 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:13:47,020 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:13:47,260 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:47,260 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:13:47,486 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:47,497 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true)
2021-03-12 06:13:47,497 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@220093b7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@40539c4f]]
2021-03-12 06:13:47,497 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@40539c4f]
2021-03-12 06:13:47,737 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:13:47,738 [main:117] - GENERATED CALL = (fu4({a: Throwable -> require(true)})).context.equals("snoxl")
2021-03-12 06:13:47,738 [main:114] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true)
2021-03-12 06:13:47,974 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:47,975 [main:66] - Compilation checking started
2021-03-12 06:13:48,887 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (fu18() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:48,891 [main:107] - replacing (fu18(), String)
2021-03-12 06:13:48,892 [main:50] - replacing fu18() String
2021-03-12 06:13:48,892 [main:54] - Getting value of type String
2021-03-12 06:13:49,175 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:49,189 [main:58] - GENERATED VALUE OF TYPE String = "eyodb"
2021-03-12 06:13:49,189 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:49,483 [main:67] - randomType = ULong
2021-03-12 06:13:49,704 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 06:13:49,738 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@1a7094bd]
2021-03-12 06:13:49,738 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57b45d49]
2021-03-12 06:13:49,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:49,987 [main:78] - Generated call from random type = (4267707086315204141.toULong()).toUShort().toString(-1641096235)
2021-03-12 06:13:49,987 [main:106] - GETTING String from String
2021-03-12 06:13:50,007 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]]
2021-03-12 06:13:50,007 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4bfe6beb]
2021-03-12 06:13:50,244 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:50,467 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:50,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:13:50,721 [main:117] - GENERATED CALL = (Kla0().fu5()).replace('ï»', 'ê­', true)
2021-03-12 06:13:50,721 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cefae90]]
2021-03-12 06:13:50,721 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cefae90]
2021-03-12 06:13:50,959 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:50,968 [main:117] - GENERATED CALL = (Kla0().fu5()).replaceBefore('â', Kla0().prope3, var prope12 = (list).get(-1752777468).trimMargin("zskkv")
2021-03-12 06:13:50,968 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339d42ff]]
2021-03-12 06:13:50,968 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339d42ff]
2021-03-12 06:13:50,969 [main:117] - GENERATED CALL = (Kla0().fu5()).trimStart()
2021-03-12 06:13:50,969 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:13:50,969 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93]
2021-03-12 06:13:51,192 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:51,202 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:13:51,202 [main:117] - GENERATED CALL = (Kla0().fu5()).get(2024112788).titlecase()
2021-03-12 06:13:51,202 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25008eec]]
2021-03-12 06:13:51,202 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:13:51,442 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:51,689 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:51,698 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@25008eec]
2021-03-12 06:13:51,918 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:13:52,174 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 06:13:52,185 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 06:13:52,845 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:13:52,854 [main:95] - GENERATED = Regex("sdnmi")
2021-03-12 06:13:52,855 [main:117] - GENERATED CALL = (Kla0().fu5()).subSequence(-1146977774, -694591536).replaceFirst(Regex("sdnmi"), Kla0().fu5())
2021-03-12 06:13:52,855 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbd71b]]
2021-03-12 06:13:52,855 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4dbbd71b]
2021-03-12 06:13:53,094 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:13:53,342 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:13:53,353 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 06:13:53,907 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:13:53,916 [main:95] - GENERATED = StringBuilder(-1465373605)
2021-03-12 06:13:53,916 [main:117] - GENERATED CALL = (Kla0().fu5()).removeSurrounding(StringBuilder(-1465373605))
2021-03-12 06:13:53,916 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e69f73]]
2021-03-12 06:13:53,916 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e69f73]
2021-03-12 06:13:53,916 [main:117] - GENERATED CALL = (Kla0().fu5()).reversed()
2021-03-12 06:13:53,916 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]]
2021-03-12 06:13:53,916 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]
2021-03-12 06:13:54,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:54,378 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:54,387 [main:117] - GENERATED CALL = (Kla0().fu5()).padEnd(-72068747, 'ê')
2021-03-12 06:13:54,387 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76594dc8]]
2021-03-12 06:13:54,387 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@76594dc8]
2021-03-12 06:13:54,626 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:54,635 [main:117] - GENERATED CALL = (Kla0().fu5()).dropLast(-1617891534)
2021-03-12 06:13:54,635 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17bd50c9]]
2021-03-12 06:13:54,635 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17bd50c9]
2021-03-12 06:13:54,875 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:13:54,888 [main:117] - GENERATED CALL = (Kla0().fu5()).removePrefix("xwpbw")
2021-03-12 06:13:54,888 [main:114] - replacement of fu18() of type String is Kla0().fu5()
2021-03-12 06:13:55,109 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:55,110 [main:66] - Compilation checking started
2021-03-12 06:13:55,997 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = ""
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:13:56,000 [main:107] - replacing ("", String)
2021-03-12 06:13:56,000 [main:50] - replacing "" String
2021-03-12 06:13:56,000 [main:54] - Getting value of type String
2021-03-12 06:13:56,240 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:56,250 [main:58] - GENERATED VALUE OF TYPE String = "zjisv"
2021-03-12 06:13:56,250 [main:61] - GENERATED IS CALL =false
2021-03-12 06:13:56,554 [main:67] - randomType = Kla8
2021-03-12 06:13:56,772 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 06:13:56,781 [main:112] - generating klass Kla8 text = class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}
2021-03-12 06:13:56,786 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:13:56,791 [main:106] - GETTING String from String
2021-03-12 06:13:56,806 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]]
2021-03-12 06:13:56,806 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f6d9658]
2021-03-12 06:13:56,806 [main:117] - GENERATED CALL = (Kla0().fu5()).capitalize()
2021-03-12 06:13:56,806 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]]
2021-03-12 06:13:56,806 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@424b2f0d]
2021-03-12 06:13:57,044 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:57,292 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:13:57,301 [main:117] - GENERATED CALL = (Kla0().fu5()).padEnd(-693132470, 'è¤')
2021-03-12 06:13:57,302 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]]
2021-03-12 06:13:57,302 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]
2021-03-12 06:13:57,302 [main:117] - GENERATED CALL = (Kla0().fu5()).trimMargin(var prope6 =
2021-03-12 06:13:57,302 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]]
2021-03-12 06:13:57,302 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:13:57,516 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:57,764 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:57,773 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@667b34e9]
2021-03-12 06:13:58,005 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:13:58,027 [main:117] - GENERATED CALL = (Kla0().fu5()).subSequence(-1778557350, 1305017489).commonPrefixWith("fypsb", Kla0().fu6())
2021-03-12 06:13:58,027 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44bb53a3]]
2021-03-12 06:13:58,027 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44bb53a3]
2021-03-12 06:13:58,252 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:13:58,261 [main:117] - GENERATED CALL = (Kla0().fu5()).concat("awqza")
2021-03-12 06:13:58,261 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]]
2021-03-12 06:13:58,261 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]
2021-03-12 06:13:58,469 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:13:58,478 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:13:58,487 [main:117] - GENERATED CALL = (Kla0().fu5()).takeLastWhile({a: Char -> true})
2021-03-12 06:13:58,487 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]]
2021-03-12 06:13:58,487 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:13:58,731 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:58,991 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:59,000 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]
2021-03-12 06:13:59,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:59,225 [main:117] - GENERATED CALL = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
2021-03-12 06:13:59,225 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e563e3a]]
2021-03-12 06:13:59,225 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e563e3a]
2021-03-12 06:13:59,473 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 06:13:59,482 [main:302] - generating value of type = Char true depth = 1
2021-03-12 06:13:59,491 [main:117] - GENERATED CALL = (Kla0().fu5()).replaceFirstChar({a: Char -> 'å¨§'})
2021-03-12 06:13:59,491 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]]
2021-03-12 06:13:59,491 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77b8a098]
2021-03-12 06:13:59,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:13:59,735 [main:117] - GENERATED CALL = (Kla0().fu5()).repeat(-2142412620)
2021-03-12 06:13:59,736 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]]
2021-03-12 06:13:59,736 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d96a69a]
2021-03-12 06:13:59,736 [main:117] - GENERATED CALL = (Kla0().fu5()).uppercase()
2021-03-12 06:13:59,736 [main:114] - replacement of "" of type String is (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
2021-03-12 06:13:59,949 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:13:59,950 [main:66] - Compilation checking started
2021-03-12 06:14:00,824 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope15.prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:00,827 [main:107] - replacing (prope15, Kla14)
2021-03-12 06:14:00,827 [main:50] - replacing prope15 Kla14
2021-03-12 06:14:00,827 [main:54] - Getting value of type Kla14
2021-03-12 06:14:01,067 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-12 06:14:01,076 [main:112] - generating klass Kla14 text = class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}
2021-03-12 06:14:01,077 [main:58] - GENERATED VALUE OF TYPE Kla14 = Kla14()
2021-03-12 06:14:01,077 [main:61] - GENERATED IS CALL =true
2021-03-12 06:14:01,392 [main:67] - randomType = Char?
2021-03-12 06:14:01,607 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:01,640 [main:106] - GETTING Kla14 from CoroutineContext
2021-03-12 06:14:01,645 [main:106] - GETTING Kla14 from String
2021-03-12 06:14:01,660 [main:106] - GETTING Kla14 from Boolean
2021-03-12 06:14:01,668 [main:106] - GETTING Kla14 from String
2021-03-12 06:14:01,669 [main:106] - GETTING Kla14 from String
2021-03-12 06:14:01,669 [main:106] - GETTING Kla14 from EmptyCoroutineContext
2021-03-12 06:14:01,682 [main:106] - GETTING Kla14 from Continuation<String>?
2021-03-12 06:14:01,689 [main:106] - GETTING Kla14 from Any?
2021-03-12 06:14:01,692 [main:106] - GETTING Kla14 from List<String>
2021-03-12 06:14:01,714 [main:106] - GETTING Kla14 from Kla0
2021-03-12 06:14:01,721 [main:106] - GETTING Kla14 from CoroutineContext
2021-03-12 06:14:01,722 [main:106] - GETTING Kla14 from Continuation<Byte?>
2021-03-12 06:14:01,731 [main:106] - GETTING Kla14 from Function0<Unit>
2021-03-12 06:14:01,741 [main:106] - GETTING Kla14 from Function0<Unit>
2021-03-12 06:14:01,741 [main:106] - GETTING Kla14 from List<String>
2021-03-12 06:14:01,742 [main:106] - GETTING Kla14 from Continuation<Any?>
2021-03-12 06:14:01,751 [main:106] - GETTING Kla14 from CoroutineContext
2021-03-12 06:14:01,751 [main:106] - GETTING Kla14 from Boolean
2021-03-12 06:14:01,751 [main:114] - replacement of prope15 of type Kla14 is Kla14()
2021-03-12 06:14:01,994 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:14:01,995 [main:66] - Compilation checking started
2021-03-12 06:14:02,942 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:02,945 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 06:14:02,946 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 06:14:02,946 [main:54] - Getting value of type String
2021-03-12 06:14:03,194 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:03,203 [main:58] - GENERATED VALUE OF TYPE String = "yoflp"
2021-03-12 06:14:03,204 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:03,522 [main:67] - randomType = Collection<Boolean>
2021-03-12 06:14:03,523 [main:106] - GETTING String from Continuation<Any?>
2021-03-12 06:14:03,532 [main:106] - GETTING String from Boolean
2021-03-12 06:14:03,544 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:14:03,544 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:14:03,544 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:14:03,759 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:03,768 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(Kla0().fu6()).toString(-1695648448)
2021-03-12 06:14:03,768 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is "yoflp"
2021-03-12 06:14:04,007 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:14:04,008 [main:66] - Compilation checking started
2021-03-12 06:14:04,959 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:04,962 [main:107] - replacing (true, Boolean)
2021-03-12 06:14:04,962 [main:50] - replacing true Boolean
2021-03-12 06:14:04,962 [main:54] - Getting value of type Boolean
2021-03-12 06:14:05,203 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:14:05,212 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:14:05,212 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:05,500 [main:67] - randomType = Double
2021-03-12 06:14:05,715 [main:302] - generating value of type = Double true depth = 0
2021-03-12 06:14:05,756 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@44981eb4]
2021-03-12 06:14:05,756 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41aaa4e3]
2021-03-12 06:14:05,756 [main:78] - Generated call from random type = (0.8955350764577631).toChar().isUpperCase()
2021-03-12 06:14:05,757 [main:106] - GETTING Boolean from List<String>
2021-03-12 06:14:05,779 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:14:05,779 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434]
2021-03-12 06:14:06,024 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:06,033 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:14:06,033 [main:117] - GENERATED CALL = ((list)).contains("lmaxn").not()
2021-03-12 06:14:06,033 [main:113] - Case = [public abstract val size: kotlin.Int defined in kotlin.collections.List[DeserializedPropertyDescriptor@79188019], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]]
2021-03-12 06:14:06,033 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2358c211]
2021-03-12 06:14:06,033 [main:117] - GENERATED CALL = ((list)).size.equals(Kla2().prope3)
2021-03-12 06:14:06,033 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:14:06,033 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434]
2021-03-12 06:14:06,034 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:14:06,274 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:14:06,284 [main:117] - GENERATED CALL = ((list)).contains((list).get(-1752777468)).and(false)
2021-03-12 06:14:06,284 [main:113] - Case = [public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@762760fe]]
2021-03-12 06:14:06,284 [main:149] - GENERATING call of type public abstract operator fun get(index: kotlin.Int): kotlin.String defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@52f64e8f]
2021-03-12 06:14:06,501 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:06,511 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@762760fe]
2021-03-12 06:14:06,511 [main:117] - GENERATED CALL = ((list)).get(1081267742).endsWith(var prope12 = (list).get(-1752777468).trimMargin("zskkv")
2021-03-12 06:14:06,511 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:14:06,511 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434]
2021-03-12 06:14:06,753 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:06,762 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:14:06,991 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:14:06,992 [main:117] - GENERATED CALL = ((list)).contains("sface").equals("jgoaj")
2021-03-12 06:14:06,992 [main:113] - Case = [public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@30e5f5e2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@a837a8b]]
2021-03-12 06:14:06,992 [main:149] - GENERATING call of type public abstract fun iterator(): kotlin.collections.Iterator<kotlin.String> defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@30e5f5e2]
2021-03-12 06:14:06,992 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@a837a8b]
2021-03-12 06:14:06,992 [main:117] - GENERATED CALL = ((list)).iterator().equals(Kla2().prope3)
2021-03-12 06:14:06,992 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:14:06,992 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434]
2021-03-12 06:14:06,992 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:14:06,993 [main:117] - GENERATED CALL = ((list)).contains((list).get(-1752777468)).xor(Kla0().fu6())
2021-03-12 06:14:06,993 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@2a65fd78], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:14:06,993 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@2a65fd78]
2021-03-12 06:14:06,993 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:14:06,993 [main:117] - GENERATED CALL = ((list)).equals(Kla2().prope3).or(Kla0().fu6())
2021-03-12 06:14:06,993 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8658ba9]]
2021-03-12 06:14:06,993 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.collections.Collection<T>?.isNullOrEmpty(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@8658ba9]
2021-03-12 06:14:06,993 [main:117] - GENERATED CALL = ((list)).isNullOrEmpty()
2021-03-12 06:14:06,993 [main:113] - Case = [public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:14:06,993 [main:149] - GENERATING call of type public abstract fun contains(element: kotlin.String): kotlin.Boolean defined in kotlin.collections.List[DeserializedSimpleFunctionDescriptor@6b647434]
2021-03-12 06:14:07,227 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:07,237 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:14:07,237 [main:117] - GENERATED CALL = ((list)).contains("ljaqx").or(Kla5().prope9)
2021-03-12 06:14:07,237 [main:114] - replacement of true of type Boolean is ((list)).equals(Kla2().prope3).or(Kla0().fu6())
2021-03-12 06:14:07,444 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:07,445 [main:66] - Compilation checking started
2021-03-12 06:14:08,230 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = ((list)).equals(Kla2().prope3).or(Kla0().fu6())) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:08,232 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:14:08,232 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:14:08,233 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:14:08,473 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:14:08,485 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:14:08,503 [main:67] - randomType = UByte
2021-03-12 06:14:08,747 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 06:14:08,798 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:14:08,824 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 06:14:08,860 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 06:14:08,873 [main:106] - GETTING EmptyCoroutineContext from List<String>
2021-03-12 06:14:08,873 [main:106] - GETTING EmptyCoroutineContext from Continuation<String>?
2021-03-12 06:14:08,884 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 06:14:08,892 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 06:14:08,904 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 06:14:08,905 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 06:14:08,906 [main:106] - GETTING EmptyCoroutineContext from Continuation<Byte?>
2021-03-12 06:14:08,918 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 06:14:08,932 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 06:14:08,937 [main:106] - GETTING EmptyCoroutineContext from String
2021-03-12 06:14:08,937 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 06:14:08,959 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla2().context
2021-03-12 06:14:09,168 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:09,169 [main:66] - Compilation checking started
2021-03-12 06:14:10,047 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:10,050 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:14:10,050 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:14:10,050 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:14:10,295 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:14:10,307 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:14:10,343 [main:67] - randomType = Kla10
2021-03-12 06:14:10,582 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-12 06:14:10,591 [main:112] - generating klass Kla10 text = open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}
2021-03-12 06:14:10,809 [main:194] - Type params = []
2021-03-12 06:14:11,056 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 06:14:11,307 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:14:11,318 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:14:11,886 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 06:14:12,161 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:14:12,172 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:14:13,062 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 06:14:13,062 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 06:14:13,081 [main:106] - GETTING EmptyCoroutineContext from Kla0
2021-03-12 06:14:13,093 [main:106] - GETTING EmptyCoroutineContext from Continuation<String>?
2021-03-12 06:14:13,102 [main:106] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-12 06:14:13,115 [main:106] - GETTING EmptyCoroutineContext from Boolean
2021-03-12 06:14:13,127 [main:106] - GETTING EmptyCoroutineContext from Any?
2021-03-12 06:14:13,132 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 06:14:13,138 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 06:14:13,156 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla2().context
2021-03-12 06:14:13,367 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:13,367 [main:66] - Compilation checking started
2021-03-12 06:14:14,272 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if (prope19) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:14,275 [main:107] - replacing (prope19, Boolean)
2021-03-12 06:14:14,275 [main:50] - replacing prope19 Boolean
2021-03-12 06:14:14,275 [main:54] - Getting value of type Boolean
2021-03-12 06:14:14,519 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:14:14,529 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 06:14:14,529 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:15,098 [main:67] - randomType = Float?
2021-03-12 06:14:15,340 [main:302] - generating value of type = Float true depth = 0
2021-03-12 06:14:15,392 [main:149] - GENERATING call of type @kotlin.Deprecated public open fun toByte(): kotlin.Byte defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@562dd50]
2021-03-12 06:14:15,392 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@38b114c1]
2021-03-12 06:14:15,633 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:14:15,634 [main:78] - Generated call from random type = (0.71570194f)?.toByte().equals("wbfon")
2021-03-12 06:14:15,635 [main:106] - GETTING Boolean from Continuation<Byte?>
2021-03-12 06:14:15,646 [main:113] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@3d6fb6a2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@40539c4f]]
2021-03-12 06:14:15,647 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@40539c4f]
2021-03-12 06:14:15,647 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).context.equals(Kla2().prope3)
2021-03-12 06:14:15,647 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]]
2021-03-12 06:14:15,647 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:14:15,871 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:14:15,872 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).equals("zeyhv")
2021-03-12 06:14:15,872 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Byte?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@386e0847], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@58ddd2fe]]
2021-03-12 06:14:15,872 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Byte?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@386e0847]
2021-03-12 06:14:16,111 [main:302] - generating value of type = Result<Byte?> false depth = 0
2021-03-12 06:14:16,365 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Byte?): Result<Byte?> = TODO()
2021-03-12 06:14:16,375 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Byte?): Result<Byte?> = TODO()
2021-03-12 06:14:16,925 [main:302] - generating value of type = Function0<Byte?> false depth = 3
2021-03-12 06:14:16,935 [main:302] - generating value of type = Byte true depth = 4
2021-03-12 06:14:16,944 [main:95] - GENERATED = runCatching<Byte?>({ 67})
2021-03-12 06:14:16,944 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@58ddd2fe]
2021-03-12 06:14:17,188 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:14:17,189 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).resumeWith(runCatching<Byte?>({ 67})).equals("istvj")
2021-03-12 06:14:17,189 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]]
2021-03-12 06:14:17,189 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:14:17,189 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@47e67742]
2021-03-12 06:14:17,411 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:14:17,421 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).xor(false)
2021-03-12 06:14:17,421 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]]
2021-03-12 06:14:17,421 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:14:17,629 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:14:17,629 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@70d18b82]
2021-03-12 06:14:17,629 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).equals("rijte").not()
2021-03-12 06:14:17,629 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]]
2021-03-12 06:14:17,629 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:14:17,630 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43316ac8]
2021-03-12 06:14:17,868 [main:302] - generating value of type = Any false depth = 0
2021-03-12 06:14:17,868 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).equals("kjrdr")
2021-03-12 06:14:17,868 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]]
2021-03-12 06:14:17,868 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:14:17,868 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@642fa23c]
2021-03-12 06:14:18,101 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:14:18,120 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)
2021-03-12 06:14:18,264 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]]
2021-03-12 06:14:18,264 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@3c0213e8]
2021-03-12 06:14:18,264 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7ee11d67]
2021-03-12 06:14:18,265 [main:117] - GENERATED CALL = (fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).and(Kla5().prope9)
2021-03-12 06:14:18,265 [main:114] - replacement of prope19 of type Boolean is (fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)
2021-03-12 06:14:18,478 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:18,478 [main:66] - Compilation checking started
2021-03-12 06:14:19,405 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:19,409 [main:107] - replacing ({
        fu24(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 06:14:19,409 [main:50] - replacing {
        fu24(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 06:14:19,409 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 06:14:19,657 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 06:14:19,666 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:14:19,921 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:19,932 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:20,518 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 06:14:20,528 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 06:14:20,784 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:20,796 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:21,358 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 06:14:21,367 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 06:14:21,621 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:14:21,632 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:14:22,528 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 06:14:22,537 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 06:14:22,546 [main:302] - generating value of type = Any false depth = 13
2021-03-12 06:14:22,547 [main:95] - GENERATED = require(false, { "kadna"})
2021-03-12 06:14:22,547 [main:95] - GENERATED = contract({ require(false, { "kadna"})})
2021-03-12 06:14:22,547 [main:95] - GENERATED = contract({ contract({ require(false, { "kadna"})})})
2021-03-12 06:14:22,547 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> contract({ contract({ require(false, { "kadna"})})})}
2021-03-12 06:14:22,547 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:22,844 [main:67] - randomType = HashSet<Int>
2021-03-12 06:14:23,101 [main:302] - generating value of type = HashSet<Int> false depth = 0
2021-03-12 06:14:23,356 [main:43] - GENERATING CALL OF fun <E> HashSet(): HashSet<Int> = TODO()
2021-03-12 06:14:23,367 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): HashSet<Int> = TODO()
2021-03-12 06:14:23,604 [main:95] - GENERATED = HashSet<Int>()
2021-03-12 06:14:23,709 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Any?
2021-03-12 06:14:23,714 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<String>?
2021-03-12 06:14:23,722 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 06:14:23,731 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 06:14:23,755 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:14:23,773 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:14:23,774 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 06:14:23,784 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 06:14:23,790 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 06:14:23,792 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from List<String>
2021-03-12 06:14:23,793 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Kla0
2021-03-12 06:14:23,803 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Byte?>
2021-03-12 06:14:23,812 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Boolean
2021-03-12 06:14:23,813 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Function0<Unit>
2021-03-12 06:14:23,815 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from EmptyCoroutineContext
2021-03-12 06:14:23,829 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 06:14:23,831 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from CoroutineContext
2021-03-12 06:14:23,832 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Continuation<Any?>
2021-03-12 06:14:23,839 [main:114] - replacement of {
        fu24(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> contract({ contract({ require(false, { "kadna"})})})}
2021-03-12 06:14:24,083 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:14:24,083 [main:66] - Compilation checking started
2021-03-12 06:14:24,759 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> contract({ contract({ require(false, { "kadna"})})})}

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:24,762 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 06:14:24,762 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 06:14:24,762 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 06:14:24,972 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 06:14:24,984 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 06:14:25,585 [main:67] - randomType = Set<ULong>
2021-03-12 06:14:25,586 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 06:14:25,596 [main:106] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-12 06:14:25,607 [main:106] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-12 06:14:25,608 [main:106] - GETTING EmptyCoroutineContext from Continuation<Byte?>
2021-03-12 06:14:25,620 [main:106] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-12 06:14:25,644 [main:114] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla2().context
2021-03-12 06:14:25,863 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:25,863 [main:66] - Compilation checking started
2021-03-12 06:14:26,751 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = "FAIL"

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:26,754 [main:107] - replacing ("FAIL", String)
2021-03-12 06:14:26,754 [main:50] - replacing "FAIL" String
2021-03-12 06:14:26,754 [main:54] - Getting value of type String
2021-03-12 06:14:27,006 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:27,015 [main:58] - GENERATED VALUE OF TYPE String = "mhlvq"
2021-03-12 06:14:27,016 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:27,034 [main:67] - randomType = Long
2021-03-12 06:14:27,276 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:14:27,328 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@10d4d67d]
2021-03-12 06:14:27,550 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:14:27,559 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:14:27,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:27,816 [main:78] - Generated call from random type = (465667711633204471).compareTo(11).toString(1061959921)
2021-03-12 06:14:27,817 [main:106] - GETTING String from Function0<Unit>
2021-03-12 06:14:27,827 [main:106] - GETTING String from String
2021-03-12 06:14:27,847 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]]
2021-03-12 06:14:27,847 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]
2021-03-12 06:14:27,847 [main:117] - GENERATED CALL = (Kla0().prope3).trimMargin(Kla0().prope3)
2021-03-12 06:14:27,847 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]]
2021-03-12 06:14:27,847 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@12bcf458]
2021-03-12 06:14:28,089 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:14:28,098 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:14:28,107 [main:117] - GENERATED CALL = (Kla0().prope3).takeLastWhile({a: Char -> false})
2021-03-12 06:14:28,107 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]]
2021-03-12 06:14:28,107 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8e2dc93]
2021-03-12 06:14:28,108 [main:117] - GENERATED CALL = (Kla0().prope3).toLowerCase()
2021-03-12 06:14:28,108 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e07cfe2]]
2021-03-12 06:14:28,108 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e07cfe2]
2021-03-12 06:14:28,326 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 06:14:28,335 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:14:28,345 [main:117] - GENERATED CALL = (Kla0().prope3).filterIndexed({a: Int, b: Char -> false})
2021-03-12 06:14:28,345 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4088af]]
2021-03-12 06:14:28,345 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d4088af]
2021-03-12 06:14:28,585 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:28,594 [main:117] - GENERATED CALL = (Kla0().prope3).takeLast(-2040637128)
2021-03-12 06:14:28,594 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@346a0c65]]
2021-03-12 06:14:28,594 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@346a0c65]
2021-03-12 06:14:28,594 [main:117] - GENERATED CALL = (Kla0().prope3).trimEnd()
2021-03-12 06:14:28,595 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cefae90]]
2021-03-12 06:14:28,595 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1cefae90]
2021-03-12 06:14:28,843 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:28,853 [main:117] - GENERATED CALL = (Kla0().prope3).replaceBefore('ìªª', Kla0().prope3, var prope6 =
2021-03-12 06:14:28,853 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@771cd259]]
2021-03-12 06:14:28,853 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@771cd259]
2021-03-12 06:14:29,078 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:29,087 [main:117] - GENERATED CALL = (Kla0().prope3).replaceIndentByMargin(Kla0().prope3, "pagxc")
2021-03-12 06:14:29,088 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1751df14]]
2021-03-12 06:14:29,088 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1751df14]
2021-03-12 06:14:29,297 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:29,306 [main:117] - GENERATED CALL = (Kla0().prope3).substringAfterLast('ê´', var prope6 =
2021-03-12 06:14:29,307 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]]
2021-03-12 06:14:29,307 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36a8d78a]
2021-03-12 06:14:29,547 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:14:29,556 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:14:29,565 [main:117] - GENERATED CALL = (Kla0().prope3).takeWhile({a: Char -> false})
2021-03-12 06:14:29,565 [main:114] - replacement of "FAIL" of type String is (Kla0().prope3).takeLast(-2040637128)
2021-03-12 06:14:29,805 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:29,806 [main:66] - Compilation checking started
2021-03-12 06:14:30,726 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error(((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18)
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:30,729 [main:107] - replacing (((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18, String)
2021-03-12 06:14:30,729 [main:50] - replacing ((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18 String
2021-03-12 06:14:30,729 [main:54] - Getting value of type String
2021-03-12 06:14:30,999 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:31,008 [main:58] - GENERATED VALUE OF TYPE String = "ogugd"
2021-03-12 06:14:31,009 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:31,027 [main:67] - randomType = Char
2021-03-12 06:14:31,270 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:31,308 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@70b0d64]
2021-03-12 06:14:31,308 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@50545d0e]
2021-03-12 06:14:31,538 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:31,547 [main:78] - Generated call from random type = ('î¸').toLong().toString(1449495136)
2021-03-12 06:14:31,548 [main:106] - GETTING String from Function0<Unit>
2021-03-12 06:14:31,560 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:14:31,566 [main:106] - GETTING String from Continuation<Byte?>
2021-03-12 06:14:31,573 [main:106] - GETTING String from String
2021-03-12 06:14:31,588 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2dad82]]
2021-03-12 06:14:31,589 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f2dad82]
2021-03-12 06:14:31,831 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:32,084 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:32,094 [main:117] - GENERATED CALL = (Kla0().prope3).substringBefore('é³', "srpku")
2021-03-12 06:14:32,094 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]]
2021-03-12 06:14:32,094 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@40b5ed93]
2021-03-12 06:14:32,317 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:32,327 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4008ff72]
2021-03-12 06:14:32,327 [main:117] - GENERATED CALL = (Kla0().prope3).get(578017726).titlecase()
2021-03-12 06:14:32,327 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]]
2021-03-12 06:14:32,327 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369dbca8]
2021-03-12 06:14:32,538 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:32,547 [main:117] - GENERATED CALL = (Kla0().prope3).trimMargin("cjjbq")
2021-03-12 06:14:32,547 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20595b6a]]
2021-03-12 06:14:32,547 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20595b6a]
2021-03-12 06:14:32,547 [main:117] - GENERATED CALL = (Kla0().prope3).trimIndent()
2021-03-12 06:14:32,548 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559a6a44]]
2021-03-12 06:14:32,548 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@559a6a44]
2021-03-12 06:14:32,801 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 06:14:32,810 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 06:14:32,819 [main:117] - GENERATED CALL = (Kla0().prope3).filter({a: Char -> false})
2021-03-12 06:14:32,819 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@661e2227]]
2021-03-12 06:14:32,820 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:14:33,065 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:33,300 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:33,309 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@661e2227]
2021-03-12 06:14:33,715 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:14:33,972 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:14:33,983 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:14:34,530 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 06:14:34,543 [main:95] - GENERATED = StringBuilder("dvwiy")
2021-03-12 06:14:34,543 [main:117] - GENERATED CALL = (Kla0().prope3).subSequence(-426306191, -1839590030).commonSuffixWith(StringBuilder("dvwiy"), Kla5().prope9)
2021-03-12 06:14:34,543 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc4dd28]]
2021-03-12 06:14:34,543 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@72f7a1b6]
2021-03-12 06:14:34,787 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:35,021 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:35,030 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fc4dd28]
2021-03-12 06:14:35,294 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 06:14:35,557 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:14:35,569 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 06:14:36,464 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:14:36,473 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 06:14:36,705 [main:43] - GENERATING CALL OF fun <T> setOf(element: RegexOption): Set<RegexOption> = TODO()
2021-03-12 06:14:36,715 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: RegexOption): Set<RegexOption> = TODO()
2021-03-12 06:14:36,996 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 06:14:37,006 [main:95] - GENERATED = setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 06:14:37,006 [main:95] - GENERATED = Regex("yigtd", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 06:14:37,251 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 06:14:37,261 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 06:14:37,495 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:14:37,506 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 06:14:38,074 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 06:14:38,087 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 06:14:38,088 [main:117] - GENERATED CALL = (Kla0().prope3).subSequence(258345660, -1067741577).replace(Regex("yigtd", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> StringBuilder(StringBuilder())})
2021-03-12 06:14:38,088 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]]
2021-03-12 06:14:38,088 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2245f2ef]
2021-03-12 06:14:38,315 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:38,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:38,826 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 06:14:38,838 [main:117] - GENERATED CALL = (Kla0().prope3).replaceRange(1713839912, -749025659, "wajbu")
2021-03-12 06:14:38,838 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]]
2021-03-12 06:14:38,839 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@580e1cec]
2021-03-12 06:14:39,060 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 06:14:39,318 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 06:14:39,330 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(): Iterable<Int> = TODO()
2021-03-12 06:14:39,585 [main:95] - GENERATED = mutableSetOf<Int>()
2021-03-12 06:14:39,585 [main:117] - GENERATED CALL = (Kla0().prope3).slice(mutableSetOf<Int>())
2021-03-12 06:14:39,585 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565362af]]
2021-03-12 06:14:39,585 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@565362af]
2021-03-12 06:14:39,817 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:39,827 [main:117] - GENERATED CALL = (Kla0().prope3).replaceBeforeLast('î­', var prope12 = (list).get(-1752777468).trimMargin("zskkv")
2021-03-12 06:14:39,827 [main:114] - replacement of ((list).get(-1752777468)).get(-137016960).uppercase() + ", got " + prope18 of type String is (Kla0().prope3).get(578017726).titlecase()
2021-03-12 06:14:40,044 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:40,044 [main:66] - Compilation checking started
2021-03-12 06:14:40,936 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error((Kla0().prope3).get(578017726).titlecase())
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:40,939 [main:107] - replacing ({
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }, Unit?)
2021-03-12 06:14:40,940 [main:50] - replacing {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    } Unit?
2021-03-12 06:14:40,940 [main:54] - Getting value of type Unit?
2021-03-12 06:14:41,189 [main:302] - generating value of type = Unit false depth = 0
2021-03-12 06:14:41,445 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:41,456 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:42,328 [main:302] - generating value of type = Int true depth = 3
2021-03-12 06:14:42,338 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-12 06:14:42,347 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 06:14:42,579 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:42,590 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 06:14:43,173 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 7
2021-03-12 06:14:43,182 [main:302] - generating value of type = Unit false depth = 8
2021-03-12 06:14:43,415 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:14:43,426 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 06:14:44,012 [main:302] - generating value of type = Any false depth = 11
2021-03-12 06:14:44,012 [main:95] - GENERATED = println("xunwm")
2021-03-12 06:14:44,012 [main:95] - GENERATED = contract({ println("xunwm")})
2021-03-12 06:14:44,012 [main:95] - GENERATED = repeat(-543377959, {a: Int -> contract({ println("xunwm")})})
2021-03-12 06:14:44,012 [main:58] - GENERATED VALUE OF TYPE Unit? = repeat(-543377959, {a: Int -> contract({ println("xunwm")})})
2021-03-12 06:14:44,012 [main:61] - GENERATED IS CALL =true
2021-03-12 06:14:45,009 [main:67] - randomType = HashMap<Long?, Kla12<UShort>>?
2021-03-12 06:14:45,235 [main:302] - generating value of type = HashMap<Long?, Kla12<UShort>> false depth = 0
2021-03-12 06:14:45,496 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Long?, Kla12<UShort>>): HashMap<Long?, Kla12<UShort>> = TODO()
2021-03-12 06:14:45,507 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Long?, Kla12<UShort>>): HashMap<Long?, Kla12<UShort>> = TODO()
2021-03-12 06:14:45,766 [main:302] - generating value of type = Pair<Long?, Kla12<UShort>> false depth = 3
2021-03-12 06:14:46,004 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Long?, second: Kla12<UShort>): Pair<Long?, Kla12<UShort>> = TODO()
2021-03-12 06:14:46,016 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Long?, second: Kla12<UShort>): Pair<Long?, Kla12<UShort>> = TODO()
2021-03-12 06:14:46,294 [main:302] - generating value of type = Long true depth = 6
2021-03-12 06:14:46,303 [main:302] - generating value of type = Kla12<UShort> false depth = 6
2021-03-12 06:14:46,312 [main:112] - generating klass Kla12 text = abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-12 06:14:47,190 [main:302] - generating value of type = Kla15 false depth = 8
2021-03-12 06:14:47,199 [main:112] - generating klass Kla15 text = object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}
2021-03-12 06:14:47,200 [main:95] - GENERATED = Pair<Long?, Kla12<UShort>>(1546870783475660301, Kla15)
2021-03-12 06:14:47,200 [main:95] - GENERATED = linkedMapOf<Long?, Kla12<UShort>>(Pair<Long?, Kla12<UShort>>(1546870783475660301, Kla15))
2021-03-12 06:14:47,346 [main:149] - GENERATING call of type public open fun get(key: kotlin.Long?): Kla12<kotlin.UShort>? defined in kotlin.collections.HashMap[DeserializedSimpleFunctionDescriptor@7841e11b]
2021-03-12 06:14:47,593 [main:302] - generating value of type = Long true depth = 0
2021-03-12 06:14:47,603 [main:149] - GENERATING call of type public abstract fun resume(value: kotlin.UShort): kotlin.Unit defined in Kla12[SimpleFunctionDescriptorImpl@3a621e02]
2021-03-12 06:14:47,821 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 06:14:47,830 [main:78] - Generated call from random type = (linkedMapOf<Long?, Kla12<UShort>>(Pair<Long?, Kla12<UShort>>(1546870783475660301, Kla15)))?.get(-8234264682748899626)?.resume(9250.toUShort())
2021-03-12 06:14:47,835 [main:106] - GETTING Unit? from Continuation<String>?
2021-03-12 06:14:47,842 [main:113] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.String>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2f2580c0]]
2021-03-12 06:14:47,842 [main:149] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.String>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@2f2580c0]
2021-03-12 06:14:48,102 [main:302] - generating value of type = Result<String> false depth = 0
2021-03-12 06:14:48,356 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->String): Result<Strg> = TODO()
2021-03-12 06:14:48,368 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->String): Result<Strg> = TODO()
2021-03-12 06:14:48,918 [main:302] - generating value of type = Function0<String> false depth = 3
2021-03-12 06:14:48,927 [main:302] - generating value of type = String true depth = 4
2021-03-12 06:14:48,936 [main:95] - GENERATED = runCatching<String>({ "raybm"})
2021-03-12 06:14:48,937 [main:117] - GENERATED CALL = (Kla0().prope2)?.resumeWith(runCatching<String>({ "raybm"}))
2021-03-12 06:14:48,937 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@53b32895]]
2021-03-12 06:14:48,937 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@53b32895]
2021-03-12 06:14:49,181 [main:302] - generating value of type = T false depth = 0
2021-03-12 06:14:49,722 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Double): T = TODO()
2021-03-12 06:14:49,733 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Double): T = TODO()
2021-03-12 06:14:49,993 [main:302] - generating value of type = Double true depth = 3
2021-03-12 06:14:50,003 [main:95] - GENERATED = checkNotNull<Double>(0.3795085497754217)
2021-03-12 06:14:50,003 [main:117] - GENERATED CALL = (Kla0().prope2)?.resume(checkNotNull<Double>(0.3795085497754217))
2021-03-12 06:14:50,003 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@76a34504]]
2021-03-12 06:14:50,003 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@76a34504]
2021-03-12 06:14:50,224 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 06:14:50,482 [main:43] - GENERATING CALL OF fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 06:14:50,494 [main:61] - WITHOUT TYPE PARAMS = fun NotImplementedError(message: kotlin.String): Throwable = TODO()
2021-03-12 06:14:51,037 [main:302] - generating value of type = String true depth = 3
2021-03-12 06:14:51,047 [main:95] - GENERATED = NotImplementedError("zjbwq")
2021-03-12 06:14:51,047 [main:117] - GENERATED CALL = (Kla0().prope2)?.resumeWithException(NotImplementedError("zjbwq"))
2021-03-12 06:14:51,047 [main:114] - replacement of {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    } of type Unit? is (Kla0().prope2)?.resume(checkNotNull<Double>(0.3795085497754217))
2021-03-12 06:14:51,292 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 06:14:51,293 [main:66] - Compilation checking started
2021-03-12 06:14:51,309 [main:71] - Wrong syntax or breaks conditions
2021-03-12 06:14:51,309 [main:49] - Result = false
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) (Kla0().prope2)?.resume(checkNotNull<Double>(0.3795085497754217))
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error((Kla0().prope3).get(578017726).titlecase())
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + prope18)
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:51,312 [main:107] - replacing (prope18, Int)
2021-03-12 06:14:51,313 [main:50] - replacing prope18 Int
2021-03-12 06:14:51,313 [main:54] - Getting value of type Int
2021-03-12 06:14:51,549 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:51,569 [main:58] - GENERATED VALUE OF TYPE Int = 1498943417
2021-03-12 06:14:51,569 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:51,605 [main:67] - randomType = Kla5
2021-03-12 06:14:51,828 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 06:14:51,837 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}
2021-03-12 06:14:51,847 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:14:51,847 [main:78] - Generated call from random type = (Kla5()).prope9.compareTo(Kla0().fu6())
2021-03-12 06:14:51,848 [main:106] - GETTING Int from CoroutineContext
2021-03-12 06:14:51,856 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@40539c4f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]]
2021-03-12 06:14:51,857 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@40539c4f]
2021-03-12 06:14:51,857 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:14:51,857 [main:117] - GENERATED CALL = (Kla6.context).equals(Kla2().prope3).compareTo(Kla5().prope9)
2021-03-12 06:14:51,857 [main:114] - replacement of prope18 of type Int is (Kla5()).prope9.compareTo(Kla0().fu6())
2021-03-12 06:14:52,103 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 06:14:52,104 [main:66] - Compilation checking started
2021-03-12 06:14:53,072 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error((Kla0().prope3).get(578017726).titlecase())
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + (Kla5()).prope9.compareTo(Kla0().fu6()))
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:53,074 [main:107] - replacing ({
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    }, SuspendFunction0<Unit>)
2021-03-12 06:14:53,075 [main:50] - replacing {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    } SuspendFunction0<Unit>
2021-03-12 06:14:53,075 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 06:14:53,319 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 06:14:53,328 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 06:14:53,585 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:14:53,596 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 06:14:54,465 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 06:14:54,474 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 06:14:54,483 [main:302] - generating value of type = Any false depth = 5
2021-03-12 06:14:54,483 [main:95] - GENERATED = check(false, { "zwpsf"})
2021-03-12 06:14:54,483 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(false, { "zwpsf"})}
2021-03-12 06:14:54,484 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:54,502 [main:67] - randomType = Byte
2021-03-12 06:14:54,723 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 06:14:54,767 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-12 06:14:54,774 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<String>?
2021-03-12 06:14:54,781 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 06:14:54,786 [main:106] - GETTING SuspendFunction0<Unit> from List<String>
2021-03-12 06:14:54,810 [main:106] - GETTING SuspendFunction0<Unit> from Any?
2021-03-12 06:14:54,814 [main:106] - GETTING SuspendFunction0<Unit> from Continuation<Byte?>
2021-03-12 06:14:54,822 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 06:14:54,823 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 06:14:54,831 [main:106] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-12 06:14:54,845 [main:106] - GETTING SuspendFunction0<Unit> from Kla0
2021-03-12 06:14:54,852 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 06:14:54,869 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 06:14:54,870 [main:106] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-12 06:14:54,871 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 06:14:54,881 [main:106] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-12 06:14:54,882 [main:106] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-12 06:14:54,883 [main:106] - GETTING SuspendFunction0<Unit> from List<String>
2021-03-12 06:14:54,884 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 06:14:54,884 [main:114] - replacement of {
        var prope22: String = (Kla0().fu5()).subSequence(2068282531, -1717599908).repeat(-818089116)
        // Initialize var with String value
        try {
            var prope24: String = "abc"
            prope24 = (Kla0().prope3).slice(linkedSetOf<Int>())
            // We need to use the variable, otherwise, it is considered dead.
            println("zbzvi")
        } finally { }

        // This variable should take the same slot as 'i' had
        var prope23: String = (Kla0().prope3).takeLast(-2040637128)

        // We shout not spill 's' to continuation field because it's not effectively initialized
        if (Kla0().fu5() == "OK") {
            println(prope23)
            prope23 = "OK"
        }
        else {
            prope23 = ('?').toShort().toString(-1766057806)
        }

        prope16 = prope23
    } of type SuspendFunction0<Unit> is { check(false, { "zwpsf"})}
2021-03-12 06:14:55,132 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 06:14:55,132 [main:66] - Compilation checking started
2021-03-12 06:14:56,083 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 { check(false, { "zwpsf"})}

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error((Kla0().prope3).get(578017726).titlecase())
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("yoflp" + ", got " + (Kla5()).prope9.compareTo(Kla0().fu6()))
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:56,085 [main:107] - replacing ("yoflp" + ", got ", String)
2021-03-12 06:14:56,086 [main:50] - replacing "yoflp" + ", got " String
2021-03-12 06:14:56,086 [main:54] - Getting value of type String
2021-03-12 06:14:56,329 [main:302] - generating value of type = String true depth = 0
2021-03-12 06:14:56,338 [main:58] - GENERATED VALUE OF TYPE String = "aovjb"
2021-03-12 06:14:56,338 [main:61] - GENERATED IS CALL =false
2021-03-12 06:14:57,260 [main:67] - randomType = Collection<Sequence<Kla1?>>
2021-03-12 06:14:57,261 [main:106] - GETTING String from CoroutineContext
2021-03-12 06:14:57,270 [main:106] - GETTING String from Boolean
2021-03-12 06:14:57,281 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]]
2021-03-12 06:14:57,281 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1c411579]
2021-03-12 06:14:57,529 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 06:14:57,538 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51fd660b]
2021-03-12 06:14:57,759 [main:302] - generating value of type = Int true depth = 0
2021-03-12 06:14:57,769 [main:117] - GENERATED CALL = (Kla5().prope9).compareTo(true).toString(-1244546229)
2021-03-12 06:14:57,769 [main:114] - replacement of "yoflp" + ", got " of type String is "aovjb"
2021-03-12 06:14:57,974 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 06:14:57,974 [main:66] - Compilation checking started
2021-03-12 06:14:58,877 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 { check(false, { "zwpsf"})}

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error((Kla0().prope3).get(578017726).titlecase())
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("aovjb" + (Kla5()).prope9.compareTo(Kla0().fu6()))
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:14:58,880 [main:107] - replacing (this, Kla11)
2021-03-12 06:14:58,880 [main:50] - replacing this Kla11
2021-03-12 06:14:58,880 [main:54] - Getting value of type Kla11
2021-03-12 06:14:59,125 [main:302] - generating value of type = Kla11 false depth = 0
2021-03-12 06:14:59,134 [main:112] - generating klass Kla11 text = class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
this.prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}
2021-03-12 06:14:59,134 [main:58] - GENERATED VALUE OF TYPE Kla11 = Kla11()
2021-03-12 06:14:59,135 [main:61] - GENERATED IS CALL =true
2021-03-12 06:14:59,153 [main:67] - randomType = Char
2021-03-12 06:14:59,388 [main:302] - generating value of type = Char true depth = 0
2021-03-12 06:14:59,435 [main:106] - GETTING Kla11 from Any?
2021-03-12 06:14:59,440 [main:106] - GETTING Kla11 from CoroutineContext
2021-03-12 06:14:59,449 [main:106] - GETTING Kla11 from String
2021-03-12 06:14:59,478 [main:106] - GETTING Kla11 from EmptyCoroutineContext
2021-03-12 06:14:59,503 [main:106] - GETTING Kla11 from Continuation<Any?>
2021-03-12 06:14:59,514 [main:106] - GETTING Kla11 from String
2021-03-12 06:14:59,514 [main:106] - GETTING Kla11 from List<String>
2021-03-12 06:14:59,551 [main:106] - GETTING Kla11 from CoroutineContext
2021-03-12 06:14:59,552 [main:106] - GETTING Kla11 from String
2021-03-12 06:14:59,553 [main:106] - GETTING Kla11 from CoroutineContext
2021-03-12 06:14:59,553 [main:106] - GETTING Kla11 from Kla0
2021-03-12 06:14:59,567 [main:106] - GETTING Kla11 from Function0<Unit>
2021-03-12 06:14:59,580 [main:106] - GETTING Kla11 from Boolean
2021-03-12 06:14:59,593 [main:106] - GETTING Kla11 from Boolean
2021-03-12 06:14:59,594 [main:106] - GETTING Kla11 from Continuation<Byte?>
2021-03-12 06:14:59,606 [main:106] - GETTING Kla11 from Continuation<String>?
2021-03-12 06:14:59,617 [main:106] - GETTING Kla11 from List<String>
2021-03-12 06:14:59,618 [main:106] - GETTING Kla11 from Function0<Unit>
2021-03-12 06:14:59,618 [main:114] - replacement of this of type Kla11 is Kla11()
2021-03-12 06:14:59,829 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 06:14:59,830 [main:66] - Compilation checking started
2021-03-12 06:15:00,694 [main:53] - Result = true
Text:
//WITH_RUNTIME

import kotlin.collections.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame

public inline fun <T, R> Iterable<T>.fold2(initial: R, operation: (R, T) -> R): R {
    var accumulator = initial
    for (element in this) accumulator = operation(accumulator, element)
    return accumulator
}

fun box(): String {
    val list = listOf("O", "K")
    return list.fold2("") {a, b -> a +b}
}

class Kla0 {
    var prope2: Continuation<String>? = null
    var prope3 = "fail"
    suspend fun fu5(): String = suspendCoroutineUninterceptedOrReturn {a: Continuation<String> -> "ddlra"}

    fun fu6() = (Kla6).equals("iqyec").or(equals("fqquz"))
    fun fu7() {
        val list = listOf("O", "K")
val prope6 = prope2!!
        prope2 = null
        prope6.resume("56")
    }
}

fun fu0(c: suspend Kla0.() -> Unit) {
    val list = listOf("O", "K")
val prope4 = Kla0()
    val prope5 = Kla0()

    c.startCoroutine(prope4, Kla1)
    c.startCoroutine(Kla0(), Kla1)

    fu1(prope4, Kla0())
}

private fun fu1(prope4: Kla0, prope5: Kla0) {
    val list = listOf("O", "K")
while (prope4.fu6()) {
        if ((list).listIterator().hasNext()) throw RuntimeException("nlixt")

        if (Kla0().prope2 === Kla0().prope2) throw RuntimeException(AssertionError("ylmuk"))

        Kla0().fu7()
        Kla0().fu7()
    }

    if (false) throw RuntimeException()

    if ((list).contains("rqolk").equals("hutta")) throw IllegalArgumentException("ifcdj", UninitializedPropertyAccessException(IndexOutOfBoundsException()))
    if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 31})).equals("tovyh")) throw IndexOutOfBoundsException()
}

inline fun fu2(b: () -> Unit) {
    val list = listOf("O", "K")
b()
}

fun box730(): String {
    val list = listOf("O", "K")
var prope6 = "O"

    {
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    } ()

    return "OK"
}

fun <Ty0> fu3(prope6: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        val list = listOf("O", "K")
prope6(prope3.getOrThrow())
    }
}

fun fu4(prope6: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
(arrayListOf<Collection<LinkedHashSet<UShort>>>()).toArray().set(1764098323, "iifms")
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
"vxyat"
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        val list = listOf("O", "K")
this.prope3 = runCatching<Any?>({ "jbckk"}).getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu8(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu8(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope7 = arrayListOf<StackTraceElement?>()

    suspend fun fu10() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(false)}

    fun fu10(c: Continuation<*>) {
        val list = listOf("O", "K")
if (c !is CoroutineStackFrame) error((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar().titlecase())
        prope7.clear()
        var prope11: CoroutineStackFrame? = c
        while (prope11 != null) {
            prope7.add(prope11.getStackTraceElement())
            prope11 = prope11.callerFrame
        }
    }

    fun fu11(method: String) {
        val list = listOf("O", "K")
prope7.find { (list).contains("rqolk").equals("hutta")}?.let { error((24.toUInt()).toUShort().toString(28401) +
                prope7.joinToString(separator = "\n")) }
    }

    fun fu12(method: String) {
        val list = listOf("O", "K")
prope7.find { true } ?: error((list).get(28401).removeSuffix("safeu"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope8 = 0
    var prope9 = false

    var prope10: () -> Unit = {}

    fun fu13() {
        val list = listOf("O", "K")
prope8 = (listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)
        prope9 = false
        prope10 = { require(true, { "khpip"})}
    }

    suspend fun fu5() = suspendCoroutine<Unit> {a: Continuation<Unit> -> check(equals("yokqi"))}

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
for (i in (listOfNotNull<Char>('à¦º').fold2<Char, Short>(28401, {a: Short, b: Char -> -18273})).toInt().until(28401)) {
            if ((list).size.or(28401) != (list).size.coerceIn(28401, 724275818)) error("uhrdz")
            prope10()
        }
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(31, {a: Short, b: Char -> -18273})).toInt().and((list).size) != (listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).rem(0))
            error((list).get(-531336230).trim() + prope8)
        if ((LinkedHashMap<Long?, Kla3<UByte>>()).keys.equals("fqquz")) error((list).size.toString(-1315140850))
        prope10()
        if ((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> 0})).equals("yokqi").not()) error((list).size.toString(-1413276652))
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
prope1.prope10 = {
            Kla5().prope9 = true
        }
    }

    override fun fu8(exception: Throwable) {
        val list = listOf("O", "K")
throw NumberFormatException("gtqis")
    }
}

class Kla8 {
    private companion object Kla9 {
        lateinit var prope13: String

        fun fu17() {
            fu15({ prope13 }());
            { fu15(prope13) }()
        }
    }

    fun fu16() {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
fu15(((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31).toUShort())?.toLong().toString((listOfNotNull<Char>((listOfNotNull<Char>('à¦º').fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toChar()).fold2<Char, Short>(-28401, {a: Short, b: Char -> -18273})).toShort().rem(31)));
        { fu15(((list).get(28401)).trimIndent()) }()
    }
}

fun fu15(s: String) {}

suspend fun fu18(): String = ""

fun fu19(c: suspend () -> Unit) {
    c.startCoroutine(Kla10)
}

fun box287(): String {
    val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
var prope16 = "fail 1"

    fu19 { check(false, { "zwpsf"})}

    return (emptyArray<UShort>()).get(990179170).toString(1510318629)
}

fun <Ty1> fu20(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Ty1>) {
        x(prope16.getOrThrow())
    }
}

fun fu21(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.exceptionOrNull()?.let({a: Throwable -> println()})
    }
}

open class Kla10(override val context: CoroutineContext = Kla2().context) : Continuation<Any?> {
    companion object Kla16 : Kla10()
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope16.getOrThrow()
    }
}

class Kla11 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope16: Result<Any?>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla11().prope16 = prope16.getOrThrow()
    }

    var prope16: Any? = null
}

abstract class Kla12<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = Kla2().context
    override fun resumeWith(prope16: Result<Ty1>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (({
        var prope12 = (list).get(-1752777468).trimMargin("zskkv")
        // inlined
        fu2 { require(Kla0().prope2 === Kla0().prope2, { "dfrbo"})}
    }).invoke().equals(Kla2().prope3)) {
            resume(prope16.getOrThrow())
        } else {
            fu22(NoSuchElementException())
        }
    }

    abstract fun fu22(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla13 {
    private val prope17 = arrayListOf<StackTraceElement?>()

    suspend fun fu24() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu24(it)
    }

    fun fu24(c: Continuation<*>) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope17.clear()
        var prope21: CoroutineStackFrame? = c
        while (prope21 != null) {
            prope17.add(prope21.getStackTraceElement())
            prope21 = prope21.callerFrame
        }
    }

    fun fu25(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { (fu4({a: Throwable -> require(true)})).equals("eptbn").xor(true) }?.let { error("ehkhz") }
    }

    fun fu26(method: String) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
prope17.find { it?.methodName?.startsWith(method) == true } ?: error((-12740).toByte().toString(751892721))
    }
}

val prope14 = Kla13()

class Kla14 {
    private var prope18 = 0
    var prope19 = false

    var prope20: () -> Unit = {}

    fun fu27() {
        prope18 = 0
        prope19 = false
        prope20 = {}
    }

    suspend fun fu18() = suspendCoroutine<Unit> {a: Continuation<Unit> -> require(true, { "mdxam"})}

    fun fu28(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
for (prope24 in 1..(Kla5().prope9).compareTo(Kla5().prope9).shl(725811975)) {
            if ((Kla0().fu6()).equals(Kla2().prope3).or(true)) error((Kla0().prope3).get(578017726).titlecase())
            prope20()
        }
        if ((Kla0().fu6()).equals(Kla2().prope3).not())
            error("aovjb" + (Kla5()).prope9.compareTo(Kla0().fu6()))
        if ((fu3<Byte?>({a: Byte? -> print("phstu")})).equals(Kla2().prope3).or(false)) error("Wrong state-machine generated: it is finished early")
        prope20()
        if (checkFinished && !prope19) error(((list)).get(583605866).removeSuffix("rduks"))
    }
}

val prope15 = Kla14()

object Kla15: Kla12<Unit>() {
    override val context: CoroutineContext
        get() = Kla2().context

    override fun resume(value: Unit) {
        val list = listOf("O", "K")
var prope6 = "O"
var prope12 = (list).get(-1752777468).trimMargin("zskkv")
val prope0 = Kla4()
val prope1 = Kla5()
Kla14().prope20 = Kla5().prope10
    }

    override fun fu22(exception: Throwable) {
        throw exception
    }
}


2021-03-12 06:15:00,697 [main:107] - replacing (!prope19, Boolean)
2021-03-12 06:15:00,697 [main:50] - replacing !prope19 Boolean
2021-03-12 06:15:00,697 [main:54] - Getting value of type Boolean
