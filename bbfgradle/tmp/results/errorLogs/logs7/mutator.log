2021-03-11 11:37:03,877 [main:66] - Compilation checking started
2021-03-11 11:37:05,562 [main:112] - generating klass CheckerJvmAssertInlineFunctionAssertionsDisabled text = class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}
2021-03-11 11:37:05,563 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:05,875 [main:52] - Trying to change 78 nodes
2021-03-11 11:37:05,875 [main:56] - replacing ("CheckerJvmAssertInlineFunctionAssertionsDisabled", String)
2021-03-11 11:37:05,876 [main:38] - replacing "CheckerJvmAssertInlineFunctionAssertionsDisabled" String
2021-03-11 11:37:05,876 [main:42] - Getting value of type String
2021-03-11 11:37:05,994 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:05,998 [main:46] - GENERATED VALUE OF TYPE String = "bykhu"
2021-03-11 11:37:05,998 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:06,175 [main:55] - randomType = Long
2021-03-11 11:37:06,293 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:37:06,449 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@1dbe76aa]
2021-03-11 11:37:06,450 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@da316e]
2021-03-11 11:37:06,452 [main:66] - Generated call from random type = (8903073278458683230).toChar().titlecase()
2021-03-11 11:37:06,452 [main:63] - replacement of "CheckerJvmAssertInlineFunctionAssertionsDisabled" of type String is (8903073278458683230).toChar().titlecase()
2021-03-11 11:37:06,572 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:06,573 [main:66] - Compilation checking started
2021-03-11 11:37:07,181 [main:53] - Result = true
Text:


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}


2021-03-11 11:37:07,183 [main:56] - replacing ("FROM INLINESITE", String)
2021-03-11 11:37:07,189 [main:38] - replacing "FROM INLINESITE" String
2021-03-11 11:37:07,189 [main:42] - Getting value of type String
2021-03-11 11:37:07,308 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:07,308 [main:46] - GENERATED VALUE OF TYPE String = "dzved"
2021-03-11 11:37:07,309 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:07,429 [main:55] - randomType = Dummy
2021-03-11 11:37:07,538 [main:302] - generating value of type = Dummy false depth = 0
2021-03-11 11:37:07,538 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:07,563 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:07,577 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:07,577 [main:63] - replacement of "FROM INLINESITE" of type String is "dzved"
2021-03-11 11:37:07,697 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:37:07,698 [main:66] - Compilation checking started
2021-03-11 11:37:08,281 [main:53] - Result = true
Text:


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert(false) { "dzved" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}


2021-03-11 11:37:08,282 [main:56] - replacing (false, Boolean)
2021-03-11 11:37:08,283 [main:38] - replacing false Boolean
2021-03-11 11:37:08,283 [main:42] - Getting value of type Boolean
2021-03-11 11:37:08,397 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:08,397 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:37:08,398 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:08,643 [main:55] - randomType = Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled>
2021-03-11 11:37:08,644 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:08,653 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@5784649f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:37:08,653 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@5784649f]
2021-03-11 11:37:08,654 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:37:08,770 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:08,771 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("qdkao")
2021-03-11 11:37:08,771 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:37:08,771 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:08,875 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:08,875 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:37:08,985 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:08,987 [main:105] - GENERATED CALL = (disableAssertions()).equals("ablfv").and(false)
2021-03-11 11:37:08,987 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:37:08,987 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:09,094 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:09,095 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:37:09,199 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:09,201 [main:105] - GENERATED CALL = (disableAssertions()).equals("lrzsq").xor(false)
2021-03-11 11:37:09,201 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:37:09,202 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:09,328 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:09,329 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:37:09,430 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:09,432 [main:105] - GENERATED CALL = (disableAssertions()).equals("qdslm").equals("uyhhm")
2021-03-11 11:37:09,432 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:37:09,432 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:09,529 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:09,530 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:37:09,630 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:09,632 [main:105] - GENERATED CALL = (disableAssertions()).equals("ufkkd").or(true)
2021-03-11 11:37:09,632 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]]
2021-03-11 11:37:09,632 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:09,730 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:09,731 [main:105] - GENERATED CALL = (disableAssertions()).equals("lxbtt")
2021-03-11 11:37:09,731 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:37:09,731 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:09,859 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:09,860 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:37:09,861 [main:105] - GENERATED CALL = (disableAssertions()).equals("kwdpd").not()
2021-03-11 11:37:09,861 [main:63] - replacement of false of type Boolean is (disableAssertions()).equals("kwdpd").not()
2021-03-11 11:37:09,974 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:09,975 [main:66] - Compilation checking started
2021-03-11 11:37:10,489 [main:53] - Result = true
Text:


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "dzved" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}


2021-03-11 11:37:10,491 [main:56] - replacing (false, Boolean)
2021-03-11 11:37:10,491 [main:38] - replacing false Boolean
2021-03-11 11:37:10,491 [main:42] - Getting value of type Boolean
2021-03-11 11:37:10,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:10,621 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:37:10,622 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:11,466 [main:55] - randomType = Triple<UShort?, Dummy?, UByte>?
2021-03-11 11:37:11,564 [main:302] - generating value of type = Triple<UShort?, Dummy?, UByte> false depth = 0
2021-03-11 11:37:11,676 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: UShort?, second: Dummy?, third: UByte): Triple<UShort?, Dummy?, UByte> = TODO()
2021-03-11 11:37:11,679 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: UShort?, second: Dummy?, third: UByte): Triple<UShort?, Dummy?, UByte> = TODO()
2021-03-11 11:37:11,786 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 11:37:11,787 [main:302] - generating value of type = Dummy false depth = 3
2021-03-11 11:37:11,787 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:11,788 [main:302] - generating value of type = UByte true depth = 3
2021-03-11 11:37:11,789 [main:95] - GENERATED = Triple<UShort?, Dummy?, UByte>(18053.toUShort(), Dummy(), 28.toUByte())
2021-03-11 11:37:11,852 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Triple[DeserializedSimpleFunctionDescriptor@786a90d2]
2021-03-11 11:37:11,958 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:11,959 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:37:12,090 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:12,093 [main:66] - Generated call from random type = (Triple<UShort?, Dummy?, UByte>(18053.toUShort(), Dummy(), 28.toUByte()))?.equals("xdkjd").and(true)
2021-03-11 11:37:12,095 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:12,105 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:37:12,106 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:12,213 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:12,213 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:37:12,214 [main:105] - GENERATED CALL = (c).equals("xtcne").not()
2021-03-11 11:37:12,214 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:37:12,214 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:12,313 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:12,314 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:37:12,413 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:12,414 [main:105] - GENERATED CALL = (c).equals("xabdv").and(true)
2021-03-11 11:37:12,414 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:37:12,414 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:12,514 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:37:12,652 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:12,653 [main:105] - GENERATED CALL = (c).equals(null).or(true)
2021-03-11 11:37:12,654 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]]
2021-03-11 11:37:12,654 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:12,762 [main:105] - GENERATED CALL = (c).equals(null)
2021-03-11 11:37:12,762 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@44ef4e6d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:37:12,762 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@44ef4e6d]
2021-03-11 11:37:12,762 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:37:12,854 [main:105] - GENERATED CALL = (c).check().equals(null)
2021-03-11 11:37:12,854 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:37:12,854 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:12,949 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:12,950 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:37:13,068 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:13,070 [main:105] - GENERATED CALL = (c).equals("bdwov").equals("smtpi")
2021-03-11 11:37:13,070 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:37:13,070 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:13,194 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:13,195 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:37:13,312 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:13,314 [main:105] - GENERATED CALL = (c).equals("zpkfm").xor(false)
2021-03-11 11:37:13,314 [main:63] - replacement of false of type Boolean is (c).equals(null).or(true)
2021-03-11 11:37:13,421 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:13,422 [main:66] - Compilation checking started
2021-03-11 11:37:13,722 [main:49] - Result = false
Text:


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "dzved" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", (c).equals(null).or(true))
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}


2021-03-11 11:37:13,724 [main:56] - replacing ({ "dzved" }, Function0<String>)
2021-03-11 11:37:13,724 [main:38] - replacing { "dzved" } Function0<String>
2021-03-11 11:37:13,725 [main:42] - Getting value of type Function0<String>
2021-03-11 11:37:13,831 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 11:37:13,831 [main:302] - generating value of type = String true depth = 1
2021-03-11 11:37:13,832 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "nbajm"}
2021-03-11 11:37:13,832 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:13,935 [main:55] - randomType = Dummy
2021-03-11 11:37:14,026 [main:302] - generating value of type = Dummy false depth = 0
2021-03-11 11:37:14,026 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:14,033 [main:94] - GETTING Function0<String> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:14,044 [main:94] - GETTING Function0<String> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:14,044 [main:63] - replacement of { "dzved" } of type Function0<String> is { "nbajm"}
2021-03-11 11:37:14,144 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:37:14,144 [main:66] - Compilation checking started
2021-03-11 11:37:14,580 [main:53] - Result = true
Text:


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}


2021-03-11 11:37:14,581 [main:56] - replacing (disableAssertions(), CheckerJvmAssertInlineFunctionAssertionsDisabled)
2021-03-11 11:37:14,582 [main:38] - replacing disableAssertions() CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:14,582 [main:42] - Getting value of type CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:14,708 [main:302] - generating value of type = CheckerJvmAssertInlineFunctionAssertionsDisabled false depth = 0
2021-03-11 11:37:14,709 [main:112] - generating klass CheckerJvmAssertInlineFunctionAssertionsDisabled text = class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}
2021-03-11 11:37:14,709 [main:46] - GENERATED VALUE OF TYPE CheckerJvmAssertInlineFunctionAssertionsDisabled = CheckerJvmAssertInlineFunctionAssertionsDisabled()
2021-03-11 11:37:14,710 [main:49] - GENERATED IS CALL =true
2021-03-11 11:37:14,831 [main:55] - randomType = Dummy
2021-03-11 11:37:14,928 [main:302] - generating value of type = Dummy false depth = 0
2021-03-11 11:37:14,929 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:14,935 [main:94] - GETTING CheckerJvmAssertInlineFunctionAssertionsDisabled from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:14,944 [main:63] - replacement of disableAssertions() of type CheckerJvmAssertInlineFunctionAssertionsDisabled is CheckerJvmAssertInlineFunctionAssertionsDisabled()
2021-03-11 11:37:15,031 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:37:15,032 [main:66] - Compilation checking started
2021-03-11 11:37:15,392 [main:53] - Result = true
Text:


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:15,393 [main:56] - replacing ("FROM INLINED", String)
2021-03-11 11:37:15,395 [main:38] - replacing "FROM INLINED" String
2021-03-11 11:37:15,395 [main:42] - Getting value of type String
2021-03-11 11:37:15,492 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:15,492 [main:46] - GENERATED VALUE OF TYPE String = "qgmre"
2021-03-11 11:37:15,493 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:15,610 [main:55] - randomType = UShort
2021-03-11 11:37:15,716 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:37:15,781 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun compareTo(other: kotlin.UByte): kotlin.Int defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@3ef045d8]
2021-03-11 11:37:15,872 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:37:15,873 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236ad928]
2021-03-11 11:37:15,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:37:15,965 [main:66] - Generated call from random type = (2223.toUShort()).compareTo(49.toUByte()).toString(1456786422)
2021-03-11 11:37:15,966 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:15,977 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:15,977 [main:63] - replacement of "FROM INLINED" of type String is "qgmre"
2021-03-11 11:37:16,068 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:37:16,069 [main:66] - Compilation checking started
2021-03-11 11:37:16,496 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert(false) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:16,497 [main:56] - replacing (c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled, CheckerJvmAssertInlineFunctionAssertionsDisabled)
2021-03-11 11:37:16,497 [main:38] - replacing c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:16,497 [main:42] - Getting value of type CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:16,598 [main:302] - generating value of type = CheckerJvmAssertInlineFunctionAssertionsDisabled false depth = 0
2021-03-11 11:37:16,599 [main:112] - generating klass CheckerJvmAssertInlineFunctionAssertionsDisabled text = class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}
2021-03-11 11:37:16,599 [main:46] - GENERATED VALUE OF TYPE CheckerJvmAssertInlineFunctionAssertionsDisabled = CheckerJvmAssertInlineFunctionAssertionsDisabled()
2021-03-11 11:37:16,599 [main:49] - GENERATED IS CALL =true
2021-03-11 11:37:16,714 [main:55] - randomType = Byte
2021-03-11 11:37:16,806 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:37:16,862 [main:94] - GETTING CheckerJvmAssertInlineFunctionAssertionsDisabled from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:16,871 [main:63] - replacement of c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled of type CheckerJvmAssertInlineFunctionAssertionsDisabled is disableAssertions()
2021-03-11 11:37:16,962 [main:33] - Trying to replace Element(BINARY_WITH_TYPE) on Element(CALL_EXPRESSION)
2021-03-11 11:37:16,963 [main:66] - Compilation checking started
2021-03-11 11:37:17,325 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert(false) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:17,326 [main:56] - replacing (false, Boolean)
2021-03-11 11:37:17,326 [main:38] - replacing false Boolean
2021-03-11 11:37:17,326 [main:42] - Getting value of type Boolean
2021-03-11 11:37:17,417 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:17,418 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:37:17,418 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:17,722 [main:55] - randomType = Array<Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>>
2021-03-11 11:37:17,810 [main:302] - generating value of type = Array<Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>> false depth = 0
2021-03-11 11:37:17,927 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>): Array<Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>> = TODO()
2021-03-11 11:37:17,929 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>): Array<Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>> = TODO()
2021-03-11 11:37:18,237 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:37:18,237 [main:302] - generating value of type = Function1<Int, Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>> false depth = 3
2021-03-11 11:37:18,238 [main:302] - generating value of type = Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?> false depth = 4
2021-03-11 11:37:18,401 [main:43] - GENERATING CALL OF fun <T> emptySequence(): Sequence<CheckerJvmAssertInleFunctionAssertionsDisabled?> = TODO()
2021-03-11 11:37:18,404 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySequence(): Sequence<CheckerJvmAssertInleFunctionAssertionsDisabled?> = TODO()
2021-03-11 11:37:18,507 [main:95] - GENERATED = emptySequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>()
2021-03-11 11:37:18,507 [main:95] - GENERATED = Array<Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>>(-248758563, {a: Int -> emptySequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>()})
2021-03-11 11:37:18,530 [main:137] - GENERATING call of type public final operator fun iterator(): kotlin.collections.Iterator<kotlin.sequences.Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>> defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@36d44197]
2021-03-11 11:37:18,531 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterator[DeserializedSimpleFunctionDescriptor@595321de]
2021-03-11 11:37:18,619 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:18,620 [main:66] - Generated call from random type = (Array<Sequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>>(-248758563, {a: Int -> emptySequence<CheckerJvmAssertInlineFunctionAssertionsDisabled?>()})).iterator().equals("sfxiu")
2021-03-11 11:37:18,621 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:18,626 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:37:18,626 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:18,711 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:18,711 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:37:18,712 [main:105] - GENERATED CALL = (c).equals("qhofb").not()
2021-03-11 11:37:18,712 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:37:18,712 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:18,796 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:18,796 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:37:18,881 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:18,882 [main:105] - GENERATED CALL = (c).equals("huqot").xor(true)
2021-03-11 11:37:18,882 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:37:18,882 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:19,044 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:19,044 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:37:19,131 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:19,132 [main:105] - GENERATED CALL = (c).equals("jxbim").and(true)
2021-03-11 11:37:19,132 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]]
2021-03-11 11:37:19,133 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:19,224 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:19,225 [main:105] - GENERATED CALL = (c).equals("bcjen")
2021-03-11 11:37:19,225 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@44ef4e6d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:37:19,225 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@44ef4e6d]
2021-03-11 11:37:19,226 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:37:19,311 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:19,311 [main:105] - GENERATED CALL = (c).check().equals("nauwm")
2021-03-11 11:37:19,311 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:37:19,311 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:19,399 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:19,399 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:37:19,521 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:19,522 [main:105] - GENERATED CALL = (c).equals("benmk").or(true)
2021-03-11 11:37:19,522 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:37:19,523 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@7b3c0cc]
2021-03-11 11:37:19,620 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:19,621 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:37:19,705 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:19,706 [main:105] - GENERATED CALL = (c).equals("kuidp").equals("zxnfp")
2021-03-11 11:37:19,706 [main:63] - replacement of false of type Boolean is (c).equals("kuidp").equals("zxnfp")
2021-03-11 11:37:19,791 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:19,791 [main:66] - Compilation checking started
2021-03-11 11:37:20,021 [main:49] - Result = false
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert(false) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", (c).equals("kuidp").equals("zxnfp"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:20,022 [main:56] - replacing (false, Boolean)
2021-03-11 11:37:20,022 [main:38] - replacing false Boolean
2021-03-11 11:37:20,022 [main:42] - Getting value of type Boolean
2021-03-11 11:37:20,107 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:20,107 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:37:20,107 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:20,208 [main:55] - randomType = Dummy
2021-03-11 11:37:20,290 [main:302] - generating value of type = Dummy false depth = 0
2021-03-11 11:37:20,291 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:20,296 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Dummy[DeserializedSimpleFunctionDescriptor@7331e75b]
2021-03-11 11:37:20,386 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:20,387 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:37:20,475 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:20,475 [main:66] - Generated call from random type = (Dummy()).equals("gathw").equals("spvac")
2021-03-11 11:37:20,476 [main:63] - replacement of false of type Boolean is (Dummy()).equals("gathw").equals("spvac")
2021-03-11 11:37:20,561 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:20,562 [main:66] - Compilation checking started
2021-03-11 11:37:20,967 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert(false) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:20,969 [main:56] - replacing (false, Boolean)
2021-03-11 11:37:20,969 [main:38] - replacing false Boolean
2021-03-11 11:37:20,970 [main:42] - Getting value of type Boolean
2021-03-11 11:37:21,057 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:21,058 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:37:21,058 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:21,442 [main:55] - randomType = Map<Dummy, ULong>
2021-03-11 11:37:21,443 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:21,451 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:37:21,451 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:21,592 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:21,593 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:37:21,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:21,713 [main:105] - GENERATED CALL = (disableAssertions()).equals("juatc").and(false)
2021-03-11 11:37:21,713 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:37:21,713 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:21,797 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:21,798 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:37:21,890 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:21,891 [main:105] - GENERATED CALL = (disableAssertions()).equals("psojo").or(false)
2021-03-11 11:37:21,892 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:37:21,892 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:21,977 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:21,978 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:37:22,086 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:22,088 [main:105] - GENERATED CALL = (disableAssertions()).equals("wcuwv").xor(false)
2021-03-11 11:37:22,089 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:37:22,089 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:22,215 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:37:22,309 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:22,310 [main:105] - GENERATED CALL = (disableAssertions()).equals(null).equals("wfxdv")
2021-03-11 11:37:22,310 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]]
2021-03-11 11:37:22,310 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:22,402 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:22,403 [main:105] - GENERATED CALL = (disableAssertions()).equals("mxwdm")
2021-03-11 11:37:22,404 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:37:22,404 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@723231e]
2021-03-11 11:37:22,492 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:22,493 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:37:22,493 [main:105] - GENERATED CALL = (disableAssertions()).equals("mgdkq").not()
2021-03-11 11:37:22,493 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@5784649f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:37:22,493 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@5784649f]
2021-03-11 11:37:22,493 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:37:22,582 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:37:22,582 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("ustlf")
2021-03-11 11:37:22,582 [main:63] - replacement of false of type Boolean is (disableAssertions()).equals("mgdkq").not()
2021-03-11 11:37:22,691 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:22,692 [main:66] - Compilation checking started
2021-03-11 11:37:23,063 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:23,064 [main:56] - replacing (false, Boolean)
2021-03-11 11:37:23,064 [main:38] - replacing false Boolean
2021-03-11 11:37:23,064 [main:42] - Getting value of type Boolean
2021-03-11 11:37:23,160 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:23,160 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:37:23,161 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:23,251 [main:55] - randomType = Float
2021-03-11 11:37:23,339 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:37:23,398 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@239da7e2]
2021-03-11 11:37:23,398 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30c41429]
2021-03-11 11:37:23,399 [main:66] - Generated call from random type = (0.45806223f).toChar().isLowerCase()
2021-03-11 11:37:23,399 [main:63] - replacement of false of type Boolean is (0.45806223f).toChar().isLowerCase()
2021-03-11 11:37:23,495 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:23,495 [main:66] - Compilation checking started
2021-03-11 11:37:23,864 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("InlineKt", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:23,865 [main:56] - replacing ("InlineKt", String)
2021-03-11 11:37:23,865 [main:38] - replacing "InlineKt" String
2021-03-11 11:37:23,866 [main:42] - Getting value of type String
2021-03-11 11:37:23,954 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:23,955 [main:46] - GENERATED VALUE OF TYPE String = "gvjkq"
2021-03-11 11:37:23,955 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:24,048 [main:55] - randomType = Dummy
2021-03-11 11:37:24,143 [main:302] - generating value of type = Dummy false depth = 0
2021-03-11 11:37:24,144 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:24,150 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:24,159 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:24,159 [main:63] - replacement of "InlineKt" of type String is "gvjkq"
2021-03-11 11:37:24,244 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:37:24,244 [main:66] - Compilation checking started
2021-03-11 11:37:24,613 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("gvjkq", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:24,614 [main:56] - replacing ("CheckerJvmAssertInlineFunctionAssertionsDisabled", String)
2021-03-11 11:37:24,615 [main:38] - replacing "CheckerJvmAssertInlineFunctionAssertionsDisabled" String
2021-03-11 11:37:24,615 [main:42] - Getting value of type String
2021-03-11 11:37:24,705 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:24,706 [main:46] - GENERATED VALUE OF TYPE String = "iwdjh"
2021-03-11 11:37:24,706 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:24,795 [main:55] - randomType = Double
2021-03-11 11:37:24,880 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:37:24,937 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5a09e938]
2021-03-11 11:37:24,938 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236ad928]
2021-03-11 11:37:25,029 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:37:25,030 [main:66] - Generated call from random type = (0.6427554181493328).toInt().toString(-1980612801)
2021-03-11 11:37:25,031 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:25,040 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:25,040 [main:63] - replacement of "CheckerJvmAssertInlineFunctionAssertionsDisabled" of type String is (0.6427554181493328).toInt().toString(-1980612801)
2021-03-11 11:37:25,129 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:25,130 [main:66] - Compilation checking started
2021-03-11 11:37:25,576 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "qgmre" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus((0.6427554181493328).toInt().toString(-1980612801), (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("gvjkq", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:25,578 [main:56] - replacing ({ "qgmre" }, Function0<String>)
2021-03-11 11:37:25,579 [main:38] - replacing { "qgmre" } Function0<String>
2021-03-11 11:37:25,579 [main:42] - Getting value of type Function0<String>
2021-03-11 11:37:25,697 [main:302] - generating value of type = Function0<String> false depth = 0
2021-03-11 11:37:25,698 [main:302] - generating value of type = String true depth = 1
2021-03-11 11:37:25,698 [main:46] - GENERATED VALUE OF TYPE Function0<String> = { "tqvho"}
2021-03-11 11:37:25,698 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:25,820 [main:55] - randomType = Double
2021-03-11 11:37:25,919 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:37:25,980 [main:94] - GETTING Function0<String> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:25,988 [main:94] - GETTING Function0<String> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:25,988 [main:63] - replacement of { "qgmre" } of type Function0<String> is { "tqvho"}
2021-03-11 11:37:26,080 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:37:26,081 [main:66] - Compilation checking started
2021-03-11 11:37:26,471 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "tqvho"}
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus((0.6427554181493328).toInt().toString(-1980612801), (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("gvjkq", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "OK"
}


2021-03-11 11:37:26,473 [main:56] - replacing ("OK", String)
2021-03-11 11:37:26,473 [main:38] - replacing "OK" String
2021-03-11 11:37:26,473 [main:42] - Getting value of type String
2021-03-11 11:37:26,567 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:26,568 [main:46] - GENERATED VALUE OF TYPE String = "snxza"
2021-03-11 11:37:26,568 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:27,180 [main:55] - randomType = Triple<Dummy, Function2<Float, Dummy, UShort>, CheckerJvmAssertInlineFunctionAssertionsDisabled>
2021-03-11 11:37:27,272 [main:302] - generating value of type = Triple<Dummy, Function2<Float, Dummy, UShort>, CheckerJvmAssertInlineFunctionAssertionsDisabled> false depth = 0
2021-03-11 11:37:27,368 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Dummy, second: Function2<Float, Dummy, UShort>, third: CheckerJvmAssertInlineFunctionAssertionsDisabled): Triple<Dummy, Function2<Float, Dummy, UShort>, CheckerJvmAssertInlineFunctionAssertionsDisabled> = TODO()
2021-03-11 11:37:27,370 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Dummy, second: Function2<Float, Dummy, UShort>, third: CheckerJvmAssertInlineFunctionAssertionsDisabled): Triple<Dummy, Function2<Float, Dummy, UShort>, CheckerJvmAssertInlineFunctionAssertionsDisabled> = TODO()
2021-03-11 11:37:27,469 [main:302] - generating value of type = Dummy false depth = 3
2021-03-11 11:37:27,470 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:27,470 [main:302] - generating value of type = Function2<Float, Dummy, UShort> false depth = 3
2021-03-11 11:37:27,471 [main:302] - generating value of type = UShort true depth = 4
2021-03-11 11:37:27,471 [main:302] - generating value of type = CheckerJvmAssertInlineFunctionAssertionsDisabled false depth = 3
2021-03-11 11:37:27,471 [main:112] - generating klass CheckerJvmAssertInlineFunctionAssertionsDisabled text = class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}
2021-03-11 11:37:27,472 [main:95] - GENERATED = Triple<Dummy, Function2<Float, Dummy, UShort>, CheckerJvmAssertInlineFunctionAssertionsDisabled>(Dummy(), {a: Float, b: Dummy -> 4071.toUShort()}, CheckerJvmAssertInlineFunctionAssertionsDisabled())
2021-03-11 11:37:27,499 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:27,508 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:27,508 [main:63] - replacement of "OK" of type String is "snxza"
2021-03-11 11:37:27,625 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:37:27,625 [main:66] - Compilation checking started
2021-03-11 11:37:27,986 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "tqvho"}
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus((0.6427554181493328).toInt().toString(-1980612801), (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("gvjkq", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "snxza"
}


2021-03-11 11:37:28,076 [main:90] - TRYING TO REPLACE CONSTANT 8903073278458683230
2021-03-11 11:37:28,170 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:37:28,170 [main:66] - Compilation checking started
2021-03-11 11:37:28,496 [main:90] - TRYING TO REPLACE CONSTANT 0.45806223f
2021-03-11 11:37:28,611 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-11 11:37:28,612 [main:66] - Compilation checking started
2021-03-11 11:37:28,977 [main:90] - TRYING TO REPLACE CONSTANT 0.6427554181493328
2021-03-11 11:37:29,072 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-11 11:37:29,073 [main:66] - Compilation checking started
2021-03-11 11:37:29,430 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "tqvho"}
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus(((0.6427554181493328)).toInt().toString(-1980612801), (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("gvjkq", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "snxza"
}


2021-03-11 11:37:29,431 [main:90] - TRYING TO REPLACE CONSTANT 1980612801
2021-03-11 11:37:29,531 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:29,531 [main:66] - Compilation checking started
2021-03-11 11:37:29,908 [main:53] - Result = true
Text:


inline fun inlineMe() {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
assert((disableAssertions()).equals("mgdkq").not()) { "tqvho"}
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        var c = disableAssertions()
inlineMe()
        assert((disableAssertions()).equals("kwdpd").not()) { "nbajm"}
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus(((0.6427554181493328)).toInt().toString(((0.6427554181493328)).toInt()), (0.45806223f).toChar().isLowerCase())
    loader.setClassAssertionStatus("gvjkq", (Dummy()).equals("gathw").equals("spvac"))
    val c = loader.loadClass((8903073278458683230).toChar().titlecase())
    return disableAssertions()
}

fun box(): String {
    var c = CheckerJvmAssertInlineFunctionAssertionsDisabled()
    c.check()
    return "snxza"
}


2021-03-11 11:37:29,935 [main:46] - AFTER TRY 0 res = 

inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}


2021-03-11 11:37:30,100 [main:112] - generating klass CheckerJvmAssertInlineFunctionAssertionsDisabled text = class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}
2021-03-11 11:37:30,101 [main:112] - generating klass Dummy text = class Dummy
2021-03-11 11:37:30,255 [main:48] - Try №0
2021-03-11 11:37:43,467 [main:48] - Already checked
2021-03-11 11:37:48,013 [main:71] - Trying to insert abstract fun resume(value: Ty0)
2021-03-11 11:37:48,146 [main:66] - Compilation checking started
2021-03-11 11:37:49,294 [main:99] - Trying to change 141 nodes
2021-03-11 11:37:49,294 [main:103] - replacing (prope5 != numberOfSuspensions, Boolean)
2021-03-11 11:37:49,295 [main:38] - replacing prope5 != numberOfSuspensions Boolean
2021-03-11 11:37:49,295 [main:42] - Getting value of type Boolean
2021-03-11 11:37:49,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:37:49,455 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:37:49,455 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:49,614 [main:55] - randomType = UShort
2021-03-11 11:37:49,763 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:37:49,832 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@81d9acc]
2021-03-11 11:37:49,833 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@16bd4d2b]
2021-03-11 11:37:49,834 [main:66] - Generated call from random type = (17643.toUShort()).toDouble().isFinite()
2021-03-11 11:37:49,834 [main:110] - replacement of prope5 != numberOfSuspensions of type Boolean is (17643.toUShort()).toDouble().isFinite()
2021-03-11 11:37:49,994 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:49,994 [main:66] - Compilation checking started
2021-03-11 11:37:50,820 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:37:50,823 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:37:50,823 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:37:50,823 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:37:50,984 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:37:50,990 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:37:51,161 [main:55] - randomType = Sequence<UShort>
2021-03-11 11:37:51,162 [main:94] - GETTING EmptyCoroutineContext from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:51,173 [main:94] - GETTING EmptyCoroutineContext from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:51,174 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:37:51,174 [main:103] - replacing ("tail-call optimization miss: method at ", String)
2021-03-11 11:37:51,175 [main:38] - replacing "tail-call optimization miss: method at " String
2021-03-11 11:37:51,175 [main:42] - Getting value of type String
2021-03-11 11:37:51,324 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:37:51,326 [main:46] - GENERATED VALUE OF TYPE String = "jexal"
2021-03-11 11:37:51,326 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:51,531 [main:55] - randomType = ArrayDeque<Kla0>
2021-03-11 11:37:51,713 [main:302] - generating value of type = ArrayDeque<Kla0> false depth = 0
2021-03-11 11:37:51,887 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla0>): ArrayDeque<Kla0> = TODO()
2021-03-11 11:37:51,892 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla0>): ArrayDeque<Kla0> = TODO()
2021-03-11 11:37:52,219 [main:302] - generating value of type = Collection<Kla0> false depth = 3
2021-03-11 11:37:52,422 [main:43] - GENERATING CALL OF fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Kla0>.()->kotlin.Unit): Collection<Kla0> = TODO()
2021-03-11 11:37:52,426 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildList(capacity: kotlin.Int, builderAction: kotlin.collections.MutableList<Kla0>.()->kotlin.Unit): Collection<Kla0> = TODO()
2021-03-11 11:37:52,914 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:37:52,917 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableList<Kla0>, Unit> false depth = 6
2021-03-11 11:37:52,920 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 11:37:53,090 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:37:53,094 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:37:53,606 [main:302] - generating value of type = Int true depth = 10
2021-03-11 11:37:53,607 [main:302] - generating value of type = Function1<Int, Unit> false depth = 10
2021-03-11 11:37:53,609 [main:302] - generating value of type = Unit false depth = 11
2021-03-11 11:37:53,753 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:37:53,757 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:37:54,163 [main:302] - generating value of type = Any false depth = 14
2021-03-11 11:37:54,163 [main:95] - GENERATED = println("cqghq")
2021-03-11 11:37:54,164 [main:95] - GENERATED = repeat(-1724642505, {a: Int -> println("cqghq")})
2021-03-11 11:37:54,164 [main:95] - GENERATED = buildList<Kla0>(379492655, { repeat(-1724642505, {a: Int -> println("cqghq")})})
2021-03-11 11:37:54,164 [main:95] - GENERATED = ArrayDeque<Kla0>(buildList<Kla0>(379492655, { repeat(-1724642505, {a: Int -> println("cqghq")})}))
2021-03-11 11:37:54,380 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@236ad928]
2021-03-11 11:37:54,533 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:37:54,536 [main:66] - Generated call from random type = (ArrayDeque<Kla0>(buildList<Kla0>(379492655, { repeat(-1724642505, {a: Int -> println("cqghq")})}))).modCount.toString(1840784075)
2021-03-11 11:37:54,537 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:54,545 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:54,546 [main:110] - replacement of "tail-call optimization miss: method at " of type String is (ArrayDeque<Kla0>(buildList<Kla0>(379492655, { repeat(-1724642505, {a: Int -> println("cqghq")})}))).modCount.toString(1840784075)
2021-03-11 11:37:54,700 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:37:54,701 [main:66] - Compilation checking started
2021-03-11 11:37:55,244 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error((ArrayDeque<Kla0>(buildList<Kla0>(379492655, { repeat(-1724642505, {a: Int -> println("cqghq")})}))).modCount.toString(1840784075) + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:37:55,247 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:37:55,247 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:37:55,247 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:37:55,394 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:37:55,396 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:37:55,552 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:37:55,556 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:37:55,912 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:37:55,915 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:37:56,123 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:37:56,128 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:37:56,545 [main:302] - generating value of type = Any false depth = 8
2021-03-11 11:37:56,546 [main:95] - GENERATED = println("meopa")
2021-03-11 11:37:56,546 [main:95] - GENERATED = contract({ println("meopa")})
2021-03-11 11:37:56,546 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ println("meopa")})}
2021-03-11 11:37:56,547 [main:49] - GENERATED IS CALL =false
2021-03-11 11:37:56,713 [main:55] - randomType = LinkedHashSet<Kla1>
2021-03-11 11:37:56,861 [main:302] - generating value of type = LinkedHashSet<Kla1> false depth = 0
2021-03-11 11:37:57,012 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Kla1>): LinkedHashSet<Kla1> = TODO()
2021-03-11 11:37:57,015 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(elements: kotlin.collections.Collection<Kla1>): LinkedHashSet<Kla1> = TODO()
2021-03-11 11:37:57,402 [main:302] - generating value of type = Collection<Kla1> false depth = 3
2021-03-11 11:37:57,569 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla1): Collection<Kla1> = TODO()
2021-03-11 11:37:57,572 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla1): Collection<Kla1> = TODO()
2021-03-11 11:37:57,737 [main:302] - generating value of type = Kla1 false depth = 6
2021-03-11 11:37:57,739 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 11:37:57,890 [main:194] - Type params = []
2021-03-11 11:37:58,036 [main:302] - generating value of type = CoroutineContext false depth = 8
2021-03-11 11:37:58,198 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:37:58,202 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:37:58,575 [main:302] - generating value of type = Key<*> false depth = 11
2021-03-11 11:37:58,816 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:37:58,822 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:37:59,339 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:37:59,339 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:37:59,341 [main:95] - GENERATED = linkedSetOf<Kla1>(Kla1())
2021-03-11 11:37:59,341 [main:95] - GENERATED = LinkedHashSet<Kla1>(linkedSetOf<Kla1>(Kla1()))
2021-03-11 11:37:59,546 [main:94] - GETTING Function0<Unit> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:59,557 [main:94] - GETTING Function0<Unit> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:37:59,557 [main:110] - replacement of prope7 of type Function0<Unit> is { contract({ println("meopa")})}
2021-03-11 11:37:59,707 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:37:59,707 [main:66] - Compilation checking started
2021-03-11 11:38:00,180 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        { contract({ println("meopa")})}()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:00,183 [main:103] - replacing ("tail-call optimization hit: method ", String)
2021-03-11 11:38:00,184 [main:38] - replacing "tail-call optimization hit: method " String
2021-03-11 11:38:00,184 [main:42] - Getting value of type String
2021-03-11 11:38:00,374 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:38:00,376 [main:46] - GENERATED VALUE OF TYPE String = "uogwk"
2021-03-11 11:38:00,376 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:00,396 [main:55] - randomType = Kla0
2021-03-11 11:38:00,397 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:00,408 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:00,408 [main:110] - replacement of "tail-call optimization hit: method " of type String is "uogwk"
2021-03-11 11:38:00,548 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:38:00,549 [main:66] - Compilation checking started
2021-03-11 11:38:01,371 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:01,373 [main:103] - replacing (prope3.isSuccess, Boolean)
2021-03-11 11:38:01,374 [main:38] - replacing prope3.isSuccess Boolean
2021-03-11 11:38:01,374 [main:42] - Getting value of type Boolean
2021-03-11 11:38:01,515 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:01,517 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:38:01,517 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:02,747 [main:55] - randomType = Function2<LinkedHashSet<Long>, Float?, Char>
2021-03-11 11:38:02,748 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:02,758 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:38:02,759 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:02,924 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:02,925 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:38:02,925 [main:105] - GENERATED CALL = (disableAssertions()).equals("rgthn").not()
2021-03-11 11:38:02,925 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]]
2021-03-11 11:38:02,925 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:03,086 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:03,087 [main:105] - GENERATED CALL = (disableAssertions()).equals("itsqi")
2021-03-11 11:38:03,087 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:38:03,087 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:03,234 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:03,234 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:38:03,381 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:03,381 [main:105] - GENERATED CALL = (disableAssertions()).equals("rhrjz").equals("vldfb")
2021-03-11 11:38:03,381 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:38:03,381 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7]
2021-03-11 11:38:03,381 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:38:03,517 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:03,517 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("kirqn")
2021-03-11 11:38:03,517 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:38:03,518 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:03,656 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:03,656 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:38:03,844 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:03,847 [main:105] - GENERATED CALL = (disableAssertions()).equals("tkkxz").and(false)
2021-03-11 11:38:03,847 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:38:03,847 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:04,011 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:04,011 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:38:04,154 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:04,156 [main:105] - GENERATED CALL = (disableAssertions()).equals("abykv").or(true)
2021-03-11 11:38:04,156 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:38:04,156 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:04,292 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:04,292 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:04,423 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:04,425 [main:105] - GENERATED CALL = (disableAssertions()).equals("kcmep").xor(false)
2021-03-11 11:38:04,425 [main:110] - replacement of prope3.isSuccess of type Boolean is (disableAssertions()).equals("itsqi")
2021-03-11 11:38:04,561 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:04,561 [main:66] - Compilation checking started
2021-03-11 11:38:05,246 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:05,249 [main:103] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 11:38:05,250 [main:38] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 11:38:05,250 [main:42] - Getting value of type Boolean
2021-03-11 11:38:05,425 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:05,427 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:38:05,427 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:05,578 [main:55] - randomType = ULong
2021-03-11 11:38:05,708 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:38:05,749 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5066012]
2021-03-11 11:38:05,750 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@22e22568]
2021-03-11 11:38:05,896 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:05,897 [main:66] - Generated call from random type = (5319911145839922117.toULong()).toLong().equals("phoyd")
2021-03-11 11:38:05,898 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:05,908 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:38:05,908 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:06,056 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:06,057 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:06,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:06,199 [main:105] - GENERATED CALL = (disableAssertions()).equals("jglpm").xor(false)
2021-03-11 11:38:06,200 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:38:06,200 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:06,342 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:06,343 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:38:06,343 [main:105] - GENERATED CALL = (disableAssertions()).equals("lliuw").not()
2021-03-11 11:38:06,343 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:38:06,343 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7]
2021-03-11 11:38:06,343 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:38:06,477 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:06,478 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("etzff")
2021-03-11 11:38:06,478 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:38:06,478 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:06,627 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:06,628 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:38:06,779 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:06,781 [main:105] - GENERATED CALL = (disableAssertions()).equals("rrjbl").and(true)
2021-03-11 11:38:06,781 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]]
2021-03-11 11:38:06,781 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:06,911 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:06,911 [main:105] - GENERATED CALL = (disableAssertions()).equals("ylufl")
2021-03-11 11:38:06,911 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:38:06,911 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:07,042 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:07,042 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:38:07,191 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:07,192 [main:105] - GENERATED CALL = (disableAssertions()).equals("fcyta").equals("fgbxn")
2021-03-11 11:38:07,192 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:38:07,192 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:07,317 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:07,318 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:38:07,453 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:07,455 [main:105] - GENERATED CALL = (disableAssertions()).equals("sjcvl").or(false)
2021-03-11 11:38:07,455 [main:110] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (disableAssertions()).equals("fcyta").equals("fgbxn")
2021-03-11 11:38:07,591 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:07,591 [main:66] - Compilation checking started
2021-03-11 11:38:08,343 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:08,346 [main:103] - replacing ("\n", String)
2021-03-11 11:38:08,346 [main:38] - replacing "\n" String
2021-03-11 11:38:08,346 [main:42] - Getting value of type String
2021-03-11 11:38:08,491 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:38:08,493 [main:46] - GENERATED VALUE OF TYPE String = "pofeg"
2021-03-11 11:38:08,493 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:08,637 [main:55] - randomType = ULong
2021-03-11 11:38:08,768 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:38:08,830 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@3c9c2527]
2021-03-11 11:38:08,830 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2092bd0f]
2021-03-11 11:38:08,962 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:38:08,964 [main:66] - Generated call from random type = (7054733961238324387.toULong()).toLong().toString(28116378)
2021-03-11 11:38:08,965 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:08,975 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:08,975 [main:110] - replacement of "\n" of type String is (7054733961238324387.toULong()).toLong().toString(28116378)
2021-03-11 11:38:09,100 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:09,101 [main:66] - Compilation checking started
2021-03-11 11:38:09,814 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:09,817 [main:103] - replacing ("tail-call optimization miss: method at ", String)
2021-03-11 11:38:09,817 [main:38] - replacing "tail-call optimization miss: method at " String
2021-03-11 11:38:09,817 [main:42] - Getting value of type String
2021-03-11 11:38:09,949 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:38:09,952 [main:46] - GENERATED VALUE OF TYPE String = "aycmd"
2021-03-11 11:38:09,952 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:10,105 [main:55] - randomType = UShort?
2021-03-11 11:38:10,230 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:38:10,271 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4433214c]
2021-03-11 11:38:10,271 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67f22df7]
2021-03-11 11:38:10,403 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:38:10,406 [main:66] - Generated call from random type = (21457.toUShort())?.toShort().toString(33014276)
2021-03-11 11:38:10,407 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:10,414 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:10,414 [main:110] - replacement of "tail-call optimization miss: method at " of type String is "aycmd"
2021-03-11 11:38:10,551 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:38:10,552 [main:66] - Compilation checking started
2021-03-11 11:38:11,213 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:11,215 [main:103] - replacing (checkFinished, Boolean)
2021-03-11 11:38:11,216 [main:38] - replacing checkFinished Boolean
2021-03-11 11:38:11,216 [main:42] - Getting value of type Boolean
2021-03-11 11:38:11,358 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:11,360 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:38:11,360 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:11,369 [main:55] - randomType = Kla0
2021-03-11 11:38:11,370 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:11,377 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:38:11,377 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:11,498 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:38:11,623 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:11,624 [main:105] - GENERATED CALL = (disableAssertions()).equals(null).equals("fmcnk")
2021-03-11 11:38:11,624 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:38:11,624 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:11,744 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:11,744 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:11,866 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:11,868 [main:105] - GENERATED CALL = (disableAssertions()).equals("fowbx").xor(false)
2021-03-11 11:38:11,868 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:38:11,868 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:11,991 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:11,991 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:38:11,992 [main:105] - GENERATED CALL = (disableAssertions()).equals("wzrqg").not()
2021-03-11 11:38:11,992 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:38:11,992 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:12,114 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:12,115 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:38:12,246 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:12,249 [main:105] - GENERATED CALL = (disableAssertions()).equals("uckzg").or(false)
2021-03-11 11:38:12,249 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:38:12,249 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7]
2021-03-11 11:38:12,249 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:38:12,418 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:12,418 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("yyylt")
2021-03-11 11:38:12,419 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:38:12,419 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:12,563 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:12,563 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:38:12,689 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:12,691 [main:105] - GENERATED CALL = (disableAssertions()).equals("amkvd").and(false)
2021-03-11 11:38:12,691 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]]
2021-03-11 11:38:12,692 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:12,827 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:12,828 [main:105] - GENERATED CALL = (disableAssertions()).equals("gmvqy")
2021-03-11 11:38:12,828 [main:110] - replacement of checkFinished of type Boolean is true
2021-03-11 11:38:12,958 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:38:12,959 [main:66] - Compilation checking started
2021-03-11 11:38:13,645 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:13,648 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:38:13,648 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:38:13,648 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:38:13,807 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:38:13,814 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:38:14,152 [main:55] - randomType = Set<Dummy>
2021-03-11 11:38:14,153 [main:94] - GETTING EmptyCoroutineContext from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:14,162 [main:94] - GETTING EmptyCoroutineContext from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:14,162 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:38:14,163 [main:103] - replacing (false, Boolean)
2021-03-11 11:38:14,163 [main:38] - replacing false Boolean
2021-03-11 11:38:14,163 [main:42] - Getting value of type Boolean
2021-03-11 11:38:14,302 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:14,304 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:38:14,305 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:14,771 [main:55] - randomType = MutableMap<Boolean, List<Dummy>>
2021-03-11 11:38:14,773 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:14,779 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]]
2021-03-11 11:38:14,779 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:14,910 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:14,910 [main:105] - GENERATED CALL = (c).equals("atnns")
2021-03-11 11:38:14,910 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:38:14,910 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:15,039 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:15,039 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:15,160 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:15,163 [main:105] - GENERATED CALL = (c).equals("kbjid").xor(false)
2021-03-11 11:38:15,163 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:38:15,163 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:15,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:15,320 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:38:15,471 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:15,471 [main:105] - GENERATED CALL = (c).equals("mvsqx").equals("aggqe")
2021-03-11 11:38:15,471 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:38:15,471 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:15,598 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:15,598 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:38:15,724 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:15,726 [main:105] - GENERATED CALL = (c).equals("xcrbu").or(false)
2021-03-11 11:38:15,727 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:38:15,727 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:15,854 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:15,855 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:38:15,855 [main:105] - GENERATED CALL = (c).equals("keohv").not()
2021-03-11 11:38:15,855 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@3ef3cc5d], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:38:15,855 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@3ef3cc5d]
2021-03-11 11:38:15,855 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:38:15,985 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:15,985 [main:105] - GENERATED CALL = (c).check().equals("hfbmm")
2021-03-11 11:38:15,986 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:38:15,986 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:16,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:16,123 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:38:16,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:16,273 [main:105] - GENERATED CALL = (c).equals("gtbws").and(false)
2021-03-11 11:38:16,273 [main:110] - replacement of false of type Boolean is (c).equals("mvsqx").equals("aggqe")
2021-03-11 11:38:16,451 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:16,451 [main:66] - Compilation checking started
2021-03-11 11:38:16,897 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = (c).equals("mvsqx").equals("aggqe")

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:16,900 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-11 11:38:16,901 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-11 11:38:16,901 [main:42] - Getting value of type String
2021-03-11 11:38:17,040 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:38:17,042 [main:46] - GENERATED VALUE OF TYPE String = "ckrzj"
2021-03-11 11:38:17,042 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:17,195 [main:55] - randomType = Byte
2021-03-11 11:38:17,322 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:38:17,382 [main:137] - GENERATING call of type public abstract fun toByte(): kotlin.Byte defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@466d236c]
2021-03-11 11:38:17,382 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@388e2f9a]
2021-03-11 11:38:17,511 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:38:17,514 [main:66] - Generated call from random type = (105).toByte().toString(1426793126)
2021-03-11 11:38:17,515 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:17,525 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:17,525 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is "ckrzj"
2021-03-11 11:38:17,647 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-11 11:38:17,648 [main:66] - Compilation checking started
2021-03-11 11:38:18,297 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:18,300 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:38:18,301 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:38:18,301 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:38:18,464 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:38:18,467 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:38:18,607 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:38:18,610 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:38:18,876 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:38:18,876 [main:95] - GENERATED = print("gucls")
2021-03-11 11:38:18,876 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("gucls")}
2021-03-11 11:38:18,877 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:19,770 [main:55] - randomType = MutableMap<Char, MutableMap<Byte, Byte>>
2021-03-11 11:38:19,772 [main:94] - GETTING Function0<Unit> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:19,779 [main:94] - GETTING Function0<Unit> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:19,779 [main:110] - replacement of prope7 of type Function0<Unit> is { print("gucls")}
2021-03-11 11:38:19,905 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:38:19,905 [main:66] - Compilation checking started
2021-03-11 11:38:20,317 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith(method) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        { print("gucls")} = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:20,320 [main:103] - replacing (method, String)
2021-03-11 11:38:20,320 [main:38] - replacing method String
2021-03-11 11:38:20,321 [main:42] - Getting value of type String
2021-03-11 11:38:20,467 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:38:20,470 [main:46] - GENERATED VALUE OF TYPE String = "ewvdk"
2021-03-11 11:38:20,471 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:20,952 [main:55] - randomType = HashSet<LinkedHashSet<UShort>>
2021-03-11 11:38:21,084 [main:302] - generating value of type = HashSet<LinkedHashSet<UShort>> false depth = 0
2021-03-11 11:38:21,214 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: LinkedHashSet<UShort>): HashSet<LkedHashSet<UShort>> = TODO()
2021-03-11 11:38:21,217 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: LinkedHashSet<UShort>): HashSet<LkedHashSet<UShort>> = TODO()
2021-03-11 11:38:21,347 [main:302] - generating value of type = LinkedHashSet<UShort> false depth = 3
2021-03-11 11:38:21,479 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<UShort> = TODO()
2021-03-11 11:38:21,482 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<UShort> = TODO()
2021-03-11 11:38:21,623 [main:95] - GENERATED = linkedSetOf<UShort>()
2021-03-11 11:38:21,623 [main:95] - GENERATED = hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())
2021-03-11 11:38:21,808 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@3904571b]
2021-03-11 11:38:21,808 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7cc87859]
2021-03-11 11:38:21,808 [main:66] - Generated call from random type = (hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()
2021-03-11 11:38:21,809 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:21,818 [main:94] - GETTING String from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:21,818 [main:110] - replacement of method of type String is (hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()
2021-03-11 11:38:21,940 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:21,941 [main:66] - Compilation checking started
2021-03-11 11:38:22,776 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:22,778 [main:103] - replacing (prope3.getOrThrow(), Any?)
2021-03-11 11:38:22,779 [main:38] - replacing prope3.getOrThrow() Any?
2021-03-11 11:38:22,779 [main:42] - Getting value of type Any?
2021-03-11 11:38:22,934 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:22,935 [main:46] - GENERATED VALUE OF TYPE Any? = "vypqe"
2021-03-11 11:38:22,935 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:23,110 [main:55] - randomType = List<Long>
2021-03-11 11:38:23,112 [main:94] - GETTING Any? from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:23,126 [main:94] - GETTING Any? from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:23,126 [main:110] - replacement of prope3.getOrThrow() of type Any? is "vypqe"
2021-03-11 11:38:23,264 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:38:23,264 [main:66] - Compilation checking started
2021-03-11 11:38:24,023 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:24,025 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:38:24,025 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:38:24,025 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:38:24,177 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:38:24,180 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:38:24,326 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:38:24,329 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:38:24,776 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:38:24,779 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:38:24,782 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:38:24,791 [main:95] - GENERATED = repeat(1250794571, {a: Int -> println()})
2021-03-11 11:38:24,791 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(1250794571, {a: Int -> println()})}
2021-03-11 11:38:24,792 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:24,803 [main:55] - randomType = Kla6
2021-03-11 11:38:24,940 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-11 11:38:24,942 [main:112] - generating klass Kla6 text = object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:38:24,981 [main:94] - GETTING Function0<Unit> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:24,990 [main:94] - GETTING Function0<Unit> from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:24,991 [main:110] - replacement of prope7 of type Function0<Unit> is { repeat(1250794571, {a: Int -> println()})}
2021-03-11 11:38:25,111 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:38:25,112 [main:66] - Compilation checking started
2021-03-11 11:38:25,569 [main:49] - Result = false
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        { repeat(1250794571, {a: Int -> println()})} = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:25,572 [main:103] - replacing (true, Boolean)
2021-03-11 11:38:25,573 [main:38] - replacing true Boolean
2021-03-11 11:38:25,573 [main:42] - Getting value of type Boolean
2021-03-11 11:38:25,723 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:25,726 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:38:25,726 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:25,738 [main:55] - randomType = Kla4
2021-03-11 11:38:25,871 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:38:25,874 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == true } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-11 11:38:25,885 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@2c7ef4c6]
2021-03-11 11:38:26,013 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:26,013 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:26,139 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:26,142 [main:66] - Generated call from random type = (Kla4()).equals("nkaju").xor(false)
2021-03-11 11:38:26,143 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:26,150 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]]
2021-03-11 11:38:26,150 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:26,280 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:26,280 [main:105] - GENERATED CALL = (disableAssertions()).equals("ekjpx")
2021-03-11 11:38:26,280 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:38:26,280 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:26,415 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:26,416 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:26,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:26,545 [main:105] - GENERATED CALL = (disableAssertions()).equals("sinqq").xor(true)
2021-03-11 11:38:26,545 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:38:26,545 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:26,675 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:26,676 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:38:26,676 [main:105] - GENERATED CALL = (disableAssertions()).equals("tscmg").not()
2021-03-11 11:38:26,676 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:38:26,676 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7]
2021-03-11 11:38:26,676 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:38:26,813 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:26,813 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("pvbci")
2021-03-11 11:38:26,813 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:38:26,813 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:27,027 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:27,027 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:38:27,203 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:27,206 [main:105] - GENERATED CALL = (disableAssertions()).equals("vggpo").and(false)
2021-03-11 11:38:27,207 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:38:27,207 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:27,328 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:27,328 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:38:27,452 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:27,452 [main:105] - GENERATED CALL = (disableAssertions()).equals("zdpao").equals("dtlmm")
2021-03-11 11:38:27,452 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:38:27,452 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:27,577 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:27,578 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:38:27,706 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:27,709 [main:105] - GENERATED CALL = (disableAssertions()).equals("vkcjx").or(false)
2021-03-11 11:38:27,709 [main:110] - replacement of true of type Boolean is (disableAssertions()).equals("sinqq").xor(true)
2021-03-11 11:38:27,836 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:27,837 [main:66] - Compilation checking started
2021-03-11 11:38:28,699 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == (disableAssertions()).equals("sinqq").xor(true) } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:28,702 [main:103] - replacing (prope6, Boolean)
2021-03-11 11:38:28,703 [main:38] - replacing prope6 Boolean
2021-03-11 11:38:28,703 [main:42] - Getting value of type Boolean
2021-03-11 11:38:28,863 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:28,866 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:38:28,866 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:28,878 [main:55] - randomType = CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:29,004 [main:302] - generating value of type = CheckerJvmAssertInlineFunctionAssertionsDisabled false depth = 0
2021-03-11 11:38:29,007 [main:112] - generating klass CheckerJvmAssertInlineFunctionAssertionsDisabled text = class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}
2021-03-11 11:38:29,014 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@17ba386b]
2021-03-11 11:38:29,141 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:29,141 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:29,277 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:29,280 [main:66] - Generated call from random type = (CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)
2021-03-11 11:38:29,281 [main:94] - GETTING Boolean from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:29,291 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]]
2021-03-11 11:38:29,291 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:29,423 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:29,424 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6443784e]
2021-03-11 11:38:29,558 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:29,561 [main:105] - GENERATED CALL = (disableAssertions()).equals("haqoa").and(true)
2021-03-11 11:38:29,561 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]]
2021-03-11 11:38:29,561 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:29,702 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:29,702 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@16a81431]
2021-03-11 11:38:29,835 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:29,835 [main:105] - GENERATED CALL = (disableAssertions()).equals("gpuax").equals("izgax")
2021-03-11 11:38:29,836 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]]
2021-03-11 11:38:29,836 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:30,011 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:30,012 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5162cfa4]
2021-03-11 11:38:30,012 [main:105] - GENERATED CALL = (disableAssertions()).equals("uuwhr").not()
2021-03-11 11:38:30,012 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]]
2021-03-11 11:38:30,012 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:30,209 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:30,210 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@32ac5ce1]
2021-03-11 11:38:30,370 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:30,374 [main:105] - GENERATED CALL = (disableAssertions()).equals("nszlr").or(false)
2021-03-11 11:38:30,374 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]]
2021-03-11 11:38:30,374 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:30,496 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:30,496 [main:105] - GENERATED CALL = (disableAssertions()).equals("wxovl")
2021-03-11 11:38:30,496 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]]
2021-03-11 11:38:30,497 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1cb8eac0]
2021-03-11 11:38:30,622 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:30,622 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@28ba0ded]
2021-03-11 11:38:30,744 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:30,747 [main:105] - GENERATED CALL = (disableAssertions()).equals("nbija").xor(true)
2021-03-11 11:38:30,747 [main:101] - Case = [public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]]
2021-03-11 11:38:30,747 [main:137] - GENERATING call of type public final fun check(): kotlin.Unit defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[SimpleFunctionDescriptorImpl@73a16bd7]
2021-03-11 11:38:30,748 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@626cd10c]
2021-03-11 11:38:30,876 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:30,876 [main:105] - GENERATED CALL = (disableAssertions()).check().equals("ghuap")
2021-03-11 11:38:30,876 [main:110] - replacement of prope6 of type Boolean is (CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)
2021-03-11 11:38:31,003 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:38:31,004 [main:66] - Compilation checking started
2021-03-11 11:38:31,740 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == (disableAssertions()).equals("sinqq").xor(true) } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:31,743 [main:103] - replacing (prope5++, Int)
2021-03-11 11:38:31,744 [main:38] - replacing prope5++ Int
2021-03-11 11:38:31,744 [main:42] - Getting value of type Int
2021-03-11 11:38:31,898 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:38:31,902 [main:46] - GENERATED VALUE OF TYPE Int = -524097777
2021-03-11 11:38:31,903 [main:49] - GENERATED IS CALL =false
2021-03-11 11:38:32,067 [main:55] - randomType = Kla1?
2021-03-11 11:38:32,194 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:38:32,197 [main:112] - generating klass Kla1 text = open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 11:38:32,324 [main:194] - Type params = []
2021-03-11 11:38:32,456 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:38:32,589 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:38:32,593 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:38:32,884 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:38:33,054 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:38:33,058 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:38:33,487 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:38:33,487 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:38:33,503 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla1[DeserializedSimpleFunctionDescriptor@1cb78a74]
2021-03-11 11:38:33,630 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:33,631 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d4fdc5d]
2021-03-11 11:38:33,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:33,760 [main:66] - Generated call from random type = (Kla1())?.equals("tmvde").compareTo(false)
2021-03-11 11:38:33,761 [main:94] - GETTING Int from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:33,768 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d4fdc5d]]
2021-03-11 11:38:33,768 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in CheckerJvmAssertInlineFunctionAssertionsDisabled[DeserializedSimpleFunctionDescriptor@1f531e3]
2021-03-11 11:38:33,892 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:38:33,892 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1d4fdc5d]
2021-03-11 11:38:34,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:38:34,024 [main:105] - GENERATED CALL = (c).equals("mjlba").compareTo(true)
2021-03-11 11:38:34,024 [main:110] - replacement of prope5++ of type Int is -524097777
2021-03-11 11:38:34,157 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 11:38:34,157 [main:66] - Compilation checking started
2021-03-11 11:38:34,791 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    fu1 {
        fu0 {
            prope1.fu11()
            prope1.fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == (disableAssertions()).equals("sinqq").xor(true) } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        -524097777
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:34,792 [main:103] - replacing (prope1, Kla5)
2021-03-11 11:38:34,793 [main:38] - replacing prope1 Kla5
2021-03-11 11:38:34,793 [main:42] - Getting value of type Kla5
2021-03-11 11:38:34,926 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:38:34,929 [main:112] - generating klass Kla5 text = class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        -524097777
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:38:34,930 [main:46] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-11 11:38:34,930 [main:49] - GENERATED IS CALL =true
2021-03-11 11:38:34,936 [main:55] - randomType = Int
2021-03-11 11:38:35,066 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:38:35,126 [main:94] - GETTING Kla5 from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:35,135 [main:94] - GETTING Kla5 from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:35,136 [main:110] - replacement of prope1 of type Kla5 is Kla5()
2021-03-11 11:38:35,259 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:38:35,259 [main:66] - Compilation checking started
2021-03-11 11:38:35,936 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    var c = disableAssertions()
fu1 {
        fu0 {
            prope1.fu11()
            Kla5().fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == (disableAssertions()).equals("sinqq").xor(true) } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        -524097777
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:35,938 [main:103] - replacing (this, Kla2)
2021-03-11 11:38:35,938 [main:38] - replacing this Kla2
2021-03-11 11:38:35,938 [main:42] - Getting value of type Kla2
2021-03-11 11:38:36,068 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-11 11:38:36,071 [main:112] - generating klass Kla2 text = class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
this.prope3 = "vypqe"
    }

    var prope3: Any? = null
}
2021-03-11 11:38:36,071 [main:46] - GENERATED VALUE OF TYPE Kla2 = Kla2()
2021-03-11 11:38:36,071 [main:49] - GENERATED IS CALL =true
2021-03-11 11:38:36,083 [main:55] - randomType = Kla4
2021-03-11 11:38:36,222 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:38:36,225 [main:112] - generating klass Kla4 text = class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == (disableAssertions()).equals("sinqq").xor(true) } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-11 11:38:36,236 [main:94] - GETTING Kla2 from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:36,242 [main:94] - GETTING Kla2 from CheckerJvmAssertInlineFunctionAssertionsDisabled
2021-03-11 11:38:36,242 [main:110] - replacement of this of type Kla2 is Kla2()
2021-03-11 11:38:36,385 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:38:36,385 [main:66] - Compilation checking started
2021-03-11 11:38:37,034 [main:53] - Result = true
Text:
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


inline fun inlineMe() {
    assert(false) { "FROM INLINED" }
}

class CheckerJvmAssertInlineFunctionAssertionsDisabled {
    fun check() {
        inlineMe()
        assert(false) { "FROM INLINESITE" }
    }
}

class Dummy

fun disableAssertions(): CheckerJvmAssertInlineFunctionAssertionsDisabled {
    val loader = Dummy::class.java.classLoader
    loader.setClassAssertionStatus("CheckerJvmAssertInlineFunctionAssertionsDisabled", false)
    loader.setClassAssertionStatus("InlineKt", false)
    val c = loader.loadClass("CheckerJvmAssertInlineFunctionAssertionsDisabled")
    return c.newInstance() as CheckerJvmAssertInlineFunctionAssertionsDisabled
}

fun box(): String {
    var c = disableAssertions()
    c.check()
    return "OK"
}

interface Kla0 {
    suspend fun fu4()
}

suspend inline fun fu0(crossinline c: suspend () -> Unit) {
    val prope2 = object : Kla0 {
        override suspend fun fu4() {
            c()
            c()
        }
    }
    prope2.fu4()
    prope2.fu4()
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla6)
}

fun box875(): String {
    var c = disableAssertions()
fu1 {
        fu0 {
            prope1.fu11()
            Kla5().fu11()
        }
    }
    prope1.fu12(numberOfSuspensions = 8)
    return "OK"
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla1(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla7 : Kla1()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla2 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        var c = disableAssertions()
Kla2().prope3 = "vypqe"
    }

    var prope3: Any? = null
}

abstract class Kla3<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        var c = disableAssertions()
if ((disableAssertions()).equals("itsqi")) {
            resume(prope3.getOrThrow())
        } else {
            fu5(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu5(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla4 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu7() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu7(it)
    }

    fun fu7(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu8(method: String) {
        var c = disableAssertions()
prope4.find { (disableAssertions()).equals("fcyta").equals("fgbxn") }?.let { error("aycmd" + it + " has state-machine " +
                prope4.joinToString(separator = (7054733961238324387.toULong()).toLong().toString(28116378))) }
    }

    fun fu9(method: String) {
        var c = disableAssertions()
prope4.find { it?.methodName?.startsWith((hashSetOf<LinkedHashSet<UShort>>(linkedSetOf<UShort>())).toArray().contentToString()) == (disableAssertions()).equals("sinqq").xor(true) } ?: error("uogwk" + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope0 = Kla4()

class Kla5 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu10() {
        var c = disableAssertions()
prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu11() = suspendCoroutine<Unit> { c ->
        -524097777
        prope7 = { c.resume(Unit) }
    }

    fun fu12(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var c = disableAssertions()
for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("ckrzj" + i + ", got " + prope5)
            prope7()
        }
        if ((17643.toUShort()).toDouble().isFinite())
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((CheckerJvmAssertInlineFunctionAssertionsDisabled()).equals("jgtwr").xor(true)) error("Wrong state-machine generated: it is finished early")
        prope7()
        if (true && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla5()

object Kla6: Kla3<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope7 = {
            prope1.prope6 = true
        }
    }

    override fun fu5(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:38:37,036 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 11:38:37,037 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 11:38:37,037 [main:42] - Getting value of type SuspendFunction0<Unit>
