2021-03-12 12:40:08,712 [main:66] - Compilation checking started
2021-03-12 12:40:10,421 [main:50] - replacing block: ()-> Unit Function0<Unit>
2021-03-12 12:40:10,421 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:40:10,731 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:40:10,734 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:40:10,948 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:40:10,953 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:40:11,606 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 12:40:11,608 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 12:40:11,608 [main:302] - generating value of type = Any false depth = 5
2021-03-12 12:40:11,610 [main:95] - GENERATED = require(false, { "tmute"})
2021-03-12 12:40:11,611 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "tmute"})}
2021-03-12 12:40:11,612 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:11,616 [main:67] - randomType = Holder
2021-03-12 12:40:11,818 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:11,819 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:11,839 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 12:40:11,840 [main:66] - Compilation checking started
2021-03-12 12:40:12,706 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit = { require(false, { "tmute"})}, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:12,707 [main:50] - replacing finallyBlock1: ()-> Unit Function0<Unit>
2021-03-12 12:40:12,707 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:40:12,872 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:40:12,873 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:40:13,105 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:40:13,109 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:40:13,483 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 12:40:13,484 [main:95] - GENERATED = require(false)
2021-03-12 12:40:13,484 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 12:40:13,485 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:14,010 [main:67] - randomType = List<UByte>
2021-03-12 12:40:14,010 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 12:40:14,034 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 12:40:14,035 [main:66] - Compilation checking started
2021-03-12 12:40:14,423 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit = { require(false, { "tmute"})}, finallyBlock1: ()-> Unit = block) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:14,424 [main:50] - replacing h: Holder Holder
2021-03-12 12:40:14,424 [main:54] - Getting value of type Holder
2021-03-12 12:40:14,575 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:14,576 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:14,577 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:40:14,577 [main:61] - GENERATED IS CALL =true
2021-03-12 12:40:14,759 [main:67] - randomType = Double
2021-03-12 12:40:14,903 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:40:15,036 [main:106] - GETTING Holder from Function0<Unit>
2021-03-12 12:40:15,058 [main:106] - GETTING Holder from Function0<Unit>
2021-03-12 12:40:15,058 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 12:40:15,059 [main:66] - Compilation checking started
2021-03-12 12:40:15,678 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit = { require(false, { "tmute"})}, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder = Holder(), doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:15,678 [main:50] - replacing doReturn: Int Int
2021-03-12 12:40:15,678 [main:54] - Getting value of type Int
2021-03-12 12:40:15,877 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:15,877 [main:58] - GENERATED VALUE OF TYPE Int = 1790749164
2021-03-12 12:40:15,878 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:15,880 [main:67] - randomType = Holder
2021-03-12 12:40:16,017 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:16,018 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:16,027 [main:78] - Generated call from random type = (Holder()).value.length
2021-03-12 12:40:16,028 [main:106] - GETTING Int from Function0<Unit>
2021-03-12 12:40:16,044 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@18200746], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]]
2021-03-12 12:40:16,044 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@18200746]
2021-03-12 12:40:16,190 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:16,190 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]
2021-03-12 12:40:16,334 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:16,336 [main:117] - GENERATED CALL = (finallyBlock1).equals("doptp").compareTo(false)
2021-03-12 12:40:16,337 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 12:40:16,337 [main:66] - Compilation checking started
2021-03-12 12:40:16,749 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit = { require(false, { "tmute"})}, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder = Holder(), doReturn: Int = (finallyBlock1).equals("doptp").compareTo(false)): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:16,750 [main:50] - replacing h: Holder Holder
2021-03-12 12:40:16,750 [main:54] - Getting value of type Holder
2021-03-12 12:40:16,897 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:16,898 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:16,898 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:40:16,898 [main:61] - GENERATED IS CALL =true
2021-03-12 12:40:17,043 [main:67] - randomType = Short
2021-03-12 12:40:17,166 [main:302] - generating value of type = Short true depth = 0
2021-03-12 12:40:17,231 [main:106] - GETTING Holder from Int
2021-03-12 12:40:17,283 [main:106] - GETTING Holder from Holder
2021-03-12 12:40:17,287 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 12:40:17,288 [main:66] - Compilation checking started
2021-03-12 12:40:17,853 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit = { require(false, { "tmute"})}, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder = Holder(), doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder = Holder(), doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:17,853 [main:50] - replacing doReturn: Int Int
2021-03-12 12:40:17,853 [main:54] - Getting value of type Int
2021-03-12 12:40:18,002 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:18,003 [main:58] - GENERATED VALUE OF TYPE Int = -1973808774
2021-03-12 12:40:18,003 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:18,005 [main:67] - randomType = Holder
2021-03-12 12:40:18,133 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:18,133 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:18,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57605b53]
2021-03-12 12:40:18,269 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:18,429 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:18,430 [main:78] - Generated call from random type = (Holder()).value.compareTo("hgakt", false)
2021-03-12 12:40:18,431 [main:106] - GETTING Int from Holder
2021-03-12 12:40:18,439 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@35e4fcd7], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9]]
2021-03-12 12:40:18,440 [main:117] - GENERATED CALL = (h).value.length
2021-03-12 12:40:18,440 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@35e4fcd7], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57605b53]]
2021-03-12 12:40:18,440 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@57605b53]
2021-03-12 12:40:18,570 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:18,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:18,713 [main:117] - GENERATED CALL = (h).value.compareTo("iabzr", true)
2021-03-12 12:40:18,714 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@35e4fcd7], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b388a00]]
2021-03-12 12:40:18,714 [main:149] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b388a00]
2021-03-12 12:40:18,714 [main:117] - GENERATED CALL = (h).value.toInt()
2021-03-12 12:40:18,714 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@758f426], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]]
2021-03-12 12:40:18,715 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@758f426]
2021-03-12 12:40:18,859 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:18,860 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]
2021-03-12 12:40:19,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:19,055 [main:117] - GENERATED CALL = (h).equals("amwxg").compareTo(false)
2021-03-12 12:40:19,055 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 12:40:19,055 [main:66] - Compilation checking started
2021-03-12 12:40:19,558 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit = { require(false, { "tmute"})}, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder = Holder(), doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder = Holder(), doReturn: Int = (h).equals("amwxg").compareTo(false)): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:19,839 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:20,083 [main:43] - GENERATING CALL OF public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}
2021-03-12 12:40:20,083 [main:61] - WITHOUT TYPE PARAMS = public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}
2021-03-12 12:40:20,554 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 12:40:20,555 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 12:40:20,702 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:40:20,706 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:40:20,996 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 12:40:20,997 [main:95] - GENERATED = require(true)
2021-03-12 12:40:20,998 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 12:40:20,998 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 12:40:21,170 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:40:21,174 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:40:21,449 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 12:40:21,450 [main:95] - GENERATED = require(false)
2021-03-12 12:40:21,450 [main:95] - GENERATED = doCall({ require(true)}, { require(false)})
2021-03-12 12:40:21,598 [main:43] - GENERATING CALL OF fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}
2021-03-12 12:40:21,599 [main:61] - WITHOUT TYPE PARAMS = fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}
2021-03-12 12:40:21,722 [main:302] - generating value of type = Holder false depth = 1
2021-03-12 12:40:21,722 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:21,723 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:40:21,723 [main:95] - GENERATED = test1(Holder(), 554748738)
2021-03-12 12:40:21,836 [main:43] - GENERATING CALL OF fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}
2021-03-12 12:40:21,837 [main:61] - WITHOUT TYPE PARAMS = fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}
2021-03-12 12:40:21,956 [main:302] - generating value of type = Holder false depth = 1
2021-03-12 12:40:21,957 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:21,957 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:40:21,958 [main:95] - GENERATED = test2(Holder(), -1516755372)
2021-03-12 12:40:22,081 [main:45] - Trying to change 95 nodes
2021-03-12 12:40:22,084 [main:53] - replacing (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY", Boolean)
2021-03-12 12:40:22,085 [main:50] - replacing test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" Boolean
2021-03-12 12:40:22,085 [main:54] - Getting value of type Boolean
2021-03-12 12:40:22,224 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:22,225 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 12:40:22,225 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:22,228 [main:67] - randomType = Holder
2021-03-12 12:40:22,375 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:22,376 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:22,386 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6851b4]
2021-03-12 12:40:22,524 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:22,525 [main:78] - Generated call from random type = (Holder()).value.startsWith(test10, false)
2021-03-12 12:40:22,525 [main:61] - replacement of test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" of type Boolean is (Holder()).value.startsWith(test10, false)
2021-03-12 12:40:22,635 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:22,636 [main:66] - Compilation checking started
2021-03-12 12:40:23,140 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:40:23,142 [main:53] - replacing (h.value, String)
2021-03-12 12:40:23,142 [main:50] - replacing h.value String
2021-03-12 12:40:23,142 [main:54] - Getting value of type String
2021-03-12 12:40:23,252 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:23,252 [main:58] - GENERATED VALUE OF TYPE String = "tnlzz"
2021-03-12 12:40:23,252 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:23,731 [main:67] - randomType = Function1<HashSet<Byte>, UByte>
2021-03-12 12:40:23,731 [main:106] - GETTING String from String
2021-03-12 12:40:23,769 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:40:23,770 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:23,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:23,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:23,993 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:40:24,106 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:40:24,255 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 12:40:24,257 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 12:40:24,507 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:40:24,509 [main:95] - GENERATED = Regex("wrgmk")
2021-03-12 12:40:24,627 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:24,629 [main:117] - GENERATED CALL = (test2).subSequence(-1031705084, 771667550).replaceFirst(Regex("wrgmk"), "aycma")
2021-03-12 12:40:24,629 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:40:24,629 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:40:24,747 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:24,866 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:24,976 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:24,978 [main:117] - GENERATED CALL = (test2).replace('', '䨙', false)
2021-03-12 12:40:24,978 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:40:24,978 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:40:25,089 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:40:25,234 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:25,236 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:25,470 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:40:25,578 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:25,580 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:25,858 [main:302] - generating value of type = Int true depth = 6
2021-03-12 12:40:25,859 [main:95] - GENERATED = StringBuilder(-1365503052)
2021-03-12 12:40:25,860 [main:95] - GENERATED = StringBuilder(StringBuilder(-1365503052))
2021-03-12 12:40:25,966 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:25,967 [main:117] - GENERATED CALL = (test2).commonSuffixWith(StringBuilder(StringBuilder(-1365503052)), true)
2021-03-12 12:40:25,967 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]]
2021-03-12 12:40:25,968 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:40:26,068 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:26,069 [main:117] - GENERATED CALL = (test2).substringAfter('뺺', test1(Holder(), 554748738))
2021-03-12 12:40:26,069 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:40:26,069 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:40:26,186 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:26,319 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:26,320 [main:117] - GENERATED CALL = (test2).removeRange(1973806933, -116780718)
2021-03-12 12:40:26,321 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:40:26,321 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:40:26,424 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:40:26,527 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:26,528 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:26,787 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:40:26,788 [main:95] - GENERATED = StringBuilder(1305879000)
2021-03-12 12:40:26,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:26,886 [main:117] - GENERATED CALL = (test2).commonPrefixWith(StringBuilder(1305879000), false)
2021-03-12 12:40:26,886 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:40:26,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:40:26,887 [main:117] - GENERATED CALL = (test2).toUpperCase()
2021-03-12 12:40:26,887 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:40:26,887 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:40:26,887 [main:117] - GENERATED CALL = (test2).lowercase()
2021-03-12 12:40:26,888 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]]
2021-03-12 12:40:26,888 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]
2021-03-12 12:40:26,995 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 12:40:27,110 [main:43] - GENERATING CALL OF fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 12:40:27,112 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(elements: Int): Iterable<Int> = TODO()
2021-03-12 12:40:27,214 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:40:27,215 [main:95] - GENERATED = mutableListOf<Int>(1528417106)
2021-03-12 12:40:27,215 [main:117] - GENERATED CALL = (test2).slice(mutableListOf<Int>(1528417106))
2021-03-12 12:40:27,215 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]]
2021-03-12 12:40:27,215 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:27,313 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:27,314 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]
2021-03-12 12:40:27,314 [main:117] - GENERATED CALL = (test2).get(1151973661).titlecase()
2021-03-12 12:40:27,314 [main:61] - replacement of h.value of type String is (test2).commonPrefixWith(StringBuilder(1305879000), false)
2021-03-12 12:40:27,426 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:27,427 [main:66] - Compilation checking started
2021-03-12 12:40:27,853 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:27,856 [main:53] - replacing (test21, String)
2021-03-12 12:40:27,856 [main:50] - replacing test21 String
2021-03-12 12:40:27,856 [main:54] - Getting value of type String
2021-03-12 12:40:27,965 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:27,966 [main:58] - GENERATED VALUE OF TYPE String = "sqvqh"
2021-03-12 12:40:27,966 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:28,327 [main:67] - randomType = HashSet<Double?>
2021-03-12 12:40:28,437 [main:302] - generating value of type = HashSet<Double?> false depth = 0
2021-03-12 12:40:28,551 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Double?): HashSet<Double?> = TODO()
2021-03-12 12:40:28,553 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Double?): HashSet<Double?> = TODO()
2021-03-12 12:40:28,661 [main:302] - generating value of type = Double true depth = 3
2021-03-12 12:40:28,662 [main:95] - GENERATED = linkedSetOf<Double?>(0.00998512447883737)
2021-03-12 12:40:28,873 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@5bf30453]
2021-03-12 12:40:28,873 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@52f3c809]
2021-03-12 12:40:28,874 [main:78] - Generated call from random type = (linkedSetOf<Double?>(0.00998512447883737)).toArray().contentDeepToString()
2021-03-12 12:40:28,875 [main:106] - GETTING String from Holder
2021-03-12 12:40:28,883 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:40:28,883 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:40:28,884 [main:117] - GENERATED CALL = (h).value.concat(test21)
2021-03-12 12:40:28,884 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1f0b38]]
2021-03-12 12:40:28,884 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1f0b38]
2021-03-12 12:40:28,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:28,996 [main:117] - GENERATED CALL = (h).value.take(-748414086)
2021-03-12 12:40:28,996 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:40:28,997 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:40:28,997 [main:117] - GENERATED CALL = (h).value.trimMargin(test11)
2021-03-12 12:40:28,997 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]]
2021-03-12 12:40:28,997 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]
2021-03-12 12:40:29,109 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:29,110 [main:117] - GENERATED CALL = (h).value.substringBeforeLast('丨', value)
2021-03-12 12:40:29,110 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:40:29,110 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:40:29,111 [main:117] - GENERATED CALL = (h).value.trimStart()
2021-03-12 12:40:29,111 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]]
2021-03-12 12:40:29,111 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]
2021-03-12 12:40:29,214 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:29,320 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:29,321 [main:117] - GENERATED CALL = (h).value.substringAfterLast('釘', "rdxrq")
2021-03-12 12:40:29,322 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:40:29,322 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:40:29,322 [main:117] - GENERATED CALL = (h).value.replaceIndent(test21)
2021-03-12 12:40:29,322 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]]
2021-03-12 12:40:29,323 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]
2021-03-12 12:40:29,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:29,613 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:29,614 [main:117] - GENERATED CALL = (h).value.padStart(694096299, '灏')
2021-03-12 12:40:29,614 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:40:29,614 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:40:29,615 [main:117] - GENERATED CALL = (h).value.toUpperCase()
2021-03-12 12:40:29,615 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]]
2021-03-12 12:40:29,615 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]
2021-03-12 12:40:29,726 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 12:40:29,838 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 12:40:29,840 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): Iterable<Int> = TODO()
2021-03-12 12:40:29,989 [main:95] - GENERATED = linkedSetOf<Int>()
2021-03-12 12:40:29,989 [main:117] - GENERATED CALL = (h).value.slice(linkedSetOf<Int>())
2021-03-12 12:40:29,989 [main:61] - replacement of test21 of type String is (h).value.slice(linkedSetOf<Int>())
2021-03-12 12:40:30,121 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:30,121 [main:66] - Compilation checking started
2021-03-12 12:40:30,700 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:30,702 [main:53] - replacing (h.value, String)
2021-03-12 12:40:30,703 [main:50] - replacing h.value String
2021-03-12 12:40:30,703 [main:54] - Getting value of type String
2021-03-12 12:40:30,826 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:30,827 [main:58] - GENERATED VALUE OF TYPE String = "znosi"
2021-03-12 12:40:30,827 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:30,830 [main:67] - randomType = Holder
2021-03-12 12:40:30,945 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:30,945 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:30,954 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]
2021-03-12 12:40:31,087 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:31,089 [main:78] - Generated call from random type = (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372))
2021-03-12 12:40:31,090 [main:61] - replacement of h.value of type String is (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372))
2021-03-12 12:40:31,231 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:31,232 [main:66] - Compilation checking started
2021-03-12 12:40:31,719 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:31,722 [main:53] - replacing (test1(h, 1), String)
2021-03-12 12:40:31,723 [main:50] - replacing test1(h, 1) String
2021-03-12 12:40:31,723 [main:54] - Getting value of type String
2021-03-12 12:40:31,858 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:31,859 [main:58] - GENERATED VALUE OF TYPE String = "fuqbt"
2021-03-12 12:40:31,859 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:31,988 [main:67] - randomType = Holder?
2021-03-12 12:40:32,110 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:32,111 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:32,125 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:40:32,126 [main:78] - Generated call from random type = (Holder())?.value.uppercase()
2021-03-12 12:40:32,126 [main:106] - GETTING String from String
2021-03-12 12:40:32,177 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]]
2021-03-12 12:40:32,177 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]
2021-03-12 12:40:32,317 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:32,417 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:32,418 [main:117] - GENERATED CALL = (Holder().value).padStart(1904834376, '౹')
2021-03-12 12:40:32,418 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:40:32,418 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:40:32,418 [main:117] - GENERATED CALL = (Holder().value).lowercase()
2021-03-12 12:40:32,418 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]]
2021-03-12 12:40:32,418 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]
2021-03-12 12:40:32,519 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:32,520 [main:117] - GENERATED CALL = (Holder().value).substringBefore('޿', Holder().value)
2021-03-12 12:40:32,521 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]]
2021-03-12 12:40:32,521 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]
2021-03-12 12:40:32,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:32,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:32,835 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:40:32,840 [main:117] - GENERATED CALL = (Holder().value).replaceRange(-1529071302, 1933083174, "ifsfp")
2021-03-12 12:40:32,841 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]]
2021-03-12 12:40:32,841 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]
2021-03-12 12:40:32,945 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:32,946 [main:117] - GENERATED CALL = (Holder().value).plus("etwcw")
2021-03-12 12:40:32,946 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:40:32,946 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:40:32,946 [main:117] - GENERATED CALL = (Holder().value).decapitalize()
2021-03-12 12:40:32,946 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:40:32,946 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:33,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:33,187 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:33,188 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:40:33,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:33,288 [main:117] - GENERATED CALL = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
2021-03-12 12:40:33,288 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:40:33,288 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:40:33,388 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:40:33,389 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:33,390 [main:117] - GENERATED CALL = (Holder().value).dropWhile({a: Char -> true})
2021-03-12 12:40:33,390 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]]
2021-03-12 12:40:33,390 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]
2021-03-12 12:40:33,491 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:33,626 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:33,627 [main:117] - GENERATED CALL = (Holder().value).substringAfterLast('艀', "dmuwg")
2021-03-12 12:40:33,628 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]]
2021-03-12 12:40:33,628 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:33,734 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:33,735 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:40:33,736 [main:117] - GENERATED CALL = (Holder().value).get(-1034560490).uppercase()
2021-03-12 12:40:33,736 [main:61] - replacement of test1(h, 1) of type String is (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
2021-03-12 12:40:33,839 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:33,840 [main:66] - Compilation checking started
2021-03-12 12:40:34,237 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:34,240 [main:53] - replacing (h.value, String)
2021-03-12 12:40:34,241 [main:50] - replacing h.value String
2021-03-12 12:40:34,241 [main:54] - Getting value of type String
2021-03-12 12:40:34,346 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:34,347 [main:58] - GENERATED VALUE OF TYPE String = "zsjim"
2021-03-12 12:40:34,347 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:34,350 [main:67] - randomType = Holder
2021-03-12 12:40:34,463 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:34,464 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:34,471 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:40:34,472 [main:78] - Generated call from random type = (Holder()).value.decapitalize()
2021-03-12 12:40:34,472 [main:106] - GETTING String from String
2021-03-12 12:40:34,503 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7728f075]]
2021-03-12 12:40:34,503 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:34,605 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:34,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:34,708 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7728f075]
2021-03-12 12:40:34,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:34,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:34,907 [main:117] - GENERATED CALL = (value).subSequence(1474963284, -1950237644).substring(-1988669265, -1506760529)
2021-03-12 12:40:34,907 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]]
2021-03-12 12:40:34,907 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:40:34,908 [main:117] - GENERATED CALL = (value).uppercase()
2021-03-12 12:40:34,908 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e07bada]]
2021-03-12 12:40:34,908 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e07bada]
2021-03-12 12:40:34,908 [main:117] - GENERATED CALL = (value).trim()
2021-03-12 12:40:34,908 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:40:34,908 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:35,006 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:35,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:35,155 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:40:35,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:35,287 [main:117] - GENERATED CALL = (value).subSequence(1630750872, 1861959275).repeat(1988276615)
2021-03-12 12:40:35,287 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:40:35,287 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:35,385 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:35,487 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:35,488 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:40:35,585 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:40:35,731 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 12:40:35,733 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 12:40:35,946 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:40:35,947 [main:95] - GENERATED = Regex("nfgcr")
2021-03-12 12:40:35,947 [main:117] - GENERATED CALL = (value).subSequence(-1574631504, -959263042).replaceFirst(Regex("nfgcr"), test10)
2021-03-12 12:40:35,947 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]]
2021-03-12 12:40:35,947 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]
2021-03-12 12:40:35,947 [main:117] - GENERATED CALL = (value).capitalize()
2021-03-12 12:40:35,948 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49ba30f8]]
2021-03-12 12:40:35,948 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49ba30f8]
2021-03-12 12:40:36,050 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 12:40:36,051 [main:302] - generating value of type = Char true depth = 1
2021-03-12 12:40:36,052 [main:117] - GENERATED CALL = (value).replaceFirstChar({a: Char -> '횉'})
2021-03-12 12:40:36,052 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:40:36,052 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:40:36,154 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:36,155 [main:117] - GENERATED CALL = (value).length.toString(-1404275463)
2021-03-12 12:40:36,158 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:40:36,158 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:40:36,276 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:40:36,387 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:36,389 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:36,599 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:40:36,702 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:36,703 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:36,954 [main:302] - generating value of type = Int true depth = 6
2021-03-12 12:40:36,955 [main:95] - GENERATED = StringBuilder(-949448264)
2021-03-12 12:40:36,955 [main:95] - GENERATED = StringBuilder(StringBuilder(-949448264))
2021-03-12 12:40:37,053 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:37,054 [main:117] - GENERATED CALL = (value).commonPrefixWith(StringBuilder(StringBuilder(-949448264)), true)
2021-03-12 12:40:37,054 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]]
2021-03-12 12:40:37,054 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]
2021-03-12 12:40:37,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:37,247 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:37,248 [main:117] - GENERATED CALL = (value).padEnd(-390447695, '黹')
2021-03-12 12:40:37,248 [main:61] - replacement of h.value of type String is (value).subSequence(1630750872, 1861959275).repeat(1988276615)
2021-03-12 12:40:37,373 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:37,374 [main:66] - Compilation checking started
2021-03-12 12:40:37,696 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${(value).subSequence(1630750872, 1861959275).repeat(1988276615)}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:37,699 [main:53] - replacing (test11 != "OF_FINALLY1", Boolean)
2021-03-12 12:40:37,699 [main:50] - replacing test11 != "OF_FINALLY1" Boolean
2021-03-12 12:40:37,699 [main:54] - Getting value of type Boolean
2021-03-12 12:40:37,799 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:37,800 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 12:40:37,800 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:37,911 [main:67] - randomType = Holder?
2021-03-12 12:40:38,019 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:38,020 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:38,029 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@49cfc5de]
2021-03-12 12:40:38,130 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:38,130 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4244fae2]
2021-03-12 12:40:38,237 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:38,238 [main:78] - Generated call from random type = (Holder())?.equals("mwugt").or(false)
2021-03-12 12:40:38,239 [main:106] - GETTING Boolean from String
2021-03-12 12:40:38,261 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]]
2021-03-12 12:40:38,261 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]
2021-03-12 12:40:38,357 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:38,455 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:38,456 [main:117] - GENERATED CALL = (test10).contains('闋', false)
2021-03-12 12:40:38,456 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]]
2021-03-12 12:40:38,456 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]
2021-03-12 12:40:38,456 [main:117] - GENERATED CALL = (test10).isNotEmpty()
2021-03-12 12:40:38,456 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]]
2021-03-12 12:40:38,456 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]
2021-03-12 12:40:38,456 [main:117] - GENERATED CALL = (test10).isEmpty()
2021-03-12 12:40:38,456 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3f0d53]]
2021-03-12 12:40:38,456 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:38,556 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:38,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:38,655 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3f0d53]
2021-03-12 12:40:38,751 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:38,849 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:38,850 [main:117] - GENERATED CALL = (test10).subSequence(106707920, 829752694).startsWith('ଔ', true)
2021-03-12 12:40:38,850 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dff750f]]
2021-03-12 12:40:38,850 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:38,978 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:38,979 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dff750f]
2021-03-12 12:40:38,979 [main:117] - GENERATED CALL = (test10).get(-457641937).isLetterOrDigit()
2021-03-12 12:40:38,979 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d64cd]]
2021-03-12 12:40:38,979 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d64cd]
2021-03-12 12:40:38,980 [main:117] - GENERATED CALL = (test10).isBlank()
2021-03-12 12:40:38,980 [main:113] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a17e04]]
2021-03-12 12:40:38,980 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a17e04]
2021-03-12 12:40:38,980 [main:117] - GENERATED CALL = (test10).matches(test10)
2021-03-12 12:40:38,980 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]]
2021-03-12 12:40:38,980 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:39,098 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:39,197 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:39,198 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]
2021-03-12 12:40:39,198 [main:117] - GENERATED CALL = (test10).subSequence(1076405300, 275142812).isNotEmpty()
2021-03-12 12:40:39,198 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f384b62]]
2021-03-12 12:40:39,198 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:39,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:39,297 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f384b62]
2021-03-12 12:40:39,297 [main:117] - GENERATED CALL = (test10).get(9212472).isTitleCase()
2021-03-12 12:40:39,297 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc7d286]]
2021-03-12 12:40:39,297 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:39,394 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:39,395 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc7d286]
2021-03-12 12:40:39,490 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:39,634 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:39,635 [main:117] - GENERATED CALL = (test10).get(-393625494).equals('礓', false)
2021-03-12 12:40:39,636 [main:61] - replacement of test11 != "OF_FINALLY1" of type Boolean is (test10).matches(test10)
2021-03-12 12:40:39,733 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:39,733 [main:66] - Compilation checking started
2021-03-12 12:40:39,993 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if ((test10).matches(test10) || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:39,995 [main:53] - replacing ({
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            }, Function0<Unit>)
2021-03-12 12:40:39,996 [main:50] - replacing {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            } Function0<Unit>
2021-03-12 12:40:39,996 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:40:40,109 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:40:40,109 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:40:40,215 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:40:40,217 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:40:40,549 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 12:40:40,550 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 12:40:40,551 [main:302] - generating value of type = Any false depth = 5
2021-03-12 12:40:40,551 [main:95] - GENERATED = require(true, { "ktrkk"})
2021-03-12 12:40:40,551 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true, { "ktrkk"})}
2021-03-12 12:40:40,551 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:40,553 [main:67] - randomType = Holder
2021-03-12 12:40:40,653 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:40,653 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:40,662 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:40,696 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:40,698 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 12:40:40,764 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:40,765 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:40,766 [main:106] - GETTING Function0<Unit> from Holder
2021-03-12 12:40:40,774 [main:61] - replacement of {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            } of type Function0<Unit> is { require(true, { "ktrkk"})}
2021-03-12 12:40:40,879 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:40:40,879 [main:66] - Compilation checking started
2021-03-12 12:40:41,290 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:41,293 [main:53] - replacing (h.value, String)
2021-03-12 12:40:41,293 [main:50] - replacing h.value String
2021-03-12 12:40:41,293 [main:54] - Getting value of type String
2021-03-12 12:40:41,419 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:41,420 [main:58] - GENERATED VALUE OF TYPE String = "qojcu"
2021-03-12 12:40:41,420 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:41,527 [main:67] - randomType = ULong
2021-03-12 12:40:41,625 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 12:40:41,671 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@27c64ed]
2021-03-12 12:40:41,672 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d489796]
2021-03-12 12:40:41,672 [main:78] - Generated call from random type = (2009272061517920735.toULong()).toUByte().toString(doReturn)
2021-03-12 12:40:41,672 [main:106] - GETTING String from String
2021-03-12 12:40:41,706 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]]
2021-03-12 12:40:41,706 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]
2021-03-12 12:40:41,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:41,810 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).drop(1861237856)
2021-03-12 12:40:41,810 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:40:41,810 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:40:41,912 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:41,913 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).concat("nhmnz")
2021-03-12 12:40:41,913 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]]
2021-03-12 12:40:41,913 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]
2021-03-12 12:40:42,010 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:42,011 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).padEnd(doReturn, '眧')
2021-03-12 12:40:42,011 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]]
2021-03-12 12:40:42,011 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]
2021-03-12 12:40:42,012 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimIndent()
2021-03-12 12:40:42,012 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]]
2021-03-12 12:40:42,012 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:40:42,012 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).uppercase()
2021-03-12 12:40:42,012 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:40:42,012 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:40:42,013 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).lowercase()
2021-03-12 12:40:42,013 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:40:42,013 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:40:42,013 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:40:42,013 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).compareTo(test2(Holder(), -1516755372)).toString(doReturn)
2021-03-12 12:40:42,013 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:40:42,014 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:40:42,014 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).length.toString(doReturn)
2021-03-12 12:40:42,014 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]]
2021-03-12 12:40:42,014 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]
2021-03-12 12:40:42,114 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:42,115 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).substringBefore('챾', test1(Holder(), 554748738))
2021-03-12 12:40:42,115 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:40:42,116 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:40:42,227 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:40:42,227 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:42,228 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).filterIndexed({a: Int, b: Char -> true})
2021-03-12 12:40:42,228 [main:61] - replacement of h.value of type String is (test2(Holder(), -1516755372)).drop(1861237856)
2021-03-12 12:40:42,332 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:42,333 [main:66] - Compilation checking started
2021-03-12 12:40:42,597 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    (test2(Holder(), -1516755372)).drop(1861237856) += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:42,598 [main:53] - replacing (h, Holder)
2021-03-12 12:40:42,599 [main:50] - replacing h Holder
2021-03-12 12:40:42,599 [main:54] - Getting value of type Holder
2021-03-12 12:40:42,693 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:42,694 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:42,694 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:40:42,694 [main:61] - GENERATED IS CALL =true
2021-03-12 12:40:42,793 [main:67] - randomType = Double
2021-03-12 12:40:42,887 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:40:42,926 [main:106] - GETTING Holder from String
2021-03-12 12:40:42,951 [main:106] - GETTING Holder from String
2021-03-12 12:40:42,952 [main:106] - GETTING Holder from String
2021-03-12 12:40:42,952 [main:106] - GETTING Holder from Holder
2021-03-12 12:40:42,957 [main:61] - replacement of h of type Holder is h
2021-03-12 12:40:43,063 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 12:40:43,064 [main:53] - replacing (test21, String)
2021-03-12 12:40:43,064 [main:50] - replacing test21 String
2021-03-12 12:40:43,064 [main:54] - Getting value of type String
2021-03-12 12:40:43,161 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:43,161 [main:58] - GENERATED VALUE OF TYPE String = "qlahv"
2021-03-12 12:40:43,162 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:43,164 [main:67] - randomType = Holder
2021-03-12 12:40:43,257 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:43,257 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:43,263 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49ba30f8]
2021-03-12 12:40:43,358 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 12:40:43,358 [main:302] - generating value of type = Char true depth = 1
2021-03-12 12:40:43,359 [main:78] - Generated call from random type = (Holder()).value.replaceFirstChar({a: Char -> '⥤'})
2021-03-12 12:40:43,359 [main:106] - GETTING String from String
2021-03-12 12:40:43,380 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]]
2021-03-12 12:40:43,380 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:43,475 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:43,475 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]
2021-03-12 12:40:43,476 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(307175498).lowercase()
2021-03-12 12:40:43,476 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:40:43,476 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:40:43,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:43,575 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).takeLast(-300540618)
2021-03-12 12:40:43,576 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:40:43,576 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:40:43,675 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:40:43,676 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:43,677 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).dropWhile({a: Char -> false})
2021-03-12 12:40:43,677 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:40:43,677 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:40:43,786 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:40:43,901 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:43,904 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:44,105 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:40:44,204 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:44,206 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:40:44,400 [main:302] - generating value of type = Int true depth = 6
2021-03-12 12:40:44,401 [main:95] - GENERATED = StringBuilder(416764211)
2021-03-12 12:40:44,401 [main:95] - GENERATED = StringBuilder(StringBuilder(416764211))
2021-03-12 12:40:44,532 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:44,533 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).commonSuffixWith(StringBuilder(StringBuilder(416764211)), true)
2021-03-12 12:40:44,533 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]]
2021-03-12 12:40:44,533 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:40:44,628 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:44,629 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).substringAfter('垄', test1(Holder(), 554748738))
2021-03-12 12:40:44,629 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]]
2021-03-12 12:40:44,629 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]
2021-03-12 12:40:44,629 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).prependIndent(test1(Holder(), 554748738))
2021-03-12 12:40:44,629 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]]
2021-03-12 12:40:44,629 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:44,722 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:44,723 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]
2021-03-12 12:40:44,724 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(1767107452).titlecase()
2021-03-12 12:40:44,724 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:40:44,724 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:40:44,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:44,913 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:44,914 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).removeRange(-1321431751, -1628966638)
2021-03-12 12:40:44,914 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]]
2021-03-12 12:40:44,914 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:40:45,006 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:45,007 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceAfterLast('ἱ', Holder().value, test2(Holder(), -1516755372))
2021-03-12 12:40:45,007 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]]
2021-03-12 12:40:45,007 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]
2021-03-12 12:40:45,121 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:40:45,121 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:45,122 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).takeLastWhile({a: Char -> true})
2021-03-12 12:40:45,123 [main:61] - replacement of test21 of type String is (Holder()).value.replaceFirstChar({a: Char -> '⥤'})
2021-03-12 12:40:45,227 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:45,229 [main:53] - replacing ({
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            }, Function0<Unit>)
2021-03-12 12:40:45,229 [main:50] - replacing {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            } Function0<Unit>
2021-03-12 12:40:45,229 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:40:45,320 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:40:45,321 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:40:45,418 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 12:40:45,420 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 12:40:45,637 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-12 12:40:45,638 [main:302] - generating value of type = Unit false depth = 5
2021-03-12 12:40:45,805 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 12:40:45,807 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-12 12:40:46,034 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-12 12:40:46,035 [main:302] - generating value of type = Unit false depth = 9
2021-03-12 12:40:46,145 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:40:46,148 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:40:46,481 [main:302] - generating value of type = Boolean true depth = 12
2021-03-12 12:40:46,481 [main:302] - generating value of type = Function0<Any> false depth = 12
2021-03-12 12:40:46,482 [main:302] - generating value of type = Any false depth = 13
2021-03-12 12:40:46,482 [main:95] - GENERATED = require(false, { "kcuch"})
2021-03-12 12:40:46,483 [main:95] - GENERATED = contract({ require(false, { "kcuch"})})
2021-03-12 12:40:46,483 [main:95] - GENERATED = contract({ contract({ require(false, { "kcuch"})})})
2021-03-12 12:40:46,483 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ require(false, { "kcuch"})})})}
2021-03-12 12:40:46,483 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:46,598 [main:67] - randomType = LinkedHashSet<Holder>
2021-03-12 12:40:46,692 [main:302] - generating value of type = LinkedHashSet<Holder> false depth = 0
2021-03-12 12:40:46,790 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Holder): LkedHashSet<Holder> = TODO()
2021-03-12 12:40:46,792 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Holder): LkedHashSet<Holder> = TODO()
2021-03-12 12:40:46,889 [main:302] - generating value of type = Holder false depth = 3
2021-03-12 12:40:46,890 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:46,890 [main:95] - GENERATED = linkedSetOf<Holder>(Holder())
2021-03-12 12:40:47,096 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 12:40:47,161 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:47,196 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:47,198 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:47,200 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:47,201 [main:106] - GETTING Function0<Unit> from Holder
2021-03-12 12:40:47,209 [main:61] - replacement of {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            } of type Function0<Unit> is { contract({ contract({ require(false, { "kcuch"})})})}
2021-03-12 12:40:47,333 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:40:47,334 [main:66] - Compilation checking started
2021-03-12 12:40:47,616 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { contract({ contract({ require(false, { "kcuch"})})})},
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:47,619 [main:53] - replacing (h, Holder)
2021-03-12 12:40:47,619 [main:50] - replacing h Holder
2021-03-12 12:40:47,620 [main:54] - Getting value of type Holder
2021-03-12 12:40:47,732 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:47,733 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:47,733 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:40:47,733 [main:61] - GENERATED IS CALL =true
2021-03-12 12:40:47,838 [main:67] - randomType = Long
2021-03-12 12:40:47,938 [main:302] - generating value of type = Long true depth = 0
2021-03-12 12:40:47,969 [main:106] - GETTING Holder from Holder
2021-03-12 12:40:47,974 [main:61] - replacement of h of type Holder is Holder()
2021-03-12 12:40:48,068 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:40:48,068 [main:66] - Compilation checking started
2021-03-12 12:40:48,430 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:48,431 [main:53] - replacing (doReturn < 1, Boolean)
2021-03-12 12:40:48,432 [main:50] - replacing doReturn < 1 Boolean
2021-03-12 12:40:48,432 [main:54] - Getting value of type Boolean
2021-03-12 12:40:48,533 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:48,534 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 12:40:48,534 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:48,879 [main:67] - randomType = ArrayDeque<Boolean?>?
2021-03-12 12:40:48,984 [main:302] - generating value of type = ArrayDeque<Boolean?> false depth = 0
2021-03-12 12:40:49,082 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Boolean?> = TODO()
2021-03-12 12:40:49,084 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Boolean?> = TODO()
2021-03-12 12:40:49,315 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:40:49,316 [main:95] - GENERATED = ArrayDeque<Boolean?>(210432786)
2021-03-12 12:40:49,522 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.Iterable[DeserializedSimpleFunctionDescriptor@170e3f92]
2021-03-12 12:40:49,618 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:49,619 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5c1a2cee]
2021-03-12 12:40:49,712 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:49,713 [main:78] - Generated call from random type = (ArrayDeque<Boolean?>(210432786))?.equals("gbaby").xor(false)
2021-03-12 12:40:49,714 [main:106] - GETTING Boolean from Int
2021-03-12 12:40:49,748 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fbbf702], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@73b3dfe9]]
2021-03-12 12:40:49,748 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5fbbf702]
2021-03-12 12:40:49,839 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:40:49,840 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@73b3dfe9]
2021-03-12 12:40:49,933 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:49,934 [main:117] - GENERATED CALL = (doReturn).rangeTo(-20).contains(766021343)
2021-03-12 12:40:49,934 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13e4a3b2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2b7b29a4]]
2021-03-12 12:40:49,934 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13e4a3b2]
2021-03-12 12:40:50,061 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:40:50,062 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@2b7b29a4]
2021-03-12 12:40:50,168 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:50,169 [main:117] - GENERATED CALL = (doReturn).div(0.5551279191751438).equals("wctia")
2021-03-12 12:40:50,169 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cae25aa], public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5fa30871]]
2021-03-12 12:40:50,169 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cae25aa]
2021-03-12 12:40:50,169 [main:149] - GENERATING call of type public fun kotlin.Float.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5fa30871]
2021-03-12 12:40:50,169 [main:117] - GENERATED CALL = (doReturn).toFloat().isInfinite()
2021-03-12 12:40:50,169 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2898f11a], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1132be06]]
2021-03-12 12:40:50,169 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2898f11a]
2021-03-12 12:40:50,169 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1132be06]
2021-03-12 12:40:50,263 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:50,264 [main:117] - GENERATED CALL = (doReturn).toByte().equals("uheuc")
2021-03-12 12:40:50,264 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a152d8], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41053c98]]
2021-03-12 12:40:50,264 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a152d8]
2021-03-12 12:40:50,264 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41053c98]
2021-03-12 12:40:50,264 [main:117] - GENERATED CALL = (doReturn).toChar().isDigit()
2021-03-12 12:40:50,264 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a152d8], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d69eccf]]
2021-03-12 12:40:50,264 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a152d8]
2021-03-12 12:40:50,264 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d69eccf]
2021-03-12 12:40:50,264 [main:117] - GENERATED CALL = (doReturn).toChar().isUpperCase()
2021-03-12 12:40:50,264 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cae25aa], public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@686a7922]]
2021-03-12 12:40:50,264 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4cae25aa]
2021-03-12 12:40:50,265 [main:149] - GENERATING call of type public fun kotlin.Float.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@686a7922]
2021-03-12 12:40:50,265 [main:117] - GENERATED CALL = (doReturn).toFloat().isFinite()
2021-03-12 12:40:50,265 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35d80a2], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2115a2cb]]
2021-03-12 12:40:50,265 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@35d80a2]
2021-03-12 12:40:50,265 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@2115a2cb]
2021-03-12 12:40:50,360 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:50,360 [main:117] - GENERATED CALL = (doReturn).toShort().equals("axncc")
2021-03-12 12:40:50,360 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]]
2021-03-12 12:40:50,360 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:40:50,454 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]
2021-03-12 12:40:50,455 [main:117] - GENERATED CALL = (doReturn).equals(null).not()
2021-03-12 12:40:50,455 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a152d8], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b243e2d]]
2021-03-12 12:40:50,455 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@54a152d8]
2021-03-12 12:40:50,455 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b243e2d]
2021-03-12 12:40:50,455 [main:117] - GENERATED CALL = (doReturn).toChar().isWhitespace()
2021-03-12 12:40:50,455 [main:61] - replacement of doReturn < 1 of type Boolean is (doReturn).toFloat().isFinite()
2021-03-12 12:40:50,547 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:50,547 [main:66] - Compilation checking started
2021-03-12 12:40:50,906 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}"

    return "OK"
}


2021-03-12 12:40:50,908 [main:53] - replacing ("test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}", String)
2021-03-12 12:40:50,909 [main:50] - replacing "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}" String
2021-03-12 12:40:50,909 [main:54] - Getting value of type String
2021-03-12 12:40:51,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:51,020 [main:58] - GENERATED VALUE OF TYPE String = "wervw"
2021-03-12 12:40:51,020 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:51,022 [main:67] - randomType = Holder
2021-03-12 12:40:51,114 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:51,115 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:51,120 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]
2021-03-12 12:40:51,213 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:51,306 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:51,402 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:40:51,496 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:51,498 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:40:51,691 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:40:51,694 [main:95] - GENERATED = StringBuilder("kcpcn")
2021-03-12 12:40:51,695 [main:78] - Generated call from random type = (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))
2021-03-12 12:40:51,695 [main:61] - replacement of "test21: ${test21}, holder: ${(test2).commonPrefixWith(StringBuilder(1305879000), false)}" of type String is (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))
2021-03-12 12:40:51,800 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:51,800 [main:66] - Compilation checking started
2021-03-12 12:40:52,202 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:40:52,204 [main:53] - replacing (test10, String)
2021-03-12 12:40:52,205 [main:50] - replacing test10 String
2021-03-12 12:40:52,205 [main:54] - Getting value of type String
2021-03-12 12:40:52,303 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:52,304 [main:58] - GENERATED VALUE OF TYPE String = "fvbmk"
2021-03-12 12:40:52,304 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:52,305 [main:67] - randomType = Float
2021-03-12 12:40:52,402 [main:302] - generating value of type = Float true depth = 0
2021-03-12 12:40:52,444 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@dc55b28]
2021-03-12 12:40:52,540 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:40:52,541 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:40:52,635 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:52,635 [main:78] - Generated call from random type = (0.25897473f).compareTo(59).toString(-389328891)
2021-03-12 12:40:52,636 [main:106] - GETTING String from String
2021-03-12 12:40:52,654 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:40:52,654 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:40:52,755 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:52,850 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:52,851 [main:117] - GENERATED CALL = (value).removeRange(-1420212936, 819699451)
2021-03-12 12:40:52,851 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:40:52,851 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:40:52,851 [main:117] - GENERATED CALL = (value).replaceIndent(Holder().value)
2021-03-12 12:40:52,851 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:40:52,851 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:40:52,945 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:40:52,945 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:52,946 [main:117] - GENERATED CALL = (value).filterIndexed({a: Int, b: Char -> false})
2021-03-12 12:40:52,946 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:40:52,947 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:40:52,947 [main:117] - GENERATED CALL = (value).decapitalize()
2021-03-12 12:40:52,947 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]]
2021-03-12 12:40:52,947 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:40:52,947 [main:117] - GENERATED CALL = (value).uppercase()
2021-03-12 12:40:52,947 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@239e5da0]]
2021-03-12 12:40:52,947 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@239e5da0]
2021-03-12 12:40:52,947 [main:117] - GENERATED CALL = (value).replaceIndentByMargin(value, test2(Holder(), -1516755372))
2021-03-12 12:40:52,948 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca0d358]]
2021-03-12 12:40:52,948 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:53,040 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:53,134 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:53,135 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca0d358]
2021-03-12 12:40:53,227 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:40:53,323 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:40:53,325 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:40:53,647 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:40:53,648 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 12:40:53,743 [main:43] - GENERATING CALL OF fun <T> setOf(element: RegexOption): Set<RegexOption> = TODO()
2021-03-12 12:40:53,744 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(element: RegexOption): Set<RegexOption> = TODO()
2021-03-12 12:40:53,839 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 12:40:53,842 [main:95] - GENERATED = setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 12:40:53,843 [main:95] - GENERATED = Regex("iyhhh", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 12:40:53,934 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 12:40:53,935 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 12:40:54,030 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:40:54,031 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:40:54,248 [main:302] - generating value of type = String true depth = 4
2021-03-12 12:40:54,248 [main:95] - GENERATED = StringBuilder("auoda")
2021-03-12 12:40:54,249 [main:117] - GENERATED CALL = (value).subSequence(-332020443, -1960094105).replace(Regex("iyhhh", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> StringBuilder("auoda")})
2021-03-12 12:40:54,249 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:40:54,249 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:40:54,341 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:54,342 [main:117] - GENERATED CALL = (value).repeat(2048808398)
2021-03-12 12:40:54,342 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]]
2021-03-12 12:40:54,342 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]
2021-03-12 12:40:54,432 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 12:40:54,530 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 12:40:54,532 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(element: Int): Iterable<Int> = TODO()
2021-03-12 12:40:54,628 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:40:54,628 [main:95] - GENERATED = setOfNotNull<Int>(-700327427)
2021-03-12 12:40:54,629 [main:117] - GENERATED CALL = (value).slice(setOfNotNull<Int>(-700327427))
2021-03-12 12:40:54,629 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:40:54,629 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:40:54,629 [main:117] - GENERATED CALL = (value).toLowerCase()
2021-03-12 12:40:54,629 [main:61] - replacement of test10 of type String is (value).decapitalize()
2021-03-12 12:40:54,736 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:54,736 [main:66] - Compilation checking started
2021-03-12 12:40:55,009 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${(value).decapitalize()}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:40:55,011 [main:53] - replacing ({
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }, Function0<Unit>)
2021-03-12 12:40:55,011 [main:50] - replacing {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            } Function0<Unit>
2021-03-12 12:40:55,011 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:40:55,115 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:40:55,115 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:40:55,213 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:40:55,214 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:40:55,408 [main:302] - generating value of type = Any false depth = 4
2021-03-12 12:40:55,408 [main:95] - GENERATED = print("kskuc")
2021-03-12 12:40:55,408 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("kskuc")}
2021-03-12 12:40:55,408 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:55,409 [main:67] - randomType = Float
2021-03-12 12:40:55,500 [main:302] - generating value of type = Float true depth = 0
2021-03-12 12:40:55,531 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:55,560 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:55,561 [main:106] - GETTING Function0<Unit> from Holder
2021-03-12 12:40:55,569 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:55,570 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:40:55,571 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 12:40:55,608 [main:61] - replacement of {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            } of type Function0<Unit> is { print("kskuc")}
2021-03-12 12:40:55,703 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:40:55,704 [main:66] - Compilation checking started
2021-03-12 12:40:56,099 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:40:56,101 [main:53] - replacing (h.value, String)
2021-03-12 12:40:56,102 [main:50] - replacing h.value String
2021-03-12 12:40:56,102 [main:54] - Getting value of type String
2021-03-12 12:40:56,206 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:56,207 [main:58] - GENERATED VALUE OF TYPE String = "zydqe"
2021-03-12 12:40:56,207 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:56,209 [main:67] - randomType = Holder
2021-03-12 12:40:56,304 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:40:56,304 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:40:56,312 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]
2021-03-12 12:40:56,312 [main:78] - Generated call from random type = (Holder()).value.trimIndent()
2021-03-12 12:40:56,313 [main:106] - GETTING String from Holder
2021-03-12 12:40:56,320 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]]
2021-03-12 12:40:56,320 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]
2021-03-12 12:40:56,415 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:56,505 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:56,609 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:56,610 [main:117] - GENERATED CALL = (h).value.replaceBeforeLast('뇳', "hgnjq", "tnncd")
2021-03-12 12:40:56,610 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]]
2021-03-12 12:40:56,610 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]
2021-03-12 12:40:56,704 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:56,800 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:56,801 [main:117] - GENERATED CALL = (h).value.substringAfterLast('ﴷ', "tskvf")
2021-03-12 12:40:56,802 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]]
2021-03-12 12:40:56,802 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]
2021-03-12 12:40:56,891 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:40:56,892 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:56,893 [main:117] - GENERATED CALL = (h).value.takeLastWhile({a: Char -> true})
2021-03-12 12:40:56,893 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:40:56,893 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:40:56,983 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:56,984 [main:117] - GENERATED CALL = (h).value.trimMargin("sihnr")
2021-03-12 12:40:56,984 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]]
2021-03-12 12:40:56,984 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]
2021-03-12 12:40:56,984 [main:117] - GENERATED CALL = (h).value.capitalize()
2021-03-12 12:40:56,984 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]]
2021-03-12 12:40:56,985 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]
2021-03-12 12:40:57,075 [main:117] - GENERATED CALL = (h).value.plus(null)
2021-03-12 12:40:57,075 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:40:57,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:40:57,075 [main:117] - GENERATED CALL = (h).value.trimStart()
2021-03-12 12:40:57,075 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]]
2021-03-12 12:40:57,075 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]
2021-03-12 12:40:57,076 [main:117] - GENERATED CALL = (h).value.trimEnd()
2021-03-12 12:40:57,076 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:40:57,076 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:40:57,169 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:57,170 [main:117] - GENERATED CALL = (h).value.replaceBefore('㩧', test2(Holder(), -1516755372), Holder().value)
2021-03-12 12:40:57,170 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:40:57,170 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:40:57,263 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:57,264 [main:117] - GENERATED CALL = (h).value.replaceIndent("wdqhj")
2021-03-12 12:40:57,264 [main:61] - replacement of h.value of type String is (Holder()).value.trimIndent()
2021-03-12 12:40:57,391 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:57,392 [main:66] - Compilation checking started
2021-03-12 12:40:57,666 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    (Holder()).value.trimIndent() += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:40:57,667 [main:53] - replacing (h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY", Boolean)
2021-03-12 12:40:57,667 [main:50] - replacing h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" Boolean
2021-03-12 12:40:57,667 [main:54] - Getting value of type Boolean
2021-03-12 12:40:57,757 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:57,758 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 12:40:57,758 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:58,050 [main:67] - randomType = Function2<ArrayDeque<Holder>, Int?, Int>
2021-03-12 12:40:58,051 [main:106] - GETTING Boolean from String
2021-03-12 12:40:58,069 [main:113] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d64cd]]
2021-03-12 12:40:58,069 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d64cd]
2021-03-12 12:40:58,070 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).isBlank()
2021-03-12 12:40:58,070 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fae347e]]
2021-03-12 12:40:58,070 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:58,159 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:58,160 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fae347e]
2021-03-12 12:40:58,160 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase()
2021-03-12 12:40:58,161 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24553a3d]]
2021-03-12 12:40:58,161 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24553a3d]
2021-03-12 12:40:58,161 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).toBoolean()
2021-03-12 12:40:58,161 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@224f87e4]]
2021-03-12 12:40:58,161 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:40:58,264 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:58,265 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@224f87e4]
2021-03-12 12:40:58,265 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(846010672).isISOControl()
2021-03-12 12:40:58,265 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]]
2021-03-12 12:40:58,265 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]
2021-03-12 12:40:58,266 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).isEmpty()
2021-03-12 12:40:58,266 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]]
2021-03-12 12:40:58,266 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:40:58,356 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:40:58,357 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:40:58,448 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:58,448 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).compareTo("oxzet").equals("jtaeb")
2021-03-12 12:40:58,448 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]]
2021-03-12 12:40:58,448 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]
2021-03-12 12:40:58,539 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:58,631 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:58,632 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).contains('', false)
2021-03-12 12:40:58,632 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5c1a2cee]]
2021-03-12 12:40:58,632 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:40:58,721 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:40:58,722 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5c1a2cee]
2021-03-12 12:40:58,813 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:58,814 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).equals("jmkmk").xor(true)
2021-03-12 12:40:58,814 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]]
2021-03-12 12:40:58,815 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:58,906 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:59,019 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:59,020 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]
2021-03-12 12:40:59,123 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:40:59,215 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:40:59,216 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(1536778253, -1182772485).contains('ミ', true)
2021-03-12 12:40:59,216 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fc6960d]]
2021-03-12 12:40:59,216 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:40:59,305 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:59,395 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:59,395 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fc6960d]
2021-03-12 12:40:59,485 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:40:59,486 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:40:59,487 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(-627106637, -2080126241).all({a: Char -> true})
2021-03-12 12:40:59,487 [main:61] - replacement of h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" of type Boolean is (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase()
2021-03-12 12:40:59,575 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:40:59,575 [main:53] - replacing (doReturn, Int)
2021-03-12 12:40:59,575 [main:50] - replacing doReturn Int
2021-03-12 12:40:59,575 [main:54] - Getting value of type Int
2021-03-12 12:40:59,685 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:40:59,686 [main:58] - GENERATED VALUE OF TYPE Int = 1484503998
2021-03-12 12:40:59,686 [main:61] - GENERATED IS CALL =false
2021-03-12 12:40:59,791 [main:67] - randomType = Double
2021-03-12 12:40:59,881 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:40:59,921 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49eb5399]
2021-03-12 12:40:59,922 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7d7761d6]
2021-03-12 12:41:00,013 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,105 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,106 [main:78] - Generated call from random type = (0.11438589961968204).toInt().coerceIn(1703509884, -1862270754)
2021-03-12 12:41:00,107 [main:106] - GETTING Int from String
2021-03-12 12:41:00,137 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@39395d79]]
2021-03-12 12:41:00,137 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@39395d79]
2021-03-12 12:41:00,229 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,230 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).length.rotateLeft(-1695904219)
2021-03-12 12:41:00,230 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7976560c]]
2021-03-12 12:41:00,230 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:00,320 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:00,321 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7976560c]
2021-03-12 12:41:00,433 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,434 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).compareTo("qkoju").coerceAtLeast(-2108340278)
2021-03-12 12:41:00,435 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@a71bd81]]
2021-03-12 12:41:00,435 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:00,435 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).compareTo(test2(Holder(), -1516755372)).absoluteValue
2021-03-12 12:41:00,435 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c2e1acb]]
2021-03-12 12:41:00,435 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:00,534 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:00,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c2e1acb]
2021-03-12 12:41:00,536 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).compareTo("csfeo").takeLowestOneBit()
2021-03-12 12:41:00,536 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ccc384a]]
2021-03-12 12:41:00,536 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1ccc384a]
2021-03-12 12:41:00,537 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).length.countLeadingZeroBits()
2021-03-12 12:41:00,537 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44767bcb]]
2021-03-12 12:41:00,537 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44767bcb]
2021-03-12 12:41:00,627 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 12:41:00,628 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:41:00,629 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).sumOf({a: Char -> -1290500930})
2021-03-12 12:41:00,629 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@34fb622b]]
2021-03-12 12:41:00,629 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:00,719 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,720 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(-144298479).code
2021-03-12 12:41:00,720 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2499f5]]
2021-03-12 12:41:00,720 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:00,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,898 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:00,899 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.count(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2499f5]
2021-03-12 12:41:00,899 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(-1111424968, 779154086).count()
2021-03-12 12:41:00,899 [main:113] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a00b5]]
2021-03-12 12:41:00,899 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a00b5]
2021-03-12 12:41:00,989 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:01,099 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:01,200 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:01,200 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).lastIndexOf('⸚', -1866718517, true)
2021-03-12 12:41:01,201 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@79895a73]]
2021-03-12 12:41:01,201 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:01,201 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@79895a73]
2021-03-12 12:41:01,292 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:01,293 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).compareTo(Holder().value).coerceAtMost(-2108130148)
2021-03-12 12:41:01,293 [main:61] - replacement of doReturn of type Int is (test2(Holder(), -1516755372)).compareTo(test2(Holder(), -1516755372)).absoluteValue
2021-03-12 12:41:01,382 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:01,384 [main:53] - replacing (h.value, String)
2021-03-12 12:41:01,384 [main:50] - replacing h.value String
2021-03-12 12:41:01,384 [main:54] - Getting value of type String
2021-03-12 12:41:01,473 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:01,473 [main:58] - GENERATED VALUE OF TYPE String = "novdk"
2021-03-12 12:41:01,474 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:01,570 [main:67] - randomType = Holder?
2021-03-12 12:41:01,659 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:01,734 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:01,739 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:41:01,740 [main:78] - Generated call from random type = (Holder())?.value.uppercase()
2021-03-12 12:41:01,740 [main:106] - GETTING String from String
2021-03-12 12:41:01,761 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:41:01,761 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:41:01,875 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:01,876 [main:117] - GENERATED CALL = (Holder().value).replaceBefore('᷏', test1(Holder(), 554748738), value)
2021-03-12 12:41:01,876 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:41:01,876 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:41:01,977 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:01,978 [main:117] - GENERATED CALL = (Holder().value).repeat(-150228841)
2021-03-12 12:41:01,978 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]]
2021-03-12 12:41:01,978 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]
2021-03-12 12:41:02,070 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:02,071 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:02,072 [main:117] - GENERATED CALL = (Holder().value).takeWhile({a: Char -> true})
2021-03-12 12:41:02,072 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:41:02,072 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:41:02,072 [main:117] - GENERATED CALL = (Holder().value).decapitalize()
2021-03-12 12:41:02,072 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]]
2021-03-12 12:41:02,072 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]
2021-03-12 12:41:02,163 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:02,254 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:02,343 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:02,347 [main:117] - GENERATED CALL = (Holder().value).replaceRange(94892269, 1489137637, "gflqy")
2021-03-12 12:41:02,347 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]]
2021-03-12 12:41:02,347 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]
2021-03-12 12:41:02,436 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:02,437 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:02,438 [main:117] - GENERATED CALL = (Holder().value).filterNot({a: Char -> false})
2021-03-12 12:41:02,438 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:41:02,438 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:41:02,550 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:02,656 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:02,751 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:02,752 [main:117] - GENERATED CALL = (Holder().value).replaceAfter('ꡭ', "flswb", "rzpua")
2021-03-12 12:41:02,752 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:41:02,752 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:41:02,752 [main:117] - GENERATED CALL = (Holder().value).toUpperCase()
2021-03-12 12:41:02,752 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:41:02,752 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:41:02,843 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:02,844 [main:117] - GENERATED CALL = (Holder().value).replaceIndent("oegkl")
2021-03-12 12:41:02,844 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]]
2021-03-12 12:41:02,844 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]
2021-03-12 12:41:02,933 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:02,933 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:02,934 [main:117] - GENERATED CALL = (Holder().value).takeLastWhile({a: Char -> true})
2021-03-12 12:41:02,934 [main:61] - replacement of h.value of type String is (Holder().value).replaceIndent("oegkl")
2021-03-12 12:41:03,023 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:03,023 [main:66] - Compilation checking started
2021-03-12 12:41:03,376 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:03,379 [main:53] - replacing (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1", Boolean)
2021-03-12 12:41:03,379 [main:50] - replacing test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1" Boolean
2021-03-12 12:41:03,379 [main:54] - Getting value of type Boolean
2021-03-12 12:41:03,490 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:03,491 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 12:41:03,491 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:03,492 [main:67] - randomType = Boolean
2021-03-12 12:41:03,583 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:03,595 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]
2021-03-12 12:41:03,686 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:03,687 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:41:03,776 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:03,776 [main:78] - Generated call from random type = (true).compareTo(false).equals("ivhvs")
2021-03-12 12:41:03,777 [main:106] - GETTING Boolean from String
2021-03-12 12:41:03,795 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c4fa2d]]
2021-03-12 12:41:03,795 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c4fa2d]
2021-03-12 12:41:03,884 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:03,973 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:03,973 [main:117] - GENERATED CALL = (Holder().value).endsWith("pwuxt", false)
2021-03-12 12:41:03,973 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]]
2021-03-12 12:41:03,974 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:03,974 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:41:04,063 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:04,064 [main:117] - GENERATED CALL = (Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")
2021-03-12 12:41:04,064 [main:113] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]]
2021-03-12 12:41:04,064 [main:149] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61576054]
2021-03-12 12:41:04,156 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:04,267 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:04,268 [main:117] - GENERATED CALL = (Holder().value).contains('챍', false)
2021-03-12 12:41:04,268 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3f0d53]]
2021-03-12 12:41:04,268 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:04,367 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:04,458 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:04,459 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b3f0d53]
2021-03-12 12:41:04,547 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:04,636 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:04,637 [main:117] - GENERATED CALL = (Holder().value).subSequence(-418712980, -1567411049).startsWith('慧', true)
2021-03-12 12:41:04,637 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b243e2d]]
2021-03-12 12:41:04,637 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:04,726 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:04,727 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b243e2d]
2021-03-12 12:41:04,727 [main:117] - GENERATED CALL = (Holder().value).get(-7488593).isWhitespace()
2021-03-12 12:41:04,727 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]]
2021-03-12 12:41:04,727 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]
2021-03-12 12:41:04,727 [main:117] - GENERATED CALL = (Holder().value).none()
2021-03-12 12:41:04,727 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]]
2021-03-12 12:41:04,727 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:04,816 [main:117] - GENERATED CALL = (Holder().value).equals(null)
2021-03-12 12:41:04,816 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d8545b]]
2021-03-12 12:41:04,816 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:04,907 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:04,907 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d8545b]
2021-03-12 12:41:04,908 [main:117] - GENERATED CALL = (Holder().value).get(-705341035).isHighSurrogate()
2021-03-12 12:41:04,908 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]]
2021-03-12 12:41:04,908 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:05,015 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:05,016 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]
2021-03-12 12:41:05,016 [main:117] - GENERATED CALL = (Holder().value).equals("rdmdx").not()
2021-03-12 12:41:05,016 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@240bbf9d]]
2021-03-12 12:41:05,016 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:05,116 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:05,206 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:05,206 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@240bbf9d]
2021-03-12 12:41:05,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:05,298 [main:117] - GENERATED CALL = (Holder().value).subSequence(-67434287, 1583918229).hasSurrogatePairAt(555666278)
2021-03-12 12:41:05,298 [main:61] - replacement of test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1" of type Boolean is (Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")
2021-03-12 12:41:05,387 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:05,387 [main:66] - Compilation checking started
2021-03-12 12:41:05,761 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:05,764 [main:53] - replacing ("OF_FINALLY1", String)
2021-03-12 12:41:05,765 [main:50] - replacing "OF_FINALLY1" String
2021-03-12 12:41:05,765 [main:54] - Getting value of type String
2021-03-12 12:41:05,857 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:05,858 [main:58] - GENERATED VALUE OF TYPE String = "kolnb"
2021-03-12 12:41:05,858 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:05,975 [main:67] - randomType = Set<Holder>
2021-03-12 12:41:05,975 [main:106] - GETTING String from String
2021-03-12 12:41:05,994 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:41:05,994 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:41:06,084 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:06,085 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:06,085 [main:117] - GENERATED CALL = (value).dropLastWhile({a: Char -> true})
2021-03-12 12:41:06,085 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:41:06,086 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:06,176 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:06,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:06,271 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:41:06,367 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:06,461 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:06,462 [main:117] - GENERATED CALL = (value).subSequence(462452318, -1475735409).commonSuffixWith("fdwce", false)
2021-03-12 12:41:06,462 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:41:06,462 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:06,462 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:41:06,551 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:06,552 [main:117] - GENERATED CALL = (value).compareTo(test1(Holder(), 554748738)).toString(2037535774)
2021-03-12 12:41:06,552 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]]
2021-03-12 12:41:06,552 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]
2021-03-12 12:41:06,552 [main:117] - GENERATED CALL = (value).reversed()
2021-03-12 12:41:06,552 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:41:06,552 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:41:06,649 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:41:06,650 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:06,651 [main:117] - GENERATED CALL = (value).filterIndexed({a: Int, b: Char -> false})
2021-03-12 12:41:06,651 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]]
2021-03-12 12:41:06,651 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]
2021-03-12 12:41:06,742 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:06,742 [main:117] - GENERATED CALL = (value).plus("nqhfi")
2021-03-12 12:41:06,742 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]]
2021-03-12 12:41:06,742 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]
2021-03-12 12:41:06,871 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:06,971 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:06,972 [main:117] - GENERATED CALL = (value).padEnd(1106091185, '纫')
2021-03-12 12:41:06,972 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:41:06,972 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:41:06,973 [main:117] - GENERATED CALL = (value).toLowerCase()
2021-03-12 12:41:06,973 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]]
2021-03-12 12:41:06,973 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]
2021-03-12 12:41:07,063 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:07,064 [main:117] - GENERATED CALL = (value).substringBefore('괝', test1(Holder(), 554748738))
2021-03-12 12:41:07,064 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]]
2021-03-12 12:41:07,064 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:07,152 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:07,153 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:41:07,153 [main:117] - GENERATED CALL = (value).get(-998666602).uppercase()
2021-03-12 12:41:07,153 [main:61] - replacement of "OF_FINALLY1" of type String is (value).plus("nqhfi")
2021-03-12 12:41:07,241 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:07,242 [main:66] - Compilation checking started
2021-03-12 12:41:07,510 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != (value).plus("nqhfi") || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:07,511 [main:53] - replacing (test2 != "OF_FINALLY1" || (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase(), Boolean)
2021-03-12 12:41:07,511 [main:50] - replacing test2 != "OF_FINALLY1" || (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase() Boolean
2021-03-12 12:41:07,511 [main:54] - Getting value of type Boolean
2021-03-12 12:41:07,610 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:07,611 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 12:41:07,611 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:07,612 [main:67] - randomType = String
2021-03-12 12:41:07,705 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:07,735 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:07,853 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:07,854 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:41:07,947 [main:78] - Generated call from random type = ("mzkkh").compareTo("ucnbk").equals(null)
2021-03-12 12:41:07,948 [main:106] - GETTING Boolean from String
2021-03-12 12:41:07,967 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24553a3d]]
2021-03-12 12:41:07,967 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24553a3d]
2021-03-12 12:41:07,968 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).toBoolean()
2021-03-12 12:41:07,968 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]]
2021-03-12 12:41:07,968 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:08,059 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,151 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,151 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]
2021-03-12 12:41:08,152 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).subSequence(-999872037, 915873504).none()
2021-03-12 12:41:08,152 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]]
2021-03-12 12:41:08,152 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:08,242 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,333 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,334 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]
2021-03-12 12:41:08,334 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).subSequence(-1885453643, 175014420).isNotEmpty()
2021-03-12 12:41:08,334 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f8cd14]]
2021-03-12 12:41:08,334 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f8cd14]
2021-03-12 12:41:08,334 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).isNotBlank()
2021-03-12 12:41:08,334 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]]
2021-03-12 12:41:08,334 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:08,423 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,513 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,514 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]
2021-03-12 12:41:08,514 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).subSequence(-1561086097, 356630389).any()
2021-03-12 12:41:08,514 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e49769]]
2021-03-12 12:41:08,514 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:08,604 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,605 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e49769]
2021-03-12 12:41:08,605 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(-520902851).isSurrogate()
2021-03-12 12:41:08,605 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@4c8d8d80]]
2021-03-12 12:41:08,605 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:08,712 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,813 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,814 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@4c8d8d80]
2021-03-12 12:41:08,903 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).subSequence(1109125915, 619604546).equals(null)
2021-03-12 12:41:08,903 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc7d286]]
2021-03-12 12:41:08,903 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:08,992 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:08,993 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc7d286]
2021-03-12 12:41:09,086 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:09,177 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:09,178 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(983418352).equals('䝺', false)
2021-03-12 12:41:09,178 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]]
2021-03-12 12:41:09,178 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:41:09,267 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:09,267 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.equals("cixio")
2021-03-12 12:41:09,267 [main:113] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]]
2021-03-12 12:41:09,267 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]
2021-03-12 12:41:09,267 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).any()
2021-03-12 12:41:09,267 [main:61] - replacement of test2 != "OF_FINALLY1" || (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase() of type Boolean is (test1(Holder(), 554748738)).length.equals("cixio")
2021-03-12 12:41:09,357 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:09,358 [main:53] - replacing ("OK_NONLOCAL", String)
2021-03-12 12:41:09,358 [main:50] - replacing "OK_NONLOCAL" String
2021-03-12 12:41:09,358 [main:54] - Getting value of type String
2021-03-12 12:41:09,466 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:09,467 [main:58] - GENERATED VALUE OF TYPE String = "tamhu"
2021-03-12 12:41:09,467 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:09,470 [main:67] - randomType = Holder
2021-03-12 12:41:09,571 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:09,572 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:09,579 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]
2021-03-12 12:41:09,673 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:09,674 [main:78] - Generated call from random type = (Holder()).value.substringBeforeLast('?', value)
2021-03-12 12:41:09,674 [main:106] - GETTING String from String
2021-03-12 12:41:09,698 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:41:09,698 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:41:09,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:09,789 [main:117] - GENERATED CALL = (value).takeLast(-2134302737)
2021-03-12 12:41:09,789 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]]
2021-03-12 12:41:09,789 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]
2021-03-12 12:41:09,789 [main:117] - GENERATED CALL = (value).reversed()
2021-03-12 12:41:09,790 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:41:09,790 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:09,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:09,886 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:41:09,980 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:41:10,076 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 12:41:10,078 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 12:41:10,290 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:10,291 [main:95] - GENERATED = Regex("gsgds")
2021-03-12 12:41:10,292 [main:117] - GENERATED CALL = (value).subSequence(doReturn, 1330263157).replaceFirst(Regex("gsgds"), Holder().value)
2021-03-12 12:41:10,292 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:41:10,292 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:41:10,292 [main:117] - GENERATED CALL = (value).removeRange(doReturn, doReturn)
2021-03-12 12:41:10,292 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:41:10,292 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:41:10,292 [main:117] - GENERATED CALL = (value).lowercase()
2021-03-12 12:41:10,293 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@208b455]]
2021-03-12 12:41:10,293 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@208b455]
2021-03-12 12:41:10,398 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:10,399 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:10,400 [main:117] - GENERATED CALL = (value).filter({a: Char -> true})
2021-03-12 12:41:10,400 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]]
2021-03-12 12:41:10,400 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]
2021-03-12 12:41:10,490 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:10,490 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:10,491 [main:117] - GENERATED CALL = (value).takeWhile({a: Char -> true})
2021-03-12 12:41:10,491 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:41:10,491 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:10,590 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:10,591 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:41:10,680 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:10,773 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:10,774 [main:117] - GENERATED CALL = (value).subSequence(-1610495892, doReturn).commonPrefixWith(StringBuilder(), true)
2021-03-12 12:41:10,774 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:41:10,774 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:41:10,774 [main:117] - GENERATED CALL = (value).toLowerCase()
2021-03-12 12:41:10,774 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:41:10,774 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:41:10,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:10,864 [main:117] - GENERATED CALL = (value).trimMargin("zevor")
2021-03-12 12:41:10,864 [main:61] - replacement of "OK_NONLOCAL" of type String is (Holder()).value.substringBeforeLast('?', value)
2021-03-12 12:41:10,953 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:10,954 [main:66] - Compilation checking started
2021-03-12 12:41:11,260 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return (Holder()).value.substringBeforeLast('?', value)
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:11,262 [main:53] - replacing ({
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }, Function0<Unit>)
2021-03-12 12:41:11,263 [main:50] - replacing {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            } Function0<Unit>
2021-03-12 12:41:11,263 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:41:11,356 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:41:11,357 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:41:11,449 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:41:11,450 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:41:11,642 [main:302] - generating value of type = Any false depth = 4
2021-03-12 12:41:11,642 [main:95] - GENERATED = print("gxwcp")
2021-03-12 12:41:11,642 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { print("gxwcp")}
2021-03-12 12:41:11,642 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:11,644 [main:67] - randomType = Holder
2021-03-12 12:41:11,734 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:11,735 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:11,741 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 12:41:11,773 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:11,790 [main:106] - GETTING Function0<Unit> from Holder
2021-03-12 12:41:11,796 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:11,797 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:11,798 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:11,798 [main:61] - replacement of {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            } of type Function0<Unit> is { print("gxwcp")}
2021-03-12 12:41:11,887 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:41:11,887 [main:66] - Compilation checking started
2021-03-12 12:41:12,246 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:12,247 [main:53] - replacing (h.value, String)
2021-03-12 12:41:12,247 [main:50] - replacing h.value String
2021-03-12 12:41:12,247 [main:54] - Getting value of type String
2021-03-12 12:41:12,361 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:12,362 [main:58] - GENERATED VALUE OF TYPE String = "gdomm"
2021-03-12 12:41:12,362 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:12,483 [main:67] - randomType = Holder?
2021-03-12 12:41:12,567 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:12,568 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:12,574 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]
2021-03-12 12:41:12,662 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:12,666 [main:78] - Generated call from random type = (Holder())?.value.removeSurrounding("kpxvw")
2021-03-12 12:41:12,666 [main:106] - GETTING String from String
2021-03-12 12:41:12,683 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]]
2021-03-12 12:41:12,683 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]
2021-03-12 12:41:12,768 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:12,769 [main:117] - GENERATED CALL = (Holder().value).substringBeforeLast('ﲈ', Holder().value)
2021-03-12 12:41:12,769 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:41:12,769 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:41:12,769 [main:117] - GENERATED CALL = (Holder().value).toUpperCase()
2021-03-12 12:41:12,769 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:41:12,769 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:12,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:12,938 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:12,939 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:41:13,024 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:13,113 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:13,114 [main:117] - GENERATED CALL = (Holder().value).subSequence(-536182111, -279488919).commonSuffixWith(StringBuilder(), true)
2021-03-12 12:41:13,114 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]]
2021-03-12 12:41:13,114 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]
2021-03-12 12:41:13,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:13,200 [main:117] - GENERATED CALL = (Holder().value).drop(190402349)
2021-03-12 12:41:13,200 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]]
2021-03-12 12:41:13,201 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:41:13,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:13,288 [main:117] - GENERATED CALL = (Holder().value).substring(771803192)
2021-03-12 12:41:13,288 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca0d358]]
2021-03-12 12:41:13,288 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:13,397 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:13,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:13,494 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca0d358]
2021-03-12 12:41:13,584 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:41:13,674 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:41:13,675 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:41:13,944 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:13,944 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 12:41:14,036 [main:43] - GENERATING CALL OF fun <E> HashSet(): Set<RegexOption> = TODO()
2021-03-12 12:41:14,037 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): Set<RegexOption> = TODO()
2021-03-12 12:41:14,125 [main:95] - GENERATED = HashSet<RegexOption>()
2021-03-12 12:41:14,125 [main:95] - GENERATED = Regex("xvlfs", HashSet<RegexOption>())
2021-03-12 12:41:14,232 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 12:41:14,232 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 12:41:14,237 [main:117] - GENERATED CALL = (Holder().value).subSequence(-957897684, -1407693196).replace(Regex("xvlfs", HashSet<RegexOption>()), {a: MatchResult -> "vmkda"})
2021-03-12 12:41:14,237 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:41:14,237 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:41:14,333 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:14,419 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:14,504 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:14,505 [main:117] - GENERATED CALL = (Holder().value).replace('ǒ', '좬', false)
2021-03-12 12:41:14,505 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:41:14,505 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:41:14,505 [main:117] - GENERATED CALL = (Holder().value).trimStart()
2021-03-12 12:41:14,505 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:41:14,505 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:41:14,591 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:41:14,591 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:14,593 [main:117] - GENERATED CALL = (Holder().value).filterIndexed({a: Int, b: Char -> true})
2021-03-12 12:41:14,593 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:41:14,593 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:14,678 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:14,763 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:14,764 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:41:14,849 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:41:14,937 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 12:41:14,938 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 12:41:15,246 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:15,247 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 12:41:15,248 [main:95] - GENERATED = Regex("ucpso", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 12:41:15,334 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:15,335 [main:117] - GENERATED CALL = (Holder().value).subSequence(1204510486, 578682741).replaceFirst(Regex("ucpso", kotlin.text.RegexOption.IGNORE_CASE), "yexqw")
2021-03-12 12:41:15,335 [main:61] - replacement of h.value of type String is (Holder().value).subSequence(-536182111, -279488919).commonSuffixWith(StringBuilder(), true)
2021-03-12 12:41:15,420 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:15,422 [main:53] - replacing (test10, String)
2021-03-12 12:41:15,422 [main:50] - replacing test10 String
2021-03-12 12:41:15,422 [main:54] - Getting value of type String
2021-03-12 12:41:15,508 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:15,508 [main:58] - GENERATED VALUE OF TYPE String = "drzux"
2021-03-12 12:41:15,508 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:15,510 [main:67] - randomType = Holder
2021-03-12 12:41:15,598 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:15,599 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:15,604 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:41:15,604 [main:78] - Generated call from random type = (Holder()).value.trimMargin(test1(Holder(), 554748738))
2021-03-12 12:41:15,604 [main:106] - GETTING String from String
2021-03-12 12:41:15,621 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:41:15,621 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:41:15,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:15,794 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:15,795 [main:117] - GENERATED CALL = (value).removeRange(612066547, -916294263)
2021-03-12 12:41:15,795 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:41:15,795 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:41:15,910 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:15,911 [main:117] - GENERATED CALL = (value).concat("hhffx")
2021-03-12 12:41:15,911 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@208b455]]
2021-03-12 12:41:15,911 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@208b455]
2021-03-12 12:41:16,011 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:16,012 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:16,013 [main:117] - GENERATED CALL = (value).filter({a: Char -> true})
2021-03-12 12:41:16,013 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]]
2021-03-12 12:41:16,013 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]
2021-03-12 12:41:16,101 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:16,189 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:16,189 [main:117] - GENERATED CALL = (value).substringBeforeLast('ㇰ', "vmtxf")
2021-03-12 12:41:16,189 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]]
2021-03-12 12:41:16,189 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:41:16,275 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:16,360 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:16,361 [main:117] - GENERATED CALL = (value).replaceAfterLast('磱', test1(Holder(), 554748738), "tqjer")
2021-03-12 12:41:16,361 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:41:16,361 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:41:16,449 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:16,449 [main:117] - GENERATED CALL = (value).takeLast(-2064092390)
2021-03-12 12:41:16,449 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd78d5c]]
2021-03-12 12:41:16,450 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd78d5c]
2021-03-12 12:41:16,538 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:16,542 [main:117] - GENERATED CALL = (value).removeSuffix("bztjl")
2021-03-12 12:41:16,542 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:41:16,542 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:41:16,542 [main:117] - GENERATED CALL = (value).trimStart()
2021-03-12 12:41:16,542 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]]
2021-03-12 12:41:16,542 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:16,630 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:16,631 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]
2021-03-12 12:41:16,631 [main:117] - GENERATED CALL = (value).get(536201759).titlecase()
2021-03-12 12:41:16,631 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:41:16,631 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:41:16,736 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:16,834 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:16,835 [main:117] - GENERATED CALL = (value).replaceAfter('ᆲ', value, "gccfz")
2021-03-12 12:41:16,835 [main:61] - replacement of test10 of type String is (Holder()).value.trimMargin(test1(Holder(), 554748738))
2021-03-12 12:41:16,922 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:16,922 [main:66] - Compilation checking started
2021-03-12 12:41:17,263 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), 0)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:17,264 [main:53] - replacing (doReturn, Int)
2021-03-12 12:41:17,264 [main:50] - replacing doReturn Int
2021-03-12 12:41:17,264 [main:54] - Getting value of type Int
2021-03-12 12:41:17,357 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:17,357 [main:58] - GENERATED VALUE OF TYPE Int = -1485020141
2021-03-12 12:41:17,357 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:17,628 [main:67] - randomType = Array<ULong>
2021-03-12 12:41:17,714 [main:302] - generating value of type = Array<ULong> false depth = 0
2021-03-12 12:41:17,823 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<ULong> = TODO()
2021-03-12 12:41:17,825 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<ULong> = TODO()
2021-03-12 12:41:17,912 [main:95] - GENERATED = emptyArray<ULong>()
2021-03-12 12:41:17,926 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@47df4071]
2021-03-12 12:41:18,010 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:41:18,011 [main:78] - Generated call from random type = (emptyArray<ULong>()).size.plus(-22)
2021-03-12 12:41:18,012 [main:106] - GETTING Int from String
2021-03-12 12:41:18,030 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4bee9f7d]]
2021-03-12 12:41:18,030 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:18,030 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4bee9f7d]
2021-03-12 12:41:18,030 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(Holder().value).countOneBits()
2021-03-12 12:41:18,030 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78b1dc87]]
2021-03-12 12:41:18,030 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:18,030 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78b1dc87]
2021-03-12 12:41:18,117 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:41:18,118 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(Holder().value).div(19)
2021-03-12 12:41:18,118 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62ca9e62]]
2021-03-12 12:41:18,118 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62ca9e62]
2021-03-12 12:41:18,203 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:41:18,204 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.minus(-52)
2021-03-12 12:41:18,204 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@79895a73]]
2021-03-12 12:41:18,204 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@79895a73]
2021-03-12 12:41:18,288 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:18,289 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.coerceAtMost(-345273682)
2021-03-12 12:41:18,289 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c2e1acb]]
2021-03-12 12:41:18,289 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c2e1acb]
2021-03-12 12:41:18,290 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.takeLowestOneBit()
2021-03-12 12:41:18,290 [main:113] - Case = [public val kotlin.CharSequence.lastIndex: kotlin.Int defined in kotlin.text[DeserializedPropertyDescriptor@2f7c4f75]]
2021-03-12 12:41:18,290 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).lastIndex
2021-03-12 12:41:18,290 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@39395d79]]
2021-03-12 12:41:18,290 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@39395d79]
2021-03-12 12:41:18,375 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:18,375 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.rotateLeft(-955065970)
2021-03-12 12:41:18,375 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40487b38]]
2021-03-12 12:41:18,375 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:18,461 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:18,461 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40487b38]
2021-03-12 12:41:18,462 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo("gcdxj").takeHighestOneBit()
2021-03-12 12:41:18,462 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1325b6a6]]
2021-03-12 12:41:18,462 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:18,462 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1325b6a6]
2021-03-12 12:41:18,548 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:18,549 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(test1(Holder(), 554748738)).rotateRight(1252322033)
2021-03-12 12:41:18,549 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1325b6a6]]
2021-03-12 12:41:18,549 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1325b6a6]
2021-03-12 12:41:18,634 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:18,635 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.rotateRight(114313400)
2021-03-12 12:41:18,635 [main:61] - replacement of doReturn of type Int is (test1(Holder(), 554748738)).length.takeLowestOneBit()
2021-03-12 12:41:18,740 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:18,741 [main:53] - replacing (h, Holder)
2021-03-12 12:41:18,741 [main:50] - replacing h Holder
2021-03-12 12:41:18,741 [main:54] - Getting value of type Holder
2021-03-12 12:41:18,841 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:18,842 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:18,842 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:41:18,842 [main:61] - GENERATED IS CALL =true
2021-03-12 12:41:18,935 [main:67] - randomType = Holder?
2021-03-12 12:41:19,021 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:19,021 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:19,027 [main:106] - GETTING Holder from String
2021-03-12 12:41:19,044 [main:106] - GETTING Holder from String
2021-03-12 12:41:19,045 [main:106] - GETTING Holder from String
2021-03-12 12:41:19,045 [main:61] - replacement of h of type Holder is Holder()
2021-03-12 12:41:19,130 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:41:19,132 [main:53] - replacing (0, Int)
2021-03-12 12:41:19,132 [main:50] - replacing 0 Int
2021-03-12 12:41:19,132 [main:54] - Getting value of type Int
2021-03-12 12:41:19,225 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:19,225 [main:58] - GENERATED VALUE OF TYPE Int = -226145067
2021-03-12 12:41:19,226 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:19,822 [main:67] - randomType = Set<Triple<UShort, ULong, Short>>
2021-03-12 12:41:19,823 [main:106] - GETTING Int from String
2021-03-12 12:41:19,854 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]]
2021-03-12 12:41:19,854 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]
2021-03-12 12:41:19,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:19,940 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.shl(618824610)
2021-03-12 12:41:19,941 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4eebbf28]]
2021-03-12 12:41:19,941 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4eebbf28]
2021-03-12 12:41:19,941 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.countTrailingZeroBits()
2021-03-12 12:41:19,941 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b045db]]
2021-03-12 12:41:19,941 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7b045db]
2021-03-12 12:41:20,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:20,027 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.or(622285889)
2021-03-12 12:41:20,027 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13613ea5]]
2021-03-12 12:41:20,027 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:20,112 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:20,113 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13613ea5]
2021-03-12 12:41:20,113 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo("yrygw").inv()
2021-03-12 12:41:20,114 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62ca9e62]]
2021-03-12 12:41:20,114 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:20,201 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:20,202 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@62ca9e62]
2021-03-12 12:41:20,289 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:41:20,290 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo("icjyk").minus(10)
2021-03-12 12:41:20,290 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7976560c]]
2021-03-12 12:41:20,290 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7976560c]
2021-03-12 12:41:20,378 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:20,379 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)
2021-03-12 12:41:20,379 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4bee9f7d]]
2021-03-12 12:41:20,379 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:20,379 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4bee9f7d]
2021-03-12 12:41:20,380 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(test10).countOneBits()
2021-03-12 12:41:20,380 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78b1dc87]]
2021-03-12 12:41:20,380 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:20,380 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@78b1dc87]
2021-03-12 12:41:20,465 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:41:20,465 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(test10).div(114)
2021-03-12 12:41:20,465 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7d7761d6]]
2021-03-12 12:41:20,465 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:20,466 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7d7761d6]
2021-03-12 12:41:20,575 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:20,688 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:20,689 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(value).coerceIn(2024014717, 1248696963)
2021-03-12 12:41:20,690 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]]
2021-03-12 12:41:20,690 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:20,800 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:20,801 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]
2021-03-12 12:41:20,885 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:20,886 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo("mhtkq").shl(-1054364266)
2021-03-12 12:41:20,886 [main:61] - replacement of 0 of type Int is (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)
2021-03-12 12:41:20,970 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:20,971 [main:66] - Compilation checking started
2021-03-12 12:41:21,327 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613))
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:21,328 [main:53] - replacing ((Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1", Boolean)
2021-03-12 12:41:21,329 [main:50] - replacing (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1" Boolean
2021-03-12 12:41:21,329 [main:54] - Getting value of type Boolean
2021-03-12 12:41:21,422 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:21,422 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 12:41:21,422 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:22,005 [main:67] - randomType = LinkedHashMap<Holder, LinkedHashMap<UByte?, Float>>?
2021-03-12 12:41:22,103 [main:302] - generating value of type = LinkedHashMap<Holder, LinkedHashMap<UByte?, Float>> false depth = 0
2021-03-12 12:41:22,204 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Holder, LinkedHashMap<UByte?, Float>>): LkedHashMap<Holder, LkedHashMap<UByte?, Float>> = TODO()
2021-03-12 12:41:22,205 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Holder, LinkedHashMap<UByte?, Float>>): LkedHashMap<Holder, LkedHashMap<UByte?, Float>> = TODO()
2021-03-12 12:41:22,300 [main:302] - generating value of type = Pair<Holder, LinkedHashMap<UByte?, Float>> false depth = 3
2021-03-12 12:41:22,394 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Holder, second: LinkedHashMap<UByte?, Float>): Pair<Holder, LinkedHashMap<UByte?, Float>> = TODO()
2021-03-12 12:41:22,395 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Holder, second: LinkedHashMap<UByte?, Float>): Pair<Holder, LinkedHashMap<UByte?, Float>> = TODO()
2021-03-12 12:41:22,488 [main:302] - generating value of type = Holder false depth = 6
2021-03-12 12:41:22,489 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:22,489 [main:302] - generating value of type = LinkedHashMap<UByte?, Float> false depth = 6
2021-03-12 12:41:22,582 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UByte?, Float>): LkedHashMap<UByte?, Float> = TODO()
2021-03-12 12:41:22,583 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UByte?, Float>): LkedHashMap<UByte?, Float> = TODO()
2021-03-12 12:41:22,674 [main:302] - generating value of type = Pair<UByte?, Float> false depth = 9
2021-03-12 12:41:22,769 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte?, second: Float): Pair<UByte?, Float> = TODO()
2021-03-12 12:41:22,770 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte?, second: Float): Pair<UByte?, Float> = TODO()
2021-03-12 12:41:22,863 [main:302] - generating value of type = UByte true depth = 12
2021-03-12 12:41:22,863 [main:302] - generating value of type = Float true depth = 12
2021-03-12 12:41:22,864 [main:95] - GENERATED = Pair<UByte?, Float>(12.toUByte(), 0.68622595f)
2021-03-12 12:41:22,864 [main:95] - GENERATED = linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f))
2021-03-12 12:41:22,864 [main:95] - GENERATED = Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))
2021-03-12 12:41:22,864 [main:95] - GENERATED = linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f))))
2021-03-12 12:41:23,156 [main:149] - GENERATING call of type public abstract fun add(element: kotlin.collections.LinkedHashMap<kotlin.UByte?, kotlin.Float>): kotlin.Boolean defined in kotlin.collections.MutableCollection[DeserializedSimpleFunctionDescriptor@4f473a11]
2021-03-12 12:41:23,260 [main:302] - generating value of type = LinkedHashMap<UByte?, Float> false depth = 0
2021-03-12 12:41:23,363 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<UByte?, Float> = TODO()
2021-03-12 12:41:23,364 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<UByte?, Float> = TODO()
2021-03-12 12:41:23,464 [main:95] - GENERATED = linkedMapOf<UByte?, Float>()
2021-03-12 12:41:23,465 [main:78] - Generated call from random type = (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())
2021-03-12 12:41:23,466 [main:106] - GETTING Boolean from String
2021-03-12 12:41:23,485 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6851b4]]
2021-03-12 12:41:23,485 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6851b4]
2021-03-12 12:41:23,574 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:23,575 [main:117] - GENERATED CALL = (Holder().value).startsWith(value, true)
2021-03-12 12:41:23,575 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f8cd14]]
2021-03-12 12:41:23,575 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@13f8cd14]
2021-03-12 12:41:23,575 [main:117] - GENERATED CALL = (Holder().value).isNotBlank()
2021-03-12 12:41:23,576 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]]
2021-03-12 12:41:23,576 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:23,665 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:23,665 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]
2021-03-12 12:41:23,665 [main:117] - GENERATED CALL = (Holder().value).equals("gjkjj").not()
2021-03-12 12:41:23,665 [main:113] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fc6960d]]
2021-03-12 12:41:23,665 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5fc6960d]
2021-03-12 12:41:23,755 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:23,755 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:23,756 [main:117] - GENERATED CALL = (Holder().value).all({a: Char -> false})
2021-03-12 12:41:23,756 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fae347e]]
2021-03-12 12:41:23,756 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:23,848 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:23,848 [main:149] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4fae347e]
2021-03-12 12:41:23,849 [main:117] - GENERATED CALL = (Holder().value).get(1349351599).isLowerCase()
2021-03-12 12:41:23,849 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d64cd]]
2021-03-12 12:41:23,849 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:23,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:24,031 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:24,032 [main:149] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d64cd]
2021-03-12 12:41:24,032 [main:117] - GENERATED CALL = (Holder().value).subSequence(-496223946, 598302526).isBlank()
2021-03-12 12:41:24,032 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c4fa2d]]
2021-03-12 12:41:24,032 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c4fa2d]
2021-03-12 12:41:24,124 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:24,125 [main:117] - GENERATED CALL = (Holder().value).endsWith(test2(Holder(), -1516755372), false)
2021-03-12 12:41:24,125 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]]
2021-03-12 12:41:24,125 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:24,219 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:24,220 [main:117] - GENERATED CALL = (Holder().value).equals("fjbft")
2021-03-12 12:41:24,220 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]]
2021-03-12 12:41:24,220 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:41:24,345 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:24,345 [main:117] - GENERATED CALL = (Holder().value).length.equals("ebzxm")
2021-03-12 12:41:24,346 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@224f87e4]]
2021-03-12 12:41:24,346 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:24,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:24,448 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@224f87e4]
2021-03-12 12:41:24,448 [main:117] - GENERATED CALL = (Holder().value).get(1400585069).isISOControl()
2021-03-12 12:41:24,448 [main:61] - replacement of (Holder()).value.substringBeforeLast('非', test2(Holder(), -1516755372)) != "LOCAL, OF_FINALLY1" of type Boolean is (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())
2021-03-12 12:41:24,542 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:24,543 [main:66] - Compilation checking started
2021-03-12 12:41:25,098 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613))
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:25,099 [main:53] - replacing (block, Function0<Unit>)
2021-03-12 12:41:25,100 [main:50] - replacing block Function0<Unit>
2021-03-12 12:41:25,100 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:41:25,234 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:41:25,235 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:41:25,365 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:41:25,367 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:41:25,604 [main:302] - generating value of type = Any false depth = 4
2021-03-12 12:41:25,604 [main:95] - GENERATED = println("usqyh")
2021-03-12 12:41:25,604 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("usqyh")}
2021-03-12 12:41:25,604 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:26,204 [main:67] - randomType = ArrayList<HashMap<Holder?, Short>>?
2021-03-12 12:41:26,301 [main:302] - generating value of type = ArrayList<HashMap<Holder?, Short>> false depth = 0
2021-03-12 12:41:26,401 [main:43] - GENERATING CALL OF fun <E> ArrayList(elements: kotlin.collections.Collection<HashMap<Holder?, Short>>): ArrayList<HashMap<Holder?, Short>> = TODO()
2021-03-12 12:41:26,403 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(elements: kotlin.collections.Collection<HashMap<Holder?, Short>>): ArrayList<HashMap<Holder?, Short>> = TODO()
2021-03-12 12:41:26,606 [main:302] - generating value of type = Collection<HashMap<Holder?, Short>> false depth = 3
2021-03-12 12:41:26,709 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<HashMap<Holder?, Short>>.()->kotlin.Unit): Collection<HashMap<Holder?, Short>> = TODO()
2021-03-12 12:41:26,711 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<HashMap<Holder?, Short>>.()->kotlin.Unit): Collection<HashMap<Holder?, Short>> = TODO()
2021-03-12 12:41:26,920 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<HashMap<Holder?, Short>>, Unit> false depth = 6
2021-03-12 12:41:26,921 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 12:41:27,025 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:41:27,027 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:41:27,241 [main:302] - generating value of type = Boolean true depth = 10
2021-03-12 12:41:27,242 [main:95] - GENERATED = require(true)
2021-03-12 12:41:27,243 [main:95] - GENERATED = buildSet<HashMap<Holder?, Short>>({ require(true)})
2021-03-12 12:41:27,243 [main:95] - GENERATED = ArrayList<HashMap<Holder?, Short>>(buildSet<HashMap<Holder?, Short>>({ require(true)}))
2021-03-12 12:41:27,503 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:27,523 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:27,523 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 12:41:27,533 [main:61] - replacement of block of type Function0<Unit> is { println("usqyh")}
2021-03-12 12:41:27,632 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 12:41:27,632 [main:66] - Compilation checking started
2021-03-12 12:41:28,091 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613))
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = test2(h, 0)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:28,091 [main:53] - replacing (h.value, String)
2021-03-12 12:41:28,092 [main:50] - replacing h.value String
2021-03-12 12:41:28,092 [main:54] - Getting value of type String
2021-03-12 12:41:28,215 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:28,216 [main:58] - GENERATED VALUE OF TYPE String = "nxtjd"
2021-03-12 12:41:28,216 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:28,770 [main:67] - randomType = Function2<UInt, UShort, Pair<ULong, Boolean>>
2021-03-12 12:41:28,770 [main:106] - GETTING String from String
2021-03-12 12:41:28,793 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:41:28,793 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:41:28,887 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:28,981 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:28,982 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceAfter('授', Holder().value, "egbly")
2021-03-12 12:41:28,982 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]]
2021-03-12 12:41:28,982 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]
2021-03-12 12:41:29,097 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:29,098 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:29,099 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).takeLastWhile({a: Char -> false})
2021-03-12 12:41:29,099 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]]
2021-03-12 12:41:29,099 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]
2021-03-12 12:41:29,192 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:29,288 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:29,382 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:29,383 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceFirst('됟', '汨', false)
2021-03-12 12:41:29,383 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]]
2021-03-12 12:41:29,383 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]
2021-03-12 12:41:29,477 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:29,481 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).removeSurrounding("efkrz")
2021-03-12 12:41:29,482 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:41:29,482 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:41:29,575 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:29,670 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:29,763 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:29,764 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replace('줈', 'ꑩ', true)
2021-03-12 12:41:29,764 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:41:29,764 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:41:29,865 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:29,964 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:29,965 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceBefore('汎', test1(Holder(), 554748738), "lpmoe")
2021-03-12 12:41:29,965 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]]
2021-03-12 12:41:29,965 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:41:30,057 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:30,151 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:30,152 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceAfterLast('崷', "keuad", test2(Holder(), -1516755372))
2021-03-12 12:41:30,152 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:41:30,152 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:41:30,246 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:30,367 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:30,368 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).removeRange(-786403959, -897389604)
2021-03-12 12:41:30,368 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:41:30,368 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:41:30,486 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:41:30,487 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:30,489 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).filterIndexed({a: Int, b: Char -> true})
2021-03-12 12:41:30,489 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]]
2021-03-12 12:41:30,489 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]
2021-03-12 12:41:30,591 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:30,688 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:30,689 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).padStart(336733729, '屁')
2021-03-12 12:41:30,689 [main:61] - replacement of h.value of type String is (test1(Holder(), 554748738)).replaceBefore('汎', test1(Holder(), 554748738), "lpmoe")
2021-03-12 12:41:30,783 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:30,783 [main:53] - replacing (test1(h, 1), String)
2021-03-12 12:41:30,783 [main:50] - replacing test1(h, 1) String
2021-03-12 12:41:30,783 [main:54] - Getting value of type String
2021-03-12 12:41:30,877 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:30,878 [main:58] - GENERATED VALUE OF TYPE String = "piiva"
2021-03-12 12:41:30,878 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:30,882 [main:67] - randomType = Holder
2021-03-12 12:41:30,974 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:30,975 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:30,981 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:41:31,073 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:31,168 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:31,169 [main:78] - Generated call from random type = (Holder()).value.substringAfter('挵', "utcea")
2021-03-12 12:41:31,169 [main:106] - GETTING String from String
2021-03-12 12:41:31,193 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]]
2021-03-12 12:41:31,193 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]
2021-03-12 12:41:31,288 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:31,382 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:31,512 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:31,513 [main:117] - GENERATED CALL = (Holder().value).replaceFirst('摨', '烐', true)
2021-03-12 12:41:31,513 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]]
2021-03-12 12:41:31,513 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:31,624 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:31,625 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]
2021-03-12 12:41:31,626 [main:117] - GENERATED CALL = (Holder().value).get(-1940638054).plus(test2(Holder(), -1516755372))
2021-03-12 12:41:31,626 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]]
2021-03-12 12:41:31,626 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:41:31,719 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:31,811 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:31,812 [main:117] - GENERATED CALL = (Holder().value).substringAfter('㣙', "juznc")
2021-03-12 12:41:31,812 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:41:31,812 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:41:31,903 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:31,904 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:31,905 [main:117] - GENERATED CALL = (Holder().value).dropLastWhile({a: Char -> false})
2021-03-12 12:41:31,905 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:41:31,905 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:41:31,997 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:31,998 [main:117] - GENERATED CALL = (Holder().value).replaceIndent("hsign")
2021-03-12 12:41:31,999 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:41:31,999 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:41:32,089 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:32,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:32,253 [main:117] - GENERATED CALL = (Holder().value).commonSuffixWith(StringBuilder(), false)
2021-03-12 12:41:32,253 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]]
2021-03-12 12:41:32,253 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]
2021-03-12 12:41:32,345 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:32,346 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:32,348 [main:117] - GENERATED CALL = (Holder().value).filterNot({a: Char -> true})
2021-03-12 12:41:32,348 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:41:32,348 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:41:32,438 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:32,534 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:32,651 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:32,652 [main:117] - GENERATED CALL = (Holder().value).replaceBefore('䯇', "aubol", "lbuya")
2021-03-12 12:41:32,653 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:41:32,653 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:41:32,756 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:32,758 [main:117] - GENERATED CALL = (Holder().value).length.toString(-1823323609)
2021-03-12 12:41:32,758 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]]
2021-03-12 12:41:32,758 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]
2021-03-12 12:41:32,856 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:32,857 [main:117] - GENERATED CALL = (Holder().value).dropLast(596649336)
2021-03-12 12:41:32,857 [main:61] - replacement of test1(h, 1) of type String is "piiva"
2021-03-12 12:41:32,949 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 12:41:32,951 [main:53] - replacing (test2(h, 0), String)
2021-03-12 12:41:32,951 [main:50] - replacing test2(h, 0) String
2021-03-12 12:41:32,951 [main:54] - Getting value of type String
2021-03-12 12:41:33,044 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:33,045 [main:58] - GENERATED VALUE OF TYPE String = "hmgiz"
2021-03-12 12:41:33,045 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:33,146 [main:67] - randomType = Double
2021-03-12 12:41:33,237 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:41:33,279 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1d8c0504]
2021-03-12 12:41:33,279 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:41:33,279 [main:78] - Generated call from random type = (0.9970364164071275).toChar().uppercase()
2021-03-12 12:41:33,279 [main:106] - GETTING String from String
2021-03-12 12:41:33,299 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:41:33,299 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:41:33,390 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:33,490 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:33,492 [main:117] - GENERATED CALL = (test10).removeRange(2063435812, -1718210467)
2021-03-12 12:41:33,492 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:41:33,492 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:41:33,595 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:33,596 [main:117] - GENERATED CALL = (test10).replaceAfter('뵠', value, test10)
2021-03-12 12:41:33,596 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]]
2021-03-12 12:41:33,596 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]
2021-03-12 12:41:33,708 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:33,710 [main:117] - GENERATED CALL = (test10).dropLast(797494167)
2021-03-12 12:41:33,710 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]]
2021-03-12 12:41:33,710 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:33,834 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:33,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]
2021-03-12 12:41:33,836 [main:117] - GENERATED CALL = (test10).get(-1466062811).lowercase()
2021-03-12 12:41:33,836 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]]
2021-03-12 12:41:33,836 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:41:33,960 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:34,064 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:34,065 [main:117] - GENERATED CALL = (test10).substringAfter('', "plsma")
2021-03-12 12:41:34,065 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]]
2021-03-12 12:41:34,065 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]
2021-03-12 12:41:34,167 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:34,269 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:34,270 [main:117] - GENERATED CALL = (test10).padStart(1217934723, '部')
2021-03-12 12:41:34,271 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]]
2021-03-12 12:41:34,271 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]
2021-03-12 12:41:34,375 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:34,381 [main:117] - GENERATED CALL = (test10).removePrefix("odwry")
2021-03-12 12:41:34,381 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:41:34,382 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:41:34,481 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:34,482 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:34,483 [main:117] - GENERATED CALL = (test10).dropWhile({a: Char -> true})
2021-03-12 12:41:34,483 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:41:34,483 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:41:34,483 [main:117] - GENERATED CALL = (test10).trimStart()
2021-03-12 12:41:34,483 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@239e5da0]]
2021-03-12 12:41:34,483 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@239e5da0]
2021-03-12 12:41:34,483 [main:117] - GENERATED CALL = (test10).replaceIndentByMargin(test10, test1(Holder(), 554748738))
2021-03-12 12:41:34,484 [main:61] - replacement of test2(h, 0) of type String is (test10).dropLast(797494167)
2021-03-12 12:41:34,580 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:34,581 [main:66] - Compilation checking started
2021-03-12 12:41:35,003 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613))
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:35,007 [main:53] - replacing (1, Int)
2021-03-12 12:41:35,008 [main:50] - replacing 1 Int
2021-03-12 12:41:35,008 [main:54] - Getting value of type Int
2021-03-12 12:41:35,117 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,118 [main:58] - GENERATED VALUE OF TYPE Int = -731479236
2021-03-12 12:41:35,118 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:35,120 [main:67] - randomType = Float
2021-03-12 12:41:35,237 [main:302] - generating value of type = Float true depth = 0
2021-03-12 12:41:35,268 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49eb5399]
2021-03-12 12:41:35,268 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34e9f3d6]
2021-03-12 12:41:35,363 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,365 [main:78] - Generated call from random type = (0.13159043f).toInt().ushr(989154604)
2021-03-12 12:41:35,366 [main:106] - GETTING Int from String
2021-03-12 12:41:35,391 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@358d1183]]
2021-03-12 12:41:35,391 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@358d1183]
2021-03-12 12:41:35,391 [main:117] - GENERATED CALL = (value).length.toInt()
2021-03-12 12:41:35,391 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27be49db]]
2021-03-12 12:41:35,391 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:35,482 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,574 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,575 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27be49db]
2021-03-12 12:41:35,666 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 12:41:35,667 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:41:35,669 [main:117] - GENERATED CALL = (value).subSequence(2120283312, -652897715).sumBy({a: Char -> 1539202767})
2021-03-12 12:41:35,669 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13613ea5]]
2021-03-12 12:41:35,669 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:41:35,669 [main:149] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@13613ea5]
2021-03-12 12:41:35,669 [main:117] - GENERATED CALL = (value).compareTo(test2(Holder(), -1516755372)).inv()
2021-03-12 12:41:35,669 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9]]
2021-03-12 12:41:35,669 [main:117] - GENERATED CALL = (value).length
2021-03-12 12:41:35,669 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@79895a73]]
2021-03-12 12:41:35,669 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@79895a73]
2021-03-12 12:41:35,761 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,762 [main:117] - GENERATED CALL = (value).length.coerceAtMost(452402509)
2021-03-12 12:41:35,762 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de4e21]]
2021-03-12 12:41:35,762 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:35,853 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,945 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:35,947 [main:149] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4de4e21]
2021-03-12 12:41:36,037 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 12:41:36,133 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 12:41:36,134 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 12:41:36,232 [main:302] - generating value of type = Char true depth = 3
2021-03-12 12:41:36,233 [main:95] - GENERATED = charArrayOf('㚿')
2021-03-12 12:41:36,325 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:36,452 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:36,453 [main:117] - GENERATED CALL = (value).subSequence(418239642, -888780597).lastIndexOfAny(charArrayOf('㚿'), 1916622700, false)
2021-03-12 12:41:36,453 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b4222ad]]
2021-03-12 12:41:36,453 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1b4222ad]
2021-03-12 12:41:36,453 [main:117] - GENERATED CALL = (value).length.dec()
2021-03-12 12:41:36,453 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]]
2021-03-12 12:41:36,453 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]
2021-03-12 12:41:36,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:36,565 [main:117] - GENERATED CALL = (value).length.shl(1938021981)
2021-03-12 12:41:36,566 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5de26a74]]
2021-03-12 12:41:36,566 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5de26a74]
2021-03-12 12:41:36,566 [main:117] - GENERATED CALL = (value).length.inc()
2021-03-12 12:41:36,566 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40487b38]]
2021-03-12 12:41:36,566 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@40487b38]
2021-03-12 12:41:36,566 [main:117] - GENERATED CALL = (value).length.takeHighestOneBit()
2021-03-12 12:41:36,566 [main:61] - replacement of 1 of type Int is (value).length
2021-03-12 12:41:36,661 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:36,661 [main:66] - Compilation checking started
2021-03-12 12:41:36,922 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613))
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}"

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, (value).length)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:36,924 [main:53] - replacing ("test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}", String)
2021-03-12 12:41:36,925 [main:50] - replacing "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}" String
2021-03-12 12:41:36,925 [main:54] - Getting value of type String
2021-03-12 12:41:37,017 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:37,018 [main:58] - GENERATED VALUE OF TYPE String = "xibyr"
2021-03-12 12:41:37,018 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:37,022 [main:67] - randomType = Holder
2021-03-12 12:41:37,116 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:37,117 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:37,124 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:41:37,216 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:37,217 [main:78] - Generated call from random type = (Holder()).value.takeLast(2086840853)
2021-03-12 12:41:37,217 [main:61] - replacement of "test11: ${test11}, holder: ${(Holder().value).replaceIndent("oegkl")}" of type String is (Holder()).value.takeLast(2086840853)
2021-03-12 12:41:37,309 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:37,309 [main:66] - Compilation checking started
2021-03-12 12:41:37,681 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613))
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:37,682 [main:53] - replacing (", OF_FINALLY1_FINALLY", String)
2021-03-12 12:41:37,682 [main:50] - replacing ", OF_FINALLY1_FINALLY" String
2021-03-12 12:41:37,682 [main:54] - Getting value of type String
2021-03-12 12:41:37,775 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:37,776 [main:58] - GENERATED VALUE OF TYPE String = "sqbot"
2021-03-12 12:41:37,776 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:37,893 [main:67] - randomType = UInt
2021-03-12 12:41:37,983 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 12:41:38,015 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun div(other: kotlin.ULong): kotlin.ULong defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@25bdbc7c]
2021-03-12 12:41:38,107 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 12:41:38,108 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.ULong.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@673eaf15]
2021-03-12 12:41:38,199 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:38,200 [main:78] - Generated call from random type = (155848384.toUInt()).div(5701079340404346272.toULong()).toString(-155818209)
2021-03-12 12:41:38,200 [main:106] - GETTING String from String
2021-03-12 12:41:38,219 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]]
2021-03-12 12:41:38,219 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:38,309 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:38,310 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]
2021-03-12 12:41:38,401 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:38,403 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(586191646).plus("hxjfz")
2021-03-12 12:41:38,403 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]]
2021-03-12 12:41:38,403 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]
2021-03-12 12:41:38,493 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:38,494 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceBeforeLast('', test2(Holder(), -1516755372), test1(Holder(), 554748738))
2021-03-12 12:41:38,494 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:41:38,494 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:41:38,495 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).toLowerCase()
2021-03-12 12:41:38,495 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:41:38,495 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:41:38,587 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:38,588 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:38,589 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropWhile({a: Char -> true})
2021-03-12 12:41:38,589 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:41:38,589 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:41:38,680 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:38,775 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:38,776 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).commonPrefixWith("lkvct", false)
2021-03-12 12:41:38,776 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7728f075]]
2021-03-12 12:41:38,776 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:38,868 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:38,964 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:38,965 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7728f075]
2021-03-12 12:41:39,087 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:39,201 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:39,202 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(350097735, -1385276470).substring(-1229826404, -9548201)
2021-03-12 12:41:39,202 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]]
2021-03-12 12:41:39,202 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]
2021-03-12 12:41:39,303 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:39,304 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:39,306 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).takeLastWhile({a: Char -> true})
2021-03-12 12:41:39,306 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]]
2021-03-12 12:41:39,306 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]
2021-03-12 12:41:39,306 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).capitalize()
2021-03-12 12:41:39,306 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]]
2021-03-12 12:41:39,306 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]
2021-03-12 12:41:39,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:39,495 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:39,587 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:39,684 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:41:39,686 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:41:39,878 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:41:39,879 [main:95] - GENERATED = StringBuilder(-945360591)
2021-03-12 12:41:39,879 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceRange(-242990920, 1233304142, StringBuilder(-945360591))
2021-03-12 12:41:39,880 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]]
2021-03-12 12:41:39,880 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]
2021-03-12 12:41:39,971 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:39,972 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropLast(-2106754026)
2021-03-12 12:41:39,972 [main:61] - replacement of ", OF_FINALLY1_FINALLY" of type String is (test2(Holder(), -1516755372)).toLowerCase()
2021-03-12 12:41:40,063 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:40,064 [main:53] - replacing (test10, String)
2021-03-12 12:41:40,064 [main:50] - replacing test10 String
2021-03-12 12:41:40,064 [main:54] - Getting value of type String
2021-03-12 12:41:40,180 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:40,181 [main:58] - GENERATED VALUE OF TYPE String = "rvyuh"
2021-03-12 12:41:40,181 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:40,289 [main:67] - randomType = ULong
2021-03-12 12:41:40,400 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 12:41:40,442 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toLong(): kotlin.Long defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@546aee74]
2021-03-12 12:41:40,443 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4272748]
2021-03-12 12:41:40,536 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:40,537 [main:78] - Generated call from random type = (4200360742091191455.toULong()).toLong().toString(495221665)
2021-03-12 12:41:40,537 [main:61] - replacement of test10 of type String is (4200360742091191455.toULong()).toLong().toString(495221665)
2021-03-12 12:41:40,630 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:40,631 [main:53] - replacing (test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)), String)
2021-03-12 12:41:40,632 [main:50] - replacing test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)) String
2021-03-12 12:41:40,632 [main:54] - Getting value of type String
2021-03-12 12:41:40,722 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:40,723 [main:58] - GENERATED VALUE OF TYPE String = "gdgni"
2021-03-12 12:41:40,723 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:40,919 [main:67] - randomType = Byte?
2021-03-12 12:41:41,010 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:41:41,047 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49eb5399]
2021-03-12 12:41:41,047 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:41:41,141 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:41,142 [main:78] - Generated call from random type = (98)?.toInt().toString(-1216500501)
2021-03-12 12:41:41,142 [main:61] - replacement of test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)) of type String is (98)?.toInt().toString(-1216500501)
2021-03-12 12:41:41,234 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:41,234 [main:66] - Compilation checking started
2021-03-12 12:41:41,684 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:41,687 [main:53] - replacing (test2(h, 1), String)
2021-03-12 12:41:41,688 [main:50] - replacing test2(h, 1) String
2021-03-12 12:41:41,688 [main:54] - Getting value of type String
2021-03-12 12:41:41,807 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:41,808 [main:58] - GENERATED VALUE OF TYPE String = "eanrw"
2021-03-12 12:41:41,808 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:42,109 [main:67] - randomType = Set<Double?>
2021-03-12 12:41:42,109 [main:106] - GETTING String from String
2021-03-12 12:41:42,130 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:41:42,130 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:41:42,220 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:42,221 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:42,222 [main:117] - GENERATED CALL = (Holder().value).dropLastWhile({a: Char -> true})
2021-03-12 12:41:42,222 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]]
2021-03-12 12:41:42,222 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:42,312 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:42,313 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:41:42,313 [main:117] - GENERATED CALL = (Holder().value).get(1968330198).uppercase()
2021-03-12 12:41:42,313 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1f0b38]]
2021-03-12 12:41:42,313 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1f0b38]
2021-03-12 12:41:42,402 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:42,403 [main:117] - GENERATED CALL = (Holder().value).take(2122745557)
2021-03-12 12:41:42,403 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:41:42,403 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:41:42,403 [main:117] - GENERATED CALL = (Holder().value).decapitalize()
2021-03-12 12:41:42,403 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]]
2021-03-12 12:41:42,403 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]
2021-03-12 12:41:42,494 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:42,495 [main:117] - GENERATED CALL = (Holder().value).plus("ooiia")
2021-03-12 12:41:42,495 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]]
2021-03-12 12:41:42,495 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:41:42,495 [main:117] - GENERATED CALL = (Holder().value).uppercase()
2021-03-12 12:41:42,495 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:41:42,495 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:41:42,584 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:42,680 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:41:42,681 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:41:42,870 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:42,872 [main:95] - GENERATED = StringBuilder("hjlts")
2021-03-12 12:41:43,019 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:43,020 [main:117] - GENERATED CALL = (Holder().value).commonSuffixWith(StringBuilder("hjlts"), true)
2021-03-12 12:41:43,020 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:41:43,020 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:41:43,021 [main:117] - GENERATED CALL = (Holder().value).lowercase()
2021-03-12 12:41:43,021 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]]
2021-03-12 12:41:43,021 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]
2021-03-12 12:41:43,021 [main:117] - GENERATED CALL = (Holder().value).reversed()
2021-03-12 12:41:43,021 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]]
2021-03-12 12:41:43,021 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]
2021-03-12 12:41:43,125 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:43,223 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:41:43,225 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:41:43,416 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:41:43,417 [main:95] - GENERATED = StringBuilder(-23708363)
2021-03-12 12:41:43,417 [main:117] - GENERATED CALL = (Holder().value).removePrefix(StringBuilder(-23708363))
2021-03-12 12:41:43,417 [main:61] - replacement of test2(h, 1) of type String is (Holder().value).get(1968330198).uppercase()
2021-03-12 12:41:43,506 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:43,507 [main:66] - Compilation checking started
2021-03-12 12:41:43,888 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:43,889 [main:53] - replacing ("OK_NONLOCAL", String)
2021-03-12 12:41:43,889 [main:50] - replacing "OK_NONLOCAL" String
2021-03-12 12:41:43,889 [main:54] - Getting value of type String
2021-03-12 12:41:43,998 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:43,999 [main:58] - GENERATED VALUE OF TYPE String = "csnpy"
2021-03-12 12:41:43,999 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:44,212 [main:67] - randomType = Triple<String, Holder?, Holder>
2021-03-12 12:41:44,310 [main:302] - generating value of type = Triple<String, Holder?, Holder> false depth = 0
2021-03-12 12:41:44,405 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: String, second: Holder?, third: Holder): Triple<String, Holder?, Holder> = TODO()
2021-03-12 12:41:44,407 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: String, second: Holder?, third: Holder): Triple<String, Holder?, Holder> = TODO()
2021-03-12 12:41:44,536 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:44,537 [main:302] - generating value of type = Holder false depth = 3
2021-03-12 12:41:44,537 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:44,538 [main:302] - generating value of type = Holder false depth = 3
2021-03-12 12:41:44,538 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:44,539 [main:95] - GENERATED = Triple<String, Holder?, Holder>("xbsbd", Holder(), Holder())
2021-03-12 12:41:44,552 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:41:44,552 [main:78] - Generated call from random type = (Triple<String, Holder?, Holder>("xbsbd", Holder(), Holder())).first.decapitalize()
2021-03-12 12:41:44,552 [main:106] - GETTING String from String
2021-03-12 12:41:44,569 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]]
2021-03-12 12:41:44,569 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]
2021-03-12 12:41:44,660 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:44,755 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:44,756 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).padStart(-1296465156, '鬭')
2021-03-12 12:41:44,756 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:41:44,756 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:44,847 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:44,940 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:44,941 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:41:45,031 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:41:45,126 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:41:45,127 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:41:45,420 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:45,421 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 12:41:45,520 [main:43] - GENERATING CALL OF fun <T> emptySet(): Set<RegexOption> = TODO()
2021-03-12 12:41:45,521 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptySet(): Set<RegexOption> = TODO()
2021-03-12 12:41:45,620 [main:95] - GENERATED = emptySet<RegexOption>()
2021-03-12 12:41:45,620 [main:95] - GENERATED = Regex("zisnc", emptySet<RegexOption>())
2021-03-12 12:41:45,620 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).subSequence(-1698297689, 1895096220).replaceFirst(Regex("zisnc", emptySet<RegexOption>()), Holder().value)
2021-03-12 12:41:45,620 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]]
2021-03-12 12:41:45,620 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:41:45,713 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:45,714 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).substring(-1224854154)
2021-03-12 12:41:45,714 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]]
2021-03-12 12:41:45,714 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]
2021-03-12 12:41:45,804 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:45,805 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:45,806 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).filterNot({a: Char -> false})
2021-03-12 12:41:45,806 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:41:45,806 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:41:45,806 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).toLowerCase()
2021-03-12 12:41:45,806 [main:113] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@208b455]]
2021-03-12 12:41:45,806 [main:149] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@208b455]
2021-03-12 12:41:45,927 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:45,928 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:45,929 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).filter({a: Char -> true})
2021-03-12 12:41:45,929 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:41:45,929 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:41:46,042 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:46,043 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).concat("bdjac")
2021-03-12 12:41:46,043 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]]
2021-03-12 12:41:46,043 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]
2021-03-12 12:41:46,136 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:46,136 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).plus("xzyjq")
2021-03-12 12:41:46,137 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]]
2021-03-12 12:41:46,137 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]
2021-03-12 12:41:46,137 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).reversed()
2021-03-12 12:41:46,137 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:41:46,137 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:41:46,137 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).decapitalize()
2021-03-12 12:41:46,137 [main:61] - replacement of "OK_NONLOCAL" of type String is test1(Holder(), 554748738)
2021-03-12 12:41:46,227 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(CALL_EXPRESSION)
2021-03-12 12:41:46,227 [main:53] - replacing (h.value, String)
2021-03-12 12:41:46,227 [main:50] - replacing h.value String
2021-03-12 12:41:46,227 [main:54] - Getting value of type String
2021-03-12 12:41:46,317 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:46,318 [main:58] - GENERATED VALUE OF TYPE String = "mszzt"
2021-03-12 12:41:46,318 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:46,522 [main:67] - randomType = Map<Holder?, Holder>
2021-03-12 12:41:46,522 [main:106] - GETTING String from String
2021-03-12 12:41:46,540 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]]
2021-03-12 12:41:46,540 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]
2021-03-12 12:41:46,631 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:46,725 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:41:46,727 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:41:46,915 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:41:46,916 [main:95] - GENERATED = StringBuilder("rjizm")
2021-03-12 12:41:46,916 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).removeSurrounding(StringBuilder("rjizm"))
2021-03-12 12:41:46,916 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]]
2021-03-12 12:41:46,916 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41be2180]
2021-03-12 12:41:47,007 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:47,008 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:47,009 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).takeLastWhile({a: Char -> true})
2021-03-12 12:41:47,009 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]]
2021-03-12 12:41:47,009 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]
2021-03-12 12:41:47,133 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:47,241 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:41:47,243 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:41:47,437 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:41:47,439 [main:95] - GENERATED = StringBuilder(159785993)
2021-03-12 12:41:47,439 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).removePrefix(StringBuilder(159785993))
2021-03-12 12:41:47,439 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:41:47,439 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:41:47,530 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:47,531 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimMargin("oqzdx")
2021-03-12 12:41:47,531 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:41:47,531 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:41:47,621 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:47,711 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:47,712 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceBefore('嶵', "ztfpk", test2(Holder(), -1516755372))
2021-03-12 12:41:47,712 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:41:47,712 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:41:47,713 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).toUpperCase()
2021-03-12 12:41:47,713 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:41:47,713 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:41:47,802 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:47,803 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:47,804 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropWhile({a: Char -> false})
2021-03-12 12:41:47,804 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]]
2021-03-12 12:41:47,804 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e63f302]
2021-03-12 12:41:47,893 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:47,983 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:47,984 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).padStart(2114407529, '⎒')
2021-03-12 12:41:47,984 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:41:47,984 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:41:47,984 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimStart()
2021-03-12 12:41:47,984 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:41:47,984 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:41:48,074 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:48,075 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:48,076 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropLastWhile({a: Char -> false})
2021-03-12 12:41:48,076 [main:61] - replacement of h.value of type String is (test2(Holder(), -1516755372)).removePrefix(StringBuilder(159785993))
2021-03-12 12:41:48,175 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:48,175 [main:53] - replacing (h, Holder)
2021-03-12 12:41:48,175 [main:50] - replacing h Holder
2021-03-12 12:41:48,175 [main:54] - Getting value of type Holder
2021-03-12 12:41:48,306 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:48,307 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:48,307 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:41:48,308 [main:61] - GENERATED IS CALL =true
2021-03-12 12:41:48,311 [main:67] - randomType = Holder
2021-03-12 12:41:48,416 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:48,417 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:48,425 [main:106] - GETTING Holder from String
2021-03-12 12:41:48,456 [main:106] - GETTING Holder from String
2021-03-12 12:41:48,457 [main:106] - GETTING Holder from String
2021-03-12 12:41:48,457 [main:61] - replacement of h of type Holder is Holder()
2021-03-12 12:41:48,549 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:41:48,549 [main:53] - replacing (h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY", Boolean)
2021-03-12 12:41:48,549 [main:50] - replacing h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" Boolean
2021-03-12 12:41:48,549 [main:54] - Getting value of type Boolean
2021-03-12 12:41:48,639 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:48,640 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 12:41:48,641 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:48,835 [main:67] - randomType = UShort?
2021-03-12 12:41:48,924 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 12:41:48,957 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@8b28183]
2021-03-12 12:41:48,957 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@60c416d7]
2021-03-12 12:41:48,957 [main:78] - Generated call from random type = (11031.toUShort())?.toDouble().isFinite()
2021-03-12 12:41:48,958 [main:106] - GETTING Boolean from String
2021-03-12 12:41:48,976 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41053c98]]
2021-03-12 12:41:48,976 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:49,069 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,070 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@41053c98]
2021-03-12 12:41:49,070 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(2033872813).isDigit()
2021-03-12 12:41:49,070 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]]
2021-03-12 12:41:49,070 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:49,161 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,252 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,253 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]
2021-03-12 12:41:49,253 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(398369566, 214339000).any()
2021-03-12 12:41:49,253 [main:113] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac97fd7]]
2021-03-12 12:41:49,253 [main:149] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ac97fd7]
2021-03-12 12:41:49,344 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,435 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:49,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,687 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,783 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:49,784 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).regionMatches(-738273941, "azpif", 1296287658, -761661505, false)
2021-03-12 12:41:49,784 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44cfb417]]
2021-03-12 12:41:49,784 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:49,874 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,969 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:49,970 [main:149] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44cfb417]
2021-03-12 12:41:50,059 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:50,152 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:50,153 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(1347513442, 1743060811).endsWith('攮', true)
2021-03-12 12:41:50,153 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]]
2021-03-12 12:41:50,153 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:50,244 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:50,244 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5aaac473]
2021-03-12 12:41:50,244 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).equals("wqjux").not()
2021-03-12 12:41:50,244 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc7d286]]
2021-03-12 12:41:50,244 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:50,334 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:50,335 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2cc7d286]
2021-03-12 12:41:50,427 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:50,518 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:50,519 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(901932319).equals('䅳', false)
2021-03-12 12:41:50,519 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]]
2021-03-12 12:41:50,519 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:41:50,610 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:50,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:50,733 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]
2021-03-12 12:41:50,733 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(-2080596747, -1496784311).isEmpty()
2021-03-12 12:41:50,733 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dff750f]]
2021-03-12 12:41:50,733 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:50,839 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:50,840 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5dff750f]
2021-03-12 12:41:50,840 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(-1694298636).isLetterOrDigit()
2021-03-12 12:41:50,840 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4244fae2]]
2021-03-12 12:41:50,840 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:50,934 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:50,934 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4244fae2]
2021-03-12 12:41:51,024 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:51,026 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).equals("gmsii").or(true)
2021-03-12 12:41:51,026 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d8545b]]
2021-03-12 12:41:51,026 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:51,117 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:51,118 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d8545b]
2021-03-12 12:41:51,118 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(1601447981).isHighSurrogate()
2021-03-12 12:41:51,118 [main:61] - replacement of h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" of type Boolean is (test2(Holder(), -1516755372)).equals("wqjux").not()
2021-03-12 12:41:51,210 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:51,211 [main:53] - replacing (Holder(), Holder)
2021-03-12 12:41:51,212 [main:50] - replacing Holder() Holder
2021-03-12 12:41:51,212 [main:54] - Getting value of type Holder
2021-03-12 12:41:51,303 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:51,304 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:51,305 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:41:51,305 [main:61] - GENERATED IS CALL =true
2021-03-12 12:41:51,501 [main:67] - randomType = Array<Long>
2021-03-12 12:41:51,593 [main:302] - generating value of type = Array<Long> false depth = 0
2021-03-12 12:41:51,689 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Long): Array<Long> = TODO()
2021-03-12 12:41:51,691 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Long): Array<Long> = TODO()
2021-03-12 12:41:52,028 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:41:52,029 [main:302] - generating value of type = Function1<Int, Long> false depth = 3
2021-03-12 12:41:52,030 [main:302] - generating value of type = Long true depth = 4
2021-03-12 12:41:52,031 [main:95] - GENERATED = Array<Long>(1968978456, {a: Int -> 4099887039509709863})
2021-03-12 12:41:52,046 [main:106] - GETTING Holder from String
2021-03-12 12:41:52,070 [main:106] - GETTING Holder from String
2021-03-12 12:41:52,071 [main:106] - GETTING Holder from String
2021-03-12 12:41:52,071 [main:106] - GETTING Holder from Holder
2021-03-12 12:41:52,077 [main:61] - replacement of Holder() of type Holder is h
2021-03-12 12:41:52,168 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 12:41:52,169 [main:66] - Compilation checking started
2021-03-12 12:41:52,433 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = h
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:52,434 [main:53] - replacing (finallyBlock1, Function0<Unit>)
2021-03-12 12:41:52,434 [main:50] - replacing finallyBlock1 Function0<Unit>
2021-03-12 12:41:52,434 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:41:52,527 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:41:52,528 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:41:52,623 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:41:52,625 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:41:52,816 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 12:41:52,817 [main:95] - GENERATED = check(true)
2021-03-12 12:41:52,817 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 12:41:52,817 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:52,820 [main:67] - randomType = Holder
2021-03-12 12:41:52,914 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:52,915 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:52,922 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:52,950 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:52,950 [main:106] - GETTING Function0<Unit> from Function0<Unit>
2021-03-12 12:41:52,963 [main:61] - replacement of finallyBlock1 of type Function0<Unit> is block
2021-03-12 12:41:53,055 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 12:41:53,056 [main:66] - Compilation checking started
2021-03-12 12:41:53,476 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:53,477 [main:53] - replacing ({
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            }, Function0<Unit>)
2021-03-12 12:41:53,478 [main:50] - replacing {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            } Function0<Unit>
2021-03-12 12:41:53,478 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:41:53,571 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:41:53,572 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:41:53,667 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:41:53,668 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:41:53,962 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 12:41:53,963 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 12:41:53,964 [main:302] - generating value of type = Any false depth = 5
2021-03-12 12:41:53,964 [main:95] - GENERATED = require(false, { "mvbli"})
2021-03-12 12:41:53,964 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false, { "mvbli"})}
2021-03-12 12:41:53,965 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:54,065 [main:67] - randomType = Holder?
2021-03-12 12:41:54,155 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:54,156 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:54,162 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 12:41:54,197 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:54,216 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:54,217 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:54,218 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:54,219 [main:106] - GETTING Function0<Unit> from Holder
2021-03-12 12:41:54,224 [main:61] - replacement of {
                if ((doReturn).toFloat().isFinite()) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            } of type Function0<Unit> is { require(false, { "mvbli"})}
2021-03-12 12:41:54,316 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:41:54,316 [main:66] - Compilation checking started
2021-03-12 12:41:54,674 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:54,675 [main:53] - replacing (test21, String)
2021-03-12 12:41:54,675 [main:50] - replacing test21 String
2021-03-12 12:41:54,675 [main:54] - Getting value of type String
2021-03-12 12:41:54,769 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:54,770 [main:58] - GENERATED VALUE OF TYPE String = "hqchc"
2021-03-12 12:41:54,770 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:54,773 [main:67] - randomType = Holder
2021-03-12 12:41:54,861 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:54,862 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:54,867 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:41:54,981 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:55,069 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:55,070 [main:78] - Generated call from random type = (Holder()).value.replaceAfterLast('䥪', "uaflt", test1(Holder(), 554748738))
2021-03-12 12:41:55,070 [main:106] - GETTING String from String
2021-03-12 12:41:55,089 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1f0b38]]
2021-03-12 12:41:55,089 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7b1f0b38]
2021-03-12 12:41:55,181 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:55,183 [main:117] - GENERATED CALL = (Holder().value).take(-1793850335)
2021-03-12 12:41:55,183 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:41:55,183 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:41:55,183 [main:117] - GENERATED CALL = (Holder().value).concat(Holder().value)
2021-03-12 12:41:55,183 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]]
2021-03-12 12:41:55,183 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:41:55,270 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:55,271 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]
2021-03-12 12:41:55,271 [main:117] - GENERATED CALL = (Holder().value).get(-1527861146).lowercase()
2021-03-12 12:41:55,271 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]]
2021-03-12 12:41:55,271 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:41:55,360 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:55,361 [main:117] - GENERATED CALL = (Holder().value).substring(-1879738435)
2021-03-12 12:41:55,361 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]]
2021-03-12 12:41:55,361 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]
2021-03-12 12:41:55,450 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:55,451 [main:117] - GENERATED CALL = (Holder().value).dropLast(2119811047)
2021-03-12 12:41:55,451 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]]
2021-03-12 12:41:55,451 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38733c7c]
2021-03-12 12:41:55,538 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:41:55,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:55,630 [main:117] - GENERATED CALL = (Holder().value).commonSuffixWith("epbte", true)
2021-03-12 12:41:55,630 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]]
2021-03-12 12:41:55,630 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f9abafc]
2021-03-12 12:41:55,718 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:41:55,719 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:41:55,720 [main:117] - GENERATED CALL = (Holder().value).filterNot({a: Char -> true})
2021-03-12 12:41:55,720 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]]
2021-03-12 12:41:55,720 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:41:55,808 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:55,809 [main:117] - GENERATED CALL = (Holder().value).replaceAfterLast('ﹼ', Holder().value, test2(Holder(), -1516755372))
2021-03-12 12:41:55,809 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:41:55,809 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:41:55,896 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:41:55,897 [main:117] - GENERATED CALL = (Holder().value).takeLast(1437964800)
2021-03-12 12:41:55,897 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:41:55,897 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:41:55,985 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:56,074 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:56,075 [main:117] - GENERATED CALL = (Holder().value).replaceBefore('ｧ', "bhqzk", Holder().value)
2021-03-12 12:41:56,075 [main:61] - replacement of test21 of type String is (Holder().value).filterNot({a: Char -> true})
2021-03-12 12:41:56,161 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:56,162 [main:53] - replacing (h, Holder)
2021-03-12 12:41:56,162 [main:50] - replacing h Holder
2021-03-12 12:41:56,163 [main:54] - Getting value of type Holder
2021-03-12 12:41:56,282 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:41:56,283 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:41:56,283 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:41:56,284 [main:61] - GENERATED IS CALL =true
2021-03-12 12:41:56,393 [main:67] - randomType = Char?
2021-03-12 12:41:56,483 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:41:56,514 [main:106] - GETTING Holder from String
2021-03-12 12:41:56,532 [main:106] - GETTING Holder from String
2021-03-12 12:41:56,532 [main:106] - GETTING Holder from String
2021-03-12 12:41:56,533 [main:106] - GETTING Holder from String
2021-03-12 12:41:56,533 [main:106] - GETTING Holder from Holder
2021-03-12 12:41:56,537 [main:61] - replacement of h of type Holder is Holder()
2021-03-12 12:41:56,623 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:41:56,624 [main:66] - Compilation checking started
2021-03-12 12:41:56,862 [main:49] - Result = false
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    Holder() = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:56,863 [main:53] - replacing ({
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    (Holder().value).subSequence(-536182111, -279488919).commonSuffixWith(StringBuilder(), true) += (test2(Holder(), -1516755372)).toLowerCase()
                }
            }, Function0<Unit>)
2021-03-12 12:41:56,863 [main:50] - replacing {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    (Holder().value).subSequence(-536182111, -279488919).commonSuffixWith(StringBuilder(), true) += (test2(Holder(), -1516755372)).toLowerCase()
                }
            } Function0<Unit>
2021-03-12 12:41:56,863 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:41:56,949 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:41:56,950 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:41:57,041 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:41:57,042 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 12:41:57,227 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 12:41:57,228 [main:95] - GENERATED = require(false)
2021-03-12 12:41:57,228 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { require(false)}
2021-03-12 12:41:57,229 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:57,514 [main:67] - randomType = Function2<Holder, Int, ArrayDeque<Long>>
2021-03-12 12:41:57,515 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:57,535 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:57,536 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:41:57,536 [main:61] - replacement of {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    (Holder().value).subSequence(-536182111, -279488919).commonSuffixWith(StringBuilder(), true) += (test2(Holder(), -1516755372)).toLowerCase()
                }
            } of type Function0<Unit> is { require(false)}
2021-03-12 12:41:57,624 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:41:57,625 [main:53] - replacing (h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY", Boolean)
2021-03-12 12:41:57,626 [main:50] - replacing h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" Boolean
2021-03-12 12:41:57,626 [main:54] - Getting value of type Boolean
2021-03-12 12:41:57,732 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:57,733 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 12:41:57,733 [main:61] - GENERATED IS CALL =false
2021-03-12 12:41:57,824 [main:67] - randomType = ULong
2021-03-12 12:41:57,910 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 12:41:57,942 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline operator fun rangeTo(other: kotlin.ULong): kotlin.ranges.ULongRange defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@4f966368]
2021-03-12 12:41:58,027 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 12:41:58,028 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.ULongRange[DeserializedSimpleFunctionDescriptor@76895ddf]
2021-03-12 12:41:58,114 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:58,114 [main:78] - Generated call from random type = (3009558747878893284.toULong()).rangeTo(6174542150288351296.toULong()).equals("ncjcy")
2021-03-12 12:41:58,115 [main:106] - GETTING Boolean from Holder
2021-03-12 12:41:58,120 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c4fa2d]]
2021-03-12 12:41:58,120 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37c4fa2d]
2021-03-12 12:41:58,206 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:58,207 [main:117] - GENERATED CALL = (h).value.endsWith(test2(Holder(), -1516755372), true)
2021-03-12 12:41:58,207 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@134fa5d5]]
2021-03-12 12:41:58,207 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe]
2021-03-12 12:41:58,295 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:58,295 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@134fa5d5]
2021-03-12 12:41:58,383 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:58,383 [main:117] - GENERATED CALL = (h).equals("oryrb").equals("mehzu")
2021-03-12 12:41:58,383 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]]
2021-03-12 12:41:58,383 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@7357a52e]
2021-03-12 12:41:58,471 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:58,471 [main:117] - GENERATED CALL = (h).value.equals("xhhzw")
2021-03-12 12:41:58,471 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a17e04]]
2021-03-12 12:41:58,471 [main:149] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39a17e04]
2021-03-12 12:41:58,559 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:41:58,560 [main:117] - GENERATED CALL = (h).value.matches("yxjkb")
2021-03-12 12:41:58,560 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77baac76]]
2021-03-12 12:41:58,560 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe]
2021-03-12 12:41:58,646 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:58,646 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@77baac76]
2021-03-12 12:41:58,731 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:58,732 [main:117] - GENERATED CALL = (h).equals("jhpup").and(true)
2021-03-12 12:41:58,732 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6851b4]]
2021-03-12 12:41:58,732 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d6851b4]
2021-03-12 12:41:58,818 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:58,820 [main:117] - GENERATED CALL = (h).value.startsWith(Holder().value, false)
2021-03-12 12:41:58,820 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5c1a2cee]]
2021-03-12 12:41:58,820 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe]
2021-03-12 12:41:58,936 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:58,936 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@5c1a2cee]
2021-03-12 12:41:59,030 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:59,031 [main:117] - GENERATED CALL = (h).equals("lsbbg").xor(false)
2021-03-12 12:41:59,031 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4244fae2]]
2021-03-12 12:41:59,031 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe]
2021-03-12 12:41:59,131 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:59,131 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4244fae2]
2021-03-12 12:41:59,217 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:59,219 [main:117] - GENERATED CALL = (h).equals("rcfal").or(true)
2021-03-12 12:41:59,219 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe]]
2021-03-12 12:41:59,219 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Holder[DeserializedSimpleFunctionDescriptor@1d0fb6fe]
2021-03-12 12:41:59,311 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:41:59,311 [main:117] - GENERATED CALL = (h).equals("opamq")
2021-03-12 12:41:59,311 [main:113] - Case = [public final var value: kotlin.String defined in Holder[PropertyDescriptorImpl@41f99084], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24553a3d]]
2021-03-12 12:41:59,311 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@24553a3d]
2021-03-12 12:41:59,311 [main:117] - GENERATED CALL = (h).value.toBoolean()
2021-03-12 12:41:59,311 [main:61] - replacement of h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY" of type Boolean is (h).equals("lsbbg").xor(false)
2021-03-12 12:41:59,397 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:41:59,397 [main:66] - Compilation checking started
2021-03-12 12:41:59,768 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:41:59,768 [main:53] - replacing (test2 != "OF_FINALLY1" || (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase(), Boolean)
2021-03-12 12:41:59,769 [main:50] - replacing test2 != "OF_FINALLY1" || (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase() Boolean
2021-03-12 12:41:59,769 [main:54] - Getting value of type Boolean
2021-03-12 12:41:59,872 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:41:59,873 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 12:41:59,873 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:00,060 [main:67] - randomType = Double?
2021-03-12 12:42:00,145 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:42:00,178 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@430c3232]
2021-03-12 12:42:00,264 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:42:00,265 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:42:00,351 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:42:00,351 [main:78] - Generated call from random type = (0.48427179857339087)?.compareTo(58).equals("thizv")
2021-03-12 12:42:00,352 [main:106] - GETTING Boolean from String
2021-03-12 12:42:00,370 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e49769]]
2021-03-12 12:42:00,370 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:00,478 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:00,479 [main:149] - GENERATING call of type public fun kotlin.Char.isSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28e49769]
2021-03-12 12:42:00,480 [main:117] - GENERATED CALL = (Holder().value).get(1909604358).isSurrogate()
2021-03-12 12:42:00,480 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]]
2021-03-12 12:42:00,480 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]
2021-03-12 12:42:00,480 [main:117] - GENERATED CALL = (Holder().value).none()
2021-03-12 12:42:00,480 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]]
2021-03-12 12:42:00,480 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:00,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:00,654 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:00,655 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@318ed58b]
2021-03-12 12:42:00,656 [main:117] - GENERATED CALL = (Holder().value).subSequence(1151243377, 1844089434).none()
2021-03-12 12:42:00,656 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]]
2021-03-12 12:42:00,656 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:00,741 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:00,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:00,828 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@284c4ff9]
2021-03-12 12:42:00,828 [main:117] - GENERATED CALL = (Holder().value).subSequence(910670112, 1063079352).any()
2021-03-12 12:42:00,829 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]]
2021-03-12 12:42:00,829 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@399c3071]
2021-03-12 12:42:00,829 [main:117] - GENERATED CALL = (Holder().value).isEmpty()
2021-03-12 12:42:00,829 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f384b62]]
2021-03-12 12:42:00,829 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:00,914 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:00,915 [main:149] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1f384b62]
2021-03-12 12:42:00,915 [main:117] - GENERATED CALL = (Holder().value).get(932686178).isTitleCase()
2021-03-12 12:42:00,915 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]]
2021-03-12 12:42:00,915 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:00,915 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@36d8f043]
2021-03-12 12:42:01,000 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:42:01,001 [main:117] - GENERATED CALL = (Holder().value).compareTo(test1(Holder(), 554748738)).equals("sycml")
2021-03-12 12:42:01,001 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b316c39]]
2021-03-12 12:42:01,001 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:01,086 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:01,087 [main:149] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b316c39]
2021-03-12 12:42:01,088 [main:117] - GENERATED CALL = (Holder().value).get(-1558734507).isLetter()
2021-03-12 12:42:01,088 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a67fa6c]]
2021-03-12 12:42:01,088 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:01,174 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:01,175 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a67fa6c]
2021-03-12 12:42:01,175 [main:117] - GENERATED CALL = (Holder().value).get(1470467211).isLowSurrogate()
2021-03-12 12:42:01,175 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]]
2021-03-12 12:42:01,175 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:01,261 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:01,348 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:01,349 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7325a564]
2021-03-12 12:42:01,349 [main:117] - GENERATED CALL = (Holder().value).subSequence(778667030, 982032327).isNotEmpty()
2021-03-12 12:42:01,349 [main:61] - replacement of test2 != "OF_FINALLY1" || (test2(Holder(), -1516755372)).get(-2083836347).isLowerCase() of type Boolean is (Holder().value).get(932686178).isTitleCase()
2021-03-12 12:42:01,437 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:01,438 [main:53] - replacing (test10, String)
2021-03-12 12:42:01,438 [main:50] - replacing test10 String
2021-03-12 12:42:01,438 [main:54] - Getting value of type String
2021-03-12 12:42:01,523 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:01,524 [main:58] - GENERATED VALUE OF TYPE String = "sbfyf"
2021-03-12 12:42:01,524 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:01,615 [main:67] - randomType = UShort
2021-03-12 12:42:01,748 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 12:42:01,790 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@20fab4cd]
2021-03-12 12:42:01,790 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4d489796]
2021-03-12 12:42:01,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:01,895 [main:78] - Generated call from random type = (5535.toUShort()).toUByte().toString(1371287026)
2021-03-12 12:42:01,895 [main:106] - GETTING String from String
2021-03-12 12:42:01,924 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]]
2021-03-12 12:42:01,924 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:42:02,012 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:02,098 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:02,099 [main:117] - GENERATED CALL = (Holder().value).replaceAfterLast('复', "vlipr", Holder().value)
2021-03-12 12:42:02,099 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:42:02,099 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:42:02,099 [main:117] - GENERATED CALL = (Holder().value).trimStart()
2021-03-12 12:42:02,099 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]]
2021-03-12 12:42:02,099 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:02,184 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:02,185 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]
2021-03-12 12:42:02,272 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:02,273 [main:117] - GENERATED CALL = (Holder().value).get(57939187).plus("ulwgt")
2021-03-12 12:42:02,434 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:42:02,434 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:42:02,521 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:42:02,522 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:02,523 [main:117] - GENERATED CALL = (Holder().value).filterIndexed({a: Int, b: Char -> true})
2021-03-12 12:42:02,523 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:42:02,523 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:42:02,523 [main:117] - GENERATED CALL = (Holder().value).replaceIndent(Holder().value)
2021-03-12 12:42:02,524 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca0d358]]
2021-03-12 12:42:02,524 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:02,610 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:02,698 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:02,699 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ca0d358]
2021-03-12 12:42:02,784 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:42:02,873 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 12:42:02,875 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 12:42:03,200 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:42:03,201 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 12:42:03,203 [main:95] - GENERATED = Regex("grgpz", kotlin.text.RegexOption.MULTILINE)
2021-03-12 12:42:03,296 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 12:42:03,297 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 12:42:03,301 [main:117] - GENERATED CALL = (Holder().value).subSequence(-1968409524, 1941278064).replace(Regex("grgpz", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> "qxvmz"})
2021-03-12 12:42:03,301 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]]
2021-03-12 12:42:03,301 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]
2021-03-12 12:42:03,301 [main:117] - GENERATED CALL = (Holder().value).trimEnd()
2021-03-12 12:42:03,301 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:42:03,301 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:42:03,398 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:03,399 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:03,400 [main:117] - GENERATED CALL = (Holder().value).dropLastWhile({a: Char -> false})
2021-03-12 12:42:03,401 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e07bada]]
2021-03-12 12:42:03,401 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e07bada]
2021-03-12 12:42:03,401 [main:117] - GENERATED CALL = (Holder().value).trim()
2021-03-12 12:42:03,401 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]]
2021-03-12 12:42:03,401 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:42:03,488 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:03,489 [main:117] - GENERATED CALL = (Holder().value).substring(1180255574)
2021-03-12 12:42:03,489 [main:61] - replacement of test10 of type String is (Holder().value).filterIndexed({a: Int, b: Char -> true})
2021-03-12 12:42:03,576 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:03,576 [main:53] - replacing ("OF_FINALLY1", String)
2021-03-12 12:42:03,576 [main:50] - replacing "OF_FINALLY1" String
2021-03-12 12:42:03,576 [main:54] - Getting value of type String
2021-03-12 12:42:03,664 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:03,665 [main:58] - GENERATED VALUE OF TYPE String = "eagzy"
2021-03-12 12:42:03,665 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:03,668 [main:67] - randomType = Holder
2021-03-12 12:42:03,753 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:42:03,754 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:03,759 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]
2021-03-12 12:42:03,844 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:03,846 [main:78] - Generated call from random type = (Holder()).value.prependIndent("oylra")
2021-03-12 12:42:03,846 [main:106] - GETTING String from String
2021-03-12 12:42:03,864 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]]
2021-03-12 12:42:03,864 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]
2021-03-12 12:42:03,949 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:03,950 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).drop(111809127)
2021-03-12 12:42:03,950 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:42:03,950 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:42:04,036 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:04,037 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceIndent("piqqh")
2021-03-12 12:42:04,037 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:42:04,037 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:42:04,037 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimStart()
2021-03-12 12:42:04,037 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]]
2021-03-12 12:42:04,037 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:04,122 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:04,123 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]
2021-03-12 12:42:04,124 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(1389492785).titlecase()
2021-03-12 12:42:04,124 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]]
2021-03-12 12:42:04,124 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]
2021-03-12 12:42:04,216 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:04,217 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).substringAfterLast('쬲', test1(Holder(), 554748738))
2021-03-12 12:42:04,217 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:42:04,217 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:42:04,218 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).toLowerCase()
2021-03-12 12:42:04,218 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:42:04,218 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:42:04,218 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).concat(test2(Holder(), -1516755372))
2021-03-12 12:42:04,218 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]]
2021-03-12 12:42:04,218 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:42:04,303 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:04,304 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).substringAfter('墥', test1(Holder(), 554748738))
2021-03-12 12:42:04,304 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]]
2021-03-12 12:42:04,304 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]
2021-03-12 12:42:04,419 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:04,420 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropLast(1003525957)
2021-03-12 12:42:04,420 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]]
2021-03-12 12:42:04,420 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]
2021-03-12 12:42:04,420 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimEnd()
2021-03-12 12:42:04,420 [main:61] - replacement of "OF_FINALLY1" of type String is (test2(Holder(), -1516755372)).replaceIndent("piqqh")
2021-03-12 12:42:04,511 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:04,513 [main:53] - replacing (h, Holder)
2021-03-12 12:42:04,514 [main:50] - replacing h Holder
2021-03-12 12:42:04,514 [main:54] - Getting value of type Holder
2021-03-12 12:42:04,611 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:42:04,612 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:04,612 [main:58] - GENERATED VALUE OF TYPE Holder = Holder()
2021-03-12 12:42:04,612 [main:61] - GENERATED IS CALL =true
2021-03-12 12:42:04,710 [main:67] - randomType = ArrayList<Holder>
2021-03-12 12:42:04,796 [main:302] - generating value of type = ArrayList<Holder> false depth = 0
2021-03-12 12:42:04,890 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Holder> = TODO()
2021-03-12 12:42:04,892 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Holder> = TODO()
2021-03-12 12:42:05,086 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:42:05,087 [main:95] - GENERATED = ArrayList<Holder>(1783873931)
2021-03-12 12:42:05,214 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.first(): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6014b386]
2021-03-12 12:42:05,214 [main:78] - Generated call from random type = (ArrayList<Holder>(1783873931)).first()!!
2021-03-12 12:42:05,215 [main:106] - GETTING Holder from String
2021-03-12 12:42:05,233 [main:106] - GETTING Holder from String
2021-03-12 12:42:05,233 [main:106] - GETTING Holder from Holder
2021-03-12 12:42:05,237 [main:61] - replacement of h of type Holder is h
2021-03-12 12:42:05,322 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 12:42:05,323 [main:53] - replacing (h.value, String)
2021-03-12 12:42:05,323 [main:50] - replacing h.value String
2021-03-12 12:42:05,323 [main:54] - Getting value of type String
2021-03-12 12:42:05,409 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:05,410 [main:58] - GENERATED VALUE OF TYPE String = "xiyqy"
2021-03-12 12:42:05,410 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:05,598 [main:67] - randomType = Sequence<Short>
2021-03-12 12:42:05,598 [main:106] - GETTING String from String
2021-03-12 12:42:05,617 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:42:05,617 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:42:05,703 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:05,704 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimMargin("xalrx")
2021-03-12 12:42:05,704 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:42:05,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:42:05,704 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).lowercase()
2021-03-12 12:42:05,705 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:42:05,705 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:42:05,705 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimStart()
2021-03-12 12:42:05,705 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]]
2021-03-12 12:42:05,705 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]
2021-03-12 12:42:05,705 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).capitalize()
2021-03-12 12:42:05,705 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]]
2021-03-12 12:42:05,705 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:05,827 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:05,828 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:42:05,828 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(303089529).uppercase()
2021-03-12 12:42:05,828 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]]
2021-03-12 12:42:05,828 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:05,920 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:05,921 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]
2021-03-12 12:42:05,921 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(987378781).plus(test1(Holder(), 554748738))
2021-03-12 12:42:05,921 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]]
2021-03-12 12:42:05,921 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]
2021-03-12 12:42:06,019 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 12:42:06,114 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 12:42:06,116 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<Int>.()->kotlin.Unit): Iterable<Int> = TODO()
2021-03-12 12:42:06,391 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:42:06,392 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Int>, Unit> false depth = 3
2021-03-12 12:42:06,393 [main:302] - generating value of type = Unit false depth = 4
2021-03-12 12:42:06,483 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:42:06,484 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:42:06,760 [main:302] - generating value of type = Boolean true depth = 7
2021-03-12 12:42:06,761 [main:302] - generating value of type = Function0<Any> false depth = 7
2021-03-12 12:42:06,762 [main:302] - generating value of type = Any false depth = 8
2021-03-12 12:42:06,762 [main:95] - GENERATED = check(true, { "wstjs"})
2021-03-12 12:42:06,762 [main:95] - GENERATED = buildSet<Int>(930345074, { check(true, { "wstjs"})})
2021-03-12 12:42:06,763 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).slice(buildSet<Int>(930345074, { check(true, { "wstjs"})}))
2021-03-12 12:42:06,763 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:42:06,763 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:42:06,849 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:06,937 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:06,939 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).commonPrefixWith("rzthc", true)
2021-03-12 12:42:06,939 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:42:06,939 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:07,055 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:07,056 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).length.toString(-1703364754)
2021-03-12 12:42:07,056 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:42:07,056 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:42:07,149 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:07,254 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:07,342 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:07,343 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replace('৪', '泡', false)
2021-03-12 12:42:07,346 [main:61] - replacement of h.value of type String is (test1(Holder(), 554748738)).trimMargin("xalrx")
2021-03-12 12:42:07,431 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:07,432 [main:53] - replacing ("LOCAL", String)
2021-03-12 12:42:07,432 [main:50] - replacing "LOCAL" String
2021-03-12 12:42:07,432 [main:54] - Getting value of type String
2021-03-12 12:42:07,518 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:07,519 [main:58] - GENERATED VALUE OF TYPE String = "bhjbe"
2021-03-12 12:42:07,520 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:07,621 [main:67] - randomType = Function1<Holder, Holder>
2021-03-12 12:42:07,621 [main:106] - GETTING String from String
2021-03-12 12:42:07,640 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:42:07,640 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:42:07,640 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).concat(test1(Holder(), 554748738))
2021-03-12 12:42:07,640 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]]
2021-03-12 12:42:07,640 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]
2021-03-12 12:42:07,732 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:07,733 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).prependIndent("odgtq")
2021-03-12 12:42:07,733 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd78d5c]]
2021-03-12 12:42:07,734 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd78d5c]
2021-03-12 12:42:07,820 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:07,824 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).removeSuffix(StringBuilder())
2021-03-12 12:42:07,824 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:42:07,824 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:42:07,912 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:08,002 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:08,003 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:08,184 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:42:08,308 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:08,310 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:08,509 [main:302] - generating value of type = CharSequence false depth = 6
2021-03-12 12:42:08,607 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:42:08,609 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:42:08,794 [main:302] - generating value of type = Int true depth = 9
2021-03-12 12:42:08,795 [main:95] - GENERATED = StringBuilder(-1160821269)
2021-03-12 12:42:08,795 [main:95] - GENERATED = StringBuilder(StringBuilder(-1160821269))
2021-03-12 12:42:08,796 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(-1160821269)))
2021-03-12 12:42:08,881 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:08,882 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).commonPrefixWith(StringBuilder(StringBuilder(StringBuilder(-1160821269))), false)
2021-03-12 12:42:08,882 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]]
2021-03-12 12:42:08,882 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]
2021-03-12 12:42:08,969 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:08,971 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).padEnd(doReturn, '䬫')
2021-03-12 12:42:08,971 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]]
2021-03-12 12:42:08,971 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:08,971 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]
2021-03-12 12:42:09,055 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:09,057 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(doReturn).plus("pvrwn")
2021-03-12 12:42:09,057 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:42:09,057 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:42:09,057 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).decapitalize()
2021-03-12 12:42:09,057 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:42:09,057 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:42:09,142 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:42:09,143 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:09,144 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).filterIndexed({a: Int, b: Char -> false})
2021-03-12 12:42:09,144 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]]
2021-03-12 12:42:09,144 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:42:09,145 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).substring(doReturn)
2021-03-12 12:42:09,145 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]]
2021-03-12 12:42:09,145 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]
2021-03-12 12:42:09,145 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimIndent()
2021-03-12 12:42:09,145 [main:61] - replacement of "LOCAL" of type String is (test1(Holder(), 554748738)).removeSuffix(StringBuilder())
2021-03-12 12:42:09,230 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:09,230 [main:66] - Compilation checking started
2021-03-12 12:42:09,588 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, false)) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:09,588 [main:53] - replacing ("OK_LOCAL", String)
2021-03-12 12:42:09,588 [main:50] - replacing "OK_LOCAL" String
2021-03-12 12:42:09,589 [main:54] - Getting value of type String
2021-03-12 12:42:09,694 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:09,695 [main:58] - GENERATED VALUE OF TYPE String = "iluen"
2021-03-12 12:42:09,695 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:10,201 [main:67] - randomType = Function2<Double, Sequence<Array<Holder>>, Holder?>
2021-03-12 12:42:10,201 [main:106] - GETTING String from String
2021-03-12 12:42:10,219 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@239e5da0]]
2021-03-12 12:42:10,219 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@239e5da0]
2021-03-12 12:42:10,220 [main:117] - GENERATED CALL = (Holder().value).replaceIndentByMargin(Holder().value, test1(Holder(), 554748738))
2021-03-12 12:42:10,220 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]]
2021-03-12 12:42:10,220 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:10,307 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:10,308 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@70bf2bf7]
2021-03-12 12:42:10,308 [main:117] - GENERATED CALL = (Holder().value).get(846960175).plus(test1(Holder(), 554748738))
2021-03-12 12:42:10,308 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:42:10,308 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:42:10,394 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:42:10,395 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:10,396 [main:117] - GENERATED CALL = (Holder().value).filterIndexed({a: Int, b: Char -> false})
2021-03-12 12:42:10,396 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:42:10,396 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:42:10,482 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:10,483 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:10,484 [main:117] - GENERATED CALL = (Holder().value).dropWhile({a: Char -> false})
2021-03-12 12:42:10,484 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:42:10,484 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:10,571 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:10,572 [main:117] - GENERATED CALL = (Holder().value).length.toString(1515279078)
2021-03-12 12:42:10,572 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]]
2021-03-12 12:42:10,572 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]
2021-03-12 12:42:10,662 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:10,663 [main:117] - GENERATED CALL = (Holder().value).substringBefore('㫱', Holder().value)
2021-03-12 12:42:10,663 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:42:10,663 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:42:10,749 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:10,750 [main:117] - GENERATED CALL = (Holder().value).takeLast(1961456813)
2021-03-12 12:42:10,750 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:42:10,750 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:42:10,836 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:10,837 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:10,838 [main:117] - GENERATED CALL = (Holder().value).dropLastWhile({a: Char -> false})
2021-03-12 12:42:10,838 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]]
2021-03-12 12:42:10,838 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2b8ddf89]
2021-03-12 12:42:10,923 [main:117] - GENERATED CALL = (Holder().value).plus(null)
2021-03-12 12:42:10,923 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:42:10,923 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:42:11,011 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:11,012 [main:117] - GENERATED CALL = (Holder().value).replaceBefore('叢', test2(Holder(), -1516755372), test2(Holder(), -1516755372))
2021-03-12 12:42:11,013 [main:61] - replacement of "OK_LOCAL" of type String is (Holder().value).takeLast(1961456813)
2021-03-12 12:42:11,133 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:11,133 [main:53] - replacing (test2, String)
2021-03-12 12:42:11,133 [main:50] - replacing test2 String
2021-03-12 12:42:11,133 [main:54] - Getting value of type String
2021-03-12 12:42:11,229 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:11,230 [main:58] - GENERATED VALUE OF TYPE String = "bllon"
2021-03-12 12:42:11,230 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:11,337 [main:67] - randomType = UInt
2021-03-12 12:42:11,427 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 12:42:11,457 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@4ed45df5]
2021-03-12 12:42:11,457 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@477bf858]
2021-03-12 12:42:11,542 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:11,543 [main:78] - Generated call from random type = (2015711076.toUInt()).toByte().toString(-1811585788)
2021-03-12 12:42:11,543 [main:106] - GETTING String from String
2021-03-12 12:42:11,562 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]]
2021-03-12 12:42:11,562 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]
2021-03-12 12:42:11,647 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:11,648 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:11,649 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).takeWhile({a: Char -> false})
2021-03-12 12:42:11,649 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:42:11,649 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:42:11,734 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:11,821 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:11,907 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:11,909 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replace('ꃍ', '绦', true)
2021-03-12 12:42:11,909 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]]
2021-03-12 12:42:11,909 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]
2021-03-12 12:42:11,994 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:12,083 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:12,084 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceBeforeLast('⨃', "fqvvp", Holder().value)
2021-03-12 12:42:12,085 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:42:12,085 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:42:12,170 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:12,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:12,257 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).removeRange(-645305171, 2050704655)
2021-03-12 12:42:12,257 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]]
2021-03-12 12:42:12,257 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56b15def]
2021-03-12 12:42:12,341 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:12,342 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:12,503 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropWhile({a: Char -> true})
2021-03-12 12:42:12,504 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]]
2021-03-12 12:42:12,504 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4584b57b]
2021-03-12 12:42:12,617 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:12,618 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).dropLast(1023548249)
2021-03-12 12:42:12,618 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]]
2021-03-12 12:42:12,618 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@631610fe]
2021-03-12 12:42:12,618 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceIndent(test2(Holder(), -1516755372))
2021-03-12 12:42:12,618 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:42:12,618 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:42:12,711 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:12,811 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:12,812 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).commonPrefixWith("mhrlu", false)
2021-03-12 12:42:12,812 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:42:12,812 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:42:12,901 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:12,902 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimMargin("rhvma")
2021-03-12 12:42:12,902 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:42:12,902 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:12,988 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:13,077 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:13,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:42:13,164 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:42:13,253 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:42:13,254 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:42:13,530 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:42:13,531 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 12:42:13,622 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 12:42:13,623 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Set<RegexOption> = TODO()
2021-03-12 12:42:13,713 [main:95] - GENERATED = hashSetOf<RegexOption>()
2021-03-12 12:42:13,713 [main:95] - GENERATED = Regex("wevvz", hashSetOf<RegexOption>())
2021-03-12 12:42:13,713 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(-904133195, -942878370).replaceFirst(Regex("wevvz", hashSetOf<RegexOption>()), Holder().value)
2021-03-12 12:42:13,713 [main:61] - replacement of test2 of type String is (2015711076.toUInt()).toByte().toString(-1811585788)
2021-03-12 12:42:13,824 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:13,825 [main:53] - replacing ("OK_LOCAL", String)
2021-03-12 12:42:13,825 [main:50] - replacing "OK_LOCAL" String
2021-03-12 12:42:13,825 [main:54] - Getting value of type String
2021-03-12 12:42:13,916 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:13,917 [main:58] - GENERATED VALUE OF TYPE String = "yrcfs"
2021-03-12 12:42:13,917 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:14,022 [main:67] - randomType = Double
2021-03-12 12:42:14,110 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:42:14,143 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1d8c0504]
2021-03-12 12:42:14,143 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:42:14,143 [main:78] - Generated call from random type = (0.9518883055770114).toChar().uppercase()
2021-03-12 12:42:14,143 [main:106] - GETTING String from String
2021-03-12 12:42:14,160 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:42:14,160 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:42:14,160 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).toUpperCase()
2021-03-12 12:42:14,160 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]]
2021-03-12 12:42:14,160 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]
2021-03-12 12:42:14,245 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:14,246 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:14,247 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).takeWhile({a: Char -> false})
2021-03-12 12:42:14,247 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]]
2021-03-12 12:42:14,247 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]
2021-03-12 12:42:14,332 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:14,334 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).substringBefore('簕', test2(Holder(), -1516755372))
2021-03-12 12:42:14,334 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]]
2021-03-12 12:42:14,334 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:14,418 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:14,504 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:14,505 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59933500]
2021-03-12 12:42:14,590 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 12:42:14,679 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:42:14,681 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 12:42:14,959 [main:302] - generating value of type = String true depth = 3
2021-03-12 12:42:14,960 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 12:42:15,048 [main:43] - GENERATING CALL OF fun <T> setOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 12:42:15,050 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 12:42:15,173 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 12:42:15,174 [main:95] - GENERATED = setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 12:42:15,175 [main:95] - GENERATED = Regex("svzzn", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 12:42:15,175 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(-146652347, -716248051).replaceFirst(Regex("svzzn", setOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), Holder().value)
2021-03-12 12:42:15,175 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:42:15,175 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:42:15,175 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).concat(Holder().value)
2021-03-12 12:42:15,175 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]]
2021-03-12 12:42:15,175 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]
2021-03-12 12:42:15,267 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:15,268 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).drop(-287071062)
2021-03-12 12:42:15,268 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]]
2021-03-12 12:42:15,268 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]
2021-03-12 12:42:15,268 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimEnd()
2021-03-12 12:42:15,268 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:42:15,269 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:42:15,364 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:15,454 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:15,542 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:15,543 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replace('Ȍ', 'ല', true)
2021-03-12 12:42:15,543 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]]
2021-03-12 12:42:15,543 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:15,629 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:15,630 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]
2021-03-12 12:42:15,630 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).get(-845297778).lowercase()
2021-03-12 12:42:15,630 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:42:15,630 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:15,716 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:15,801 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:15,802 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:42:15,887 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:15,977 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:42:15,979 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 12:42:16,159 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:42:16,160 [main:95] - GENERATED = StringBuilder(-640184746)
2021-03-12 12:42:16,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:16,246 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).subSequence(-1407109653, -54401649).commonPrefixWith(StringBuilder(-640184746), false)
2021-03-12 12:42:16,246 [main:61] - replacement of "OK_LOCAL" of type String is (test2(Holder(), -1516755372)).subSequence(-1407109653, -54401649).commonPrefixWith(StringBuilder(-640184746), false)
2021-03-12 12:42:16,358 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:16,359 [main:53] - replacing ("OK_LOCAL", String)
2021-03-12 12:42:16,359 [main:50] - replacing "OK_LOCAL" String
2021-03-12 12:42:16,359 [main:54] - Getting value of type String
2021-03-12 12:42:16,453 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:16,454 [main:58] - GENERATED VALUE OF TYPE String = "mwxfs"
2021-03-12 12:42:16,454 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:16,456 [main:67] - randomType = String
2021-03-12 12:42:16,553 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:16,580 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:42:16,670 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:16,671 [main:78] - Generated call from random type = ("oekln").substring(-1367370794)
2021-03-12 12:42:16,671 [main:106] - GETTING String from String
2021-03-12 12:42:16,689 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]]
2021-03-12 12:42:16,689 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f984b8]
2021-03-12 12:42:16,775 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:16,862 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:16,948 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:16,952 [main:117] - GENERATED CALL = (Holder().value).replaceRange(-281555134, -1875816932, "nipem")
2021-03-12 12:42:16,952 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:42:16,952 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:42:16,952 [main:117] - GENERATED CALL = (Holder().value).trimMargin(Holder().value)
2021-03-12 12:42:16,952 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]]
2021-03-12 12:42:16,952 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]
2021-03-12 12:42:17,038 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:17,124 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:17,211 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:17,212 [main:117] - GENERATED CALL = (Holder().value).replaceFirst('뎚', 'ꆏ', true)
2021-03-12 12:42:17,212 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]]
2021-03-12 12:42:17,212 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:17,297 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:17,298 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5380abab]
2021-03-12 12:42:17,299 [main:117] - GENERATED CALL = (Holder().value).get(1849099376).uppercase()
2021-03-12 12:42:17,299 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]]
2021-03-12 12:42:17,299 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]
2021-03-12 12:42:17,384 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:17,470 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:17,472 [main:117] - GENERATED CALL = (Holder().value).replaceBeforeLast('妜', test2(Holder(), -1516755372), "srvgh")
2021-03-12 12:42:17,472 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]]
2021-03-12 12:42:17,472 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:42:17,472 [main:117] - GENERATED CALL = (Holder().value).uppercase()
2021-03-12 12:42:17,472 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]]
2021-03-12 12:42:17,472 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2299cb5c]
2021-03-12 12:42:17,599 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:17,603 [main:117] - GENERATED CALL = (Holder().value).removeSurrounding(StringBuilder())
2021-03-12 12:42:17,604 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]]
2021-03-12 12:42:17,604 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38525b4d]
2021-03-12 12:42:17,695 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:17,697 [main:117] - GENERATED CALL = (Holder().value).substring(-810300969)
2021-03-12 12:42:17,697 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:42:17,697 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@26e3d977]
2021-03-12 12:42:17,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:17,882 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:17,883 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:42:17,968 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:17,970 [main:117] - GENERATED CALL = (Holder().value).subSequence(-1908861502, -2080426005).repeat(1157752064)
2021-03-12 12:42:17,970 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:42:17,970 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:42:17,970 [main:117] - GENERATED CALL = (Holder().value).trimStart()
2021-03-12 12:42:17,970 [main:61] - replacement of "OK_LOCAL" of type String is (Holder().value).removeSurrounding(StringBuilder())
2021-03-12 12:42:18,057 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:18,058 [main:53] - replacing (h.value, String)
2021-03-12 12:42:18,058 [main:50] - replacing h.value String
2021-03-12 12:42:18,058 [main:54] - Getting value of type String
2021-03-12 12:42:18,143 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:18,144 [main:58] - GENERATED VALUE OF TYPE String = "zgrcn"
2021-03-12 12:42:18,144 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:18,252 [main:67] - randomType = Short
2021-03-12 12:42:18,339 [main:302] - generating value of type = Short true depth = 0
2021-03-12 12:42:18,371 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@3cd62295]
2021-03-12 12:42:18,371 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]
2021-03-12 12:42:18,372 [main:78] - Generated call from random type = (9143).toChar().lowercase()
2021-03-12 12:42:18,372 [main:106] - GETTING String from String
2021-03-12 12:42:18,389 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:42:18,389 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:42:18,389 [main:117] - GENERATED CALL = (Holder().value).trimStart()
2021-03-12 12:42:18,390 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]]
2021-03-12 12:42:18,390 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@401130b5]
2021-03-12 12:42:18,474 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:18,563 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:18,565 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:18,744 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:42:18,748 [main:95] - GENERATED = StringBuilder(StringBuilder())
2021-03-12 12:42:18,748 [main:117] - GENERATED CALL = (Holder().value).removePrefix(StringBuilder(StringBuilder()))
2021-03-12 12:42:18,748 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]]
2021-03-12 12:42:18,748 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]
2021-03-12 12:42:18,833 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:18,946 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:18,947 [main:117] - GENERATED CALL = (Holder().value).padEnd(-38763597, '')
2021-03-12 12:42:18,947 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:42:18,947 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:42:18,948 [main:117] - GENERATED CALL = (Holder().value).trimMargin(Holder().value)
2021-03-12 12:42:18,948 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]]
2021-03-12 12:42:18,948 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@79e2298d]
2021-03-12 12:42:19,039 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:19,138 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:19,139 [main:117] - GENERATED CALL = (Holder().value).substringAfter('᥾', "zbtyl")
2021-03-12 12:42:19,139 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]]
2021-03-12 12:42:19,139 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]
2021-03-12 12:42:19,229 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:19,316 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:19,317 [main:117] - GENERATED CALL = (Holder().value).substringAfterLast('퇑', "xgtun")
2021-03-12 12:42:19,317 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:42:19,317 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:42:19,409 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:19,411 [main:117] - GENERATED CALL = (Holder().value).takeLast(279468901)
2021-03-12 12:42:19,411 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:42:19,411 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:42:19,497 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:19,586 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:19,587 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:19,768 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:42:19,772 [main:95] - GENERATED = StringBuilder("jnbcr")
2021-03-12 12:42:19,858 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:19,859 [main:117] - GENERATED CALL = (Holder().value).commonPrefixWith(StringBuilder("jnbcr"), true)
2021-03-12 12:42:19,859 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]]
2021-03-12 12:42:19,859 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@75ca3d3c]
2021-03-12 12:42:19,945 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:20,031 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:20,032 [main:117] - GENERATED CALL = (Holder().value).replaceBeforeLast('ꂫ', "kuoaq", test2(Holder(), -1516755372))
2021-03-12 12:42:20,032 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:42:20,032 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:20,032 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:20,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:20,150 [main:117] - GENERATED CALL = (Holder().value).compareTo(test1(Holder(), 554748738)).toString(244053364)
2021-03-12 12:42:20,150 [main:61] - replacement of h.value of type String is "zgrcn"
2021-03-12 12:42:20,246 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 12:42:20,247 [main:53] - replacing ({
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }, Function0<Unit>)
2021-03-12 12:42:20,247 [main:50] - replacing {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            } Function0<Unit>
2021-03-12 12:42:20,247 [main:54] - Getting value of type Function0<Unit>
2021-03-12 12:42:20,348 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 12:42:20,349 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:42:20,444 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:42:20,445 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:42:20,625 [main:302] - generating value of type = Any false depth = 4
2021-03-12 12:42:20,625 [main:95] - GENERATED = println("rzegy")
2021-03-12 12:42:20,625 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("rzegy")}
2021-03-12 12:42:20,625 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:20,628 [main:67] - randomType = Holder
2021-03-12 12:42:20,714 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:42:20,715 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:20,723 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:42:20,741 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:42:20,743 [main:106] - GETTING Function0<Unit> from String
2021-03-12 12:42:20,743 [main:61] - replacement of {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            } of type Function0<Unit> is { println("rzegy")}
2021-03-12 12:42:20,828 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 12:42:20,828 [main:53] - replacing ("OF_FINALLY1", String)
2021-03-12 12:42:20,828 [main:50] - replacing "OF_FINALLY1" String
2021-03-12 12:42:20,828 [main:54] - Getting value of type String
2021-03-12 12:42:20,913 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:20,915 [main:58] - GENERATED VALUE OF TYPE String = "fitkt"
2021-03-12 12:42:20,915 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:20,920 [main:67] - randomType = Holder
2021-03-12 12:42:21,012 [main:302] - generating value of type = Holder false depth = 0
2021-03-12 12:42:21,013 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:21,018 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:42:21,019 [main:78] - Generated call from random type = (Holder()).value.uppercase()
2021-03-12 12:42:21,019 [main:106] - GETTING String from String
2021-03-12 12:42:21,035 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd78d5c]]
2021-03-12 12:42:21,036 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bd78d5c]
2021-03-12 12:42:21,120 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:21,124 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).removeSuffix("hbkhz")
2021-03-12 12:42:21,124 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]]
2021-03-12 12:42:21,124 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]
2021-03-12 12:42:21,124 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).prependIndent(test1(Holder(), 554748738))
2021-03-12 12:42:21,124 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:42:21,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:42:21,124 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).lowercase()
2021-03-12 12:42:21,125 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e07bada]]
2021-03-12 12:42:21,125 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e07bada]
2021-03-12 12:42:21,125 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trim()
2021-03-12 12:42:21,125 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:42:21,125 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:42:21,209 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:21,210 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).takeLast(-1479717730)
2021-03-12 12:42:21,210 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:42:21,210 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:42:21,296 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:21,411 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:21,412 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).removeRange(-1776125079, -498916956)
2021-03-12 12:42:21,412 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]]
2021-03-12 12:42:21,412 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]
2021-03-12 12:42:21,412 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).trimIndent()
2021-03-12 12:42:21,412 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]]
2021-03-12 12:42:21,412 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1fb226f5]
2021-03-12 12:42:21,504 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:21,506 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceBefore('⇢', Holder().value, Holder().value)
2021-03-12 12:42:21,506 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:42:21,506 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:42:21,609 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:21,610 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).repeat(-346580603)
2021-03-12 12:42:21,610 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:42:21,610 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:42:21,699 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:21,700 [main:117] - GENERATED CALL = (test2(Holder(), -1516755372)).replaceAfter('', test1(Holder(), 554748738), Holder().value)
2021-03-12 12:42:21,701 [main:61] - replacement of "OF_FINALLY1" of type String is "fitkt"
2021-03-12 12:42:21,787 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 12:42:21,787 [main:53] - replacing (h.value, String)
2021-03-12 12:42:21,787 [main:50] - replacing h.value String
2021-03-12 12:42:21,787 [main:54] - Getting value of type String
2021-03-12 12:42:21,872 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:21,873 [main:58] - GENERATED VALUE OF TYPE String = "nzluu"
2021-03-12 12:42:21,873 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:21,969 [main:67] - randomType = List<Float>
2021-03-12 12:42:21,969 [main:106] - GETTING String from String
2021-03-12 12:42:21,989 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:42:21,989 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:42:21,989 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).toUpperCase()
2021-03-12 12:42:21,989 [main:113] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]]
2021-03-12 12:42:21,989 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@468a053f]
2021-03-12 12:42:22,075 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:22,076 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:22,077 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).dropLastWhile({a: Char -> true})
2021-03-12 12:42:22,077 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]]
2021-03-12 12:42:22,077 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b5d1743]
2021-03-12 12:42:22,077 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimIndent()
2021-03-12 12:42:22,077 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]]
2021-03-12 12:42:22,077 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]
2021-03-12 12:42:22,078 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimEnd()
2021-03-12 12:42:22,078 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:42:22,078 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:42:22,163 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:22,249 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:22,250 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).removeRange(1991852903, -204640317)
2021-03-12 12:42:22,250 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]]
2021-03-12 12:42:22,250 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@43ff8b6]
2021-03-12 12:42:22,251 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimStart()
2021-03-12 12:42:22,251 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:42:22,251 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:42:22,336 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:42:22,337 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:22,338 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).filterIndexed({a: Int, b: Char -> false})
2021-03-12 12:42:22,338 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:42:22,338 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:22,338 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:22,424 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:22,425 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).compareTo(test2(Holder(), -1516755372)).toString(-1628954340)
2021-03-12 12:42:22,428 [main:113] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]]
2021-03-12 12:42:22,428 [main:149] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37aa5a0c]
2021-03-12 12:42:22,514 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:22,515 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).substringBeforeLast('', test2(Holder(), -1516755372))
2021-03-12 12:42:22,515 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]]
2021-03-12 12:42:22,515 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ea600e]
2021-03-12 12:42:22,515 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).concat(test1(Holder(), 554748738))
2021-03-12 12:42:22,515 [main:61] - replacement of h.value of type String is "nzluu"
2021-03-12 12:42:22,628 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 12:42:22,629 [main:53] - replacing (h.value, String)
2021-03-12 12:42:22,629 [main:50] - replacing h.value String
2021-03-12 12:42:22,629 [main:54] - Getting value of type String
2021-03-12 12:42:22,731 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:22,732 [main:58] - GENERATED VALUE OF TYPE String = "awpdk"
2021-03-12 12:42:22,732 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:22,847 [main:67] - randomType = ArrayDeque<Holder>
2021-03-12 12:42:22,937 [main:302] - generating value of type = ArrayDeque<Holder> false depth = 0
2021-03-12 12:42:23,029 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Holder> = TODO()
2021-03-12 12:42:23,031 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Holder> = TODO()
2021-03-12 12:42:23,222 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:42:23,223 [main:95] - GENERATED = ArrayDeque<Holder>(-933515835)
2021-03-12 12:42:23,356 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@28472311]
2021-03-12 12:42:23,356 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public fun <T> kotlin.Array<out T>.contentDeepToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@52f3c809]
2021-03-12 12:42:23,356 [main:78] - Generated call from random type = (ArrayDeque<Holder>(-933515835)).toArray().contentDeepToString()
2021-03-12 12:42:23,356 [main:61] - replacement of h.value of type String is (ArrayDeque<Holder>(-933515835)).toArray().contentDeepToString()
2021-03-12 12:42:23,441 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:23,441 [main:53] - replacing (test2(h, 0), String)
2021-03-12 12:42:23,441 [main:50] - replacing test2(h, 0) String
2021-03-12 12:42:23,441 [main:54] - Getting value of type String
2021-03-12 12:42:23,526 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:23,527 [main:58] - GENERATED VALUE OF TYPE String = "lzexu"
2021-03-12 12:42:23,527 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:24,040 [main:67] - randomType = Map<LinkedHashMap<Pair<Holder, ULong>, Holder>, UInt>
2021-03-12 12:42:24,041 [main:106] - GETTING String from String
2021-03-12 12:42:24,071 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]]
2021-03-12 12:42:24,071 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77e8d3ad]
2021-03-12 12:42:24,164 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:24,165 [main:117] - GENERATED CALL = (Holder().value).trimMargin("lyvjd")
2021-03-12 12:42:24,166 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]]
2021-03-12 12:42:24,166 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ad7f2c2]
2021-03-12 12:42:24,166 [main:117] - GENERATED CALL = (Holder().value).toLowerCase()
2021-03-12 12:42:24,166 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]]
2021-03-12 12:42:24,166 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3665caa0]
2021-03-12 12:42:24,264 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:24,356 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:24,357 [main:117] - GENERATED CALL = (Holder().value).removeRange(-976505566, 1704587264)
2021-03-12 12:42:24,357 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]]
2021-03-12 12:42:24,357 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a934298]
2021-03-12 12:42:24,442 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:24,529 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:24,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:24,617 [main:117] - GENERATED CALL = (Holder().value).replace('ꮕ', '蕖', false)
2021-03-12 12:42:24,617 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]]
2021-03-12 12:42:24,617 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:24,704 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:24,705 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3651f181]
2021-03-12 12:42:24,705 [main:117] - GENERATED CALL = (Holder().value).get(-72882115).titlecase()
2021-03-12 12:42:24,705 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]]
2021-03-12 12:42:24,705 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c208a98]
2021-03-12 12:42:24,791 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 12:42:24,881 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:24,883 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 12:42:25,063 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 12:42:25,154 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:42:25,156 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 12:42:25,385 [main:302] - generating value of type = String true depth = 6
2021-03-12 12:42:25,386 [main:95] - GENERATED = StringBuilder("axogg")
2021-03-12 12:42:25,386 [main:95] - GENERATED = StringBuilder(StringBuilder("axogg"))
2021-03-12 12:42:25,485 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:25,486 [main:117] - GENERATED CALL = (Holder().value).commonPrefixWith(StringBuilder(StringBuilder("axogg")), true)
2021-03-12 12:42:25,486 [main:113] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]]
2021-03-12 12:42:25,486 [main:149] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7e37dae9]
2021-03-12 12:42:25,578 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:25,579 [main:117] - GENERATED CALL = (Holder().value).substringAfterLast('⺚', test2(Holder(), -1516755372))
2021-03-12 12:42:25,579 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:42:25,579 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:42:25,666 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:42:25,667 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:25,668 [main:117] - GENERATED CALL = (Holder().value).filterIndexed({a: Int, b: Char -> true})
2021-03-12 12:42:25,668 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:42:25,669 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:42:25,753 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:25,754 [main:117] - GENERATED CALL = (Holder().value).replaceAfter('棩', Holder().value, Holder().value)
2021-03-12 12:42:25,754 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]]
2021-03-12 12:42:25,754 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4676f155]
2021-03-12 12:42:25,754 [main:117] - GENERATED CALL = (Holder().value).capitalize()
2021-03-12 12:42:25,754 [main:61] - replacement of test2(h, 0) of type String is Holder().value
2021-03-12 12:42:25,839 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:25,839 [main:53] - replacing ("OF_FINALLY1", String)
2021-03-12 12:42:25,839 [main:50] - replacing "OF_FINALLY1" String
2021-03-12 12:42:25,839 [main:54] - Getting value of type String
2021-03-12 12:42:25,923 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:25,924 [main:58] - GENERATED VALUE OF TYPE String = "ntsez"
2021-03-12 12:42:25,924 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:26,118 [main:67] - randomType = HashSet<HashMap<Holder, Holder>>
2021-03-12 12:42:26,203 [main:302] - generating value of type = HashSet<HashMap<Holder, Holder>> false depth = 0
2021-03-12 12:42:26,294 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: HashMap<Holder, Holder>): HashSet<HashMap<Holder, Holder>> = TODO()
2021-03-12 12:42:26,295 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: HashMap<Holder, Holder>): HashSet<HashMap<Holder, Holder>> = TODO()
2021-03-12 12:42:26,383 [main:302] - generating value of type = HashMap<Holder, Holder> false depth = 3
2021-03-12 12:42:26,505 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Holder, Holder>): HashMap<Holder, Holder> = TODO()
2021-03-12 12:42:26,507 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Holder, Holder>): HashMap<Holder, Holder> = TODO()
2021-03-12 12:42:26,605 [main:302] - generating value of type = Pair<Holder, Holder> false depth = 6
2021-03-12 12:42:26,708 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Holder, second: Holder): Pair<Holder, Holder> = TODO()
2021-03-12 12:42:26,710 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Holder, second: Holder): Pair<Holder, Holder> = TODO()
2021-03-12 12:42:26,807 [main:302] - generating value of type = Holder false depth = 9
2021-03-12 12:42:26,809 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:26,809 [main:302] - generating value of type = Holder false depth = 9
2021-03-12 12:42:26,810 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:26,811 [main:95] - GENERATED = Pair<Holder, Holder>(Holder(), Holder())
2021-03-12 12:42:26,811 [main:95] - GENERATED = linkedMapOf<Holder, Holder>(Pair<Holder, Holder>(Holder(), Holder()))
2021-03-12 12:42:26,811 [main:95] - GENERATED = linkedSetOf<HashMap<Holder, Holder>>(linkedMapOf<Holder, Holder>(Pair<Holder, Holder>(Holder(), Holder())))
2021-03-12 12:42:26,962 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:27,048 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:27,049 [main:78] - Generated call from random type = (linkedSetOf<HashMap<Holder, Holder>>(linkedMapOf<Holder, Holder>(Pair<Holder, Holder>(Holder(), Holder())))).size.toString(398338292)
2021-03-12 12:42:27,049 [main:106] - GETTING String from String
2021-03-12 12:42:27,069 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]]
2021-03-12 12:42:27,069 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67d650fb]
2021-03-12 12:42:27,069 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).uppercase()
2021-03-12 12:42:27,070 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]]
2021-03-12 12:42:27,070 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bc22c1e]
2021-03-12 12:42:27,155 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:27,156 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceAfterLast('䒔', test1(Holder(), 554748738), Holder().value)
2021-03-12 12:42:27,156 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]]
2021-03-12 12:42:27,156 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@61a792a7]
2021-03-12 12:42:27,241 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:27,242 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).repeat(1194333799)
2021-03-12 12:42:27,242 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]]
2021-03-12 12:42:27,242 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@601ff348]
2021-03-12 12:42:27,328 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:27,329 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).drop(1713259553)
2021-03-12 12:42:27,329 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]]
2021-03-12 12:42:27,329 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:27,414 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:27,415 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df9432a]
2021-03-12 12:42:27,415 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).get(-1602060208).lowercase()
2021-03-12 12:42:27,415 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]]
2021-03-12 12:42:27,415 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@422097c9]
2021-03-12 12:42:27,500 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 12:42:27,501 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:27,505 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).filterIndexed({a: Int, b: Char -> false})
2021-03-12 12:42:27,505 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]]
2021-03-12 12:42:27,505 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a95092e]
2021-03-12 12:42:27,505 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).trimEnd()
2021-03-12 12:42:27,506 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]]
2021-03-12 12:42:27,506 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4a6b1c5b]
2021-03-12 12:42:27,590 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:27,683 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:27,769 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 12:42:27,770 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).replaceFirst('䭇', '糪', true)
2021-03-12 12:42:27,770 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]]
2021-03-12 12:42:27,770 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@558b7717]
2021-03-12 12:42:27,888 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:27,889 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:27,891 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).takeWhile({a: Char -> false})
2021-03-12 12:42:27,892 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]]
2021-03-12 12:42:27,892 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a1aff1e]
2021-03-12 12:42:28,012 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 12:42:28,113 [main:43] - GENERATING CALL OF fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 12:42:28,114 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableListOf(): Iterable<Int> = TODO()
2021-03-12 12:42:28,205 [main:95] - GENERATED = mutableListOf<Int>()
2021-03-12 12:42:28,205 [main:117] - GENERATED CALL = (test1(Holder(), 554748738)).slice(mutableListOf<Int>())
2021-03-12 12:42:28,205 [main:61] - replacement of "OF_FINALLY1" of type String is (test1(Holder(), 554748738)).uppercase()
2021-03-12 12:42:28,290 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:28,290 [main:53] - replacing (test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)), String)
2021-03-12 12:42:28,290 [main:50] - replacing test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)) String
2021-03-12 12:42:28,290 [main:54] - Getting value of type String
2021-03-12 12:42:28,375 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:28,376 [main:58] - GENERATED VALUE OF TYPE String = "qbstb"
2021-03-12 12:42:28,376 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:28,958 [main:67] - randomType = MutableMap<Holder?, MutableMap<HashMap<String, Double?>, Int>>
2021-03-12 12:42:28,958 [main:106] - GETTING String from String
2021-03-12 12:42:28,976 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]]
2021-03-12 12:42:28,976 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1231f090]
2021-03-12 12:42:29,091 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:29,092 [main:117] - GENERATED CALL = (Holder().value).takeLast(-1771629711)
2021-03-12 12:42:29,092 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]]
2021-03-12 12:42:29,092 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21a8597d]
2021-03-12 12:42:29,183 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:29,185 [main:117] - GENERATED CALL = (Holder().value).replaceAfter('', test1(Holder(), 554748738), test2(Holder(), -1516755372))
2021-03-12 12:42:29,185 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]]
2021-03-12 12:42:29,185 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@137ebd81]
2021-03-12 12:42:29,185 [main:117] - GENERATED CALL = (Holder().value).decapitalize()
2021-03-12 12:42:29,185 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]]
2021-03-12 12:42:29,185 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4108222e]
2021-03-12 12:42:29,185 [main:117] - GENERATED CALL = (Holder().value).toUpperCase()
2021-03-12 12:42:29,185 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49ba30f8]]
2021-03-12 12:42:29,185 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@49ba30f8]
2021-03-12 12:42:29,284 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 12:42:29,285 [main:302] - generating value of type = Char true depth = 1
2021-03-12 12:42:29,286 [main:117] - GENERATED CALL = (Holder().value).replaceFirstChar({a: Char -> '䜕'})
2021-03-12 12:42:29,286 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]]
2021-03-12 12:42:29,286 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a031eca]
2021-03-12 12:42:29,376 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:29,464 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:29,465 [main:117] - GENERATED CALL = (Holder().value).substringBefore('?', "vpsmk")
2021-03-12 12:42:29,465 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]]
2021-03-12 12:42:29,465 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7a2fdbb6]
2021-03-12 12:42:29,466 [main:117] - GENERATED CALL = (Holder().value).prependIndent(Holder().value)
2021-03-12 12:42:29,466 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]]
2021-03-12 12:42:29,466 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5ce93de8]
2021-03-12 12:42:29,466 [main:117] - GENERATED CALL = (Holder().value).lowercase()
2021-03-12 12:42:29,466 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]]
2021-03-12 12:42:29,466 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5862917a]
2021-03-12 12:42:29,551 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:29,639 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:29,640 [main:117] - GENERATED CALL = (Holder().value).padEnd(-1227476927, '蟈')
2021-03-12 12:42:29,640 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]]
2021-03-12 12:42:29,640 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@b486fcd]
2021-03-12 12:42:29,640 [main:117] - GENERATED CALL = (Holder().value).reversed()
2021-03-12 12:42:29,640 [main:61] - replacement of test1(Holder(), (test1(Holder(), 554748738)).length.coerceAtLeast(-2085608613)) of type String is (Holder().value).padEnd(-1227476927, '蟈')
2021-03-12 12:42:29,726 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:29,813 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 12:42:29,898 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:29,898 [main:66] - Compilation checking started
2021-03-12 12:42:30,264 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(-1634104148)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:30,264 [main:119] - TRYING TO REPLACE CONSTANT 1634104148
2021-03-12 12:42:30,358 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:30,358 [main:66] - Compilation checking started
2021-03-12 12:42:30,743 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(-277562048, -369199578).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:30,743 [main:119] - TRYING TO REPLACE CONSTANT 277562048
2021-03-12 12:42:30,866 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:30,866 [main:66] - Compilation checking started
2021-03-12 12:42:31,257 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, -369199578).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:31,258 [main:119] - TRYING TO REPLACE CONSTANT 369199578
2021-03-12 12:42:31,352 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:31,353 [main:66] - Compilation checking started
2021-03-12 12:42:31,708 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(true, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:31,708 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 12:42:31,804 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 12:42:31,805 [main:66] - Compilation checking started
2021-03-12 12:42:32,165 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(692117947, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:32,165 [main:119] - TRYING TO REPLACE CONSTANT 692117947
2021-03-12 12:42:32,254 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:32,254 [main:66] - Compilation checking started
2021-03-12 12:42:32,617 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, 1928797044, StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:32,618 [main:119] - TRYING TO REPLACE CONSTANT 1928797044
2021-03-12 12:42:32,717 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 12:42:32,718 [main:66] - Compilation checking started
2021-03-12 12:42:33,097 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 554748738)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:33,097 [main:119] - TRYING TO REPLACE CONSTANT 554748738
2021-03-12 12:42:33,190 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:33,190 [main:66] - Compilation checking started
2021-03-12 12:42:33,521 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), 554748738))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:33,521 [main:119] - TRYING TO REPLACE CONSTANT 554748738
2021-03-12 12:42:33,609 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(PREFIX_EXPRESSION)
2021-03-12 12:42:33,610 [main:66] - Compilation checking started
2021-03-12 12:42:33,969 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:33,969 [main:119] - TRYING TO REPLACE CONSTANT 0.68622595f
2021-03-12 12:42:34,060 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(FLOAT_CONSTANT)
2021-03-12 12:42:34,060 [main:66] - Compilation checking started
2021-03-12 12:42:34,400 [main:119] - TRYING TO REPLACE CONSTANT 12
2021-03-12 12:42:34,493 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:34,494 [main:66] - Compilation checking started
2021-03-12 12:42:34,841 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(2086840853)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:34,841 [main:119] - TRYING TO REPLACE CONSTANT 797494167
2021-03-12 12:42:34,956 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:34,956 [main:66] - Compilation checking started
2021-03-12 12:42:35,289 [main:119] - TRYING TO REPLACE CONSTANT 2086840853
2021-03-12 12:42:35,382 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:35,382 [main:66] - Compilation checking started
2021-03-12 12:42:35,717 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (98)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(98)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:35,717 [main:119] - TRYING TO REPLACE CONSTANT 98
2021-03-12 12:42:35,822 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:35,823 [main:66] - Compilation checking started
2021-03-12 12:42:36,169 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (277562048)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(98)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get(1968330198).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:36,169 [main:119] - TRYING TO REPLACE CONSTANT 1216500501
2021-03-12 12:42:36,261 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 12:42:36,261 [main:66] - Compilation checking started
2021-03-12 12:42:36,644 [main:119] - TRYING TO REPLACE CONSTANT 1968330198
2021-03-12 12:42:36,747 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-12 12:42:36,747 [main:66] - Compilation checking started
2021-03-12 12:42:37,135 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (277562048)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(98)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get((277562048)?.toInt()).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:37,135 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 12:42:37,229 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:37,230 [main:66] - Compilation checking started
2021-03-12 12:42:37,583 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require((h).equals("lsbbg"), { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (277562048)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(98)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get((277562048)?.toInt()).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor(false)) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:37,583 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 12:42:37,678 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-12 12:42:37,678 [main:66] - Compilation checking started
2021-03-12 12:42:38,040 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 554748738)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require((h).equals("lsbbg"), { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (277562048)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(98)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get((277562048)?.toInt()).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1")) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:38,040 [main:119] - TRYING TO REPLACE CONSTANT 554748738
2021-03-12 12:42:38,135 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 12:42:38,135 [main:66] - Compilation checking started
2021-03-12 12:42:38,475 [main:53] - Result = true
Text:


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         { println("usqyh")}()
    } finally {
        block()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            { require(false, { "ktrkk"})},
            { print("kskuc")}
    )

    return (test1(Holder(), 1928797044)).removeSuffix(StringBuilder());
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            { require((h).equals("lsbbg"), { "mvbli"})},
            { print("gxwcp")}
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = (277562048)?.toInt().toString(-1216500501)
    if ((Holder().value).compareTo(test1(Holder(), 98)).equals("maabs")) return "test10: ${(Holder()).value.trimMargin(test1(Holder(), -1216500501))}, holder: ${h.value}"

    h = Holder()
    val test11 = (Holder().value).subSequence(692117947, 692117947).repeat(554748738)
    if (test11 != "OF_FINALLY1" || (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(98.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>())) return (Holder()).value.takeLast(98)

    h = Holder()
    val test2 = (test10).dropLast(797494167)
    if ((Holder()).value.startsWith(test10, (linkedMapOf<Holder, LinkedHashMap<UByte?, Float>>(Pair<Holder, LinkedHashMap<UByte?, Float>>(Holder(), linkedMapOf<UByte?, Float>(Pair<UByte?, Float>(12.toUByte(), 0.68622595f)))))?.values.add(linkedMapOf<UByte?, Float>()))) return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = (Holder().value).get((277562048)?.toInt()).uppercase()
    if ((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1" || (h).equals("lsbbg").xor((h).value.slice(linkedSetOf<Int>()) != "OF_FINALLY1")) return (Holder()).value.replaceRange(554748738, (98), StringBuilder("kcpcn"))

    return "OK"
}


2021-03-12 12:42:38,499 [main:41] - AFTER TRY 0 res = 

public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}


2021-03-12 12:42:38,668 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:38,840 [main:43] - GENERATING CALL OF public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}
2021-03-12 12:42:38,840 [main:61] - WITHOUT TYPE PARAMS = public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}
2021-03-12 12:42:39,150 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 12:42:39,150 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 12:42:39,243 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:42:39,244 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:42:39,514 [main:302] - generating value of type = Boolean true depth = 5
2021-03-12 12:42:39,515 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-12 12:42:39,515 [main:302] - generating value of type = Any false depth = 6
2021-03-12 12:42:39,515 [main:95] - GENERATED = check(false, { "qifti"})
2021-03-12 12:42:39,516 [main:302] - generating value of type = Function0<Unit> false depth = 1
2021-03-12 12:42:39,516 [main:302] - generating value of type = Unit false depth = 2
2021-03-12 12:42:39,604 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 12:42:39,605 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 12:42:39,877 [main:302] - generating value of type = Int true depth = 5
2021-03-12 12:42:39,878 [main:302] - generating value of type = Function1<Int, Unit> false depth = 5
2021-03-12 12:42:39,878 [main:302] - generating value of type = Unit false depth = 6
2021-03-12 12:42:39,967 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:42:39,968 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 12:42:40,276 [main:302] - generating value of type = Boolean true depth = 9
2021-03-12 12:42:40,276 [main:302] - generating value of type = Function0<Any> false depth = 9
2021-03-12 12:42:40,277 [main:302] - generating value of type = Any false depth = 10
2021-03-12 12:42:40,277 [main:95] - GENERATED = check(true, { "yxduy"})
2021-03-12 12:42:40,277 [main:95] - GENERATED = repeat(-1055386629, {a: Int -> check(true, { "yxduy"})})
2021-03-12 12:42:40,277 [main:95] - GENERATED = doCall({ check(false, { "qifti"})}, { repeat(-1055386629, {a: Int -> check(true, { "yxduy"})})})
2021-03-12 12:42:40,367 [main:43] - GENERATING CALL OF fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}
2021-03-12 12:42:40,368 [main:61] - WITHOUT TYPE PARAMS = fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}
2021-03-12 12:42:40,470 [main:302] - generating value of type = Holder false depth = 1
2021-03-12 12:42:40,470 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:40,470 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:42:40,471 [main:95] - GENERATED = test1(Holder(), 728792668)
2021-03-12 12:42:40,558 [main:43] - GENERATING CALL OF fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}
2021-03-12 12:42:40,559 [main:61] - WITHOUT TYPE PARAMS = fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}
2021-03-12 12:42:40,647 [main:302] - generating value of type = Holder false depth = 1
2021-03-12 12:42:40,648 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:40,648 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:42:40,649 [main:95] - GENERATED = test2(Holder(), 314600624)
2021-03-12 12:42:40,750 [main:43] - Try №0
2021-03-12 12:42:43,371 [main:70] - Trying to insert operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}
2021-03-12 12:42:43,483 [main:66] - Compilation checking started
2021-03-12 12:42:44,192 [main:104] - Trying to change 41 nodes
2021-03-12 12:42:44,192 [main:108] - replacing (prope0, String)
2021-03-12 12:42:44,197 [main:50] - replacing prope0 String
2021-03-12 12:42:44,197 [main:54] - Getting value of type String
2021-03-12 12:42:44,336 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:44,337 [main:58] - GENERATED VALUE OF TYPE String = "tpbvo"
2021-03-12 12:42:44,338 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:44,476 [main:67] - randomType = Sequence<Holder>
2021-03-12 12:42:44,477 [main:106] - GETTING String from Boolean
2021-03-12 12:42:44,492 [main:113] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]]
2021-03-12 12:42:44,492 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]
2021-03-12 12:42:44,492 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:44,618 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:44,619 [main:117] - GENERATED CALL = (test2 != "OF_FINALLY1").compareTo(test21 != "OF_FINALLY1").toString(-1483922671)
2021-03-12 12:42:44,619 [main:115] - replacement of prope0 of type String is "tpbvo"
2021-03-12 12:42:44,748 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 12:42:44,748 [main:66] - Compilation checking started
2021-03-12 12:42:45,044 [main:49] - Result = false
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    val prope1 = Kla1<Ty0>()
    prope1.block()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        "tpbvo" = "OK"
        map += 1 to "s"
        prope2 += 1 to ("s" as Any)
        map[0] = Any()
    }
}

fun box758(): String {
    fu1(mutableMapOf(1 to ""))
    return prope0
}


2021-03-12 12:42:45,045 [main:108] - replacing ("OK", String)
2021-03-12 12:42:45,046 [main:50] - replacing "OK" String
2021-03-12 12:42:45,046 [main:54] - Getting value of type String
2021-03-12 12:42:45,198 [main:302] - generating value of type = String true depth = 0
2021-03-12 12:42:45,199 [main:58] - GENERATED VALUE OF TYPE String = "mwwxw"
2021-03-12 12:42:45,199 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:45,329 [main:67] - randomType = Long
2021-03-12 12:42:45,469 [main:302] - generating value of type = Long true depth = 0
2021-03-12 12:42:45,501 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@4b097b9e]
2021-03-12 12:42:45,612 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 12:42:45,613 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@441eb07b]
2021-03-12 12:42:45,725 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:45,726 [main:78] - Generated call from random type = (6473908024069289012).compareTo(74).toString(-725934254)
2021-03-12 12:42:45,726 [main:115] - replacement of "OK" of type String is (6473908024069289012).compareTo(74).toString(-725934254)
2021-03-12 12:42:45,834 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:45,835 [main:66] - Compilation checking started
2021-03-12 12:42:46,247 [main:53] - Result = true
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    val prope1 = Kla1<Ty0>()
    prope1.block()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        prope0 = (6473908024069289012).compareTo(74).toString(-725934254)
        map += 1 to "s"
        prope2 += 1 to ("s" as Any)
        map[0] = Any()
    }
}

fun box758(): String {
    fu1(mutableMapOf(1 to ""))
    return prope0
}


2021-03-12 12:42:46,249 [main:108] - replacing (1, Int)
2021-03-12 12:42:46,251 [main:50] - replacing 1 Int
2021-03-12 12:42:46,252 [main:54] - Getting value of type Int
2021-03-12 12:42:46,372 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:46,372 [main:58] - GENERATED VALUE OF TYPE Int = -329785221
2021-03-12 12:42:46,373 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:47,031 [main:67] - randomType = Kla2<Float, Kla1<Holder>>?
2021-03-12 12:42:47,213 [main:302] - generating value of type = Kla2<Float, Kla1<Holder>> false depth = 0
2021-03-12 12:42:47,215 [main:112] - generating klass Kla2 text = class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)
2021-03-12 12:42:48,627 [main:194] - Type params = [Float, Kla1<Holder>]
2021-03-12 12:42:48,915 [main:302] - generating value of type = MutableMap<Float, Kla1<Holder>> false depth = 2
2021-03-12 12:42:49,048 [main:43] - GENERATING CALL OF fun <K, V> HashMap(): MutableMap<Float, Kla1<Holder>> = TODO()
2021-03-12 12:42:49,050 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(): MutableMap<Float, Kla1<Holder>> = TODO()
2021-03-12 12:42:49,189 [main:95] - GENERATED = HashMap<Float, Kla1<Holder>>()
2021-03-12 12:42:49,205 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@4e44abf4]
2021-03-12 12:42:49,328 [main:302] - generating value of type = Any false depth = 0
2021-03-12 12:42:49,328 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4f2aeb97]
2021-03-12 12:42:49,329 [main:78] - Generated call from random type = (Kla2<Float, Kla1<Holder>>(HashMap<Float, Kla1<Holder>>()))?.equals("qrgvj").compareTo(test21 != "OF_FINALLY1")
2021-03-12 12:42:49,329 [main:106] - GETTING Int from String
2021-03-12 12:42:49,363 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c2e1acb]]
2021-03-12 12:42:49,363 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1c2e1acb]
2021-03-12 12:42:49,363 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).length.takeLowestOneBit()
2021-03-12 12:42:49,364 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@a71bd81]]
2021-03-12 12:42:49,364 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:49,364 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).compareTo(Holder().value).absoluteValue
2021-03-12 12:42:49,364 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34e9f3d6]]
2021-03-12 12:42:49,364 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34e9f3d6]
2021-03-12 12:42:49,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:49,484 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).length.ushr(-582473601)
2021-03-12 12:42:49,484 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44767bcb]]
2021-03-12 12:42:49,484 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44767bcb]
2021-03-12 12:42:49,605 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 12:42:49,606 [main:302] - generating value of type = Int true depth = 1
2021-03-12 12:42:49,607 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).sumOf({a: Char -> -929392218})
2021-03-12 12:42:49,608 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@49bca1ec]]
2021-03-12 12:42:49,608 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@24bb9348]
2021-03-12 12:42:49,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:49,733 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@49bca1ec]
2021-03-12 12:42:49,844 [main:302] - generating value of type = Char true depth = 0
2021-03-12 12:42:49,845 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).get(-240845252).minus('푪')
2021-03-12 12:42:49,845 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7976560c]]
2021-03-12 12:42:49,845 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:49,845 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@7976560c]
2021-03-12 12:42:49,960 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:49,962 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).compareTo(test21).coerceAtLeast(-500028251)
2021-03-12 12:42:49,962 [main:113] - Case = [public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1bf1b4]]
2021-03-12 12:42:49,962 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfLast(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4c1bf1b4]
2021-03-12 12:42:50,079 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 12:42:50,080 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 12:42:50,082 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).indexOfLast({a: Char -> false})
2021-03-12 12:42:50,082 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@67d215a9], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]]
2021-03-12 12:42:50,082 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ef6637f]
2021-03-12 12:42:50,200 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:50,201 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).length.shl(-1681450673)
2021-03-12 12:42:50,201 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@288aee32]]
2021-03-12 12:42:50,201 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:50,201 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@288aee32]
2021-03-12 12:42:50,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 12:42:50,316 [main:117] - GENERATED CALL = (test1(Holder(), 728792668)).compareTo(Holder().value).shr(1697583854)
2021-03-12 12:42:50,316 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1325b6a6]]
2021-03-12 12:42:50,316 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@52f8d420]
2021-03-12 12:42:50,316 [main:115] - replacement of 1 of type Int is (test1(Holder(), 728792668)).compareTo(Holder().value).shr(1697583854)
2021-03-12 12:42:50,475 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 12:42:50,476 [main:66] - Compilation checking started
2021-03-12 12:42:50,926 [main:53] - Result = true
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    val prope1 = Kla1<Ty0>()
    prope1.block()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        prope0 = (6473908024069289012).compareTo(74).toString(-725934254)
        map += 1 to "s"
        prope2 += 1 to ("s" as Any)
        map[0] = Any()
    }
}

fun box758(): String {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
fu1(mutableMapOf((test1(Holder(), 728792668)).compareTo(Holder().value).shr(1697583854) to ""))
    return prope0
}


2021-03-12 12:42:50,927 [main:108] - replacing (mutableMapOf((test1(Holder(), 728792668)).compareTo(Holder().value).shr(1697583854) to ""), MutableMap<Int, Any>)
2021-03-12 12:42:50,927 [main:50] - replacing mutableMapOf((test1(Holder(), 728792668)).compareTo(Holder().value).shr(1697583854) to "") MutableMap<Int, Any>
2021-03-12 12:42:50,927 [main:54] - Getting value of type MutableMap<Int, Any>
2021-03-12 12:42:51,040 [main:302] - generating value of type = MutableMap<Int, Any> false depth = 0
2021-03-12 12:42:51,155 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(pairs: Pair<Int, Any>): MutableMap<Int, Any> = TODO()
2021-03-12 12:42:51,158 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(pairs: Pair<Int, Any>): MutableMap<Int, Any> = TODO()
2021-03-12 12:42:51,274 [main:302] - generating value of type = Pair<Int, Any> false depth = 3
2021-03-12 12:42:51,395 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Any): Pair<Int, Any> = TODO()
2021-03-12 12:42:51,397 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Any): Pair<Int, Any> = TODO()
2021-03-12 12:42:51,511 [main:302] - generating value of type = Int true depth = 6
2021-03-12 12:42:51,513 [main:302] - generating value of type = Any false depth = 6
2021-03-12 12:42:51,513 [main:95] - GENERATED = Pair<Int, Any>(-1264341404, "hzosg")
2021-03-12 12:42:51,513 [main:95] - GENERATED = mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg"))
2021-03-12 12:42:51,513 [main:58] - GENERATED VALUE OF TYPE MutableMap<Int, Any> = mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg"))
2021-03-12 12:42:51,514 [main:61] - GENERATED IS CALL =true
2021-03-12 12:42:52,244 [main:67] - randomType = LinkedHashSet<Triple<Kla0<Kla2<Byte, String>>, Holder, Short>>
2021-03-12 12:42:52,383 [main:302] - generating value of type = LinkedHashSet<Triple<Kla0<Kla2<Byte, String>>, Holder, Short>> false depth = 0
2021-03-12 12:42:52,498 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Triple<Kla0<Kla2<Byte, String>>, Holder, Short>): LkedHashSet<Triple<Kla0<Kla2<Byte, Strg>>, Holder, Short>> = TODO()
2021-03-12 12:42:52,500 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Triple<Kla0<Kla2<Byte, String>>, Holder, Short>): LkedHashSet<Triple<Kla0<Kla2<Byte, Strg>>, Holder, Short>> = TODO()
2021-03-12 12:42:52,615 [main:302] - generating value of type = Triple<Kla0<Kla2<Byte, String>>, Holder, Short> false depth = 3
2021-03-12 12:42:52,732 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Kla0<Kla2<Byte, String>>, second: Holder, third: Short): Triple<Kla0<Kla2<Byte, String>>, Holder, Short> = TODO()
2021-03-12 12:42:52,734 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Kla0<Kla2<Byte, String>>, second: Holder, third: Short): Triple<Kla0<Kla2<Byte, String>>, Holder, Short> = TODO()
2021-03-12 12:42:52,851 [main:302] - generating value of type = Kla0<Kla2<Byte, String>> false depth = 6
2021-03-12 12:42:52,852 [main:112] - generating klass Kla0 text = interface Kla0<Ty0>
2021-03-12 12:42:53,453 [main:302] - generating value of type = Kla1<Kla2<Byte, String>> false depth = 8
2021-03-12 12:42:53,454 [main:112] - generating klass Kla1 text = class Kla1<Ty0> : Kla0<Ty0>
2021-03-12 12:42:53,695 [main:302] - generating value of type = Holder false depth = 6
2021-03-12 12:42:53,696 [main:112] - generating klass Holder text = class Holder {
    var value: String = ""
}
2021-03-12 12:42:53,696 [main:302] - generating value of type = Short true depth = 6
2021-03-12 12:42:53,697 [main:95] - GENERATED = Triple<Kla0<Kla2<Byte, String>>, Holder, Short>(Kla1<Kla2<Byte, String>>(), Holder(), -30521)
2021-03-12 12:42:53,698 [main:95] - GENERATED = linkedSetOf<Triple<Kla0<Kla2<Byte, String>>, Holder, Short>>(Triple<Kla0<Kla2<Byte, String>>, Holder, Short>(Kla1<Kla2<Byte, String>>(), Holder(), -30521))
2021-03-12 12:42:54,007 [main:106] - GETTING MutableMap<Int, Any> from Holder
2021-03-12 12:42:54,016 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,038 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,042 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,046 [main:106] - GETTING MutableMap<Int, Any> from Boolean
2021-03-12 12:42:54,059 [main:106] - GETTING MutableMap<Int, Any> from Boolean
2021-03-12 12:42:54,062 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,066 [main:106] - GETTING MutableMap<Int, Any> from Boolean
2021-03-12 12:42:54,069 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,073 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,076 [main:106] - GETTING MutableMap<Int, Any> from Boolean
2021-03-12 12:42:54,079 [main:106] - GETTING MutableMap<Int, Any> from String
2021-03-12 12:42:54,079 [main:115] - replacement of mutableMapOf((test1(Holder(), 728792668)).compareTo(Holder().value).shr(1697583854) to "") of type MutableMap<Int, Any> is mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg"))
2021-03-12 12:42:54,186 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:42:54,186 [main:66] - Compilation checking started
2021-03-12 12:42:54,570 [main:53] - Result = true
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    val prope1 = Kla1<Ty0>()
    prope1.block()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        prope0 = (6473908024069289012).compareTo(74).toString(-725934254)
        map += 1 to "s"
        prope2 += 1 to ("s" as Any)
        map[0] = Any()
    }
}

fun box758(): String {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
fu1(mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg")))
    return prope0
}


2021-03-12 12:42:54,571 [main:108] - replacing (1 to ("s" as Any), Pair<Int, Any>)
2021-03-12 12:42:54,571 [main:50] - replacing 1 to ("s" as Any) Pair<Int, Any>
2021-03-12 12:42:54,572 [main:54] - Getting value of type Pair<Int, Any>
2021-03-12 12:42:54,686 [main:302] - generating value of type = Pair<Int, Any> false depth = 0
2021-03-12 12:42:54,802 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Int, second: Any): Pair<Int, Any> = TODO()
2021-03-12 12:42:54,804 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Int, second: Any): Pair<Int, Any> = TODO()
2021-03-12 12:42:54,916 [main:302] - generating value of type = Int true depth = 3
2021-03-12 12:42:54,916 [main:302] - generating value of type = Any false depth = 3
2021-03-12 12:42:54,917 [main:95] - GENERATED = Pair<Int, Any>(-1508533478, "iyrdc")
2021-03-12 12:42:54,917 [main:58] - GENERATED VALUE OF TYPE Pair<Int, Any> = Pair<Int, Any>(-1508533478, "iyrdc")
2021-03-12 12:42:54,917 [main:61] - GENERATED IS CALL =true
2021-03-12 12:42:55,028 [main:67] - randomType = Double
2021-03-12 12:42:55,133 [main:302] - generating value of type = Double true depth = 0
2021-03-12 12:42:55,171 [main:106] - GETTING Pair<Int, Any> from Boolean
2021-03-12 12:42:55,185 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,207 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,209 [main:106] - GETTING Pair<Int, Any> from Boolean
2021-03-12 12:42:55,210 [main:106] - GETTING Pair<Int, Any> from Boolean
2021-03-12 12:42:55,212 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,213 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,215 [main:106] - GETTING Pair<Int, Any> from Boolean
2021-03-12 12:42:55,216 [main:106] - GETTING Pair<Int, Any> from Holder
2021-03-12 12:42:55,223 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,225 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,226 [main:106] - GETTING Pair<Int, Any> from String
2021-03-12 12:42:55,226 [main:115] - replacement of 1 to ("s" as Any) of type Pair<Int, Any> is Pair<Int, Any>(-1508533478, "iyrdc")
2021-03-12 12:42:55,334 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:42:55,334 [main:66] - Compilation checking started
2021-03-12 12:42:55,700 [main:53] - Result = true
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    val prope1 = Kla1<Ty0>()
    prope1.block()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        prope0 = (6473908024069289012).compareTo(74).toString(-725934254)
        map += 1 to "s"
        prope2 += Pair<Int, Any>(-1508533478, "iyrdc")
        map[0] = Any()
    }
}

fun box758(): String {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
fu1(mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg")))
    return prope0
}


2021-03-12 12:42:55,701 [main:108] - replacing (block, [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit>)
2021-03-12 12:42:55,705 [main:50] - replacing block [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit>
2021-03-12 12:42:55,705 [main:54] - Getting value of type [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit>
2021-03-12 12:42:55,825 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> false depth = 0
2021-03-12 12:42:55,826 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 12:42:55,935 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:42:55,937 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 12:42:56,179 [main:302] - generating value of type = Any false depth = 4
2021-03-12 12:42:56,179 [main:95] - GENERATED = print("pgttx")
2021-03-12 12:42:56,179 [main:58] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> = { print("pgttx")}
2021-03-12 12:42:56,179 [main:61] - GENERATED IS CALL =false
2021-03-12 12:42:56,426 [main:67] - randomType = Collection<String?>
2021-03-12 12:42:56,431 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,499 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from Boolean
2021-03-12 12:42:56,514 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from Holder
2021-03-12 12:42:56,523 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,528 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from Boolean
2021-03-12 12:42:56,533 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,537 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from Boolean
2021-03-12 12:42:56,542 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,546 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,551 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,555 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from Boolean
2021-03-12 12:42:56,561 [main:106] - GETTING [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> from String
2021-03-12 12:42:56,561 [main:115] - replacement of block of type [@kotlin.ExtensionFunctionType] Function1<Kla0<Ty0>, Unit> is { print("pgttx")}
2021-03-12 12:42:56,668 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 12:42:56,669 [main:66] - Compilation checking started
2021-03-12 12:42:56,946 [main:49] - Result = false
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
val prope1 = Kla1<Ty0>()
    prope1.{ print("pgttx")}()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    m[pair.first] = pair.second
    return this as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        prope0 = (6473908024069289012).compareTo(74).toString(-725934254)
        map += 1 to "s"
        prope2 += Pair<Int, Any>(-1508533478, "iyrdc")
        map[0] = Any()
    }
}

fun box758(): String {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
fu1(mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg")))
    return prope0
}


2021-03-12 12:42:56,947 [main:108] - replacing (this, Kla2<in Ty1, in Ty2>)
2021-03-12 12:42:56,950 [main:50] - replacing this Kla2<in Ty1, in Ty2>
2021-03-12 12:42:56,950 [main:54] - Getting value of type Kla2<in Ty1, in Ty2>
2021-03-12 12:42:57,078 [main:302] - generating value of type = Kla2<in Ty1, in Ty2> false depth = 0
2021-03-12 12:42:57,079 [main:112] - generating klass Kla2 text = class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)
2021-03-12 12:42:58,705 [main:194] - Type params = [UShort, UInt]
2021-03-12 12:42:58,941 [main:302] - generating value of type = MutableMap<UShort, UInt> false depth = 2
2021-03-12 12:42:59,057 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): MutableMap<UShort, UInt> = TODO()
2021-03-12 12:42:59,059 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): MutableMap<UShort, UInt> = TODO()
2021-03-12 12:42:59,178 [main:95] - GENERATED = hashMapOf<UShort, UInt>()
2021-03-12 12:42:59,179 [main:58] - GENERATED VALUE OF TYPE Kla2<in Ty1, in Ty2> = Kla2<UShort, UInt>(hashMapOf<UShort, UInt>())
2021-03-12 12:42:59,179 [main:61] - GENERATED IS CALL =true
2021-03-12 12:42:59,299 [main:67] - randomType = ULong
2021-03-12 12:42:59,408 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 12:42:59,442 [main:106] - GETTING Kla2<in Ty1, in Ty2> from Boolean
2021-03-12 12:42:59,453 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,480 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,482 [main:106] - GETTING Kla2<in Ty1, in Ty2> from Boolean
2021-03-12 12:42:59,484 [main:106] - GETTING Kla2<in Ty1, in Ty2> from Holder
2021-03-12 12:42:59,493 [main:106] - GETTING Kla2<in Ty1, in Ty2> from Boolean
2021-03-12 12:42:59,494 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,496 [main:106] - GETTING Kla2<in Ty1, in Ty2> from Boolean
2021-03-12 12:42:59,497 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,498 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,500 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,501 [main:106] - GETTING Kla2<in Ty1, in Ty2> from String
2021-03-12 12:42:59,501 [main:115] - replacement of this of type Kla2<in Ty1, in Ty2> is Kla2<UShort, UInt>(hashMapOf<UShort, UInt>())
2021-03-12 12:42:59,611 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 12:42:59,611 [main:66] - Compilation checking started
2021-03-12 12:42:59,974 [main:53] - Result = true
Text:
import kotlin.experimental.ExperimentalTypeInference


public inline fun doCall(block: ()-> Unit, finallyBlock1: ()-> Unit) {
    try {
         block()
    } finally {
        finallyBlock1()
    }
}

class Holder {
    var value: String = ""
}


fun test1(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                h.value += ", OF_FINALLY1"
                return "OF_FINALLY1"
            }
    )

    return "LOCAL";
}


fun test2(h: Holder, doReturn: Int): String {
    doCall (
            {
                if (doReturn < 1) {
                    h.value += "OK_NONLOCAL"
                    return "OK_NONLOCAL"
                }
                h.value += "LOCAL"
                "OK_LOCAL"
            },
            {
                try {
                    h.value += ", OF_FINALLY1"
                    return "OF_FINALLY1"
                } finally {
                    h.value += ", OF_FINALLY1_FINALLY"
                }
            }
    )

    return "FAIL";
}

fun box(): String {
    var h = Holder()
    val test10 = test1(h, 0)
    if (test10 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1") return "test10: ${test10}, holder: ${h.value}"

    h = Holder()
    val test11 = test1(h, 1)
    if (test11 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1") return "test11: ${test11}, holder: ${h.value}"

    h = Holder()
    val test2 = test2(h, 0)
    if (test2 != "OF_FINALLY1" || h.value != "OK_NONLOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test20: ${test2}, holder: ${h.value}"

    h = Holder()
    val test21 = test2(h, 1)
    if (test21 != "OF_FINALLY1" || h.value != "LOCAL, OF_FINALLY1, OF_FINALLY1_FINALLY") return "test21: ${test21}, holder: ${h.value}"

    return "OK"
}

interface Kla0<Ty0>

class Kla1<Ty0> : Kla0<Ty0>

@OptIn(ExperimentalTypeInference::class)
fun <Ty0> fu0(@BuilderInference block: Kla0<Ty0>.() -> Unit): Kla0<Ty0> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
val prope1 = Kla1<Ty0>()
    prope1.block()
    return prope1
}

class Kla2<Ty1, Ty2>(val m: MutableMap<Ty1, Ty2>)

operator fun <Ty1, Ty2> Kla2<in Ty1, in Ty2>.plus(pair: Pair<Ty1, Ty2>): Kla2<Ty1, Ty2> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
m[pair.first] = pair.second
    return Kla2<UShort, UInt>(hashMapOf<UShort, UInt>()) as Kla2<Ty1, Ty2>
}

var prope0 = "noOk"

fun fu1(map: MutableMap<Int, Any>): Kla0<Any> {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
var prope2: Kla2<Int, Any> = Kla2(mutableMapOf())
    return fu0 {
        prope0 = (6473908024069289012).compareTo(74).toString(-725934254)
        map += 1 to "s"
        prope2 += Pair<Int, Any>(-1508533478, "iyrdc")
        map[0] = Any()
    }
}

fun box758(): String {
    var h = Holder()
val test10 = test1(h, 0)
val test11 = test1(h, 1)
val test2 = test2(h, 0)
val test21 = test2(h, 1)
fu1(mutableMapOf<Int, Any>(Pair<Int, Any>(-1264341404, "hzosg")))
    return prope0
}


2021-03-12 12:42:59,975 [main:108] - replacing ("s", String)
2021-03-12 12:42:59,976 [main:50] - replacing "s" String
2021-03-12 12:42:59,976 [main:54] - Getting value of type String
