2021-03-12 05:34:35,560 [main:66] - Compilation checking started
2021-03-12 05:34:37,148 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:34:37,153 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:34:37,168 [main:66] - Compilation checking started
2021-03-12 05:34:37,788 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String = "fmkgs", value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:34:37,788 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:37,789 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 05:34:37,790 [main:66] - Compilation checking started
2021-03-12 05:34:38,339 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String = "fmkgs", value: Int = 133357308) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:34:38,982 [main:43] - GENERATING CALL OF fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:34:38,984 [main:61] - WITHOUT TYPE PARAMS = fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:34:39,162 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:34:39,163 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:34:39,164 [main:95] - GENERATED = logged("sfkcy", -1203149557)
2021-03-12 05:34:39,292 [main:45] - Trying to change 28 nodes
2021-03-12 05:34:39,297 [main:53] - replacing ("end;", String)
2021-03-12 05:34:39,297 [main:50] - replacing "end;" String
2021-03-12 05:34:39,297 [main:54] - Getting value of type String
2021-03-12 05:34:39,424 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:34:39,425 [main:58] - GENERATED VALUE OF TYPE String = "uwsjt"
2021-03-12 05:34:39,425 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:39,428 [main:67] - randomType = Int
2021-03-12 05:34:39,533 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:40,077 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:40,202 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:40,205 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:34:40,206 [main:78] - Generated call from random type = (979750272).compareTo(-549562175).toString(sum)
2021-03-12 05:34:40,206 [main:61] - replacement of "end;" of type String is (979750272).compareTo(-549562175).toString(sum)
2021-03-12 05:34:40,325 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:40,326 [main:66] - Compilation checking started
2021-03-12 05:34:40,856 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:34:40,859 [main:53] - replacing (log.append(message), StringBuilder)
2021-03-12 05:34:40,859 [main:50] - replacing log.append(message) StringBuilder
2021-03-12 05:34:40,859 [main:54] - Getting value of type StringBuilder
2021-03-12 05:34:40,983 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 05:34:41,171 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 05:34:41,178 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): StringBuilder = TODO()
2021-03-12 05:34:41,447 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:34:41,448 [main:95] - GENERATED = StringBuilder("bhlhs")
2021-03-12 05:34:41,448 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder("bhlhs")
2021-03-12 05:34:41,448 [main:61] - GENERATED IS CALL =true
2021-03-12 05:34:41,703 [main:67] - randomType = Double?
2021-03-12 05:34:41,809 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:34:41,923 [main:106] - GETTING StringBuilder from StringBuilder
2021-03-12 05:34:41,985 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ed4d442]]
2021-03-12 05:34:41,985 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.appendRange(value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6ed4d442]
2021-03-12 05:34:42,119 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:34:42,243 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:34:42,246 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:34:42,375 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:34:42,375 [main:95] - GENERATED = charArrayOf('')
2021-03-12 05:34:42,377 [main:117] - GENERATED CALL = (log).appendRange(charArrayOf(''), value, value)
2021-03-12 05:34:42,377 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e5be7c7]]
2021-03-12 05:34:42,377 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.setRange(startIndex: kotlin.Int, endIndex: kotlin.Int, value: kotlin.String): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@e5be7c7]
2021-03-12 05:34:42,500 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:42,502 [main:117] - GENERATED CALL = (log).setRange(139998793, value, message)
2021-03-12 05:34:42,502 [main:113] - Case = [public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@11efae36]]
2021-03-12 05:34:42,503 [main:149] - GENERATING call of type public final fun reverse(): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@11efae36]
2021-03-12 05:34:42,504 [main:117] - GENERATED CALL = (log).reverse()
2021-03-12 05:34:42,504 [main:113] - Case = [@kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7009bc56]]
2021-03-12 05:34:42,504 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.append(obj: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7009bc56]
2021-03-12 05:34:42,604 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:34:42,604 [main:117] - GENERATED CALL = (log).append("vgryd")
2021-03-12 05:34:42,605 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65dad7aa]]
2021-03-12 05:34:42,605 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.text.StringBuilder.appendLine(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65dad7aa]
2021-03-12 05:34:42,605 [main:117] - GENERATED CALL = (log).appendLine()
2021-03-12 05:34:42,605 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@3a823f6c]]
2021-03-12 05:34:42,606 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun insert(index: kotlin.Int, value: kotlin.Any?): kotlin.text.StringBuilder defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@3a823f6c]
2021-03-12 05:34:42,701 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:42,821 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:34:42,822 [main:117] - GENERATED CALL = (log).insert(1108728336, "ennhs")
2021-03-12 05:34:42,822 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a34a26a]]
2021-03-12 05:34:42,822 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteAt(index: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a34a26a]
2021-03-12 05:34:42,823 [main:117] - GENERATED CALL = (log).deleteAt(logged("sfkcy", -1203149557))
2021-03-12 05:34:42,824 [main:113] - Case = [@kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d43d72]]
2021-03-12 05:34:42,824 [main:149] - GENERATING call of type @kotlin.SinceKotlin public inline fun kotlin.text.StringBuilder.clear(): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d43d72]
2021-03-12 05:34:42,824 [main:117] - GENERATED CALL = (log).clear()
2021-03-12 05:34:42,824 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fd6c5ab]]
2021-03-12 05:34:42,825 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.insertRange(index: kotlin.Int, value: kotlin.CharArray, startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fd6c5ab]
2021-03-12 05:34:42,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:43,025 [main:302] - generating value of type = CharArray false depth = 0
2021-03-12 05:34:43,172 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:34:43,176 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-12 05:34:43,324 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:34:43,325 [main:95] - GENERATED = charArrayOf('鰃')
2021-03-12 05:34:43,326 [main:117] - GENERATED CALL = (log).insertRange(-823581355, charArrayOf('鰃'), value, logged("sfkcy", -1203149557))
2021-03-12 05:34:43,326 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2316df7a]]
2021-03-12 05:34:43,326 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public inline fun kotlin.text.StringBuilder.deleteRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.text.StringBuilder defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2316df7a]
2021-03-12 05:34:43,327 [main:117] - GENERATED CALL = (log).deleteRange(value, logged("sfkcy", -1203149557))
2021-03-12 05:34:43,327 [main:61] - replacement of log.append(message) of type StringBuilder is (log).append("vgryd")
2021-03-12 05:34:43,427 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:43,427 [main:66] - Compilation checking started
2021-03-12 05:34:43,939 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:34:43,941 [main:53] - replacing (logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) step logged("step;", 2), IntProgression)
2021-03-12 05:34:43,941 [main:50] - replacing logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) step logged("step;", 2) IntProgression
2021-03-12 05:34:43,941 [main:54] - Getting value of type IntProgression
2021-03-12 05:34:44,058 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 05:34:44,174 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:34:44,177 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:34:44,489 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:44,489 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:44,490 [main:95] - GENERATED = IntRange(-1138829853, 236599573)
2021-03-12 05:34:44,490 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-1138829853, 236599573)
2021-03-12 05:34:44,490 [main:61] - GENERATED IS CALL =true
2021-03-12 05:34:44,608 [main:67] - randomType = HashSet<String>
2021-03-12 05:34:44,701 [main:302] - generating value of type = HashSet<String> false depth = 0
2021-03-12 05:34:44,824 [main:43] - GENERATING CALL OF fun <T> hashSetOf(elements: String): HashSet<Strg> = TODO()
2021-03-12 05:34:44,827 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(elements: String): HashSet<Strg> = TODO()
2021-03-12 05:34:44,946 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:34:44,947 [main:95] - GENERATED = hashSetOf<String>("wkwsl")
2021-03-12 05:34:45,136 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:45,245 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:45,247 [main:78] - Generated call from random type = (hashSetOf<String>("wkwsl")).size.downTo(41)
2021-03-12 05:34:45,252 [main:106] - GETTING IntProgression from Int
2021-03-12 05:34:45,316 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2322d697]]
2021-03-12 05:34:45,316 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:34:45,317 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2322d697]
2021-03-12 05:34:45,413 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:45,414 [main:117] - GENERATED CALL = (sum).toShort().downTo(-115)
2021-03-12 05:34:45,415 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]]
2021-03-12 05:34:45,415 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:34:45,415 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]
2021-03-12 05:34:45,511 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:45,512 [main:117] - GENERATED CALL = (sum).toByte().downTo(-84)
2021-03-12 05:34:45,512 [main:113] - Case = [public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:45,512 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:45,602 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:45,603 [main:117] - GENERATED CALL = (sum).downTo(-60)
2021-03-12 05:34:45,603 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:45,603 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:45,604 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:45,710 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:45,711 [main:117] - GENERATED CALL = (sum).toInt().downTo(-10)
2021-03-12 05:34:45,711 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:45,711 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:45,808 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:45,809 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:45,893 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:45,894 [main:117] - GENERATED CALL = (sum).compareTo(2105126817).downTo(64)
2021-03-12 05:34:45,894 [main:61] - replacement of logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) step logged("step;", 2) of type IntProgression is (sum).toByte().downTo(-84)
2021-03-12 05:34:45,983 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:45,983 [main:66] - Compilation checking started
2021-03-12 05:34:46,416 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = 0
    for (i in (sum).toByte().downTo(-84)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:34:46,417 [main:53] - replacing (log.append(message), StringBuilder)
2021-03-12 05:34:46,417 [main:50] - replacing log.append(message) StringBuilder
2021-03-12 05:34:46,417 [main:54] - Getting value of type StringBuilder
2021-03-12 05:34:46,525 [main:302] - generating value of type = StringBuilder false depth = 0
2021-03-12 05:34:46,641 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): StringBuilder = TODO()
2021-03-12 05:34:46,642 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): StringBuilder = TODO()
2021-03-12 05:34:46,816 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:46,817 [main:95] - GENERATED = StringBuilder(795036686)
2021-03-12 05:34:46,818 [main:58] - GENERATED VALUE OF TYPE StringBuilder = StringBuilder(795036686)
2021-03-12 05:34:46,818 [main:61] - GENERATED IS CALL =true
2021-03-12 05:34:46,907 [main:67] - randomType = UByte
2021-03-12 05:34:46,989 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:34:47,040 [main:106] - GETTING StringBuilder from Int
2021-03-12 05:34:47,080 [main:61] - replacement of log.append(message) of type StringBuilder is StringBuilder(795036686)
2021-03-12 05:34:47,217 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:34:47,219 [main:53] - replacing (10, Int)
2021-03-12 05:34:47,219 [main:50] - replacing 10 Int
2021-03-12 05:34:47,220 [main:54] - Getting value of type Int
2021-03-12 05:34:47,325 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:47,325 [main:58] - GENERATED VALUE OF TYPE Int = -815851937
2021-03-12 05:34:47,325 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:47,606 [main:67] - randomType = ArrayDeque<Double>
2021-03-12 05:34:47,725 [main:302] - generating value of type = ArrayDeque<Double> false depth = 0
2021-03-12 05:34:47,827 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Double> = TODO()
2021-03-12 05:34:47,830 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Double> = TODO()
2021-03-12 05:34:47,925 [main:95] - GENERATED = ArrayDeque<Double>()
2021-03-12 05:34:48,139 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.Double defined in kotlin.collections.AbstractMutableList[DeserializedSimpleFunctionDescriptor@46f38d61]
2021-03-12 05:34:48,232 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:48,232 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6b94cb56]
2021-03-12 05:34:48,233 [main:78] - Generated call from random type = (ArrayDeque<Double>()).get(129022347).roundToInt()
2021-03-12 05:34:48,234 [main:106] - GETTING Int from StringBuilder
2021-03-12 05:34:48,270 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.Deprecated public final fun capacity(): kotlin.Int defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7f264c79]]
2021-03-12 05:34:48,270 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.Deprecated public final fun capacity(): kotlin.Int defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7f264c79]
2021-03-12 05:34:48,271 [main:117] - GENERATED CALL = (log).capacity()
2021-03-12 05:34:48,271 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@4a7eb080], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@17564b1b]]
2021-03-12 05:34:48,271 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@4a7eb080]
2021-03-12 05:34:48,357 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:48,358 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@17564b1b]
2021-03-12 05:34:48,358 [main:117] - GENERATED CALL = (log).get(1504484078).toInt()
2021-03-12 05:34:48,358 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@6178c6b], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]]
2021-03-12 05:34:48,358 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]
2021-03-12 05:34:48,359 [main:117] - GENERATED CALL = (log).length.inc()
2021-03-12 05:34:48,359 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@6178c6b], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@5515849a]]
2021-03-12 05:34:48,359 [main:117] - GENERATED CALL = (log).length.absoluteValue
2021-03-12 05:34:48,359 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@2b2b2955], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e11237b]]
2021-03-12 05:34:48,359 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@2b2b2955]
2021-03-12 05:34:48,461 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:48,543 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:48,543 [main:149] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e11237b]
2021-03-12 05:34:48,633 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:34:48,718 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:34:48,719 [main:117] - GENERATED CALL = (log).subSequence(1185685931, -812929482).indexOf('㑴', logged("sfkcy", -1203149557), true)
2021-03-12 05:34:48,720 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@6178c6b], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1926e42e]]
2021-03-12 05:34:48,720 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1926e42e]
2021-03-12 05:34:48,811 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:48,812 [main:117] - GENERATED CALL = (log).length.plus(-109)
2021-03-12 05:34:48,812 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@6178c6b], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cf70a59]]
2021-03-12 05:34:48,812 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cf70a59]
2021-03-12 05:34:48,896 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:48,897 [main:117] - GENERATED CALL = (log).length.compareTo(-80)
2021-03-12 05:34:48,897 [main:113] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb5b31]]
2021-03-12 05:34:48,897 [main:149] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fb5b31]
2021-03-12 05:34:48,994 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-12 05:34:48,994 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:34:48,995 [main:117] - GENERATED CALL = (log).sumBy({a: Char -> 1041483730})
2021-03-12 05:34:48,995 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@6178c6b], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@545ae342]]
2021-03-12 05:34:48,995 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@545ae342]
2021-03-12 05:34:48,996 [main:117] - GENERATED CALL = (log).length.coerceAtLeast(sum)
2021-03-12 05:34:48,996 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.text.StringBuilder[DeserializedPropertyDescriptor@6178c6b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]]
2021-03-12 05:34:48,996 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]
2021-03-12 05:34:49,092 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:49,093 [main:117] - GENERATED CALL = (log).length.times(-84)
2021-03-12 05:34:49,093 [main:61] - replacement of 10 of type Int is (log).length.inc()
2021-03-12 05:34:49,182 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:49,183 [main:66] - Compilation checking started
2021-03-12 05:34:49,589 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = 0
    for (i in (sum).toByte().downTo(-84)) {
        sum = sum * (log).length.inc() + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:34:49,589 [main:53] - replacing (logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1), IntProgression)
2021-03-12 05:34:49,590 [main:50] - replacing logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) IntProgression
2021-03-12 05:34:49,590 [main:54] - Getting value of type IntProgression
2021-03-12 05:34:49,704 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 05:34:49,801 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:34:49,803 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:34:50,077 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:50,077 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:50,078 [main:95] - GENERATED = IntRange(2069931851, -546472348)
2021-03-12 05:34:50,078 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(2069931851, -546472348)
2021-03-12 05:34:50,078 [main:61] - GENERATED IS CALL =true
2021-03-12 05:34:50,079 [main:67] - randomType = Int
2021-03-12 05:34:50,164 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:50,234 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:34:50,234 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]
2021-03-12 05:34:50,324 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:50,325 [main:78] - Generated call from random type = (-1443819687).toByte().downTo(92)
2021-03-12 05:34:50,326 [main:106] - GETTING IntProgression from Int
2021-03-12 05:34:50,390 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:50,390 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:50,391 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:50,492 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:50,493 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).downTo(-65)
2021-03-12 05:34:50,494 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]]
2021-03-12 05:34:50,494 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:34:50,494 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]
2021-03-12 05:34:50,654 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:50,655 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().downTo(56)
2021-03-12 05:34:50,655 [main:113] - Case = [public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:50,655 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:50,747 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:50,748 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).downTo(-2)
2021-03-12 05:34:50,748 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:50,748 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:50,748 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:50,826 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:50,827 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().downTo(43)
2021-03-12 05:34:50,827 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2322d697]]
2021-03-12 05:34:50,827 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:34:50,827 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2322d697]
2021-03-12 05:34:50,912 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:50,913 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toShort().downTo(-37)
2021-03-12 05:34:50,913 [main:61] - replacement of logged("start;", 8) downTo logged((979750272).compareTo(-549562175).toString(sum), 1) of type IntProgression is (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).downTo(-65)
2021-03-12 05:34:50,998 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:50,999 [main:53] - replacing (logged("start;", 8), Int)
2021-03-12 05:34:50,999 [main:50] - replacing logged("start;", 8) Int
2021-03-12 05:34:50,999 [main:54] - Getting value of type Int
2021-03-12 05:34:51,102 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:51,103 [main:58] - GENERATED VALUE OF TYPE Int = -1953829945
2021-03-12 05:34:51,103 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:51,197 [main:67] - randomType = Long
2021-03-12 05:34:51,283 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:34:51,345 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:51,345 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ebfb7b6]
2021-03-12 05:34:51,346 [main:78] - Generated call from random type = (-8645684332293058626).toInt().shr(logged("sfkcy", -1203149557))
2021-03-12 05:34:51,346 [main:106] - GETTING Int from Int
2021-03-12 05:34:51,400 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]]
2021-03-12 05:34:51,400 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]
2021-03-12 05:34:51,483 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:51,484 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).coerceIn(-40679928, logged("sfkcy", -1203149557))
2021-03-12 05:34:51,484 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8dff374]]
2021-03-12 05:34:51,484 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:34:51,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@8dff374]
2021-03-12 05:34:51,485 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().countTrailingZeroBits()
2021-03-12 05:34:51,485 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e3b1cf2]]
2021-03-12 05:34:51,485 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:34:51,485 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e3b1cf2]
2021-03-12 05:34:51,486 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toLong().countTrailingZeroBits()
2021-03-12 05:34:51,486 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@17564b1b]]
2021-03-12 05:34:51,486 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:34:51,486 [main:149] - GENERATING call of type public final fun toInt(): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@17564b1b]
2021-03-12 05:34:51,486 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toChar().toInt()
2021-03-12 05:34:51,486 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@2dd9a1db]]
2021-03-12 05:34:51,486 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:34:51,487 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toChar().code
2021-03-12 05:34:51,487 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]]
2021-03-12 05:34:51,487 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:51,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]
2021-03-12 05:34:51,487 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().takeHighestOneBit()
2021-03-12 05:34:51,487 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]]
2021-03-12 05:34:51,487 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]
2021-03-12 05:34:51,488 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).takeHighestOneBit()
2021-03-12 05:34:51,488 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6494eb8e]]
2021-03-12 05:34:51,488 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:34:51,568 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:34:51,568 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6494eb8e]
2021-03-12 05:34:51,662 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:51,663 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).div(0.3207061749064528).compareTo(-80)
2021-03-12 05:34:51,663 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]]
2021-03-12 05:34:51,663 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]
2021-03-12 05:34:51,664 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).countTrailingZeroBits()
2021-03-12 05:34:51,664 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]]
2021-03-12 05:34:51,664 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:34:51,664 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]
2021-03-12 05:34:51,665 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toFloat().toBits()
2021-03-12 05:34:51,665 [main:61] - replacement of logged("start;", 8) of type Int is (logged("sfkcy", -1203149557)).toByte().countTrailingZeroBits()
2021-03-12 05:34:51,752 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:51,754 [main:53] - replacing (8642, Int)
2021-03-12 05:34:51,754 [main:50] - replacing 8642 Int
2021-03-12 05:34:51,754 [main:54] - Getting value of type Int
2021-03-12 05:34:51,840 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:51,840 [main:58] - GENERATED VALUE OF TYPE Int = 1921255100
2021-03-12 05:34:51,840 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:51,926 [main:67] - randomType = Boolean
2021-03-12 05:34:52,004 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:34:52,015 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3de86254]
2021-03-12 05:34:52,097 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:34:52,098 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cf70a59]
2021-03-12 05:34:52,190 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:52,191 [main:78] - Generated call from random type = (true).compareTo(false).compareTo(11)
2021-03-12 05:34:52,191 [main:61] - replacement of 8642 of type Int is (true).compareTo(false).compareTo(11)
2021-03-12 05:34:52,287 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:52,287 [main:66] - Compilation checking started
2021-03-12 05:34:52,635 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = 0
    for (i in (sum).toByte().downTo(-84)) {
        sum = sum * (log).length.inc() + i
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:34:52,637 [main:53] - replacing (0, Int)
2021-03-12 05:34:52,637 [main:50] - replacing 0 Int
2021-03-12 05:34:52,637 [main:54] - Getting value of type Int
2021-03-12 05:34:52,732 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:52,732 [main:58] - GENERATED VALUE OF TYPE Int = 880679368
2021-03-12 05:34:52,733 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:52,826 [main:67] - randomType = Boolean
2021-03-12 05:34:52,924 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:34:52,937 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3de86254]
2021-03-12 05:34:53,023 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:34:53,024 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]
2021-03-12 05:34:53,025 [main:78] - Generated call from random type = (false).compareTo(true).takeHighestOneBit()
2021-03-12 05:34:53,025 [main:61] - replacement of 0 of type Int is (false).compareTo(true).takeHighestOneBit()
2021-03-12 05:34:53,108 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:53,109 [main:66] - Compilation checking started
2021-03-12 05:34:53,452 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(-84)) {
        sum = sum * (log).length.inc() + i
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:34:53,453 [main:53] - replacing ((logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).downTo(-65) step logged("step;", 2), IntProgression)
2021-03-12 05:34:53,453 [main:50] - replacing (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).downTo(-65) step logged("step;", 2) IntProgression
2021-03-12 05:34:53,453 [main:54] - Getting value of type IntProgression
2021-03-12 05:34:53,554 [main:302] - generating value of type = IntProgression false depth = 0
2021-03-12 05:34:53,638 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:34:53,639 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntProgression = TODO()
2021-03-12 05:34:53,915 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:53,915 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:34:53,915 [main:95] - GENERATED = IntRange(-798624382, -298316117)
2021-03-12 05:34:53,916 [main:58] - GENERATED VALUE OF TYPE IntProgression = IntRange(-798624382, -298316117)
2021-03-12 05:34:53,916 [main:61] - GENERATED IS CALL =true
2021-03-12 05:34:54,008 [main:67] - randomType = Double
2021-03-12 05:34:54,090 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:34:54,123 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:54,123 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:54,203 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:54,203 [main:78] - Generated call from random type = (0.4686118129852975).toInt().downTo(-18)
2021-03-12 05:34:54,204 [main:106] - GETTING IntProgression from Int
2021-03-12 05:34:54,235 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]]
2021-03-12 05:34:54,235 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:34:54,235 [main:149] - GENERATING call of type public infix fun kotlin.Byte.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@29114a3]
2021-03-12 05:34:54,314 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:54,314 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().downTo(-66)
2021-03-12 05:34:54,314 [main:113] - Case = [public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:54,314 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:54,418 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:54,419 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).downTo(-124)
2021-03-12 05:34:54,419 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:54,419 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:54,508 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:54,509 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:54,590 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:54,591 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(-1456940941).downTo(63)
2021-03-12 05:34:54,591 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2322d697]]
2021-03-12 05:34:54,591 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:34:54,592 [main:149] - GENERATING call of type public infix fun kotlin.Short.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2322d697]
2021-03-12 05:34:54,673 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:54,674 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toShort().downTo(-105)
2021-03-12 05:34:54,674 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]]
2021-03-12 05:34:54,674 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:54,674 [main:149] - GENERATING call of type public infix fun kotlin.Int.downTo(to: kotlin.Byte): kotlin.ranges.IntProgression defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@6cb71851]
2021-03-12 05:34:54,758 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:54,758 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().downTo(-126)
2021-03-12 05:34:54,759 [main:61] - replacement of (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).downTo(-65) step logged("step;", 2) of type IntProgression is (logged("sfkcy", -1203149557)).toInt().downTo(-126)
2021-03-12 05:34:54,879 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:54,880 [main:53] - replacing (sum, Int)
2021-03-12 05:34:54,880 [main:50] - replacing sum Int
2021-03-12 05:34:54,880 [main:54] - Getting value of type Int
2021-03-12 05:34:54,976 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:54,976 [main:58] - GENERATED VALUE OF TYPE Int = 1785344311
2021-03-12 05:34:54,976 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:54,977 [main:67] - randomType = Int
2021-03-12 05:34:55,057 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:55,110 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:55,110 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e123910]
2021-03-12 05:34:55,195 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:55,196 [main:78] - Generated call from random type = (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959)
2021-03-12 05:34:55,196 [main:106] - GETTING Int from Int
2021-03-12 05:34:55,250 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e123910]]
2021-03-12 05:34:55,250 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:55,251 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e123910]
2021-03-12 05:34:55,332 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:55,333 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().xor(-1360101911)
2021-03-12 05:34:55,333 [main:113] - Case = [public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b72fe6b]]
2021-03-12 05:34:55,333 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b72fe6b]
2021-03-12 05:34:55,334 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt()
2021-03-12 05:34:55,334 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b72fe6b]]
2021-03-12 05:34:55,334 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:55,334 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b72fe6b]
2021-03-12 05:34:55,334 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).toInt()
2021-03-12 05:34:55,334 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], public final val first: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3bb4ade3]]
2021-03-12 05:34:55,334 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:34:55,419 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:55,419 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).rangeTo(-124).first
2021-03-12 05:34:55,420 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52d2053]]
2021-03-12 05:34:55,420 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:55,420 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52d2053]
2021-03-12 05:34:55,420 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).rotateLeft(logged("sfkcy", -1203149557))
2021-03-12 05:34:55,421 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]]
2021-03-12 05:34:55,421 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]
2021-03-12 05:34:55,421 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).inc()
2021-03-12 05:34:55,421 [main:113] - Case = [public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11de3445]]
2021-03-12 05:34:55,421 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11de3445]
2021-03-12 05:34:55,522 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:55,523 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).and(1460674628)
2021-03-12 05:34:55,523 [main:113] - Case = [@kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@157c2438]]
2021-03-12 05:34:55,523 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).sign
2021-03-12 05:34:55,523 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2be51f04]]
2021-03-12 05:34:55,523 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:34:55,523 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2be51f04]
2021-03-12 05:34:55,524 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toLong().toInt()
2021-03-12 05:34:55,524 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e3b1cf2]]
2021-03-12 05:34:55,524 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:34:55,524 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e3b1cf2]
2021-03-12 05:34:55,525 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toLong().countTrailingZeroBits()
2021-03-12 05:34:55,525 [main:61] - replacement of sum of type Int is (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959)
2021-03-12 05:34:55,623 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:55,624 [main:66] - Compilation checking started
2021-03-12 05:34:55,961 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(-84)) {
        sum = (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959) * (log).length.inc() + i
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}


2021-03-12 05:34:55,962 [main:53] - replacing (log.toString(), String)
2021-03-12 05:34:55,962 [main:50] - replacing log.toString() String
2021-03-12 05:34:55,962 [main:54] - Getting value of type String
2021-03-12 05:34:56,043 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:34:56,044 [main:58] - GENERATED VALUE OF TYPE String = "xwpko"
2021-03-12 05:34:56,044 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:56,132 [main:67] - randomType = Double
2021-03-12 05:34:56,217 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:34:56,259 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@53dfbc8]
2021-03-12 05:34:56,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:34:56,260 [main:78] - Generated call from random type = (0.7831400515096786).toChar().lowercase()
2021-03-12 05:34:56,260 [main:61] - replacement of log.toString() of type String is (0.7831400515096786).toChar().lowercase()
2021-03-12 05:34:56,339 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:56,340 [main:66] - Compilation checking started
2021-03-12 05:34:56,672 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(-84)) {
        sum = (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959) * (log).length.inc() + i
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:34:56,672 [main:53] - replacing (sum, Int)
2021-03-12 05:34:56,672 [main:50] - replacing sum Int
2021-03-12 05:34:56,672 [main:54] - Getting value of type Int
2021-03-12 05:34:56,752 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:56,752 [main:58] - GENERATED VALUE OF TYPE Int = -216593567
2021-03-12 05:34:56,752 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:56,836 [main:67] - randomType = Short
2021-03-12 05:34:56,917 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:34:56,958 [main:149] - GENERATING call of type public abstract fun toShort(): kotlin.Short defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@55517531]
2021-03-12 05:34:56,959 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@67534eeb]
2021-03-12 05:34:57,050 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:57,051 [main:78] - Generated call from random type = (10866).toShort().plus(24)
2021-03-12 05:34:57,051 [main:106] - GETTING Int from Int
2021-03-12 05:34:57,088 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ceffb96]]
2021-03-12 05:34:57,089 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:34:57,089 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ceffb96]
2021-03-12 05:34:57,089 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toFloat().toRawBits()
2021-03-12 05:34:57,089 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]]
2021-03-12 05:34:57,089 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:57,089 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]
2021-03-12 05:34:57,090 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().countTrailingZeroBits()
2021-03-12 05:34:57,090 [main:113] - Case = [public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]]
2021-03-12 05:34:57,090 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]
2021-03-12 05:34:57,090 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).inc()
2021-03-12 05:34:57,090 [main:113] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@283a701e], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]]
2021-03-12 05:34:57,090 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@283a701e]
2021-03-12 05:34:57,170 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:34:57,170 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]
2021-03-12 05:34:57,171 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).div(0.16256893f).toBits()
2021-03-12 05:34:57,171 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@157c2438]]
2021-03-12 05:34:57,171 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:57,171 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).sign
2021-03-12 05:34:57,171 [main:113] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@545ae342]]
2021-03-12 05:34:57,171 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@545ae342]
2021-03-12 05:34:57,250 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:57,251 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).coerceAtLeast(1208545947)
2021-03-12 05:34:57,251 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7711bbd9]]
2021-03-12 05:34:57,251 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7711bbd9]
2021-03-12 05:34:57,251 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).countOneBits()
2021-03-12 05:34:57,251 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6494eb8e]]
2021-03-12 05:34:57,251 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:34:57,331 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:34:57,332 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6494eb8e]
2021-03-12 05:34:57,412 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:57,412 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).div(0.6848007416330788).compareTo(-118)
2021-03-12 05:34:57,413 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52d2053]]
2021-03-12 05:34:57,413 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:57,413 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@52d2053]
2021-03-12 05:34:57,413 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().rotateLeft(logged("sfkcy", -1203149557))
2021-03-12 05:34:57,413 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]]
2021-03-12 05:34:57,413 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]
2021-03-12 05:34:57,414 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).coerceIn(logged("sfkcy", -1203149557), logged("sfkcy", -1203149557))
2021-03-12 05:34:57,414 [main:61] - replacement of sum of type Int is (logged("sfkcy", -1203149557)).toFloat().toRawBits()
2021-03-12 05:34:57,493 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:57,494 [main:53] - replacing (value.also { (log).append("vgryd") }, Int)
2021-03-12 05:34:57,494 [main:50] - replacing value.also { (log).append("vgryd") } Int
2021-03-12 05:34:57,494 [main:54] - Getting value of type Int
2021-03-12 05:34:57,573 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:57,573 [main:58] - GENERATED VALUE OF TYPE Int = 522782037
2021-03-12 05:34:57,573 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:57,703 [main:67] - randomType = Long
2021-03-12 05:34:57,783 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:34:57,815 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@242d59b4]
2021-03-12 05:34:57,896 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:34:57,896 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]
2021-03-12 05:34:57,897 [main:78] - Generated call from random type = (8916537029525674477).div(0.54761964f).toBits()
2021-03-12 05:34:57,897 [main:106] - GETTING Int from Int
2021-03-12 05:34:57,940 [main:113] - Case = [public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]]
2021-03-12 05:34:57,940 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]
2021-03-12 05:34:58,020 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:58,021 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).times(96)
2021-03-12 05:34:58,021 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7711bbd9]]
2021-03-12 05:34:58,021 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:58,021 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7711bbd9]
2021-03-12 05:34:58,022 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(value).countOneBits()
2021-03-12 05:34:58,022 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]]
2021-03-12 05:34:58,022 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]
2021-03-12 05:34:58,022 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).countTrailingZeroBits()
2021-03-12 05:34:58,022 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]]
2021-03-12 05:34:58,022 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:34:58,104 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:34:58,104 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeHighestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@adace9c]
2021-03-12 05:34:58,105 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(2075254705).takeHighestOneBit()
2021-03-12 05:34:58,105 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]]
2021-03-12 05:34:58,105 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:58,105 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]
2021-03-12 05:34:58,225 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:58,227 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().times(31)
2021-03-12 05:34:58,227 [main:113] - Case = [public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ad4aa3e]]
2021-03-12 05:34:58,227 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ad4aa3e]
2021-03-12 05:34:58,227 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).unaryPlus()
2021-03-12 05:34:58,227 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]]
2021-03-12 05:34:58,227 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:34:58,227 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@355b32cb]
2021-03-12 05:34:58,237 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().countTrailingZeroBits()
2021-03-12 05:34:58,237 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6494eb8e]]
2021-03-12 05:34:58,237 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:34:58,237 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@6494eb8e]
2021-03-12 05:34:58,331 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:34:58,332 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toDouble().compareTo(95)
2021-03-12 05:34:58,332 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]]
2021-03-12 05:34:58,332 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:34:58,332 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4143c25f]
2021-03-12 05:34:58,332 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toFloat().toBits()
2021-03-12 05:34:58,332 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bd48bbb]]
2021-03-12 05:34:58,332 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bd48bbb]
2021-03-12 05:34:58,333 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).ushr(value)
2021-03-12 05:34:58,333 [main:61] - replacement of value.also { (log).append("vgryd") } of type Int is (logged("sfkcy", -1203149557)).times(96)
2021-03-12 05:34:58,414 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:34:58,414 [main:66] - Compilation checking started
2021-03-12 05:34:58,668 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    (logged("sfkcy", -1203149557)).times(96)

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(-84)) {
        sum = (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959) * (log).length.inc() + i
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:34:58,668 [main:53] - replacing ("step;", String)
2021-03-12 05:34:58,668 [main:50] - replacing "step;" String
2021-03-12 05:34:58,668 [main:54] - Getting value of type String
2021-03-12 05:34:58,755 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:34:58,755 [main:58] - GENERATED VALUE OF TYPE String = "byjpc"
2021-03-12 05:34:58,755 [main:61] - GENERATED IS CALL =false
2021-03-12 05:34:58,850 [main:67] - randomType = LinkedHashSet<String>
2021-03-12 05:34:58,948 [main:302] - generating value of type = LinkedHashSet<String> false depth = 0
2021-03-12 05:34:59,037 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: String): LkedHashSet<Strg> = TODO()
2021-03-12 05:34:59,039 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: String): LkedHashSet<Strg> = TODO()
2021-03-12 05:34:59,127 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:34:59,127 [main:95] - GENERATED = linkedSetOf<String>("iskhc")
2021-03-12 05:34:59,287 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]
2021-03-12 05:34:59,366 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:34:59,450 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:34:59,576 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:34:59,674 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:34:59,676 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 05:34:59,846 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:34:59,846 [main:95] - GENERATED = StringBuilder("jrbsl")
2021-03-12 05:34:59,927 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:00,010 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:35:00,010 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:35:00,114 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:35:00,116 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:35:00,289 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-12 05:35:00,375 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:35:00,377 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:35:00,570 [main:302] - generating value of type = Int true depth = 7
2021-03-12 05:35:00,571 [main:95] - GENERATED = StringBuilder(535315182)
2021-03-12 05:35:00,571 [main:95] - GENERATED = StringBuilder(StringBuilder(535315182))
2021-03-12 05:35:00,571 [main:78] - Generated call from random type = (linkedSetOf<String>("iskhc")).joinToString(StringBuilder(), "plriq", StringBuilder("jrbsl"), logged("sfkcy", -1203149557), "xugca", {a: T -> StringBuilder(StringBuilder(535315182))})
2021-03-12 05:35:00,572 [main:61] - replacement of "step;" of type String is (linkedSetOf<String>("iskhc")).joinToString(StringBuilder(), "plriq", StringBuilder("jrbsl"), logged("sfkcy", -1203149557), "xugca", {a: T -> StringBuilder(StringBuilder(535315182))})
2021-03-12 05:35:00,659 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:00,660 [main:53] - replacing (log.toString(), String)
2021-03-12 05:35:00,660 [main:50] - replacing log.toString() String
2021-03-12 05:35:00,660 [main:54] - Getting value of type String
2021-03-12 05:35:00,743 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:00,744 [main:58] - GENERATED VALUE OF TYPE String = "bbnma"
2021-03-12 05:35:00,744 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:01,135 [main:67] - randomType = Map<UByte, Int?>?
2021-03-12 05:35:01,136 [main:106] - GETTING String from Int
2021-03-12 05:35:01,191 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:01,191 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:01,192 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:01,275 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:01,276 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toLong().toString(-1636359866)
2021-03-12 05:35:01,276 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:01,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:01,277 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,277 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:01,277 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:01,277 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:01,277 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,277 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:01,277 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:35:01,360 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:35:01,360 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:01,361 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).div(2728375596130051546).toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,361 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:01,361 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:01,444 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:01,445 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:01,445 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(848768367).toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,445 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:01,445 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:01,445 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:01,446 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toChar().lowercase()
2021-03-12 05:35:01,446 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:35:01,446 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:01,446 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:35:01,537 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:01,538 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toChar().plus("zpufd")
2021-03-12 05:35:01,538 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:01,538 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:01,538 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:01,539 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,539 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:35:01,539 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:01,539 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:35:01,539 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toShort().toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,539 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:35:01,539 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:01,540 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:35:01,540 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toChar().uppercase()
2021-03-12 05:35:01,540 [main:61] - replacement of log.toString() of type String is (logged("sfkcy", -1203149557)).toShort().toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:01,632 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:01,633 [main:53] - replacing ("step;", String)
2021-03-12 05:35:01,633 [main:50] - replacing "step;" String
2021-03-12 05:35:01,633 [main:54] - Getting value of type String
2021-03-12 05:35:01,716 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:01,716 [main:58] - GENERATED VALUE OF TYPE String = "icnqa"
2021-03-12 05:35:01,717 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:01,888 [main:67] - randomType = UInt?
2021-03-12 05:35:01,978 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 05:35:02,019 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@7b2bee77]
2021-03-12 05:35:02,019 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UShort.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1de0b234]
2021-03-12 05:35:02,020 [main:78] - Generated call from random type = (619064692.toUInt())?.toUShort().toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:02,020 [main:61] - replacement of "step;" of type String is (619064692.toUInt())?.toUShort().toString(logged("sfkcy", -1203149557))
2021-03-12 05:35:02,108 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:02,109 [main:53] - replacing ((-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959) * (log).length.inc() + i, Int)
2021-03-12 05:35:02,109 [main:50] - replacing (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959) * (log).length.inc() + i Int
2021-03-12 05:35:02,109 [main:54] - Getting value of type Int
2021-03-12 05:35:02,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:02,190 [main:58] - GENERATED VALUE OF TYPE Int = -570345207
2021-03-12 05:35:02,190 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:02,191 [main:67] - randomType = Int
2021-03-12 05:35:02,269 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:02,303 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:35:02,385 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:35:02,386 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6b94cb56]
2021-03-12 05:35:02,387 [main:78] - Generated call from random type = (-2006703477).div(0.4179063538483938).roundToInt()
2021-03-12 05:35:02,387 [main:106] - GETTING Int from Int
2021-03-12 05:35:02,432 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472bc276]]
2021-03-12 05:35:02,432 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:02,432 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472bc276]
2021-03-12 05:35:02,561 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:02,562 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).div(13)
2021-03-12 05:35:02,562 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3f3a57ff]]
2021-03-12 05:35:02,562 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:02,562 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3f3a57ff]
2021-03-12 05:35:02,650 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:02,650 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toLong().compareTo(-16)
2021-03-12 05:35:02,650 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11de3445]]
2021-03-12 05:35:02,650 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:02,651 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11de3445]
2021-03-12 05:35:02,651 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().and(logged("sfkcy", -1203149557))
2021-03-12 05:35:02,651 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ebfb7b6]]
2021-03-12 05:35:02,651 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:02,651 [main:149] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ebfb7b6]
2021-03-12 05:35:02,652 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).shr(logged("sfkcy", -1203149557))
2021-03-12 05:35:02,652 [main:113] - Case = [public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]]
2021-03-12 05:35:02,652 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]
2021-03-12 05:35:02,729 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:02,809 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:02,810 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
2021-03-12 05:35:02,810 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6b94cb56]]
2021-03-12 05:35:02,810 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:35:02,811 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Double.roundToInt(): kotlin.Int defined in kotlin.math[DeserializedSimpleFunctionDescriptor@6b94cb56]
2021-03-12 05:35:02,811 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toDouble().roundToInt()
2021-03-12 05:35:02,811 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@74cc9694]]
2021-03-12 05:35:02,811 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:02,811 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@74cc9694]
2021-03-12 05:35:02,811 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().toInt()
2021-03-12 05:35:02,811 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@157c2438]]
2021-03-12 05:35:02,811 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:02,812 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().sign
2021-03-12 05:35:02,812 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ceffb96]]
2021-03-12 05:35:02,812 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:35:02,812 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7ceffb96]
2021-03-12 05:35:02,812 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toFloat().toRawBits()
2021-03-12 05:35:02,812 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@12301879]]
2021-03-12 05:35:02,812 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:35:02,812 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@12301879]
2021-03-12 05:35:02,813 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toFloat().toInt()
2021-03-12 05:35:02,813 [main:61] - replacement of (-1764290265).compareTo(logged("sfkcy", -1203149557)).xor(-1866091959) * (log).length.inc() + i of type Int is (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
2021-03-12 05:35:02,894 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:02,894 [main:66] - Compilation checking started
2021-03-12 05:35:03,261 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(-84)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:03,261 [main:53] - replacing (0, Int)
2021-03-12 05:35:03,261 [main:50] - replacing 0 Int
2021-03-12 05:35:03,261 [main:54] - Getting value of type Int
2021-03-12 05:35:03,395 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:03,396 [main:58] - GENERATED VALUE OF TYPE Int = 1651588545
2021-03-12 05:35:03,396 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:03,574 [main:67] - randomType = UShort?
2021-03-12 05:35:03,659 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:35:03,696 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@230fa8dc]
2021-03-12 05:35:03,697 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countTrailingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@46fdaab3]
2021-03-12 05:35:03,697 [main:78] - Generated call from random type = (22214.toUShort())?.toShort().countTrailingZeroBits()
2021-03-12 05:35:03,697 [main:106] - GETTING Int from Int
2021-03-12 05:35:03,742 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3be29cc5]]
2021-03-12 05:35:03,742 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3be29cc5]
2021-03-12 05:35:03,742 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).countLeadingZeroBits()
2021-03-12 05:35:03,742 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@545ae342]]
2021-03-12 05:35:03,742 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:03,825 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:03,825 [main:149] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@545ae342]
2021-03-12 05:35:03,826 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(-339775394).coerceAtLeast(logged("sfkcy", -1203149557))
2021-03-12 05:35:03,826 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@67534eeb]]
2021-03-12 05:35:03,826 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:03,826 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@67534eeb]
2021-03-12 05:35:03,922 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:03,923 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toShort().plus(-92)
2021-03-12 05:35:03,923 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4e295265]]
2021-03-12 05:35:03,923 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:35:03,923 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@4e295265]
2021-03-12 05:35:04,014 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:04,014 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toFloat().compareTo(97)
2021-03-12 05:35:04,015 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11de3445]]
2021-03-12 05:35:04,015 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:04,094 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:04,094 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@11de3445]
2021-03-12 05:35:04,095 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(664275201).and(logged("sfkcy", -1203149557))
2021-03-12 05:35:04,095 [main:113] - Case = [public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bd48bbb]]
2021-03-12 05:35:04,095 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bd48bbb]
2021-03-12 05:35:04,095 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).ushr(logged("sfkcy", -1203149557))
2021-03-12 05:35:04,095 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@441830d]]
2021-03-12 05:35:04,095 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:04,095 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@441830d]
2021-03-12 05:35:04,096 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().unaryPlus()
2021-03-12 05:35:04,096 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@24170847]]
2021-03-12 05:35:04,096 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:04,096 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@24170847]
2021-03-12 05:35:04,097 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).rotateRight(logged("sfkcy", -1203149557))
2021-03-12 05:35:04,097 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], public final val step: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@3111291c]]
2021-03-12 05:35:04,097 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:35:04,179 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:04,179 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).rangeTo(-59).step
2021-03-12 05:35:04,180 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cf70a59]]
2021-03-12 05:35:04,180 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:04,180 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2cf70a59]
2021-03-12 05:35:04,263 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:04,264 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().compareTo(30)
2021-03-12 05:35:04,264 [main:61] - replacement of 0 of type Int is (logged("sfkcy", -1203149557)).compareTo(664275201).and(logged("sfkcy", -1203149557))
2021-03-12 05:35:04,356 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:04,357 [main:53] - replacing (logged((979750272).compareTo(-549562175).toString(sum), 1), Int)
2021-03-12 05:35:04,357 [main:50] - replacing logged((979750272).compareTo(-549562175).toString(sum), 1) Int
2021-03-12 05:35:04,357 [main:54] - Getting value of type Int
2021-03-12 05:35:04,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:04,446 [main:58] - GENERATED VALUE OF TYPE Int = 1259667038
2021-03-12 05:35:04,447 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:04,531 [main:67] - randomType = Long
2021-03-12 05:35:04,641 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:35:04,689 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:04,689 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3ca81397]
2021-03-12 05:35:04,770 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:04,771 [main:78] - Generated call from random type = (8058938986140255216).toInt().rem(-109)
2021-03-12 05:35:04,771 [main:106] - GETTING Int from Int
2021-03-12 05:35:04,815 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], public open val endInclusive: kotlin.Int defined in kotlin.ranges.IntRange[DeserializedPropertyDescriptor@290a9500]]
2021-03-12 05:35:04,815 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:35:04,903 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:04,904 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).rangeTo(-67).endInclusive
2021-03-12 05:35:04,904 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]]
2021-03-12 05:35:04,904 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:04,904 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7eb66a64]
2021-03-12 05:35:04,988 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:04,989 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().times(-22)
2021-03-12 05:35:04,989 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]]
2021-03-12 05:35:04,989 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:04,989 [main:149] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@547f2da8]
2021-03-12 05:35:04,990 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().coerceIn(logged("sfkcy", -1203149557), logged("sfkcy", -1203149557))
2021-03-12 05:35:04,990 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7ad71646]]
2021-03-12 05:35:04,990 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:04,990 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@7ad71646]
2021-03-12 05:35:05,067 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:05,068 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toByte().div(-18)
2021-03-12 05:35:05,068 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65c0214e]]
2021-03-12 05:35:05,068 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:05,068 [main:149] - GENERATING call of type public final operator fun unaryMinus(): kotlin.Int defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@65c0214e]
2021-03-12 05:35:05,068 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toShort().unaryMinus()
2021-03-12 05:35:05,068 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23e9f343]]
2021-03-12 05:35:05,068 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:05,069 [main:149] - GENERATING call of type public final infix fun shl(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@23e9f343]
2021-03-12 05:35:05,069 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).shl(logged("sfkcy", -1203149557))
2021-03-12 05:35:05,069 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f099ad6]]
2021-03-12 05:35:05,069 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:05,069 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4f099ad6]
2021-03-12 05:35:05,147 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:05,148 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).minus(118)
2021-03-12 05:35:05,148 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bd48bbb]]
2021-03-12 05:35:05,148 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:05,148 [main:149] - GENERATING call of type public final infix fun ushr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5bd48bbb]
2021-03-12 05:35:05,228 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:05,229 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).toInt().ushr(76164035)
2021-03-12 05:35:05,229 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@292cfba3]]
2021-03-12 05:35:05,229 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@292cfba3]
2021-03-12 05:35:05,229 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).dec()
2021-03-12 05:35:05,229 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]]
2021-03-12 05:35:05,229 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:05,321 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:05,322 [main:149] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3d3b76da]
2021-03-12 05:35:05,323 [main:117] - GENERATED CALL = (logged("sfkcy", -1203149557)).compareTo(-1503871124).inc()
2021-03-12 05:35:05,323 [main:61] - replacement of logged((979750272).compareTo(-549562175).toString(sum), 1) of type Int is (logged("sfkcy", -1203149557)).compareTo(logged("sfkcy", -1203149557)).minus(118)
2021-03-12 05:35:05,416 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:05,495 [main:119] - TRYING TO REPLACE CONSTANT 84
2021-03-12 05:35:05,576 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 05:35:05,576 [main:66] - Compilation checking started
2021-03-12 05:35:05,892 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals((true).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:05,892 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 05:35:05,994 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 05:35:05,995 [main:66] - Compilation checking started
2021-03-12 05:35:06,329 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals(((true)).compareTo(false).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:06,329 [main:119] - TRYING TO REPLACE CONSTANT 11
2021-03-12 05:35:06,413 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(CALL_EXPRESSION)
2021-03-12 05:35:06,414 [main:66] - Compilation checking started
2021-03-12 05:35:06,647 [main:49] - Result = false
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals(((true)).compareTo(false).compareTo(also { (log).append("vgryd") }), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:06,647 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 05:35:06,732 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:35:06,732 [main:66] - Compilation checking started
2021-03-12 05:35:07,109 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (false).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:07,109 [main:119] - TRYING TO REPLACE CONSTANT false
2021-03-12 05:35:07,219 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:35:07,219 [main:66] - Compilation checking started
2021-03-12 05:35:07,563 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (true).compareTo(true).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:07,563 [main:119] - TRYING TO REPLACE CONSTANT true
2021-03-12 05:35:07,657 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-12 05:35:07,657 [main:66] - Compilation checking started
2021-03-12 05:35:07,980 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (true).compareTo(false).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", (0.7831400515096786).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:07,980 [main:119] - TRYING TO REPLACE CONSTANT 0.7831400515096786
2021-03-12 05:35:08,059 [main:33] - Trying to replace Element(FLOAT_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 05:35:08,059 [main:66] - Compilation checking started
2021-03-12 05:35:08,383 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (true).compareTo(false).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-706891632, -484272659)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", ((0.7831400515096786)).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:08,383 [main:119] - TRYING TO REPLACE CONSTANT 706891632
2021-03-12 05:35:08,472 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-12 05:35:08,472 [main:66] - Compilation checking started
2021-03-12 05:35:08,786 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (true).compareTo(false).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-1203149557, -484272659)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", ((0.7831400515096786)).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:08,786 [main:119] - TRYING TO REPLACE CONSTANT 484272659
2021-03-12 05:35:08,869 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 05:35:08,869 [main:66] - Compilation checking started
2021-03-12 05:35:09,177 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (true).compareTo(false).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", -1203149557)).coerceIn(-1203149557, 706891632)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", ((0.7831400515096786)).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:09,177 [main:119] - TRYING TO REPLACE CONSTANT 1203149557
2021-03-12 05:35:09,260 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:09,261 [main:66] - Compilation checking started
2021-03-12 05:35:09,571 [main:53] - Result = true
Text:
import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { (log).append("vgryd") }

fun box(): String {
    var sum = (true).compareTo(false).takeHighestOneBit()
    for (i in (sum).toByte().downTo(sum)) {
        sum = (logged("sfkcy", ((true)).compareTo(true).compareTo(11))).coerceIn(-1203149557, 706891632)
    }

    assertEquals(((true)).compareTo(true).compareTo(11), sum)

    assertEquals("start;end;step;", ((0.7831400515096786)).toChar().lowercase())

    return "OK"
}


2021-03-12 05:35:09,601 [main:41] - AFTER TRY 0 res = import kotlin.test.*

val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}
2021-03-12 05:35:09,932 [main:43] - GENERATING CALL OF fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:35:09,933 [main:61] - WITHOUT TYPE PARAMS = fun logged(message: String, value: Int) =
    value.also { log.append(message) }
2021-03-12 05:35:10,009 [main:302] - generating value of type = String true depth = 1
2021-03-12 05:35:10,009 [main:302] - generating value of type = Int true depth = 1
2021-03-12 05:35:10,010 [main:95] - GENERATED = logged("hhpqz", 500864543)
2021-03-12 05:35:10,104 [main:43] - Try №0
2021-03-12 05:35:28,564 [main:48] - Already checked
2021-03-12 05:35:32,766 [main:69] - Trying to insert override fun resume(value: Kla0) {
            prope2 = value
        }
2021-03-12 05:35:33,058 [main:66] - Compilation checking started
2021-03-12 05:35:34,252 [main:103] - Trying to change 311 nodes
2021-03-12 05:35:34,252 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:35:34,254 [main:50] - replacing prope12.prope3 String
2021-03-12 05:35:34,254 [main:54] - Getting value of type String
2021-03-12 05:35:34,463 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:34,467 [main:58] - GENERATED VALUE OF TYPE String = "ywlsz"
2021-03-12 05:35:34,468 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:35,957 [main:67] - randomType = Function1<HashMap<MutableMap<UByte, UShort>, Kla6>, Pair<String?, Boolean>>
2021-03-12 05:35:35,958 [main:106] - GETTING String from Int
2021-03-12 05:35:36,007 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:36,007 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:36,007 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:36,007 [main:117] - GENERATED CALL = (sum * 10).toChar().lowercase()
2021-03-12 05:35:36,007 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:36,007 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:35:36,224 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:35:36,227 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:36,228 [main:117] - GENERATED CALL = (sum * 10).div(-6362397137946636303).toString(var sum =
2021-03-12 05:35:36,228 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:35:36,228 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:36,228 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:35:36,391 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:36,394 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(-947302406)
2021-03-12 05:35:36,394 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:36,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:36,569 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:36,572 [main:117] - GENERATED CALL = (sum * 10).toString(1697051342)
2021-03-12 05:35:36,572 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:36,572 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:36,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:36,573 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(logged("start;", 8))
2021-03-12 05:35:36,573 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:35:36,573 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:36,573 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:35:36,574 [main:117] - GENERATED CALL = (sum * 10).toChar().uppercase()
2021-03-12 05:35:36,574 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:36,574 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:36,574 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:36,769 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:36,774 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(-586991124)
2021-03-12 05:35:36,775 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:36,775 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:36,775 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:36,947 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:36,950 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(-1699183034)
2021-03-12 05:35:36,950 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:35:36,950 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:36,951 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:35:36,951 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:35:36,951 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:35:36,951 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:36,951 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:35:37,128 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:37,133 [main:117] - GENERATED CALL = (sum * 10).toChar().plus("vnkvh")
2021-03-12 05:35:37,133 [main:114] - replacement of prope12.prope3 of type String is (sum * 10).toChar().titlecase()
2021-03-12 05:35:37,356 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:37,357 [main:66] - Compilation checking started
2021-03-12 05:35:38,154 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != "OK") return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:38,157 [main:107] - replacing ("OK", String)
2021-03-12 05:35:38,157 [main:50] - replacing "OK" String
2021-03-12 05:35:38,157 [main:54] - Getting value of type String
2021-03-12 05:35:38,326 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:38,329 [main:58] - GENERATED VALUE OF TYPE String = "byflt"
2021-03-12 05:35:38,329 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:38,513 [main:67] - randomType = Float
2021-03-12 05:35:38,702 [main:302] - generating value of type = Float true depth = 0
2021-03-12 05:35:38,747 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@35b1a8b0]
2021-03-12 05:35:38,748 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:35:38,904 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:38,907 [main:78] - Generated call from random type = (0.75586814f).toChar().plus("wsbwq")
2021-03-12 05:35:38,908 [main:106] - GETTING String from Int
2021-03-12 05:35:38,954 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:38,954 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:35:39,117 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:35:39,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:39,120 [main:117] - GENERATED CALL = (logged("start;", 8)).div(3112204274019738657).toString(sum * 10)
2021-03-12 05:35:39,120 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:39,120 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:39,120 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:39,121 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(logged("hhpqz", 500864543)).toString(var sum =
2021-03-12 05:35:39,121 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:35:39,121 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:39,121 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:35:39,270 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:39,273 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().plus("dnimz")
2021-03-12 05:35:39,273 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:35:39,273 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:39,273 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:35:39,273 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().titlecase()
2021-03-12 05:35:39,273 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:35:39,273 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:39,274 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:35:39,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:39,432 [main:117] - GENERATED CALL = (logged("start;", 8)).toShort().toString(570368730)
2021-03-12 05:35:39,432 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:39,432 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:39,432 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:39,432 [main:117] - GENERATED CALL = (logged("start;", 8)).toLong().toString(var sum =
2021-03-12 05:35:39,432 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:39,432 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:39,603 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:39,607 [main:117] - GENERATED CALL = (logged("start;", 8)).toString(1350646357)
2021-03-12 05:35:39,608 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:35:39,608 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:39,608 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:35:39,609 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().uppercase()
2021-03-12 05:35:39,609 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:39,609 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:39,609 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:39,609 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().lowercase()
2021-03-12 05:35:39,609 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:39,609 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:39,609 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:39,807 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:39,810 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().toString(669838483)
2021-03-12 05:35:39,811 [main:114] - replacement of "OK" of type String is (logged("start;", 8)).toChar().lowercase()
2021-03-12 05:35:39,979 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:39,980 [main:66] - Compilation checking started
2021-03-12 05:35:40,710 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:40,713 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:35:40,714 [main:50] - replacing prope12.prope3 String
2021-03-12 05:35:40,714 [main:54] - Getting value of type String
2021-03-12 05:35:40,875 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:40,878 [main:58] - GENERATED VALUE OF TYPE String = "ennge"
2021-03-12 05:35:40,879 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:41,253 [main:67] - randomType = Kla4<Float>
2021-03-12 05:35:41,432 [main:302] - generating value of type = Kla4<Float> false depth = 0
2021-03-12 05:35:41,435 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:35:42,169 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-12 05:35:42,174 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:35:42,206 [main:106] - GETTING String from Int
2021-03-12 05:35:42,259 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:35:42,259 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:42,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:35:42,260 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(sum * 10)
2021-03-12 05:35:42,260 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:35:42,260 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:42,260 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:35:42,260 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:35:42,260 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:42,260 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:35:42,408 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:35:42,411 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:42,559 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:42,562 [main:117] - GENERATED CALL = (sum * 10).div(-7975679739393414228).toString(-1578729716)
2021-03-12 05:35:42,563 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:42,563 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:42,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:42,563 [main:117] - GENERATED CALL = (sum * 10).compareTo(logged("hhpqz", 500864543)).toString(logged("start;", 8))
2021-03-12 05:35:42,563 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:35:42,563 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:42,563 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:35:42,563 [main:117] - GENERATED CALL = (sum * 10).toChar().uppercase()
2021-03-12 05:35:42,564 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:42,564 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:42,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:42,564 [main:117] - GENERATED CALL = (sum * 10).toChar().lowercase()
2021-03-12 05:35:42,564 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:42,564 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:42,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:42,564 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(var sum =
2021-03-12 05:35:42,564 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:42,564 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:42,564 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:42,718 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:42,722 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(-1880344764)
2021-03-12 05:35:42,722 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:42,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:42,722 [main:117] - GENERATED CALL = (sum * 10).toString(var sum =
2021-03-12 05:35:42,722 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:42,722 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:42,722 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:42,723 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(logged("hhpqz", 500864543))
2021-03-12 05:35:42,723 [main:114] - replacement of prope12.prope3 of type String is (sum * 10).toInt().toString(logged("hhpqz", 500864543))
2021-03-12 05:35:42,875 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:42,875 [main:66] - Compilation checking started
2021-03-12 05:35:43,587 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:43,590 [main:107] - replacing ("OK", String)
2021-03-12 05:35:43,590 [main:50] - replacing "OK" String
2021-03-12 05:35:43,590 [main:54] - Getting value of type String
2021-03-12 05:35:43,751 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:43,755 [main:58] - GENERATED VALUE OF TYPE String = "obfwq"
2021-03-12 05:35:43,755 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:43,767 [main:67] - randomType = Kla6
2021-03-12 05:35:43,931 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:35:43,934 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:35:43,945 [main:106] - GETTING String from IntProgression
2021-03-12 05:35:43,963 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]]
2021-03-12 05:35:43,963 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]
2021-03-12 05:35:44,116 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:44,276 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:35:44,281 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:35:44,658 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:35:44,661 [main:95] - GENERATED = StringBuilder(804213823)
2021-03-12 05:35:44,812 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:44,964 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:45,121 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:35:45,125 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:35:45,473 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:35:45,476 [main:95] - GENERATED = StringBuilder(-665631610)
2021-03-12 05:35:45,661 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:45,811 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:45,963 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:35:45,967 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 05:35:46,285 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 05:35:46,292 [main:95] - GENERATED = StringBuilder("aksjv")
2021-03-12 05:35:46,439 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:35:46,442 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:35:46,448 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).joinToString(StringBuilder(804213823), "hzdpy", StringBuilder(-665631610), 1352234856, StringBuilder("aksjv"), {a: T -> "dhqgb"})
2021-03-12 05:35:46,448 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:46,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:46,449 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8))
2021-03-12 05:35:46,449 [main:114] - replacement of "OK" of type String is (logged("start;", 8) downTo logged("end;", 1)).joinToString(StringBuilder(804213823), "hzdpy", StringBuilder(-665631610), 1352234856, StringBuilder("aksjv"), {a: T -> "dhqgb"})
2021-03-12 05:35:46,595 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:46,596 [main:66] - Compilation checking started
2021-03-12 05:35:47,067 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return (logged("start;", 8) downTo logged("end;", 1)).joinToString(StringBuilder(804213823), "hzdpy", StringBuilder(-665631610), 1352234856, StringBuilder("aksjv"), {a: T -> "dhqgb"})
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:47,072 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 05:35:47,074 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 05:35:47,074 [main:54] - Getting value of type String
2021-03-12 05:35:47,254 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:47,257 [main:58] - GENERATED VALUE OF TYPE String = "cuhyb"
2021-03-12 05:35:47,258 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:47,264 [main:67] - randomType = String
2021-03-12 05:35:47,419 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:47,441 [main:149] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59078518]
2021-03-12 05:35:47,594 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 05:35:47,597 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:35:47,600 [main:78] - Generated call from random type = ("nsccz").dropLastWhile({a: Char -> true})
2021-03-12 05:35:47,601 [main:106] - GETTING String from IntProgression
2021-03-12 05:35:47,618 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]]
2021-03-12 05:35:47,618 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]
2021-03-12 05:35:47,767 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:47,923 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:48,097 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:48,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:48,412 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:35:48,566 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:35:48,569 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:35:48,576 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).joinToString(StringBuilder(), "cunjl", "pteqc", 882488820, "ydivq", {a: T -> "dpidr"})
2021-03-12 05:35:48,576 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:48,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:48,724 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:48,727 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617)
2021-03-12 05:35:48,727 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617)
2021-03-12 05:35:48,875 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:48,876 [main:66] - Compilation checking started
2021-03-12 05:35:49,526 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if (checkFinished && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:49,530 [main:107] - replacing (checkFinished, Boolean)
2021-03-12 05:35:49,531 [main:50] - replacing checkFinished Boolean
2021-03-12 05:35:49,531 [main:54] - Getting value of type Boolean
2021-03-12 05:35:49,690 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:35:49,693 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:35:49,693 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:49,864 [main:67] - randomType = Double
2021-03-12 05:35:50,029 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:35:50,067 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]
2021-03-12 05:35:50,222 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:50,223 [main:78] - Generated call from random type = (0.2551281485995506).equals("ryolh")
2021-03-12 05:35:50,224 [main:106] - GETTING Boolean from Int
2021-03-12 05:35:50,270 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:35:50,270 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:50,270 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:35:50,420 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:50,421 [main:117] - GENERATED CALL = (logged("start;", 8)).toInt().equals("zpvjn")
2021-03-12 05:35:50,421 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]]
2021-03-12 05:35:50,421 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:35:50,421 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]
2021-03-12 05:35:50,570 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:50,570 [main:117] - GENERATED CALL = (logged("start;", 8)).toDouble().equals("deiie")
2021-03-12 05:35:50,570 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]]
2021-03-12 05:35:50,570 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:35:50,732 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:50,732 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]
2021-03-12 05:35:50,885 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:35:50,889 [main:117] - GENERATED CALL = (logged("start;", 8)).equals("nspou").and(true)
2021-03-12 05:35:50,889 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:35:50,889 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:50,889 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:35:51,037 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:51,037 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(sum * 10).equals("sfsbo")
2021-03-12 05:35:51,037 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77feef20]]
2021-03-12 05:35:51,037 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:51,037 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77feef20]
2021-03-12 05:35:51,188 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:51,189 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().equals("gutne")
2021-03-12 05:35:51,189 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38132e56]]
2021-03-12 05:35:51,189 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:51,189 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38132e56]
2021-03-12 05:35:51,189 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().isWhitespace()
2021-03-12 05:35:51,189 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@31ae9b75]]
2021-03-12 05:35:51,189 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:35:51,189 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@31ae9b75]
2021-03-12 05:35:51,189 [main:117] - GENERATED CALL = (logged("start;", 8)).toDouble().isInfinite()
2021-03-12 05:35:51,189 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34ac6d65]]
2021-03-12 05:35:51,189 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:35:51,337 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:35:51,337 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34ac6d65]
2021-03-12 05:35:51,487 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:35:51,490 [main:117] - GENERATED CALL = (logged("start;", 8)).equals("hmlpj").xor(false)
2021-03-12 05:35:51,490 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@53a39b9]]
2021-03-12 05:35:51,490 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:35:51,490 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@53a39b9]
2021-03-12 05:35:51,491 [main:117] - GENERATED CALL = (logged("start;", 8)).toFloat().isNaN()
2021-03-12 05:35:51,491 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e072894]]
2021-03-12 05:35:51,491 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:35:51,637 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:35:51,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e072894]
2021-03-12 05:35:51,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:51,797 [main:117] - GENERATED CALL = (logged("start;", 8)).rangeTo(-1).contains(1386677922)
2021-03-12 05:35:51,797 [main:114] - replacement of checkFinished of type Boolean is (logged("start;", 8)).equals("hmlpj").xor(false)
2021-03-12 05:35:51,988 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:51,989 [main:66] - Compilation checking started
2021-03-12 05:35:52,635 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:52,639 [main:107] - replacing ("tail-call optimization hit: method ", String)
2021-03-12 05:35:52,640 [main:50] - replacing "tail-call optimization hit: method " String
2021-03-12 05:35:52,640 [main:54] - Getting value of type String
2021-03-12 05:35:52,807 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:52,811 [main:58] - GENERATED VALUE OF TYPE String = "eqatp"
2021-03-12 05:35:52,811 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:54,089 [main:67] - randomType = MutableMap<Long, Array<Function2<Short?, UByte, Kla1>>>
2021-03-12 05:35:54,090 [main:106] - GETTING String from Int
2021-03-12 05:35:54,132 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:54,132 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:54,132 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:54,287 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:54,290 [main:117] - GENERATED CALL = (logged("start;", 8)).toLong().toString(1619025354)
2021-03-12 05:35:54,290 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:54,290 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:54,291 [main:117] - GENERATED CALL = (logged("start;", 8)).toString(logged("hhpqz", 500864543))
2021-03-12 05:35:54,291 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:54,291 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:54,291 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:54,291 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().lowercase()
2021-03-12 05:35:54,291 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:54,291 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:54,291 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:54,292 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(logged("start;", 8)).toString(logged("hhpqz", 500864543))
2021-03-12 05:35:54,292 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:35:54,292 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:54,292 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:35:54,444 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:54,447 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().plus("vuzmk")
2021-03-12 05:35:54,447 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:54,447 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:54,447 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:54,448 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().toString(logged("start;", 8))
2021-03-12 05:35:54,448 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:54,448 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:54,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:54,448 [main:117] - GENERATED CALL = (logged("start;", 8)).toInt().toString(logged("start;", 8))
2021-03-12 05:35:54,448 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:35:54,448 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:54,448 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:35:54,448 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().titlecase()
2021-03-12 05:35:54,449 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:35:54,449 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:54,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:35:54,449 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().uppercase()
2021-03-12 05:35:54,449 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:35:54,449 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:54,449 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:35:54,449 [main:117] - GENERATED CALL = (logged("start;", 8)).toShort().toString(var sum =
2021-03-12 05:35:54,449 [main:114] - replacement of "tail-call optimization hit: method " of type String is (logged("start;", 8)).toChar().uppercase()
2021-03-12 05:35:54,612 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:54,613 [main:66] - Compilation checking started
2021-03-12 05:35:55,409 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + method + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:55,413 [main:107] - replacing (method, String)
2021-03-12 05:35:55,413 [main:50] - replacing method String
2021-03-12 05:35:55,413 [main:54] - Getting value of type String
2021-03-12 05:35:55,561 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:55,565 [main:58] - GENERATED VALUE OF TYPE String = "shslw"
2021-03-12 05:35:55,565 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:55,577 [main:67] - randomType = Kla0
2021-03-12 05:35:55,578 [main:106] - GETTING String from Int
2021-03-12 05:35:55,609 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:55,609 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:35:55,769 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:35:55,772 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:55,773 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(4812067860233263886).toString(sum * 10)
2021-03-12 05:35:55,773 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:35:55,773 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:35:55,773 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:35:55,773 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toShort().toString(sum * 10)
2021-03-12 05:35:55,773 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:35:55,773 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:35:55,773 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:35:55,774 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
2021-03-12 05:35:55,774 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:55,774 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:55,774 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:55,774 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toByte().toString(sum * 10)
2021-03-12 05:35:55,774 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:35:55,774 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:55,774 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:35:55,920 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:55,924 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().plus("opdop")
2021-03-12 05:35:55,924 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:55,924 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:35:55,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:55,924 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).compareTo(logged("start;", 8)).toString(sum * 10)
2021-03-12 05:35:55,924 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:35:55,924 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:55,924 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:35:55,925 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().titlecase()
2021-03-12 05:35:55,925 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:55,925 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:56,087 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:35:56,090 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toString(1140127281)
2021-03-12 05:35:56,090 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:56,091 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:56,091 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:56,091 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().lowercase()
2021-03-12 05:35:56,091 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:35:56,091 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:35:56,091 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:56,091 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toInt().toString(logged("start;", 8))
2021-03-12 05:35:56,091 [main:114] - replacement of method of type String is (logged("hhpqz", 500864543)).toString(1140127281)
2021-03-12 05:35:56,242 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:35:56,243 [main:66] - Compilation checking started
2021-03-12 05:35:56,906 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:56,908 [main:107] - replacing (fu0 { s ->
        fu2 {
            prope3 = s
        }
    }, Kla0)
2021-03-12 05:35:56,908 [main:50] - replacing fu0 { s ->
        fu2 {
            prope3 = s
        }
    } Kla0
2021-03-12 05:35:56,908 [main:54] - Getting value of type Kla0
2021-03-12 05:35:57,056 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:35:57,059 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:35:57,379 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:35:57,380 [main:61] - GENERATED IS CALL =true
2021-03-12 05:35:57,741 [main:67] - randomType = ULong?
2021-03-12 05:35:57,895 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:35:57,945 [main:106] - GETTING Kla0 from Int
2021-03-12 05:35:58,002 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:35:58,036 [main:106] - GETTING Kla0 from Int
2021-03-12 05:35:58,037 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:35:58,056 [main:106] - GETTING Kla0 from Int
2021-03-12 05:35:58,057 [main:114] - replacement of fu0 { s ->
        fu2 {
            prope3 = s
        }
    } of type Kla0 is TODO()
2021-03-12 05:35:58,212 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:35:58,212 [main:66] - Compilation checking started
2021-03-12 05:35:58,684 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = TODO()

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        prope14.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:35:58,689 [main:107] - replacing ("tail-call optimization miss: method at ", String)
2021-03-12 05:35:58,691 [main:50] - replacing "tail-call optimization miss: method at " String
2021-03-12 05:35:58,691 [main:54] - Getting value of type String
2021-03-12 05:35:58,863 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:35:58,866 [main:58] - GENERATED VALUE OF TYPE String = "ohfcv"
2021-03-12 05:35:58,866 [main:61] - GENERATED IS CALL =false
2021-03-12 05:35:59,076 [main:67] - randomType = ArrayDeque<Kla0?>
2021-03-12 05:35:59,243 [main:302] - generating value of type = ArrayDeque<Kla0?> false depth = 0
2021-03-12 05:35:59,406 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla0?> = TODO()
2021-03-12 05:35:59,411 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<Kla0?> = TODO()
2021-03-12 05:35:59,736 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:35:59,739 [main:95] - GENERATED = ArrayDeque<Kla0?>(-1180412804)
2021-03-12 05:35:59,860 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:35:59,860 [main:78] - Generated call from random type = (ArrayDeque<Kla0?>(-1180412804)).size.toString(logged("start;", 8))
2021-03-12 05:35:59,861 [main:106] - GETTING String from Int
2021-03-12 05:35:59,890 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:35:59,890 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:59,890 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:35:59,890 [main:117] - GENERATED CALL = (sum * 10).toChar().lowercase()
2021-03-12 05:35:59,890 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:35:59,891 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:35:59,891 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:35:59,891 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(logged("start;", 8))
2021-03-12 05:35:59,891 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:35:59,891 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:35:59,891 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:36:00,049 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:00,053 [main:117] - GENERATED CALL = (sum * 10).toChar().plus("dpuxg")
2021-03-12 05:36:00,053 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:36:00,053 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:00,053 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:36:00,054 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:36:00,054 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:00,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:00,054 [main:117] - GENERATED CALL = (sum * 10).toString(logged("start;", 8))
2021-03-12 05:36:00,054 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:00,054 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:36:00,054 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:00,055 [main:117] - GENERATED CALL = (sum * 10).compareTo(sum * 10).toString(sum * 10)
2021-03-12 05:36:00,055 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:00,055 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:36:00,055 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:00,055 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(logged("hhpqz", 500864543))
2021-03-12 05:36:00,055 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:36:00,055 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:36:00,055 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:00,233 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:00,236 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(1547217519)
2021-03-12 05:36:00,237 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:36:00,237 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:36:00,419 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:36:00,423 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:00,572 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:00,576 [main:117] - GENERATED CALL = (sum * 10).div(5242996439178277912).toString(1779084676)
2021-03-12 05:36:00,576 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:36:00,576 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:36:00,576 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:36:00,723 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:00,726 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(439977314)
2021-03-12 05:36:00,726 [main:114] - replacement of "tail-call optimization miss: method at " of type String is (sum * 10).toByte().toString(logged("start;", 8))
2021-03-12 05:36:00,880 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:00,881 [main:66] - Compilation checking started
2021-03-12 05:36:01,560 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 {
            prope3 = s
        }
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:01,563 [main:107] - replacing ({
            prope3 = s
        }, SuspendFunction0<Unit>)
2021-03-12 05:36:01,563 [main:50] - replacing {
            prope3 = s
        } SuspendFunction0<Unit>
2021-03-12 05:36:01,563 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 05:36:01,720 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 05:36:01,724 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:36:01,892 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:36:01,897 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:36:02,225 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:36:02,229 [main:95] - GENERATED = require(false)
2021-03-12 05:36:02,229 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { require(false)}
2021-03-12 05:36:02,229 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:02,764 [main:67] - randomType = Kla4<Byte?>?
2021-03-12 05:36:02,923 [main:302] - generating value of type = Kla4<Byte?> false depth = 0
2021-03-12 05:36:02,926 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:36:03,629 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-12 05:36:03,633 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:36:03,652 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 05:36:03,688 [main:106] - GETTING SuspendFunction0<Unit> from IntProgression
2021-03-12 05:36:03,702 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 05:36:03,703 [main:106] - GETTING SuspendFunction0<Unit> from Int
2021-03-12 05:36:03,704 [main:106] - GETTING SuspendFunction0<Unit> from StringBuilder
2021-03-12 05:36:03,722 [main:114] - replacement of {
            prope3 = s
        } of type SuspendFunction0<Unit> is { require(false)}
2021-03-12 05:36:03,868 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:36:03,868 [main:66] - Compilation checking started
2021-03-12 05:36:04,555 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:04,559 [main:107] - replacing (prope12.prope3 != "OK", Boolean)
2021-03-12 05:36:04,560 [main:50] - replacing prope12.prope3 != "OK" Boolean
2021-03-12 05:36:04,560 [main:54] - Getting value of type Boolean
2021-03-12 05:36:04,744 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:04,764 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:36:04,764 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:04,967 [main:67] - randomType = Array<Kla5>
2021-03-12 05:36:05,120 [main:302] - generating value of type = Array<Kla5> false depth = 0
2021-03-12 05:36:05,273 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Kla5> = TODO()
2021-03-12 05:36:05,277 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Kla5> = TODO()
2021-03-12 05:36:05,432 [main:95] - GENERATED = emptyArray<Kla5>()
2021-03-12 05:36:05,445 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@6ca26a81]
2021-03-12 05:36:05,595 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:05,595 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]
2021-03-12 05:36:05,595 [main:78] - Generated call from random type = (emptyArray<Kla5>()).equals("wvarv").not()
2021-03-12 05:36:05,596 [main:106] - GETTING Boolean from Int
2021-03-12 05:36:05,627 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e7e9cab]]
2021-03-12 05:36:05,627 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:36:05,775 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:36:05,779 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6e7e9cab]
2021-03-12 05:36:05,928 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:05,929 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).rangeTo(-37).equals("scewl")
2021-03-12 05:36:05,929 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40879361]]
2021-03-12 05:36:05,929 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:05,929 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40879361]
2021-03-12 05:36:05,929 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().isUpperCase()
2021-03-12 05:36:05,929 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:36:05,929 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:36:06,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:06,086 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:36:06,280 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:06,281 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")
2021-03-12 05:36:06,281 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e072894]]
2021-03-12 05:36:06,281 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:36:06,430 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:36:06,434 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e072894]
2021-03-12 05:36:06,579 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:06,583 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).rangeTo(-78).contains(-576472016)
2021-03-12 05:36:06,583 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]]
2021-03-12 05:36:06,583 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:36:06,740 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:06,740 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]
2021-03-12 05:36:06,741 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).equals("dwpsb").not()
2021-03-12 05:36:06,741 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6a556ae0]]
2021-03-12 05:36:06,741 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:36:06,885 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:36:06,889 [main:149] - GENERATING call of type public open fun isEmpty(): kotlin.Boolean defined in kotlin.ranges.IntRange[DeserializedSimpleFunctionDescriptor@6a556ae0]
2021-03-12 05:36:06,889 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).rangeTo(-74).isEmpty()
2021-03-12 05:36:06,889 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f9b1c6]]
2021-03-12 05:36:06,889 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:06,889 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f9b1c6]
2021-03-12 05:36:06,889 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().isISOControl()
2021-03-12 05:36:06,889 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]]
2021-03-12 05:36:06,889 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:36:06,889 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]
2021-03-12 05:36:07,034 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:07,034 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toDouble().equals("myhae")
2021-03-12 05:36:07,034 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614532e1]]
2021-03-12 05:36:07,034 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:07,035 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@614532e1]
2021-03-12 05:36:07,035 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().isLetterOrDigit()
2021-03-12 05:36:07,035 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77feef20]]
2021-03-12 05:36:07,035 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:36:07,035 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77feef20]
2021-03-12 05:36:07,185 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:07,185 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toByte().equals("lcufn")
2021-03-12 05:36:07,185 [main:114] - replacement of prope12.prope3 != "OK" of type Boolean is (logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")
2021-03-12 05:36:07,384 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:07,384 [main:66] - Compilation checking started
2021-03-12 05:36:08,030 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:08,034 [main:107] - replacing (prope6, Kla0)
2021-03-12 05:36:08,035 [main:50] - replacing prope6 Kla0
2021-03-12 05:36:08,035 [main:54] - Getting value of type Kla0
2021-03-12 05:36:08,231 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:08,235 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:08,569 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:08,569 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:08,584 [main:67] - randomType = Kla6
2021-03-12 05:36:08,744 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:36:08,763 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:36:08,772 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:08,807 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:36:08,818 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:36:08,836 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:08,837 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:08,837 [main:114] - replacement of prope6 of type Kla0 is TODO()
2021-03-12 05:36:08,983 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:08,983 [main:66] - Compilation checking started
2021-03-12 05:36:09,415 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.TODO().fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:09,418 [main:107] - replacing (prope4, Kla0)
2021-03-12 05:36:09,419 [main:50] - replacing prope4 Kla0
2021-03-12 05:36:09,419 [main:54] - Getting value of type Kla0
2021-03-12 05:36:09,570 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:09,574 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:09,879 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:09,879 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:09,895 [main:67] - randomType = Kla3
2021-03-12 05:36:10,071 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 05:36:10,075 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}
2021-03-12 05:36:10,092 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:10,123 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:10,123 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:36:10,143 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:36:10,154 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:10,154 [main:114] - replacement of prope4 of type Kla0 is TODO()
2021-03-12 05:36:10,299 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:10,299 [main:66] - Compilation checking started
2021-03-12 05:36:10,741 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.TODO().fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:10,744 [main:107] - replacing (prope4, Kla0)
2021-03-12 05:36:10,744 [main:50] - replacing prope4 Kla0
2021-03-12 05:36:10,744 [main:54] - Getting value of type Kla0
2021-03-12 05:36:10,895 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:10,898 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:11,209 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:11,209 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:11,223 [main:67] - randomType = Kla1
2021-03-12 05:36:11,384 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:36:11,388 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}
2021-03-12 05:36:11,396 [main:78] - Generated call from random type = (Kla1()).prope9
2021-03-12 05:36:11,396 [main:114] - replacement of prope4 of type Kla0 is (Kla1()).prope9
2021-03-12 05:36:11,549 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:11,549 [main:66] - Compilation checking started
2021-03-12 05:36:11,968 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.(Kla1()).prope9.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:11,971 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:36:11,972 [main:50] - replacing prope12.prope3 String
2021-03-12 05:36:11,972 [main:54] - Getting value of type String
2021-03-12 05:36:12,121 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:12,124 [main:58] - GENERATED VALUE OF TYPE String = "mzvuy"
2021-03-12 05:36:12,125 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:15,044 [main:67] - randomType = Function2<Kla6?, Function2<Map<Triple<LinkedHashMap<UByte, Kla5>, Kla3, Kla3>, Pair<Kla3, UShort>>?, Kla6?, Function2<Kla1, UShort?, Kla3>>, Short>
2021-03-12 05:36:15,045 [main:106] - GETTING String from Int
2021-03-12 05:36:15,080 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:36:15,080 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:15,080 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:36:15,081 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().uppercase()
2021-03-12 05:36:15,081 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:36:15,081 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:15,081 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:36:15,081 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().lowercase()
2021-03-12 05:36:15,081 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:36:15,081 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:15,081 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:36:15,235 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:15,238 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().plus("erlpw")
2021-03-12 05:36:15,394 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:15,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:15,545 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:15,549 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toString(1934793594)
2021-03-12 05:36:15,549 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:36:15,549 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:15,549 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:36:15,549 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().titlecase()
2021-03-12 05:36:15,549 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:15,550 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:36:15,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:15,550 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).compareTo(sum * 10).toString(logged("start;", 8))
2021-03-12 05:36:15,550 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:36:15,550 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:36:15,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:36:15,550 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toShort().toString(var sum =
2021-03-12 05:36:15,550 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:36:15,550 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:36:15,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:15,551 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
2021-03-12 05:36:15,551 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:36:15,551 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:36:15,729 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:36:15,733 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:15,734 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(6987954355674049487).toString(logged("hhpqz", 500864543))
2021-03-12 05:36:15,734 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:15,734 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:36:15,734 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:15,881 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:15,884 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toInt().toString(861422211)
2021-03-12 05:36:15,884 [main:114] - replacement of prope12.prope3 of type String is (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
2021-03-12 05:36:16,039 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:16,039 [main:66] - Compilation checking started
2021-03-12 05:36:16,679 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    prope12.prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:16,684 [main:107] - replacing (prope12, Kla1)
2021-03-12 05:36:16,685 [main:50] - replacing prope12 Kla1
2021-03-12 05:36:16,685 [main:54] - Getting value of type Kla1
2021-03-12 05:36:16,843 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:36:16,847 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}
2021-03-12 05:36:16,847 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 05:36:16,847 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:17,796 [main:67] - randomType = HashMap<Map<Char?, ULong>?, Int>
2021-03-12 05:36:17,941 [main:302] - generating value of type = HashMap<Map<Char?, ULong>?, Int> false depth = 0
2021-03-12 05:36:18,092 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<Map<Char?, ULong>?, Int> = TODO()
2021-03-12 05:36:18,097 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int): HashMap<Map<Char?, ULong>?, Int> = TODO()
2021-03-12 05:36:18,425 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:36:18,429 [main:95] - GENERATED = HashMap<Map<Char?, ULong>?, Int>(56066676)
2021-03-12 05:36:18,574 [main:106] - GETTING Kla1 from StringBuilder
2021-03-12 05:36:18,596 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:18,643 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:18,643 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:18,644 [main:106] - GETTING Kla1 from IntProgression
2021-03-12 05:36:18,656 [main:114] - replacement of prope12 of type Kla1 is Kla1()
2021-03-12 05:36:18,807 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:18,807 [main:66] - Compilation checking started
2021-03-12 05:36:19,480 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:19,483 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:36:19,483 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:36:19,483 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:36:19,642 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:36:19,649 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:36:19,833 [main:67] - randomType = Kla7
2021-03-12 05:36:19,995 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:36:20,000 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:36:20,022 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:36:20,053 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:36:20,053 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:36:20,065 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:36:20,065 [main:106] - GETTING EmptyCoroutineContext from StringBuilder
2021-03-12 05:36:20,082 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:36:20,082 [main:107] - replacing (fu0 { s ->
        prope3 = s
    }, Kla0)
2021-03-12 05:36:20,082 [main:50] - replacing fu0 { s ->
        prope3 = s
    } Kla0
2021-03-12 05:36:20,082 [main:54] - Getting value of type Kla0
2021-03-12 05:36:20,240 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:20,244 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:20,611 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:20,612 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:20,962 [main:67] - randomType = Kla7?
2021-03-12 05:36:21,107 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:36:21,110 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:36:21,129 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:21,158 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:36:21,169 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:21,169 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:21,170 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:36:21,186 [main:114] - replacement of fu0 { s ->
        prope3 = s
    } of type Kla0 is TODO()
2021-03-12 05:36:21,338 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:21,338 [main:66] - Compilation checking started
2021-03-12 05:36:21,773 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            prope2 = value
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = TODO()

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:21,776 [main:107] - replacing (prope13, Result<Ty0>)
2021-03-12 05:36:21,777 [main:50] - replacing prope13 Result<Ty0>
2021-03-12 05:36:21,777 [main:54] - Getting value of type Result<Ty0>
2021-03-12 05:36:21,931 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 05:36:22,082 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:36:22,086 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:36:22,435 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 05:36:22,435 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 05:36:22,979 [main:67] - randomType = HashMap<Kla5, HashSet<ULong>>
2021-03-12 05:36:23,123 [main:302] - generating value of type = HashMap<Kla5, HashSet<ULong>> false depth = 0
2021-03-12 05:36:23,282 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<Kla5, HashSet<ULong>> = TODO()
2021-03-12 05:36:23,286 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<Kla5, HashSet<ULong>> = TODO()
2021-03-12 05:36:23,446 [main:95] - GENERATED = linkedMapOf<Kla5, HashSet<ULong>>()
2021-03-12 05:36:23,584 [main:106] - GETTING Result<Ty0> from IntProgression
2021-03-12 05:36:23,602 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 05:36:23,650 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 05:36:23,651 [main:106] - GETTING Result<Ty0> from Int
2021-03-12 05:36:23,653 [main:106] - GETTING Result<Ty0> from StringBuilder
2021-03-12 05:36:23,682 [main:111] - Cant find and generate replacement for prope13 type Result<Ty0>
2021-03-12 05:36:23,682 [main:107] - replacing (isSuccess, Boolean)
2021-03-12 05:36:23,683 [main:50] - replacing isSuccess Boolean
2021-03-12 05:36:23,683 [main:54] - Getting value of type Boolean
2021-03-12 05:36:23,860 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:23,863 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:36:23,864 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:23,877 [main:67] - randomType = Kla6
2021-03-12 05:36:24,030 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:36:24,034 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:36:24,043 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]
2021-03-12 05:36:24,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:24,192 [main:78] - Generated call from random type = (Kla6()).prope16.and(false)
2021-03-12 05:36:24,192 [main:106] - GETTING Boolean from Int
2021-03-12 05:36:24,222 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]]
2021-03-12 05:36:24,223 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:36:24,376 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:36:24,380 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]
2021-03-12 05:36:24,530 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:24,531 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(0.33379997351606006).equals("duaud")
2021-03-12 05:36:24,531 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@30696c34]]
2021-03-12 05:36:24,531 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:36:24,679 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:36:24,683 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 05:36:24,683 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(0.2753649390039591).isFinite()
2021-03-12 05:36:24,684 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46f4aa4e]]
2021-03-12 05:36:24,684 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:24,684 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46f4aa4e]
2021-03-12 05:36:24,684 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().isHighSurrogate()
2021-03-12 05:36:24,684 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f7637b7]]
2021-03-12 05:36:24,684 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:36:24,830 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:24,830 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f7637b7]
2021-03-12 05:36:24,976 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:24,980 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).equals("lkxrz").or(true)
2021-03-12 05:36:24,980 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40879361]]
2021-03-12 05:36:24,980 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:24,980 [main:149] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@40879361]
2021-03-12 05:36:24,981 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().isUpperCase()
2021-03-12 05:36:24,981 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76a4394a]]
2021-03-12 05:36:24,981 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:36:24,981 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76a4394a]
2021-03-12 05:36:24,981 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toDouble().isNaN()
2021-03-12 05:36:24,981 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@31ae9b75]]
2021-03-12 05:36:24,981 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:36:24,981 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@31ae9b75]
2021-03-12 05:36:24,981 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toDouble().isInfinite()
2021-03-12 05:36:24,981 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:36:24,981 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:36:24,981 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:36:25,127 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:25,127 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toInt().equals("fbqgb")
2021-03-12 05:36:25,127 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@53a39b9]]
2021-03-12 05:36:25,127 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:36:25,127 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@53a39b9]
2021-03-12 05:36:25,128 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toFloat().isNaN()
2021-03-12 05:36:25,128 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]]
2021-03-12 05:36:25,128 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:36:25,279 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:25,279 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]
2021-03-12 05:36:25,283 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).equals("hmkcm").not()
2021-03-12 05:36:25,284 [main:114] - replacement of isSuccess of type Boolean is (logged("hhpqz", 500864543)).div(0.33379997351606006).equals("duaud")
2021-03-12 05:36:25,463 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:25,465 [main:107] - replacing (value, Kla0)
2021-03-12 05:36:25,466 [main:50] - replacing value Kla0
2021-03-12 05:36:25,466 [main:54] - Getting value of type Kla0
2021-03-12 05:36:25,611 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:25,614 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:25,922 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:25,922 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:26,795 [main:67] - randomType = Function2<Short, Collection<UShort>, Kla7>
2021-03-12 05:36:26,796 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:26,827 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:36:26,843 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:26,844 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:26,844 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:36:26,856 [main:114] - replacement of value of type Kla0 is TODO()
2021-03-12 05:36:27,001 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:27,001 [main:66] - Compilation checking started
2021-03-12 05:36:27,659 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:27,663 [main:107] - replacing (prope15 != numberOfSuspensions, Boolean)
2021-03-12 05:36:27,664 [main:50] - replacing prope15 != numberOfSuspensions Boolean
2021-03-12 05:36:27,664 [main:54] - Getting value of type Boolean
2021-03-12 05:36:27,808 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:27,812 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:36:27,812 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:27,826 [main:67] - randomType = Kla6
2021-03-12 05:36:27,970 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:36:27,974 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:36:27,983 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]
2021-03-12 05:36:28,127 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:28,130 [main:78] - Generated call from random type = (Kla6()).prope16.and(false)
2021-03-12 05:36:28,131 [main:106] - GETTING Boolean from StringBuilder
2021-03-12 05:36:28,150 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@3ff83053]]
2021-03-12 05:36:28,150 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@3ff83053]
2021-03-12 05:36:28,295 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:28,295 [main:117] - GENERATED CALL = (log).equals("vuzlq")
2021-03-12 05:36:28,295 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78e2ee8e]]
2021-03-12 05:36:28,295 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78e2ee8e]
2021-03-12 05:36:28,295 [main:117] - GENERATED CALL = (log).isNotEmpty()
2021-03-12 05:36:28,295 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68530e72]]
2021-03-12 05:36:28,295 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef]
2021-03-12 05:36:28,295 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68530e72]
2021-03-12 05:36:28,296 [main:117] - GENERATED CALL = (log).get(logged("hhpqz", 500864543)).isDigit()
2021-03-12 05:36:28,296 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65353bd]]
2021-03-12 05:36:28,296 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b]
2021-03-12 05:36:28,296 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65353bd]
2021-03-12 05:36:28,296 [main:117] - GENERATED CALL = (log).subSequence(logged("hhpqz", 500864543), sum * 10).isNotBlank()
2021-03-12 05:36:28,296 [main:113] - Case = [@kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@673197ec]]
2021-03-12 05:36:28,296 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@673197ec]
2021-03-12 05:36:28,440 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:36:28,590 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:36:28,595 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 05:36:29,129 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:36:29,133 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 05:36:29,285 [main:43] - GENERATING CALL OF fun <T> mutableSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 05:36:29,290 [main:61] - WITHOUT TYPE PARAMS = fun <T> mutableSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 05:36:29,443 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 05:36:29,449 [main:95] - GENERATED = mutableSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 05:36:29,449 [main:95] - GENERATED = Regex("vyhcp", mutableSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE))
2021-03-12 05:36:29,450 [main:117] - GENERATED CALL = (log).matches(Regex("vyhcp", mutableSetOf<RegexOption>(kotlin.text.RegexOption.IGNORE_CASE)))
2021-03-12 05:36:29,450 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65353bd]]
2021-03-12 05:36:29,450 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65353bd]
2021-03-12 05:36:29,450 [main:117] - GENERATED CALL = (log).isNotBlank()
2021-03-12 05:36:29,450 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd86ece]]
2021-03-12 05:36:29,450 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b]
2021-03-12 05:36:29,596 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:29,599 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fd86ece]
2021-03-12 05:36:29,600 [main:117] - GENERATED CALL = (log).subSequence(1164835623, var sum =.hasSurrogatePairAt(logged("hhpqz", 500864543))
2021-03-12 05:36:29,600 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b6fd165]]
2021-03-12 05:36:29,600 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef]
2021-03-12 05:36:29,600 [main:149] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b6fd165]
2021-03-12 05:36:29,600 [main:117] - GENERATED CALL = (log).get(sum * 10).isLowSurrogate()
2021-03-12 05:36:29,600 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a3fe15]]
2021-03-12 05:36:29,600 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b]
2021-03-12 05:36:29,600 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a3fe15]
2021-03-12 05:36:29,601 [main:117] - GENERATED CALL = (log).subSequence(logged("start;", 8), sum * 10).isEmpty()
2021-03-12 05:36:29,601 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@3ff83053], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]]
2021-03-12 05:36:29,601 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@3ff83053]
2021-03-12 05:36:29,750 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:29,750 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]
2021-03-12 05:36:29,906 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:29,910 [main:117] - GENERATED CALL = (log).equals("jsvkf").and(true)
2021-03-12 05:36:29,910 [main:114] - replacement of prope15 != numberOfSuspensions of type Boolean is (log).subSequence(1164835623, var sum =.hasSurrogatePairAt(logged("hhpqz", 500864543))
2021-03-12 05:36:30,065 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 05:36:30,065 [main:66] - Compilation checking started
2021-03-12 05:36:30,072 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:36:30,072 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if ((log).subSequence(1164835623, var sum =.hasSurrogatePairAt(logged("hhpqz", 500864543)))
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:30,075 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:36:30,076 [main:50] - replacing prope12.prope3 String
2021-03-12 05:36:30,076 [main:54] - Getting value of type String
2021-03-12 05:36:30,221 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:30,224 [main:58] - GENERATED VALUE OF TYPE String = "qvbxk"
2021-03-12 05:36:30,225 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:30,403 [main:67] - randomType = Array<Byte>
2021-03-12 05:36:30,548 [main:302] - generating value of type = Array<Byte> false depth = 0
2021-03-12 05:36:30,720 [main:43] - GENERATING CALL OF fun <T> enumValues(): Array<Byte> = TODO()
2021-03-12 05:36:30,725 [main:61] - WITHOUT TYPE PARAMS = fun <T> enumValues(): Array<Byte> = TODO()
2021-03-12 05:36:30,883 [main:95] - GENERATED = enumValues<Byte>()
2021-03-12 05:36:30,897 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:30,898 [main:78] - Generated call from random type = (enumValues<Byte>()).size.toString(sum * 10)
2021-03-12 05:36:30,898 [main:114] - replacement of prope12.prope3 of type String is (enumValues<Byte>()).size.toString(sum * 10)
2021-03-12 05:36:31,047 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:31,048 [main:66] - Compilation checking started
2021-03-12 05:36:31,482 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return (enumValues<Byte>()).size.toString(sum * 10)
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:31,485 [main:107] - replacing ("\n", String)
2021-03-12 05:36:31,485 [main:50] - replacing "\n" String
2021-03-12 05:36:31,485 [main:54] - Getting value of type String
2021-03-12 05:36:31,634 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:31,637 [main:58] - GENERATED VALUE OF TYPE String = "rbidk"
2021-03-12 05:36:31,637 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:31,819 [main:67] - randomType = ArrayDeque<Byte>
2021-03-12 05:36:31,969 [main:302] - generating value of type = ArrayDeque<Byte> false depth = 0
2021-03-12 05:36:32,127 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 05:36:32,133 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Byte>): ArrayDeque<Byte> = TODO()
2021-03-12 05:36:32,484 [main:302] - generating value of type = Collection<Byte> false depth = 3
2021-03-12 05:36:32,667 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Collection<Byte> = TODO()
2021-03-12 05:36:32,672 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): Collection<Byte> = TODO()
2021-03-12 05:36:33,164 [main:302] - generating value of type = Int true depth = 6
2021-03-12 05:36:33,168 [main:302] - generating value of type = Float true depth = 6
2021-03-12 05:36:33,172 [main:95] - GENERATED = HashSet<Byte>(-1796878028, 0.063203335f)
2021-03-12 05:36:33,172 [main:95] - GENERATED = ArrayDeque<Byte>(HashSet<Byte>(-1796878028, 0.063203335f))
2021-03-12 05:36:33,290 [main:149] - GENERATING call of type public abstract fun get(index: kotlin.Int): kotlin.Byte defined in kotlin.collections.AbstractMutableList[DeserializedSimpleFunctionDescriptor@40c24041]
2021-03-12 05:36:33,290 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:36:33,291 [main:78] - Generated call from random type = (ArrayDeque<Byte>(HashSet<Byte>(-1796878028, 0.063203335f))).get(var sum =.toString(var sum =
2021-03-12 05:36:33,292 [main:106] - GETTING String from StringBuilder
2021-03-12 05:36:33,308 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20c44d1d]]
2021-03-12 05:36:33,308 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b]
2021-03-12 05:36:33,452 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:33,456 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20c44d1d]
2021-03-12 05:36:33,603 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:36:33,754 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:36:33,759 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:36:34,080 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:36:34,084 [main:95] - GENERATED = Regex("bvlrb")
2021-03-12 05:36:34,230 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:34,234 [main:117] - GENERATED CALL = (log).subSequence(-1173408239, var sum =.replaceFirst(Regex("bvlrb"), "clvol")
2021-03-12 05:36:34,234 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9d7979]]
2021-03-12 05:36:34,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049]
2021-03-12 05:36:34,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d9d7979]
2021-03-12 05:36:34,234 [main:117] - GENERATED CALL = (log).substring(logged("hhpqz", 500864543)).uppercase()
2021-03-12 05:36:34,234 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37515d]]
2021-03-12 05:36:34,234 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049]
2021-03-12 05:36:34,235 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e37515d]
2021-03-12 05:36:34,376 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:36:34,540 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:34,687 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:34,690 [main:117] - GENERATED CALL = (log).substring(logged("hhpqz", 500864543)).replaceBefore('炓', "lcilu", "ulbmd")
2021-03-12 05:36:34,691 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049], public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd53e70]]
2021-03-12 05:36:34,691 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049]
2021-03-12 05:36:34,691 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dd53e70]
2021-03-12 05:36:34,834 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:36:34,989 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:35,137 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:35,141 [main:117] - GENERATED CALL = (log).substring(var sum =.replaceAfterLast('⧳', "pxjkz", "cgpwe")
2021-03-12 05:36:35,141 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73dee0c]]
2021-03-12 05:36:35,141 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@7165f48b]
2021-03-12 05:36:35,141 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@73dee0c]
2021-03-12 05:36:35,285 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 05:36:35,433 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:36:35,438 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-12 05:36:35,755 [main:302] - generating value of type = String true depth = 3
2021-03-12 05:36:35,759 [main:95] - GENERATED = Regex("zquuy")
2021-03-12 05:36:35,901 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 05:36:35,905 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:36:35,912 [main:117] - GENERATED CALL = (log).subSequence(sum * 10, sum * 10).replace(Regex("zquuy"), {a: MatchResult -> StringBuilder()})
2021-03-12 05:36:35,912 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049], public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d64cb6f]]
2021-03-12 05:36:35,912 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049]
2021-03-12 05:36:35,912 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d64cb6f]
2021-03-12 05:36:36,056 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:36:36,203 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:36,207 [main:117] - GENERATED CALL = (log).substring(sum * 10).substringBefore('쌴', "fuazf")
2021-03-12 05:36:36,207 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68e11296]]
2021-03-12 05:36:36,207 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049]
2021-03-12 05:36:36,390 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:36,394 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68e11296]
2021-03-12 05:36:36,394 [main:117] - GENERATED CALL = (log).substring(-1377741986).lowercase()
2021-03-12 05:36:36,395 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:36:36,395 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef]
2021-03-12 05:36:36,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:36:36,395 [main:117] - GENERATED CALL = (log).get(var sum =.lowercase()
2021-03-12 05:36:36,395 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d7eca5]]
2021-03-12 05:36:36,395 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public final fun substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@77852049]
2021-03-12 05:36:36,572 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:36,576 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@35d7eca5]
2021-03-12 05:36:36,719 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:36:36,723 [main:117] - GENERATED CALL = (log).substring(1525263625).padStart(logged("start;", 8), '⼵')
2021-03-12 05:36:36,723 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:36:36,723 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.text.StringBuilder[DeserializedSimpleFunctionDescriptor@64a815ef]
2021-03-12 05:36:36,724 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:36:36,724 [main:117] - GENERATED CALL = (log).get(sum * 10).titlecase()
2021-03-12 05:36:36,724 [main:114] - replacement of "\n" of type String is (ArrayDeque<Byte>(HashSet<Byte>(-1796878028, 0.063203335f))).get(var sum =.toString(var sum =
2021-03-12 05:36:36,872 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(BINARY_EXPRESSION)
2021-03-12 05:36:36,872 [main:66] - Compilation checking started
2021-03-12 05:36:36,880 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:36:36,880 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = (ArrayDeque<Byte>(HashSet<Byte>(-1796878028, 0.063203335f))).get(var sum =.toString(var sum =)) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:36,883 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:36:36,883 [main:50] - replacing prope12.prope3 String
2021-03-12 05:36:36,883 [main:54] - Getting value of type String
2021-03-12 05:36:37,030 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:37,033 [main:58] - GENERATED VALUE OF TYPE String = "nqfbe"
2021-03-12 05:36:37,034 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:37,197 [main:67] - randomType = Short
2021-03-12 05:36:37,340 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:36:37,373 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@41b22d29]
2021-03-12 05:36:37,373 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:36:37,373 [main:78] - Generated call from random type = (-5846).toChar().uppercase()
2021-03-12 05:36:37,374 [main:106] - GETTING String from Int
2021-03-12 05:36:37,405 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:37,406 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:36:37,406 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:37,406 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(sum * 10).toString(logged("start;", 8))
2021-03-12 05:36:37,406 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:37,406 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:37,406 [main:117] - GENERATED CALL = (logged("start;", 8)).toString(logged("start;", 8))
2021-03-12 05:36:37,406 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:36:37,406 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:36:37,550 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:36:37,553 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:37,553 [main:117] - GENERATED CALL = (logged("start;", 8)).div(9065866724164723136).toString(sum * 10)
2021-03-12 05:36:37,554 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:36:37,554 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:36:37,554 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:36:37,554 [main:117] - GENERATED CALL = (logged("start;", 8)).toShort().toString(sum * 10)
2021-03-12 05:36:37,554 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:37,554 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:36:37,554 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:37,554 [main:117] - GENERATED CALL = (logged("start;", 8)).toInt().toString(sum * 10)
2021-03-12 05:36:37,554 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:36:37,554 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:37,554 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:36:37,702 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:37,705 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().plus("cbspj")
2021-03-12 05:36:37,706 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:36:37,706 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:36:37,706 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:37,706 [main:117] - GENERATED CALL = (logged("start;", 8)).toLong().toString(logged("start;", 8))
2021-03-12 05:36:37,706 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:36:37,706 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:37,706 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:36:37,706 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().uppercase()
2021-03-12 05:36:37,706 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:36:37,706 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:36:37,706 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:36:37,707 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().toString(var sum =
2021-03-12 05:36:37,707 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:36:37,707 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:37,707 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:36:37,707 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().titlecase()
2021-03-12 05:36:37,707 [main:114] - replacement of prope12.prope3 of type String is (logged("start;", 8)).toChar().plus("cbspj")
2021-03-12 05:36:37,885 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:37,886 [main:66] - Compilation checking started
2021-03-12 05:36:38,560 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if (prope12.prope3 != (logged("start;", 8)).toChar().lowercase()) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:38,562 [main:107] - replacing (prope12.prope3 != (logged("start;", 8)).toChar().lowercase(), Boolean)
2021-03-12 05:36:38,563 [main:50] - replacing prope12.prope3 != (logged("start;", 8)).toChar().lowercase() Boolean
2021-03-12 05:36:38,563 [main:54] - Getting value of type Boolean
2021-03-12 05:36:38,715 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:38,718 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:36:38,718 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:38,733 [main:67] - randomType = Kla6
2021-03-12 05:36:38,880 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:36:38,884 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:36:38,890 [main:149] - GENERATING call of type public final fun fu12(): kotlin.Unit defined in Kla6[SimpleFunctionDescriptorImpl@2c60031a]
2021-03-12 05:36:38,891 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@208aba8b]
2021-03-12 05:36:39,040 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:39,040 [main:78] - Generated call from random type = (Kla6()).fu12().equals("sbejl")
2021-03-12 05:36:39,040 [main:114] - replacement of prope12.prope3 != (logged("start;", 8)).toChar().lowercase() of type Boolean is (Kla6()).fu12().equals("sbejl")
2021-03-12 05:36:39,193 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:39,194 [main:66] - Compilation checking started
2021-03-12 05:36:39,915 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + prope15)
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:39,919 [main:107] - replacing (prope15, Int)
2021-03-12 05:36:39,920 [main:50] - replacing prope15 Int
2021-03-12 05:36:39,920 [main:54] - Getting value of type Int
2021-03-12 05:36:40,075 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:40,078 [main:58] - GENERATED VALUE OF TYPE Int = -1991803271
2021-03-12 05:36:40,079 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:40,442 [main:67] - randomType = Kla4<Kla4<Kla5>>
2021-03-12 05:36:40,585 [main:302] - generating value of type = Kla4<Kla4<Kla5>> false depth = 0
2021-03-12 05:36:40,589 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:36:41,262 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-12 05:36:41,266 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:36:41,281 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla4[DeserializedSimpleFunctionDescriptor@3c6a3a96]
2021-03-12 05:36:41,433 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:41,433 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3de86254]
2021-03-12 05:36:41,577 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:41,580 [main:78] - Generated call from random type = (Kla7).equals("zvdrr").compareTo(true)
2021-03-12 05:36:41,580 [main:106] - GETTING Int from Int
2021-03-12 05:36:41,610 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7711bbd9]]
2021-03-12 05:36:41,610 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@7711bbd9]
2021-03-12 05:36:41,610 [main:117] - GENERATED CALL = (sum * 10).countOneBits()
2021-03-12 05:36:41,611 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@55511721]]
2021-03-12 05:36:41,611 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:36:41,611 [main:117] - GENERATED CALL = (sum * 10).toLong().sign
2021-03-12 05:36:41,611 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3f3a57ff]]
2021-03-12 05:36:41,611 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:36:41,611 [main:149] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@3f3a57ff]
2021-03-12 05:36:41,760 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:36:41,763 [main:117] - GENERATED CALL = (sum * 10).toLong().compareTo(-29)
2021-03-12 05:36:41,764 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e49f8ca]]
2021-03-12 05:36:41,764 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:36:41,764 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Byte.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@1e49f8ca]
2021-03-12 05:36:41,764 [main:117] - GENERATED CALL = (sum * 10).toByte().countOneBits()
2021-03-12 05:36:41,764 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@441830d]]
2021-03-12 05:36:41,764 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:36:41,764 [main:149] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@441830d]
2021-03-12 05:36:41,764 [main:117] - GENERATED CALL = (sum * 10).toByte().unaryPlus()
2021-03-12 05:36:41,764 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b72fe6b]]
2021-03-12 05:36:41,764 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:36:41,764 [main:149] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5b72fe6b]
2021-03-12 05:36:41,764 [main:117] - GENERATED CALL = (sum * 10).compareTo(logged("hhpqz", 500864543)).toInt()
2021-03-12 05:36:41,765 [main:113] - Case = [public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@292cfba3]]
2021-03-12 05:36:41,765 [main:149] - GENERATING call of type public final operator fun dec(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@292cfba3]
2021-03-12 05:36:41,765 [main:117] - GENERATED CALL = (sum * 10).dec()
2021-03-12 05:36:41,765 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5810be]]
2021-03-12 05:36:41,765 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:36:41,765 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Short.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@a5810be]
2021-03-12 05:36:41,765 [main:117] - GENERATED CALL = (sum * 10).toShort().countOneBits()
2021-03-12 05:36:41,765 [main:113] - Case = [public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472bc276]]
2021-03-12 05:36:41,765 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@472bc276]
2021-03-12 05:36:41,919 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:36:41,922 [main:117] - GENERATED CALL = (sum * 10).div(77)
2021-03-12 05:36:41,922 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@459fd4ac]]
2021-03-12 05:36:41,923 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@459fd4ac]
2021-03-12 05:36:41,923 [main:117] - GENERATED CALL = (sum * 10).takeLowestOneBit()
2021-03-12 05:36:41,923 [main:114] - replacement of prope15 of type Int is (sum * 10).takeLowestOneBit()
2021-03-12 05:36:42,067 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:42,068 [main:66] - Compilation checking started
2021-03-12 05:36:42,735 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if (prope15 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:42,738 [main:107] - replacing (prope15 != i, Boolean)
2021-03-12 05:36:42,738 [main:50] - replacing prope15 != i Boolean
2021-03-12 05:36:42,738 [main:54] - Getting value of type Boolean
2021-03-12 05:36:42,903 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:42,907 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:36:42,907 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:43,100 [main:67] - randomType = Kla7
2021-03-12 05:36:43,245 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:36:43,249 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:36:43,266 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@194b90c5]
2021-03-12 05:36:43,414 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:43,414 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@342e2b72]
2021-03-12 05:36:43,560 [main:78] - Generated call from random type = (Kla7).equals("wjbat").equals(null)
2021-03-12 05:36:43,561 [main:106] - GETTING Boolean from Int
2021-03-12 05:36:43,590 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5f1d3fd0]]
2021-03-12 05:36:43,590 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:36:43,590 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@5f1d3fd0]
2021-03-12 05:36:43,737 [main:117] - GENERATED CALL = (logged("start;", 8)).toShort().equals(null)
2021-03-12 05:36:43,738 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c9dc2b0]]
2021-03-12 05:36:43,738 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:36:43,738 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@6c9dc2b0]
2021-03-12 05:36:43,883 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:43,884 [main:117] - GENERATED CALL = (logged("start;", 8)).toFloat().equals("smevx")
2021-03-12 05:36:43,884 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76a4394a]]
2021-03-12 05:36:43,884 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:36:44,028 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:36:44,031 [main:149] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@76a4394a]
2021-03-12 05:36:44,032 [main:117] - GENERATED CALL = (logged("start;", 8)).div(0.19886733525838696).isNaN()
2021-03-12 05:36:44,032 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77feef20]]
2021-03-12 05:36:44,032 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:36:44,032 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@77feef20]
2021-03-12 05:36:44,183 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:44,183 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().equals("esalr")
2021-03-12 05:36:44,183 [main:113] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e072894]]
2021-03-12 05:36:44,183 [main:149] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6ef2412]
2021-03-12 05:36:44,329 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:36:44,333 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun kotlin.ranges.IntRange.contains(element: kotlin.Int?): kotlin.Boolean defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@2e072894]
2021-03-12 05:36:44,489 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:36:44,493 [main:117] - GENERATED CALL = (logged("start;", 8)).rangeTo(60).contains(-655202917)
2021-03-12 05:36:44,493 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:36:44,493 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:36:44,493 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:36:44,651 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:44,651 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(var sum =.equals("hjcsw")
2021-03-12 05:36:44,651 [main:113] - Case = [public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20], public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@53a39b9]]
2021-03-12 05:36:44,651 [main:149] - GENERATING call of type public abstract fun toFloat(): kotlin.Float defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@49509b20]
2021-03-12 05:36:44,651 [main:149] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@53a39b9]
2021-03-12 05:36:44,651 [main:117] - GENERATED CALL = (logged("start;", 8)).toFloat().isNaN()
2021-03-12 05:36:44,652 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]]
2021-03-12 05:36:44,652 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:36:44,800 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:36:44,803 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]
2021-03-12 05:36:44,950 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:36:44,951 [main:117] - GENERATED CALL = (logged("start;", 8)).div(0.9109809699860972).equals("unhur")
2021-03-12 05:36:44,951 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f9b1c6]]
2021-03-12 05:36:44,951 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:44,951 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f9b1c6]
2021-03-12 05:36:44,951 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().isISOControl()
2021-03-12 05:36:44,951 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38132e56]]
2021-03-12 05:36:44,951 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:36:44,951 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@38132e56]
2021-03-12 05:36:44,951 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().isWhitespace()
2021-03-12 05:36:44,952 [main:114] - replacement of prope15 != i of type Boolean is (logged("start;", 8)).toByte().equals("esalr")
2021-03-12 05:36:45,098 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:45,099 [main:66] - Compilation checking started
2021-03-12 05:36:45,885 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:45,888 [main:107] - replacing (prope12.prope8, Kla0)
2021-03-12 05:36:45,889 [main:50] - replacing prope12.prope8 Kla0
2021-03-12 05:36:45,889 [main:54] - Getting value of type Kla0
2021-03-12 05:36:46,036 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:46,039 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:46,351 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:46,352 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:46,359 [main:67] - randomType = Boolean
2021-03-12 05:36:46,524 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:36:46,541 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:46,589 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:36:46,607 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:36:46,633 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:46,634 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:46,634 [main:114] - replacement of prope12.prope8 of type Kla0 is TODO()
2021-03-12 05:36:46,786 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:46,786 [main:66] - Compilation checking started
2021-03-12 05:36:47,201 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    prope12.prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    TODO().fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:47,203 [main:107] - replacing (prope12, Kla1)
2021-03-12 05:36:47,204 [main:50] - replacing prope12 Kla1
2021-03-12 05:36:47,204 [main:54] - Getting value of type Kla1
2021-03-12 05:36:47,352 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:36:47,355 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}
2021-03-12 05:36:47,355 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 05:36:47,355 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:47,702 [main:67] - randomType = LinkedHashSet<Float>
2021-03-12 05:36:47,851 [main:302] - generating value of type = LinkedHashSet<Float> false depth = 0
2021-03-12 05:36:48,007 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-12 05:36:48,012 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-12 05:36:48,181 [main:302] - generating value of type = Float true depth = 3
2021-03-12 05:36:48,185 [main:95] - GENERATED = linkedSetOf<Float>(0.96477497f)
2021-03-12 05:36:48,301 [main:106] - GETTING Kla1 from StringBuilder
2021-03-12 05:36:48,317 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:48,346 [main:106] - GETTING Kla1 from IntProgression
2021-03-12 05:36:48,357 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:48,357 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:48,358 [main:114] - replacement of prope12 of type Kla1 is Kla1()
2021-03-12 05:36:48,502 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:48,502 [main:66] - Compilation checking started
2021-03-12 05:36:49,134 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:49,137 [main:107] - replacing (fu0 { s ->
        fu2 { require(false)}
    }, Kla0)
2021-03-12 05:36:49,137 [main:50] - replacing fu0 { s ->
        fu2 { require(false)}
    } Kla0
2021-03-12 05:36:49,137 [main:54] - Getting value of type Kla0
2021-03-12 05:36:49,286 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:36:49,290 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:36:49,606 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:36:49,606 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:49,949 [main:67] - randomType = ULong?
2021-03-12 05:36:50,093 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:36:50,125 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:50,154 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:50,155 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:36:50,166 [main:106] - GETTING Kla0 from Int
2021-03-12 05:36:50,166 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:36:50,182 [main:114] - replacement of fu0 { s ->
        fu2 { require(false)}
    } of type Kla0 is TODO()
2021-03-12 05:36:50,329 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:50,329 [main:66] - Compilation checking started
2021-03-12 05:36:50,750 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = TODO()

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:50,753 [main:107] - replacing ("OK", String)
2021-03-12 05:36:50,754 [main:50] - replacing "OK" String
2021-03-12 05:36:50,754 [main:54] - Getting value of type String
2021-03-12 05:36:50,905 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:50,909 [main:58] - GENERATED VALUE OF TYPE String = "vonyt"
2021-03-12 05:36:50,909 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:51,077 [main:67] - randomType = Short
2021-03-12 05:36:51,224 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:36:51,262 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@1ac0bd0b]
2021-03-12 05:36:51,416 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:36:51,419 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:36:51,420 [main:78] - Generated call from random type = (-17786).div(2208914887418136480).toString(logged("start;", 8))
2021-03-12 05:36:51,420 [main:114] - replacement of "OK" of type String is (-17786).div(2208914887418136480).toString(logged("start;", 8))
2021-03-12 05:36:51,564 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:51,564 [main:66] - Compilation checking started
2021-03-12 05:36:52,202 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope17 = {
            prope1.prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:52,204 [main:107] - replacing (prope1, Kla6)
2021-03-12 05:36:52,205 [main:50] - replacing prope1 Kla6
2021-03-12 05:36:52,205 [main:54] - Getting value of type Kla6
2021-03-12 05:36:52,365 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:36:52,369 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:36:52,369 [main:58] - GENERATED VALUE OF TYPE Kla6 = Kla6()
2021-03-12 05:36:52,370 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:52,377 [main:67] - randomType = Long
2021-03-12 05:36:52,534 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:36:52,569 [main:106] - GETTING Kla6 from Int
2021-03-12 05:36:52,598 [main:106] - GETTING Kla6 from Int
2021-03-12 05:36:52,598 [main:106] - GETTING Kla6 from IntProgression
2021-03-12 05:36:52,609 [main:106] - GETTING Kla6 from Int
2021-03-12 05:36:52,610 [main:106] - GETTING Kla6 from StringBuilder
2021-03-12 05:36:52,626 [main:114] - replacement of prope1 of type Kla6 is Kla6()
2021-03-12 05:36:52,775 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:52,775 [main:66] - Compilation checking started
2021-03-12 05:36:53,431 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((sum * 10).toByte().toString(logged("start;", 8)) + it + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:53,434 [main:107] - replacing ((sum * 10).toByte().toString(logged("start;", 8)) + it, String)
2021-03-12 05:36:53,435 [main:50] - replacing (sum * 10).toByte().toString(logged("start;", 8)) + it String
2021-03-12 05:36:53,435 [main:54] - Getting value of type String
2021-03-12 05:36:53,584 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:53,587 [main:58] - GENERATED VALUE OF TYPE String = "ryckj"
2021-03-12 05:36:53,587 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:53,759 [main:67] - randomType = Short
2021-03-12 05:36:53,909 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:36:53,944 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@41b22d29]
2021-03-12 05:36:53,945 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:36:54,091 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:36:54,095 [main:78] - Generated call from random type = (24609).toChar().plus("nciub")
2021-03-12 05:36:54,096 [main:106] - GETTING String from IntProgression
2021-03-12 05:36:54,111 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]]
2021-03-12 05:36:54,111 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]
2021-03-12 05:36:54,259 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:36:54,415 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:36:54,569 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:36:54,574 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:36:54,915 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:36:54,919 [main:95] - GENERATED = StringBuilder(723208492)
2021-03-12 05:36:55,066 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:36:55,221 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:36:55,383 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:36:55,387 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 05:36:55,716 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:36:55,720 [main:95] - GENERATED = StringBuilder(1086914964)
2021-03-12 05:36:55,874 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:36:55,878 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:36:55,885 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).joinToString(StringBuilder(), StringBuilder(723208492), "khicd", sum * 10, StringBuilder(1086914964), {a: T -> "hrxgh"})
2021-03-12 05:36:55,885 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:36:55,885 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:36:55,886 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8))
2021-03-12 05:36:55,886 [main:114] - replacement of (sum * 10).toByte().toString(logged("start;", 8)) + it of type String is (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8))
2021-03-12 05:36:56,034 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:36:56,034 [main:66] - Compilation checking started
2021-03-12 05:36:56,682 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8)) + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:56,685 [main:107] - replacing (prope12, Kla1)
2021-03-12 05:36:56,685 [main:50] - replacing prope12 Kla1
2021-03-12 05:36:56,686 [main:54] - Getting value of type Kla1
2021-03-12 05:36:56,836 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:36:56,839 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}
2021-03-12 05:36:56,839 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 05:36:56,839 [main:61] - GENERATED IS CALL =true
2021-03-12 05:36:57,010 [main:67] - randomType = ULong
2021-03-12 05:36:57,170 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 05:36:57,211 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:57,246 [main:106] - GETTING Kla1 from IntProgression
2021-03-12 05:36:57,256 [main:106] - GETTING Kla1 from StringBuilder
2021-03-12 05:36:57,273 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:57,273 [main:106] - GETTING Kla1 from Int
2021-03-12 05:36:57,273 [main:114] - replacement of prope12 of type Kla1 is Kla1()
2021-03-12 05:36:57,420 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:36:57,420 [main:66] - Compilation checking started
2021-03-12 05:36:58,075 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { error((logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8)) + " has state-machine " +
                prope14.joinToString(separator = "\n")) }
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:58,078 [main:107] - replacing ({ error((logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8)) + " has state-machine " +
                prope14.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-12 05:36:58,078 [main:50] - replacing { error((logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8)) + " has state-machine " +
                prope14.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-12 05:36:58,078 [main:54] - Getting value of type Function0<Nothing>
2021-03-12 05:36:58,236 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-12 05:36:58,255 [main:302] - generating value of type = Nothing false depth = 1
2021-03-12 05:36:58,407 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 05:36:58,412 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-12 05:36:58,735 [main:302] - generating value of type = String true depth = 4
2021-03-12 05:36:58,739 [main:95] - GENERATED = TODO("ayyfg")
2021-03-12 05:36:58,739 [main:58] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("ayyfg")}
2021-03-12 05:36:58,739 [main:61] - GENERATED IS CALL =false
2021-03-12 05:36:58,923 [main:67] - randomType = Collection<Kla0>
2021-03-12 05:36:58,925 [main:106] - GETTING Function0<Nothing> from StringBuilder
2021-03-12 05:36:58,943 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 05:36:58,982 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 05:36:58,983 [main:106] - GETTING Function0<Nothing> from IntProgression
2021-03-12 05:36:58,996 [main:106] - GETTING Function0<Nothing> from Int
2021-03-12 05:36:58,996 [main:114] - replacement of { error((logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8)) + " has state-machine " +
                prope14.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO("ayyfg")}
2021-03-12 05:36:59,144 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:36:59,145 [main:66] - Compilation checking started
2021-03-12 05:36:59,749 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu9(it)
    }

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:36:59,752 [main:107] - replacing ({
        fu9(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 05:36:59,752 [main:50] - replacing {
        fu9(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 05:36:59,752 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 05:36:59,901 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 05:36:59,904 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:37:00,067 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:37:00,071 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 05:37:00,561 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:37:00,565 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:37:00,568 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:37:00,568 [main:95] - GENERATED = require(true, { "mbxyb"})
2021-03-12 05:37:00,568 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> require(true, { "mbxyb"})}
2021-03-12 05:37:00,568 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:00,747 [main:67] - randomType = Set<Boolean>
2021-03-12 05:37:00,748 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 05:37:00,783 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from StringBuilder
2021-03-12 05:37:00,801 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 05:37:00,803 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from IntProgression
2021-03-12 05:37:00,815 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from Int
2021-03-12 05:37:00,815 [main:114] - replacement of {
        fu9(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> require(true, { "mbxyb"})}
2021-03-12 05:37:00,959 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 05:37:00,959 [main:66] - Compilation checking started
2021-03-12 05:37:01,566 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6("FAIL 5")
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:01,568 [main:107] - replacing ("FAIL 5", String)
2021-03-12 05:37:01,569 [main:50] - replacing "FAIL 5" String
2021-03-12 05:37:01,569 [main:54] - Getting value of type String
2021-03-12 05:37:01,730 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:01,733 [main:58] - GENERATED VALUE OF TYPE String = "wlhxf"
2021-03-12 05:37:01,733 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:01,913 [main:67] - randomType = Kla5?
2021-03-12 05:37:02,061 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 05:37:02,064 [main:112] - generating klass Kla5 text = class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}
2021-03-12 05:37:02,072 [main:106] - GETTING String from Int
2021-03-12 05:37:02,101 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:02,101 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:02,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:02,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:02,401 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:02,405 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(1327624476).toString(277505265)
2021-03-12 05:37:02,405 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:02,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:02,405 [main:117] - GENERATED CALL = (logged("start;", 8)).toString(logged("start;", 8))
2021-03-12 05:37:02,405 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:37:02,405 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:02,405 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:37:02,405 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().uppercase()
2021-03-12 05:37:02,405 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:02,405 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:02,405 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:02,557 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:02,560 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().plus("vanbf")
2021-03-12 05:37:02,560 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:02,560 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:02,561 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:02,561 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().titlecase()
2021-03-12 05:37:02,561 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:02,561 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:02,712 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:02,715 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:02,863 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:02,867 [main:117] - GENERATED CALL = (logged("start;", 8)).div(-1896892524004014298).toString(1303203017)
2021-03-12 05:37:02,867 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:02,867 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:02,867 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:02,867 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().lowercase()
2021-03-12 05:37:02,867 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:02,867 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:02,868 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:02,868 [main:117] - GENERATED CALL = (logged("start;", 8)).toShort().toString(var sum =
2021-03-12 05:37:02,868 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:37:02,868 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:37:02,868 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:03,015 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:03,018 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().toString(1481560488)
2021-03-12 05:37:03,018 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:03,018 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:03,018 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:03,019 [main:117] - GENERATED CALL = (logged("start;", 8)).toInt().toString(sum * 10)
2021-03-12 05:37:03,019 [main:114] - replacement of "FAIL 5" of type String is (logged("start;", 8)).toChar().titlecase()
2021-03-12 05:37:03,163 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:03,163 [main:66] - Compilation checking started
2021-03-12 05:37:03,792 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:03,794 [main:107] - replacing (prope12, Kla1)
2021-03-12 05:37:03,795 [main:50] - replacing prope12 Kla1
2021-03-12 05:37:03,795 [main:54] - Getting value of type Kla1
2021-03-12 05:37:03,943 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:37:03,947 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}
2021-03-12 05:37:03,947 [main:58] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-12 05:37:03,947 [main:61] - GENERATED IS CALL =true
2021-03-12 05:37:03,960 [main:67] - randomType = Kla2
2021-03-12 05:37:04,106 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:37:04,109 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}
2021-03-12 05:37:04,254 [main:194] - Type params = []
2021-03-12 05:37:04,399 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:37:04,549 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:37:04,554 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:37:04,975 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:37:05,143 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:37:05,148 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:37:05,709 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-12 05:37:05,865 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:37:05,870 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:37:06,391 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-12 05:37:06,552 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:37:06,556 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:37:07,069 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-12 05:37:07,069 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-12 05:37:07,069 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:37:07,069 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:37:07,105 [main:106] - GETTING Kla1 from Int
2021-03-12 05:37:07,137 [main:106] - GETTING Kla1 from IntProgression
2021-03-12 05:37:07,148 [main:106] - GETTING Kla1 from Int
2021-03-12 05:37:07,148 [main:106] - GETTING Kla1 from StringBuilder
2021-03-12 05:37:07,165 [main:106] - GETTING Kla1 from Int
2021-03-12 05:37:07,165 [main:114] - replacement of prope12 of type Kla1 is Kla1()
2021-03-12 05:37:07,327 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:37:07,328 [main:66] - Compilation checking started
2021-03-12 05:37:07,966 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:07,968 [main:107] - replacing (", got ", String)
2021-03-12 05:37:07,969 [main:50] - replacing ", got " String
2021-03-12 05:37:07,969 [main:54] - Getting value of type String
2021-03-12 05:37:08,125 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:08,129 [main:58] - GENERATED VALUE OF TYPE String = "mgiwa"
2021-03-12 05:37:08,129 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:08,142 [main:67] - randomType = Kla3
2021-03-12 05:37:08,291 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 05:37:08,294 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}
2021-03-12 05:37:08,313 [main:149] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@34350895]
2021-03-12 05:37:08,314 [main:78] - Generated call from random type = (Kla3()).prope13?.toString()!!
2021-03-12 05:37:08,315 [main:106] - GETTING String from Int
2021-03-12 05:37:08,344 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:08,344 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:08,344 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:08,496 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:08,499 [main:117] - GENERATED CALL = (sum * 10).toChar().plus("iigan")
2021-03-12 05:37:08,499 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:08,500 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:08,500 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:08,500 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(logged("start;", 8))
2021-03-12 05:37:08,500 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:08,500 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:08,500 [main:117] - GENERATED CALL = (sum * 10).toString(sum * 10)
2021-03-12 05:37:08,500 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:37:08,500 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:37:08,500 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:08,650 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:08,654 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(1879381189)
2021-03-12 05:37:08,654 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:08,654 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:08,654 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:08,802 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:08,805 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(-1686196545)
2021-03-12 05:37:08,806 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:08,806 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:08,806 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:08,806 [main:117] - GENERATED CALL = (sum * 10).toChar().lowercase()
2021-03-12 05:37:08,806 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:08,806 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:08,952 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:08,956 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:09,114 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:09,117 [main:117] - GENERATED CALL = (sum * 10).div(-2037411762039894340).toString(905735739)
2021-03-12 05:37:09,118 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:09,118 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:09,118 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:09,118 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:37:09,118 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:09,118 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:09,272 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:09,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:09,276 [main:117] - GENERATED CALL = (sum * 10).compareTo(603750440).toString(logged("hhpqz", 500864543))
2021-03-12 05:37:09,276 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:09,276 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:09,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:09,428 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:09,432 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(-912190364)
2021-03-12 05:37:09,432 [main:114] - replacement of ", got " of type String is (sum * 10).toInt().toString(logged("start;", 8))
2021-03-12 05:37:09,580 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:09,581 [main:66] - Compilation checking started
2021-03-12 05:37:10,201 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:10,204 [main:107] - replacing ("OK", String)
2021-03-12 05:37:10,205 [main:50] - replacing "OK" String
2021-03-12 05:37:10,205 [main:54] - Getting value of type String
2021-03-12 05:37:10,369 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:10,372 [main:58] - GENERATED VALUE OF TYPE String = "kqwww"
2021-03-12 05:37:10,373 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:10,735 [main:67] - randomType = Function2<Boolean, String, ULong>
2021-03-12 05:37:10,736 [main:106] - GETTING String from Int
2021-03-12 05:37:10,765 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:10,765 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:10,766 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:10,766 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().lowercase()
2021-03-12 05:37:10,766 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:37:10,766 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:37:10,766 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:10,766 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toByte().toString(var sum =
2021-03-12 05:37:10,766 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:10,766 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:10,766 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:10,916 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:10,920 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).compareTo(logged("hhpqz", 500864543)).toString(1662709836)
2021-03-12 05:37:10,920 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:10,920 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:10,920 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:11,066 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:11,070 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().plus("ovsbg")
2021-03-12 05:37:11,070 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:11,070 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:11,070 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:11,237 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:11,240 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toShort().toString(-1685061803)
2021-03-12 05:37:11,241 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:11,241 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:11,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:11,241 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().titlecase()
2021-03-12 05:37:11,241 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:11,241 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:11,241 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:11,241 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toInt().toString(logged("start;", 8))
2021-03-12 05:37:11,241 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:11,241 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:11,388 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:11,391 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:11,539 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:11,542 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(4867885116847403390).toString(1937465188)
2021-03-12 05:37:11,542 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:11,542 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:11,542 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:11,542 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
2021-03-12 05:37:11,542 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:11,543 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:11,696 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:11,699 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toString(-53168700)
2021-03-12 05:37:11,700 [main:114] - replacement of "OK" of type String is (logged("hhpqz", 500864543)).toChar().titlecase()
2021-03-12 05:37:11,847 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:11,847 [main:66] - Compilation checking started
2021-03-12 05:37:12,470 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:12,473 [main:107] - replacing (prope3, String)
2021-03-12 05:37:12,474 [main:50] - replacing prope3 String
2021-03-12 05:37:12,474 [main:54] - Getting value of type String
2021-03-12 05:37:12,626 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:12,630 [main:58] - GENERATED VALUE OF TYPE String = "gajpm"
2021-03-12 05:37:12,630 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:12,973 [main:67] - randomType = UByte?
2021-03-12 05:37:13,133 [main:302] - generating value of type = UByte true depth = 0
2021-03-12 05:37:13,164 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UByte[DeserializedSimpleFunctionDescriptor@163c59ef]
2021-03-12 05:37:13,164 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:13,164 [main:78] - Generated call from random type = (32.toUByte())?.toByte().toString(sum * 10)
2021-03-12 05:37:13,164 [main:114] - replacement of prope3 of type String is (32.toUByte())?.toByte().toString(sum * 10)
2021-03-12 05:37:13,321 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:13,321 [main:66] - Compilation checking started
2021-03-12 05:37:13,774 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
(32.toUByte())?.toByte().toString(sum * 10) = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + ", got " + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:13,777 [main:107] - replacing (", got ", String)
2021-03-12 05:37:13,777 [main:50] - replacing ", got " String
2021-03-12 05:37:13,777 [main:54] - Getting value of type String
2021-03-12 05:37:13,926 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:13,929 [main:58] - GENERATED VALUE OF TYPE String = "vmemy"
2021-03-12 05:37:13,929 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:13,943 [main:67] - randomType = Kla0
2021-03-12 05:37:13,944 [main:106] - GETTING String from IntProgression
2021-03-12 05:37:13,957 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]]
2021-03-12 05:37:13,957 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]
2021-03-12 05:37:14,106 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:14,259 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:14,413 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:14,570 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:14,723 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:37:14,726 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:37:14,733 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).joinToString("fwlmj", "tqlwn", "lsvzz", logged("start;", 8), "buzcq", {a: T -> StringBuilder()})
2021-03-12 05:37:14,733 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:14,733 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:14,733 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8))
2021-03-12 05:37:14,733 [main:114] - replacement of ", got " of type String is "vmemy"
2021-03-12 05:37:14,879 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 05:37:14,879 [main:66] - Compilation checking started
2021-03-12 05:37:15,497 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:15,500 [main:107] - replacing (Kla1().prope3, String)
2021-03-12 05:37:15,500 [main:50] - replacing Kla1().prope3 String
2021-03-12 05:37:15,500 [main:54] - Getting value of type String
2021-03-12 05:37:15,650 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:15,654 [main:58] - GENERATED VALUE OF TYPE String = "rjugl"
2021-03-12 05:37:15,654 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:15,667 [main:67] - randomType = Kla1
2021-03-12 05:37:15,817 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-12 05:37:15,820 [main:112] - generating klass Kla1 text = class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}
2021-03-12 05:37:15,827 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77255255]
2021-03-12 05:37:15,978 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:37:15,982 [main:78] - Generated call from random type = (Kla1()).prope3.padEnd(logged("hhpqz", 500864543), '')
2021-03-12 05:37:15,983 [main:106] - GETTING String from Int
2021-03-12 05:37:16,016 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:16,016 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:16,017 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:16,017 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).compareTo(logged("start;", 8)).toString(logged("hhpqz", 500864543))
2021-03-12 05:37:16,017 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:16,017 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:16,166 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:16,170 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:16,320 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:16,323 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(5448280951677846084).toString(1823483437)
2021-03-12 05:37:16,323 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:37:16,323 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:16,323 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:37:16,324 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().uppercase()
2021-03-12 05:37:16,324 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:16,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:16,324 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toString(logged("start;", 8))
2021-03-12 05:37:16,324 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:16,324 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:16,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:16,324 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().titlecase()
2021-03-12 05:37:16,324 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:16,324 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:16,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:16,324 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toLong().toString(logged("start;", 8))
2021-03-12 05:37:16,325 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:16,325 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:16,325 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:16,476 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:16,479 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().plus("jfkiy")
2021-03-12 05:37:16,479 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:16,479 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:16,479 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:16,480 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toInt().toString(var sum =
2021-03-12 05:37:16,480 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:16,480 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:16,480 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:16,628 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:16,631 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toShort().toString(407329219)
2021-03-12 05:37:16,632 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:16,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:16,632 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:16,632 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().lowercase()
2021-03-12 05:37:16,632 [main:114] - replacement of Kla1().prope3 of type String is (logged("hhpqz", 500864543)).toLong().toString(logged("start;", 8))
2021-03-12 05:37:16,781 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:16,781 [main:66] - Compilation checking started
2021-03-12 05:37:17,222 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    (logged("hhpqz", 500864543)).toLong().toString(logged("start;", 8)) = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:17,226 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 05:37:17,226 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 05:37:17,226 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:37:17,374 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:37:17,377 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:37:17,529 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:37:17,534 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 05:37:17,858 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 05:37:17,862 [main:95] - GENERATED = check(true)
2021-03-12 05:37:17,862 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { check(true)}
2021-03-12 05:37:17,862 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:18,584 [main:67] - randomType = HashMap<UShort?, Kla2>?
2021-03-12 05:37:18,733 [main:302] - generating value of type = HashMap<UShort?, Kla2> false depth = 0
2021-03-12 05:37:18,907 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<UShort?, Kla2> = TODO()
2021-03-12 05:37:18,912 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<UShort?, Kla2> = TODO()
2021-03-12 05:37:19,066 [main:95] - GENERATED = hashMapOf<UShort?, Kla2>()
2021-03-12 05:37:19,160 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-12 05:37:19,173 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 05:37:19,202 [main:106] - GETTING Function0<Unit> from StringBuilder
2021-03-12 05:37:19,219 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 05:37:19,220 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 05:37:19,220 [main:114] - replacement of prope17 of type Function0<Unit> is { check(true)}
2021-03-12 05:37:19,366 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:37:19,367 [main:66] - Compilation checking started
2021-03-12 05:37:19,825 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            { check(true)}()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:19,827 [main:107] - replacing (prope12 !is CoroutineStackFrame, Boolean)
2021-03-12 05:37:19,828 [main:50] - replacing prope12 !is CoroutineStackFrame Boolean
2021-03-12 05:37:19,828 [main:54] - Getting value of type Boolean
2021-03-12 05:37:19,987 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:19,991 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 05:37:19,991 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:21,283 [main:67] - randomType = LinkedHashMap<Kla4<Triple<Double, ULong, Long?>>, Double>
2021-03-12 05:37:21,431 [main:302] - generating value of type = LinkedHashMap<Kla4<Triple<Double, ULong, Long?>>, Double> false depth = 0
2021-03-12 05:37:21,591 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Kla4<Triple<Double, ULong, Long?>>, Double> = TODO()
2021-03-12 05:37:21,596 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashMap<Kla4<Triple<Double, ULong, Long?>>, Double> = TODO()
2021-03-12 05:37:22,099 [main:302] - generating value of type = Int true depth = 3
2021-03-12 05:37:22,102 [main:302] - generating value of type = Float true depth = 3
2021-03-12 05:37:22,106 [main:95] - GENERATED = LinkedHashMap<Kla4<Triple<Double, ULong, Long?>>, Double>(-675893900, 0.11433518f)
2021-03-12 05:37:22,308 [main:149] - GENERATING call of type public fun <T> kotlin.collections.MutableCollection<in T>.retainAll(elements: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4a0522b0]
2021-03-12 05:37:22,464 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-12 05:37:22,626 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-12 05:37:22,631 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-12 05:37:23,171 [main:385] - Cant generate call of fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->out T): Array<out T> = TODO()
2021-03-12 05:37:23,172 [main:158] - CANT GENERATE PARAMS FOR public fun <T> kotlin.collections.MutableCollection<in T>.retainAll(elements: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4a0522b0]
2021-03-12 05:37:23,172 [main:78] - Generated call from random type = (LinkedHashMap<Kla4<Triple<Double, ULong, Long?>>, Double>(-675893900, 0.11433518f)).null
2021-03-12 05:37:23,173 [main:106] - GETTING Boolean from IntProgression
2021-03-12 05:37:23,190 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]]
2021-03-12 05:37:23,190 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b]
2021-03-12 05:37:23,349 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1f21f1f]
2021-03-12 05:37:23,349 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).equals(null).not()
2021-03-12 05:37:23,349 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@46728b90], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@3c453907]]
2021-03-12 05:37:23,349 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@46728b90]
2021-03-12 05:37:23,350 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@3c453907]
2021-03-12 05:37:23,499 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:23,499 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).iterator().equals("ivwil")
2021-03-12 05:37:23,500 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34ac6d65]]
2021-03-12 05:37:23,500 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b]
2021-03-12 05:37:23,647 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:23,647 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@34ac6d65]
2021-03-12 05:37:23,795 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:23,798 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).equals("lwjdh").xor(false)
2021-03-12 05:37:23,799 [main:113] - Case = [public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e87247]]
2021-03-12 05:37:23,799 [main:149] - GENERATING call of type public operator fun <@kotlin.internal.OnlyInputTypes T> kotlin.collections.Iterable<T>.contains(element: T): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@5e87247]
2021-03-12 05:37:23,956 [main:302] - generating value of type = T false depth = 0
2021-03-12 05:37:24,119 [main:43] - GENERATING CALL OF fun <T> maxOf(a: Char, b: Char, comparator: kotlin.Comparator<Char>): T = TODO()
2021-03-12 05:37:24,123 [main:61] - WITHOUT TYPE PARAMS = fun <T> maxOf(a: Char, b: Char, comparator: kotlin.Comparator<Char>): T = TODO()
2021-03-12 05:37:24,455 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:37:24,458 [main:302] - generating value of type = Char true depth = 3
2021-03-12 05:37:24,461 [main:302] - generating value of type = Comparator<Char> false depth = 3
2021-03-12 05:37:24,615 [main:43] - GENERATING CALL OF fun <T> nullsLast(): Comparator<Char> = TODO()
2021-03-12 05:37:24,620 [main:61] - WITHOUT TYPE PARAMS = fun <T> nullsLast(): Comparator<Char> = TODO()
2021-03-12 05:37:24,816 [main:95] - GENERATED = nullsLast<Char>()
2021-03-12 05:37:24,816 [main:95] - GENERATED = maxOf<Char>('蹗', 'Ɤ', nullsLast<Char>())
2021-03-12 05:37:24,816 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).contains(maxOf<Char>('蹗', 'Ɤ', nullsLast<Char>()))
2021-03-12 05:37:24,817 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]]
2021-03-12 05:37:24,817 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b]
2021-03-12 05:37:24,969 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:24,969 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]
2021-03-12 05:37:25,117 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:25,120 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).equals("feluj").and(true)
2021-03-12 05:37:25,120 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60d3cd59]]
2021-03-12 05:37:25,120 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.any(): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@60d3cd59]
2021-03-12 05:37:25,121 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).any()
2021-03-12 05:37:25,121 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:37:25,121 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:37:25,269 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:25,269 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.equals("qkmlc")
2021-03-12 05:37:25,269 [main:113] - Case = [public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@49db5438]]
2021-03-12 05:37:25,269 [main:149] - GENERATING call of type public inline fun <T> kotlin.collections.Iterable<T>.all(predicate: (T) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@49db5438]
2021-03-12 05:37:25,421 [main:302] - generating value of type = Function1<T, Boolean> false depth = 0
2021-03-12 05:37:25,424 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 05:37:25,428 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).all({a: T -> true})
2021-03-12 05:37:25,428 [main:113] - Case = [public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@46728b90], public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@3294c0ee]]
2021-03-12 05:37:25,428 [main:149] - GENERATING call of type public open fun iterator(): kotlin.collections.IntIterator defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@46728b90]
2021-03-12 05:37:25,428 [main:149] - GENERATING call of type public abstract fun hasNext(): kotlin.Boolean defined in kotlin.collections.IntIterator[DeserializedSimpleFunctionDescriptor@3294c0ee]
2021-03-12 05:37:25,428 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).iterator().hasNext()
2021-03-12 05:37:25,428 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@342e2b72]]
2021-03-12 05:37:25,428 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.ranges.IntProgression[DeserializedSimpleFunctionDescriptor@20bf531b]
2021-03-12 05:37:25,576 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:25,576 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@342e2b72]
2021-03-12 05:37:25,723 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:25,724 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).equals("quivr").equals("ygykp")
2021-03-12 05:37:25,724 [main:114] - replacement of prope12 !is CoroutineStackFrame of type Boolean is (logged("start;", 8) downTo logged("end;", 1)).equals("feluj").and(true)
2021-03-12 05:37:25,869 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:25,870 [main:66] - Compilation checking started
2021-03-12 05:37:26,303 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if ((logged("start;", 8) downTo logged("end;", 1)).equals("feluj").and(true)) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:26,306 [main:107] - replacing (prope13, Any?)
2021-03-12 05:37:26,307 [main:50] - replacing prope13 Any?
2021-03-12 05:37:26,307 [main:54] - Getting value of type Any?
2021-03-12 05:37:26,456 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:26,456 [main:58] - GENERATED VALUE OF TYPE Any? = "yknag"
2021-03-12 05:37:26,456 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:26,627 [main:67] - randomType = UShort
2021-03-12 05:37:26,794 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:37:26,829 [main:106] - GETTING Any? from Int
2021-03-12 05:37:26,863 [main:106] - GETTING Any? from StringBuilder
2021-03-12 05:37:26,887 [main:106] - GETTING Any? from IntProgression
2021-03-12 05:37:26,899 [main:106] - GETTING Any? from Int
2021-03-12 05:37:26,900 [main:106] - GETTING Any? from Int
2021-03-12 05:37:26,900 [main:114] - replacement of prope13 of type Any? is "yknag"
2021-03-12 05:37:27,047 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-12 05:37:27,047 [main:66] - Compilation checking started
2021-03-12 05:37:27,467 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this."yknag" = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:27,469 [main:107] - replacing (e, Throwable)
2021-03-12 05:37:27,470 [main:50] - replacing e Throwable
2021-03-12 05:37:27,470 [main:54] - Getting value of type Throwable
2021-03-12 05:37:27,624 [main:302] - generating value of type = Throwable false depth = 0
2021-03-12 05:37:27,787 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:37:27,791 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?): Throwable = TODO()
2021-03-12 05:37:28,119 [main:95] - GENERATED = IllegalArgumentException(null)
2021-03-12 05:37:28,119 [main:58] - GENERATED VALUE OF TYPE Throwable = IllegalArgumentException(null)
2021-03-12 05:37:28,119 [main:61] - GENERATED IS CALL =true
2021-03-12 05:37:29,189 [main:67] - randomType = Kla4<Array<Kla4<Float?>>?>
2021-03-12 05:37:29,339 [main:302] - generating value of type = Kla4<Array<Kla4<Float?>>?> false depth = 0
2021-03-12 05:37:29,342 [main:112] - generating klass Kla4 text = abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 05:37:30,006 [main:302] - generating value of type = Kla7 false depth = 2
2021-03-12 05:37:30,010 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:37:30,029 [main:106] - GETTING Throwable from Int
2021-03-12 05:37:30,059 [main:106] - GETTING Throwable from Int
2021-03-12 05:37:30,059 [main:106] - GETTING Throwable from Int
2021-03-12 05:37:30,060 [main:106] - GETTING Throwable from StringBuilder
2021-03-12 05:37:30,077 [main:106] - GETTING Throwable from IntProgression
2021-03-12 05:37:30,087 [main:114] - replacement of e of type Throwable is IllegalArgumentException(null)
2021-03-12 05:37:30,234 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:37:30,235 [main:66] - Compilation checking started
2021-03-12 05:37:30,666 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw IllegalArgumentException(null)
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:30,668 [main:107] - replacing (prope12.prope3 != "OK", Boolean)
2021-03-12 05:37:30,669 [main:50] - replacing prope12.prope3 != "OK" Boolean
2021-03-12 05:37:30,669 [main:54] - Getting value of type Boolean
2021-03-12 05:37:30,818 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:30,822 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 05:37:30,822 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:31,366 [main:67] - randomType = Set<Kla3?>?
2021-03-12 05:37:31,367 [main:106] - GETTING Boolean from Int
2021-03-12 05:37:31,404 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46f4aa4e]]
2021-03-12 05:37:31,405 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:31,405 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@46f4aa4e]
2021-03-12 05:37:31,405 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().isHighSurrogate()
2021-03-12 05:37:31,405 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]]
2021-03-12 05:37:31,405 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:37:31,563 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:37:31,567 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@37af6911]
2021-03-12 05:37:31,722 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:31,723 [main:117] - GENERATED CALL = (logged("start;", 8)).div(0.5422788710403159).equals("uokrq")
2021-03-12 05:37:31,723 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f9b1c6]]
2021-03-12 05:37:31,723 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:31,723 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f9b1c6]
2021-03-12 05:37:31,723 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().isISOControl()
2021-03-12 05:37:31,723 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]]
2021-03-12 05:37:31,723 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:31,723 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:37:31,873 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:31,874 [main:117] - GENERATED CALL = (logged("start;", 8)).toInt().equals("ibgqw")
2021-03-12 05:37:31,874 [main:113] - Case = [public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e], public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@30696c34]]
2021-03-12 05:37:31,874 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3673807e]
2021-03-12 05:37:32,021 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:37:32,024 [main:149] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@30696c34]
2021-03-12 05:37:32,025 [main:117] - GENERATED CALL = (logged("start;", 8)).div(0.7411980532701631).isFinite()
2021-03-12 05:37:32,025 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53ec616f]]
2021-03-12 05:37:32,025 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:32,025 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53ec616f]
2021-03-12 05:37:32,176 [main:302] - generating value of type = Char true depth = 0
2021-03-12 05:37:32,329 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:32,332 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().equals('䮃', true)
2021-03-12 05:37:32,332 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f7637b7]]
2021-03-12 05:37:32,332 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:37:32,478 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:32,479 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@7f7637b7]
2021-03-12 05:37:32,630 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:32,634 [main:117] - GENERATED CALL = (logged("start;", 8)).equals("czium").or(true)
2021-03-12 05:37:32,634 [main:113] - Case = [public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc], public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@31ae9b75]]
2021-03-12 05:37:32,634 [main:149] - GENERATING call of type public abstract fun toDouble(): kotlin.Double defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@5029fafc]
2021-03-12 05:37:32,634 [main:149] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@31ae9b75]
2021-03-12 05:37:32,634 [main:117] - GENERATED CALL = (logged("start;", 8)).toDouble().isInfinite()
2021-03-12 05:37:32,634 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68530e72]]
2021-03-12 05:37:32,634 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:32,634 [main:149] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68530e72]
2021-03-12 05:37:32,634 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().isDigit()
2021-03-12 05:37:32,634 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]]
2021-03-12 05:37:32,634 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebf0e46]
2021-03-12 05:37:32,785 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:32,785 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3e40eda3]
2021-03-12 05:37:32,954 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:32,958 [main:117] - GENERATED CALL = (logged("start;", 8)).equals("inndf").and(false)
2021-03-12 05:37:32,958 [main:114] - replacement of prope12.prope3 != "OK" of type Boolean is (logged("start;", 8)).equals("inndf").and(false)
2021-03-12 05:37:33,105 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:33,105 [main:66] - Compilation checking started
2021-03-12 05:37:33,709 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:33,712 [main:107] - replacing (prope3, String)
2021-03-12 05:37:33,713 [main:50] - replacing prope3 String
2021-03-12 05:37:33,713 [main:54] - Getting value of type String
2021-03-12 05:37:33,861 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:33,864 [main:58] - GENERATED VALUE OF TYPE String = "axxpx"
2021-03-12 05:37:33,865 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:34,034 [main:67] - randomType = Double
2021-03-12 05:37:34,184 [main:302] - generating value of type = Double true depth = 0
2021-03-12 05:37:34,218 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@10a1d1b9]
2021-03-12 05:37:34,218 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:34,218 [main:78] - Generated call from random type = (0.9699459434735843).toLong().toString(sum * 10)
2021-03-12 05:37:34,219 [main:106] - GETTING String from Int
2021-03-12 05:37:34,249 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:34,249 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:34,249 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:34,249 [main:117] - GENERATED CALL = (sum * 10).toChar().lowercase()
2021-03-12 05:37:34,249 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:34,249 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:34,249 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:34,249 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(var sum =
2021-03-12 05:37:34,250 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:34,250 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:34,397 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:34,400 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:34,548 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:34,551 [main:117] - GENERATED CALL = (sum * 10).div(-5395176928882691795).toString(-1258807995)
2021-03-12 05:37:34,551 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:34,551 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:34,552 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:34,552 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(var sum =
2021-03-12 05:37:34,552 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:34,552 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:34,552 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:34,700 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:34,703 [main:117] - GENERATED CALL = (sum * 10).toChar().plus("pivpd")
2021-03-12 05:37:34,703 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:34,703 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:34,703 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:34,704 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:37:34,704 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:37:34,704 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:34,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:37:34,704 [main:117] - GENERATED CALL = (sum * 10).toChar().uppercase()
2021-03-12 05:37:34,704 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:37:34,704 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:37:34,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:34,704 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(logged("start;", 8))
2021-03-12 05:37:34,704 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:34,704 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:34,704 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:34,705 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(logged("hhpqz", 500864543))
2021-03-12 05:37:34,705 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:34,705 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:34,705 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:34,705 [main:117] - GENERATED CALL = (sum * 10).compareTo(logged("hhpqz", 500864543)).toString(var sum =
2021-03-12 05:37:34,705 [main:114] - replacement of prope3 of type String is (sum * 10).toLong().toString(var sum =
2021-03-12 05:37:34,855 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 05:37:34,855 [main:66] - Compilation checking started
2021-03-12 05:37:34,862 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:37:34,862 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.(sum * 10).toLong().toString(var sum = != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:34,865 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:37:34,866 [main:50] - replacing prope12.prope3 String
2021-03-12 05:37:34,866 [main:54] - Getting value of type String
2021-03-12 05:37:35,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:35,023 [main:58] - GENERATED VALUE OF TYPE String = "thyyv"
2021-03-12 05:37:35,023 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:35,045 [main:67] - randomType = Byte
2021-03-12 05:37:35,193 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 05:37:35,233 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:35,233 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:35,234 [main:78] - Generated call from random type = (-127).toLong().toString(sum * 10)
2021-03-12 05:37:35,234 [main:106] - GETTING String from IntProgression
2021-03-12 05:37:35,245 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:35,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:35,245 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8))
2021-03-12 05:37:35,245 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]]
2021-03-12 05:37:35,245 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@92690e5]
2021-03-12 05:37:35,392 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:35,544 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:35,698 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:35,853 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 05:37:36,009 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 05:37:36,012 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 05:37:36,019 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).joinToString("zilum", StringBuilder(), "frvam", sum * 10, "ajbxo", {a: T -> StringBuilder()})
2021-03-12 05:37:36,019 [main:114] - replacement of prope12.prope3 of type String is (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8))
2021-03-12 05:37:36,171 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:36,171 [main:66] - Compilation checking started
2021-03-12 05:37:36,596 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    (logged("start;", 8) downTo logged("end;", 1)).first.toString(logged("start;", 8)) = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:36,599 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:37:36,599 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:37:36,599 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:37:36,745 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:37:36,751 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:37:36,921 [main:67] - randomType = UShort
2021-03-12 05:37:37,072 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 05:37:37,106 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:37,136 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:37:37,167 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:37,167 [main:106] - GETTING EmptyCoroutineContext from StringBuilder
2021-03-12 05:37:37,184 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:37,184 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:37:37,184 [main:107] - replacing (prope17, Function0<Unit>)
2021-03-12 05:37:37,185 [main:50] - replacing prope17 Function0<Unit>
2021-03-12 05:37:37,185 [main:54] - Getting value of type Function0<Unit>
2021-03-12 05:37:37,335 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-12 05:37:37,339 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 05:37:37,496 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:37:37,503 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-12 05:37:37,833 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:37:37,833 [main:95] - GENERATED = println("bbzgn")
2021-03-12 05:37:37,834 [main:58] - GENERATED VALUE OF TYPE Function0<Unit> = { println("bbzgn")}
2021-03-12 05:37:37,834 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:38,173 [main:67] - randomType = Short?
2021-03-12 05:37:38,322 [main:302] - generating value of type = Short true depth = 0
2021-03-12 05:37:38,363 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 05:37:38,393 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 05:37:38,394 [main:106] - GETTING Function0<Unit> from Int
2021-03-12 05:37:38,395 [main:106] - GETTING Function0<Unit> from StringBuilder
2021-03-12 05:37:38,412 [main:106] - GETTING Function0<Unit> from IntProgression
2021-03-12 05:37:38,422 [main:114] - replacement of prope17 of type Function0<Unit> is { println("bbzgn")}
2021-03-12 05:37:38,568 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 05:37:38,569 [main:66] - Compilation checking started
2021-03-12 05:37:38,989 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return prope12.prope3
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        { println("bbzgn")} = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:38,992 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:37:38,992 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:37:38,992 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:37:39,151 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:37:39,157 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:37:39,351 [main:67] - randomType = Kla7
2021-03-12 05:37:39,502 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:37:39,506 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:37:39,528 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:39,558 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:37:39,568 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:39,569 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:39,570 [main:106] - GETTING EmptyCoroutineContext from StringBuilder
2021-03-12 05:37:39,586 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:37:39,586 [main:107] - replacing (prope12.prope3, String)
2021-03-12 05:37:39,586 [main:50] - replacing prope12.prope3 String
2021-03-12 05:37:39,586 [main:54] - Getting value of type String
2021-03-12 05:37:39,737 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:39,740 [main:58] - GENERATED VALUE OF TYPE String = "dhdhh"
2021-03-12 05:37:39,740 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:39,754 [main:67] - randomType = Kla6
2021-03-12 05:37:39,902 [main:302] - generating value of type = Kla6 false depth = 0
2021-03-12 05:37:39,905 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:37:39,916 [main:106] - GETTING String from Int
2021-03-12 05:37:39,945 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:39,945 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:39,945 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:40,093 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:40,096 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().plus("tytkf")
2021-03-12 05:37:40,096 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:40,097 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:40,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:40,097 [main:117] - GENERATED CALL = (logged("start;", 8)).toInt().toString(var sum =
2021-03-12 05:37:40,097 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:37:40,097 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:40,097 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:37:40,097 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().uppercase()
2021-03-12 05:37:40,097 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:40,097 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:40,246 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:40,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:40,250 [main:117] - GENERATED CALL = (logged("start;", 8)).div(5479773661964895836).toString(logged("start;", 8))
2021-03-12 05:37:40,250 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:40,250 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:40,250 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:40,400 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:40,403 [main:117] - GENERATED CALL = (logged("start;", 8)).compareTo(var sum =.toString(-1735855058)
2021-03-12 05:37:40,404 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:40,404 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:40,404 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:40,404 [main:117] - GENERATED CALL = (logged("start;", 8)).toLong().toString(sum * 10)
2021-03-12 05:37:40,404 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:40,404 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:40,554 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:40,558 [main:117] - GENERATED CALL = (logged("start;", 8)).toString(-1747790944)
2021-03-12 05:37:40,558 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:37:40,558 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:37:40,558 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:40,558 [main:117] - GENERATED CALL = (logged("start;", 8)).toByte().toString(sum * 10)
2021-03-12 05:37:40,558 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:40,558 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:40,558 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:40,558 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().lowercase()
2021-03-12 05:37:40,559 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:40,559 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:40,559 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:40,559 [main:117] - GENERATED CALL = (logged("start;", 8)).toChar().titlecase()
2021-03-12 05:37:40,559 [main:114] - replacement of prope12.prope3 of type String is (logged("start;", 8)).toChar().lowercase()
2021-03-12 05:37:40,708 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:40,708 [main:66] - Compilation checking started
2021-03-12 05:37:41,335 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("start;", 8)).toChar().lowercase()
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:41,338 [main:107] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-12 05:37:41,338 [main:50] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-12 05:37:41,338 [main:54] - Getting value of type EmptyCoroutineContext
2021-03-12 05:37:41,512 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-12 05:37:41,518 [main:58] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-12 05:37:41,872 [main:67] - randomType = Kla7?
2021-03-12 05:37:42,021 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:37:42,025 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:37:42,047 [main:106] - GETTING EmptyCoroutineContext from StringBuilder
2021-03-12 05:37:42,064 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:42,094 [main:106] - GETTING EmptyCoroutineContext from IntProgression
2021-03-12 05:37:42,105 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:42,106 [main:106] - GETTING EmptyCoroutineContext from Int
2021-03-12 05:37:42,106 [main:111] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-12 05:37:42,106 [main:107] - replacing (fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        }, Kla0)
2021-03-12 05:37:42,106 [main:50] - replacing fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        } Kla0
2021-03-12 05:37:42,106 [main:54] - Getting value of type Kla0
2021-03-12 05:37:42,260 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:37:42,263 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:37:42,579 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:37:42,579 [main:61] - GENERATED IS CALL =true
2021-03-12 05:37:42,587 [main:67] - randomType = Boolean
2021-03-12 05:37:42,737 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:42,753 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:37:42,771 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:42,801 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:42,801 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:37:42,812 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:42,812 [main:114] - replacement of fu3 {
            object : Kla0 {
                override fun fu6(s: String) {
                    var sum = 0
val log = StringBuilder()
prope3 = s
                }
            }
        } of type Kla0 is TODO()
2021-03-12 05:37:42,961 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:37:42,962 [main:66] - Compilation checking started
2021-03-12 05:37:43,583 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        TODO()
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("start;", 8)).toChar().lowercase()
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:43,587 [main:107] - replacing (prope8, Kla0)
2021-03-12 05:37:43,587 [main:50] - replacing prope8 Kla0
2021-03-12 05:37:43,587 [main:54] - Getting value of type Kla0
2021-03-12 05:37:43,735 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:37:43,738 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:37:44,049 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:37:44,049 [main:61] - GENERATED IS CALL =true
2021-03-12 05:37:45,112 [main:67] - randomType = HashMap<UByte, ArrayList<Pair<UInt, Kla4<Char>>>>
2021-03-12 05:37:45,260 [main:302] - generating value of type = HashMap<UByte, ArrayList<Pair<UInt, Kla4<Char>>>> false depth = 0
2021-03-12 05:37:45,416 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>>): HashMap<UByte, ArrayList<Pair<UInt, Kla4<Char>>>> = TODO()
2021-03-12 05:37:45,421 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>>): HashMap<UByte, ArrayList<Pair<UInt, Kla4<Char>>>> = TODO()
2021-03-12 05:37:45,577 [main:302] - generating value of type = Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>> false depth = 3
2021-03-12 05:37:45,759 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UByte, second: ArrayList<Pair<UInt, Kla4<Char>>>): Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>> = TODO()
2021-03-12 05:37:45,763 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UByte, second: ArrayList<Pair<UInt, Kla4<Char>>>): Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>> = TODO()
2021-03-12 05:37:45,918 [main:302] - generating value of type = UByte true depth = 6
2021-03-12 05:37:45,922 [main:302] - generating value of type = ArrayList<Pair<UInt, Kla4<Char>>> false depth = 6
2021-03-12 05:37:46,076 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Pair<UInt, Kla4<Char>>> = TODO()
2021-03-12 05:37:46,081 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Pair<UInt, Kla4<Char>>> = TODO()
2021-03-12 05:37:46,411 [main:302] - generating value of type = Int true depth = 9
2021-03-12 05:37:46,414 [main:95] - GENERATED = ArrayList<Pair<UInt, Kla4<Char>>>(-1997045632)
2021-03-12 05:37:46,414 [main:95] - GENERATED = Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>>(119.toUByte(), ArrayList<Pair<UInt, Kla4<Char>>>(-1997045632))
2021-03-12 05:37:46,415 [main:95] - GENERATED = linkedMapOf<UByte, ArrayList<Pair<UInt, Kla4<Char>>>>(Pair<UByte, ArrayList<Pair<UInt, Kla4<Char>>>>(119.toUByte(), ArrayList<Pair<UInt, Kla4<Char>>>(-1997045632)))
2021-03-12 05:37:46,598 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:37:46,616 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:37:46,628 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:46,659 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:46,659 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:46,659 [main:114] - replacement of prope8 of type Kla0 is TODO()
2021-03-12 05:37:46,808 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:37:46,808 [main:66] - Compilation checking started
2021-03-12 05:37:47,233 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        TODO()
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.TODO().fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("start;", 8)).toChar().lowercase()
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:47,236 [main:107] - replacing (prope12.prope5, Kla0)
2021-03-12 05:37:47,237 [main:50] - replacing prope12.prope5 Kla0
2021-03-12 05:37:47,237 [main:54] - Getting value of type Kla0
2021-03-12 05:37:47,387 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 05:37:47,391 [main:112] - generating klass Kla0 text = interface Kla0 { fun fu6(s: String) }
2021-03-12 05:37:47,722 [main:58] - GENERATED VALUE OF TYPE Kla0 = TODO()
2021-03-12 05:37:47,722 [main:61] - GENERATED IS CALL =true
2021-03-12 05:37:47,738 [main:67] - randomType = Kla3
2021-03-12 05:37:47,886 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-12 05:37:47,889 [main:112] - generating klass Kla3 text = class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}
2021-03-12 05:37:47,907 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:47,936 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:47,937 [main:106] - GETTING Kla0 from IntProgression
2021-03-12 05:37:47,948 [main:106] - GETTING Kla0 from Int
2021-03-12 05:37:47,949 [main:106] - GETTING Kla0 from StringBuilder
2021-03-12 05:37:47,965 [main:114] - replacement of prope12.prope5 of type Kla0 is TODO()
2021-03-12 05:37:48,110 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 05:37:48,111 [main:66] - Compilation checking started
2021-03-12 05:37:48,528 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        TODO()
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    TODO().fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6("OK")
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("start;", 8)).toChar().lowercase()
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:48,531 [main:107] - replacing ("OK", String)
2021-03-12 05:37:48,532 [main:50] - replacing "OK" String
2021-03-12 05:37:48,532 [main:54] - Getting value of type String
2021-03-12 05:37:48,678 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:48,682 [main:58] - GENERATED VALUE OF TYPE String = "oacav"
2021-03-12 05:37:48,682 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:48,695 [main:67] - randomType = Kla2
2021-03-12 05:37:48,842 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 05:37:48,845 [main:112] - generating klass Kla2 text = open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}
2021-03-12 05:37:48,991 [main:194] - Type params = []
2021-03-12 05:37:49,137 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 05:37:49,292 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:37:49,297 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:37:49,635 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 05:37:49,796 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:37:49,801 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:37:50,360 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 05:37:50,360 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 05:37:50,372 [main:106] - GETTING String from Int
2021-03-12 05:37:50,401 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:50,401 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:50,546 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:50,550 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:50,550 [main:117] - GENERATED CALL = (sum * 10).div(5130372171249436916).toString(logged("hhpqz", 500864543))
2021-03-12 05:37:50,550 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:50,550 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:50,550 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:50,695 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:50,698 [main:117] - GENERATED CALL = (sum * 10).toChar().plus("sclue")
2021-03-12 05:37:50,698 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:50,698 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:50,699 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:50,844 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:50,847 [main:117] - GENERATED CALL = (sum * 10).toInt().toString(1103202785)
2021-03-12 05:37:50,847 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:50,847 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:50,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:50,848 [main:117] - GENERATED CALL = (sum * 10).toChar().titlecase()
2021-03-12 05:37:50,848 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:50,848 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:50,848 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:50,848 [main:117] - GENERATED CALL = (sum * 10).toShort().toString(logged("start;", 8))
2021-03-12 05:37:50,848 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:50,848 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:51,000 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:51,003 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:51,003 [main:117] - GENERATED CALL = (sum * 10).compareTo(-270327690).toString(logged("hhpqz", 500864543))
2021-03-12 05:37:51,003 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:51,004 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:51,004 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:51,004 [main:117] - GENERATED CALL = (sum * 10).toChar().lowercase()
2021-03-12 05:37:51,004 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:51,004 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:51,150 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:51,153 [main:117] - GENERATED CALL = (sum * 10).toString(372080092)
2021-03-12 05:37:51,153 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:51,153 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:51,153 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:51,298 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:51,302 [main:117] - GENERATED CALL = (sum * 10).toLong().toString(-794892201)
2021-03-12 05:37:51,302 [main:113] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]]
2021-03-12 05:37:51,302 [main:149] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1be853c5]
2021-03-12 05:37:51,302 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1ab49f7b]
2021-03-12 05:37:51,447 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:51,451 [main:117] - GENERATED CALL = (sum * 10).toByte().toString(1974895433)
2021-03-12 05:37:51,451 [main:114] - replacement of "OK" of type String is (sum * 10).toChar().titlecase()
2021-03-12 05:37:51,596 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 05:37:51,597 [main:66] - Compilation checking started
2021-03-12 05:37:52,222 [main:53] - Result = true
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        TODO()
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6((sum * 10).toChar().titlecase())
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("start;", 8)).toChar().lowercase()
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:52,225 [main:107] - replacing (s, String)
2021-03-12 05:37:52,225 [main:50] - replacing s String
2021-03-12 05:37:52,225 [main:54] - Getting value of type String
2021-03-12 05:37:52,374 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:52,377 [main:58] - GENERATED VALUE OF TYPE String = "ntdxn"
2021-03-12 05:37:52,378 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:52,727 [main:67] - randomType = LinkedHashSet<Double>
2021-03-12 05:37:52,873 [main:302] - generating value of type = LinkedHashSet<Double> false depth = 0
2021-03-12 05:37:53,024 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Double): LkedHashSet<Double> = TODO()
2021-03-12 05:37:53,029 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Double): LkedHashSet<Double> = TODO()
2021-03-12 05:37:53,182 [main:302] - generating value of type = Double true depth = 3
2021-03-12 05:37:53,185 [main:95] - GENERATED = linkedSetOf<Double>(0.6195706637090613)
2021-03-12 05:37:53,309 [main:149] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.LinkedHashSet[DeserializedSimpleFunctionDescriptor@215f23f7]
2021-03-12 05:37:53,310 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public fun <T> kotlin.Array<out T>.contentToString(): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@6c327e8c]
2021-03-12 05:37:53,310 [main:78] - Generated call from random type = (linkedSetOf<Double>(0.6195706637090613)).toArray().contentToString()
2021-03-12 05:37:53,311 [main:106] - GETTING String from Int
2021-03-12 05:37:53,339 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]]
2021-03-12 05:37:53,340 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:53,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e37dbee]
2021-03-12 05:37:53,340 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().lowercase()
2021-03-12 05:37:53,340 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:53,340 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@493a1b52]
2021-03-12 05:37:53,340 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:53,340 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).compareTo(var sum =.toString(logged("start;", 8))
2021-03-12 05:37:53,340 [main:113] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:53,340 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7fa4218d]
2021-03-12 05:37:53,487 [main:302] - generating value of type = Long true depth = 0
2021-03-12 05:37:53,490 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:53,490 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).div(3653791705314847407).toString(sum * 10)
2021-03-12 05:37:53,490 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]]
2021-03-12 05:37:53,490 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:53,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@669df06a]
2021-03-12 05:37:53,491 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().uppercase()
2021-03-12 05:37:53,491 [main:113] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:53,491 [main:149] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@3e158f3b]
2021-03-12 05:37:53,491 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:53,636 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:53,640 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toInt().toString(-719848593)
2021-03-12 05:37:53,640 [main:113] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]]
2021-03-12 05:37:53,640 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b3f065d]
2021-03-12 05:37:53,789 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:53,793 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toString(-1139830725)
2021-03-12 05:37:53,793 [main:113] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]]
2021-03-12 05:37:53,793 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@4ab08881]
2021-03-12 05:37:53,793 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@51a09b31]
2021-03-12 05:37:53,793 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
2021-03-12 05:37:53,793 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]]
2021-03-12 05:37:53,793 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:53,794 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3fe44749]
2021-03-12 05:37:53,942 [main:302] - generating value of type = String true depth = 0
2021-03-12 05:37:53,946 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().plus("ubrqd")
2021-03-12 05:37:53,946 [main:113] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]]
2021-03-12 05:37:53,946 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@da36314]
2021-03-12 05:37:53,946 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@534206cb]
2021-03-12 05:37:53,946 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toChar().titlecase()
2021-03-12 05:37:53,946 [main:113] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]]
2021-03-12 05:37:53,946 [main:149] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4b35d2db]
2021-03-12 05:37:53,946 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c9b3ad6]
2021-03-12 05:37:53,946 [main:117] - GENERATED CALL = (logged("hhpqz", 500864543)).toShort().toString(var sum =
2021-03-12 05:37:53,946 [main:114] - replacement of s of type String is (logged("hhpqz", 500864543)).compareTo(var sum =.toString(logged("start;", 8))
2021-03-12 05:37:54,101 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 05:37:54,102 [main:66] - Compilation checking started
2021-03-12 05:37:54,108 [main:71] - Wrong syntax or breaks conditions
2021-03-12 05:37:54,109 [main:49] - Result = false
Text:
import kotlin.test.*
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame


val log = StringBuilder()

fun logged(message: String, value: Int) =
    value.also { log.append(message) }

fun box(): String {
    var sum = 0
    for (i in logged("start;", 8) downTo logged("end;", 1) step logged("step;", 2)) {
        sum = sum * 10 + i
    }

    assertEquals(8642, sum)

    assertEquals("start;end;step;", log.toString())

    return "OK"
}

interface Kla0 { fun fu6(s: String) }

inline fun fu0(crossinline block: (String) -> Unit) = object : Kla0 {
    override fun fu6(s: String) {
        block(s)
    }
}

inline fun fu1(block: () -> Kla0) = block()

fun fu2(prope12: suspend () -> Unit) {
    prope12.startCoroutine(Kla2)
}

fun fu3(prope12: suspend () -> Kla0): Kla0 {
    var prope2: Kla0? = null
    prope12.startCoroutine(object : Kla4<Kla0>() {
        override fun resume(value: Kla0) {
            var sum = 0
val log = StringBuilder()
prope2 = TODO()
        }

        override fun fu7(e: Throwable) {
            var sum = 0
val log = StringBuilder()
throw e
        }

        override val context = EmptyCoroutineContext
    })
    return prope2!!
}

class Kla1 {
    var prope3: String = "FAIL 0"

    val prope4 = fu0 { s ->
        prope3 = s
    }

    val prope5 = fu0 { s ->
        fu2 { require(false)}
    }

    val prope6 = fu1 {
        object : Kla0 {
            override fun fu6(s: String) {
                fu2 {
                    prope3 = s
                }
            }
        }
    }

    val prope7 = fu1 {
        TODO()
    }

    val prope8 = fu0 { s ->
        object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
    }

    val prope9 = fu0 { s ->
        fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
    }

    val prope10 = fu0 { s ->
        val prope12 = object : Kla0 {
            override fun fu6(s1: String) {
                fu2 {
                    prope3 = s1
                }
            }
        }
        prope12.fu6(s)
    }

    val prope11 = fu0 { s ->
        val prope12 = fu3 {
            object : Kla0 {
                override fun fu6(s1: String) {
                    prope3 = s1
                }
            }
        }
        prope12.fu6((logged("hhpqz", 500864543)).compareTo(var sum =.toString(logged("start;", 8)))
    }
}

fun box181(): String {
    var sum = 0
val log = StringBuilder()
val prope12 = Kla1()
    Kla1().prope4.fu6("OK")
    if ((logged("hhpqz", 500864543)).compareTo(1431288958).equals("excvy")) return prope12.prope3
    prope12.prope3 = "FAIL 1"
    prope12.prope5.fu6((-17786).div(2208914887418136480).toString(logged("start;", 8)))
    if (prope12.prope3 != "OK") return prope12.prope3
    prope12.prope3 = "FAIL 2"
    prope12.prope6.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("hhpqz", 500864543)).toLong().toString(logged("hhpqz", 500864543))
    prope12.prope3 = "FAIL 3"
    prope12.prope7.fu6((sum * 10).toChar().titlecase())
    if ((logged("start;", 8)).equals("inndf").and(false)) return prope12.prope3
    Kla1().prope3 = "OK"
    prope12.prope8.fu6("FAIL 4")
    if (prope12.prope3 != (logged("hhpqz", 500864543)).toChar().titlecase()) return prope12.prope3
    prope12.prope9.fu6((logged("start;", 8)).toChar().titlecase())
    if ((sum * 10).toInt().toString(logged("hhpqz", 500864543)) != "OK") return (logged("start;", 8)).toChar().plus("cbspj")
    prope12.prope3 = "FAIL 6"
    prope12.prope10.fu6("OK")
    if (prope12.prope3 != "OK") return (logged("start;", 8)).toChar().lowercase()
    Kla1().prope3 = "FAIL 7"
    Kla1().prope11.fu6("OK")
    if ((Kla6()).fu12().equals("sbejl")) return (sum * 10).toChar().titlecase()
    return "OK"
}

fun <Ty0> fu4(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        x(prope13.getOrThrow())
    }
}

fun fu5(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.exceptionOrNull()?.let(x)
    }
}

open class Kla2(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla8 : Kla2()
    override fun resumeWith(prope13: Result<Any?>) {
        prope13.getOrThrow()
    }
}

class Kla3 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Any?>) {
        var sum = 0
val log = StringBuilder()
this.prope13 = prope13.getOrThrow()
    }

    var prope13: Any? = null
}

abstract class Kla4<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope13: Result<Ty0>) {
        if (prope13.isSuccess) {
            resume(prope13.getOrThrow())
        } else {
            fu7(prope13.exceptionOrNull()!!)
        }
    }

    abstract fun fu7(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla5 {
    private val prope14 = arrayListOf<StackTraceElement?>()

    suspend fun fu9() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> require(true, { "mbxyb"})}

    fun fu9(prope12: Continuation<*>) {
        var sum = 0
val log = StringBuilder()
if (prope12 !is CoroutineStackFrame) error("Continuation " + prope12 + " is not subtype of CoroutineStackFrame")
        prope14.clear()
        var prope18: CoroutineStackFrame? = prope12
        while (prope18 != null) {
            prope14.add(prope18.getStackTraceElement())
            prope18 = prope18.callerFrame
        }
    }

    fun fu10(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true }?.let { TODO("ayyfg")}
    }

    fun fu11(method: String) {
        var sum = 0
val log = StringBuilder()
prope14.find { it?.methodName?.startsWith(method) == true } ?: error((logged("start;", 8)).toChar().uppercase() + (logged("hhpqz", 500864543)).toString(1140127281) + " has no state-machine " +
                prope14.joinToString(separator = "\n"))
    }
}

val prope0 = Kla5()

class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla6()

object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}


2021-03-12 05:37:54,112 [main:107] - replacing (prope15, Int)
2021-03-12 05:37:54,112 [main:50] - replacing prope15 Int
2021-03-12 05:37:54,112 [main:54] - Getting value of type Int
2021-03-12 05:37:54,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 05:37:54,267 [main:58] - GENERATED VALUE OF TYPE Int = 1441976371
2021-03-12 05:37:54,267 [main:61] - GENERATED IS CALL =false
2021-03-12 05:37:54,463 [main:67] - randomType = Kla7
2021-03-12 05:37:54,616 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 05:37:54,620 [main:112] - generating klass Kla7 text = object Kla7: Kla4<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var sum = 0
val log = StringBuilder()
prope1.prope17 = {
            Kla6().prope16 = true
        }
    }

    override fun fu7(exception: Throwable) {
        throw exception
    }
}
2021-03-12 05:37:54,641 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla7[DeserializedSimpleFunctionDescriptor@33ab35c3]
2021-03-12 05:37:54,788 [main:302] - generating value of type = Any false depth = 0
2021-03-12 05:37:54,789 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@3de86254]
2021-03-12 05:37:54,933 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 05:37:54,936 [main:78] - Generated call from random type = (Kla7).equals("jejja").compareTo(true)
2021-03-12 05:37:54,937 [main:106] - GETTING Int from IntProgression
2021-03-12 05:37:54,948 [main:113] - Case = [public final val first: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@6482efa1], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e123910]]
2021-03-12 05:37:54,949 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@3e123910]
2021-03-12 05:37:54,949 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).first.xor(var sum =
2021-03-12 05:37:54,949 [main:113] - Case = [public final val last: kotlin.Int defined in kotlin.ranges.IntProgression[DeserializedPropertyDescriptor@1f4664a8]]
2021-03-12 05:37:54,949 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).last
2021-03-12 05:37:54,949 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@319052b1]]
2021-03-12 05:37:54,949 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin public inline fun <T, R : kotlin.Comparable<R>> kotlin.collections.Iterable<T>.minBy(selector: (T) -> R): T? defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@319052b1]
2021-03-12 05:37:55,095 [main:302] - generating value of type = Function1<T, R> false depth = 0
2021-03-12 05:37:55,098 [main:302] - generating value of type = R false depth = 1
2021-03-12 05:37:55,426 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->String?): R = TODO()
2021-03-12 05:37:55,431 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->String?): R = TODO()
2021-03-12 05:37:55,939 [main:302] - generating value of type = Any false depth = 4
2021-03-12 05:37:55,939 [main:302] - generating value of type = Function0<String?> false depth = 4
2021-03-12 05:37:55,943 [main:302] - generating value of type = String true depth = 5
2021-03-12 05:37:55,946 [main:95] - GENERATED = synchronized<String?>("ymulg", { "quprv"})
2021-03-12 05:37:55,947 [main:117] - GENERATED CALL = (logged("start;", 8) downTo logged("end;", 1)).minBy({a: T -> synchronized<String?>("ymulg", { "quprv"})})
2021-03-12 05:37:55,947 [main:113] - Case = [public fun <T> kotlin.collections.Iterable<T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@ff9be70]]
2021-03-12 05:37:55,947 [main:149] - GENERATING call of type public fun <T> kotlin.collections.Iterable<T>.elementAtOrElse(index: kotlin.Int, defaultValue: (kotlin.Int) -> T): T defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@ff9be70]
2021-03-12 05:37:56,092 [main:302] - generating value of type = Function1<Int, T> false depth = 0
2021-03-12 05:37:56,095 [main:302] - generating value of type = T false depth = 1
2021-03-12 05:37:56,259 [main:43] - GENERATING CALL OF fun <T> checkNotNull(value: Kla6, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 05:37:56,264 [main:61] - WITHOUT TYPE PARAMS = fun <T> checkNotNull(value: Kla6, lazyMessage: ()->kotlin.Any): T = TODO()
2021-03-12 05:37:56,626 [main:302] - generating value of type = Kla6 false depth = 4
2021-03-12 05:37:56,630 [main:112] - generating klass Kla6 text = class Kla6 {
    private var prope15 = 0
    var prope16 = false

    var prope17: () -> Unit = {}

    fun fu12() {
        var sum = 0
val log = StringBuilder()
prope15 = 0
        prope16 = false
        prope17 = {}
    }

    suspend fun fu13() = suspendCoroutine<Unit> { prope12 ->
        prope15++
        prope17 = { prope12.resume(Unit) }
    }

    fun fu14(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var sum = 0
val log = StringBuilder()
for (i in 1..numberOfSuspensions) {
            if ((logged("start;", 8)).toByte().equals("esalr")) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (sum * 10).toInt().toString(logged("start;", 8)) + prope15)
            prope17()
        }
        if (prope15 != numberOfSuspensions)
            error((logged("start;", 8) downTo logged("end;", 1)).first.toString(-654547617) + "vmemy" + (sum * 10).takeLowestOneBit())
        if (prope16) error("Wrong state-machine generated: it is finished early")
        prope17()
        if ((logged("start;", 8)).equals("hmlpj").xor(false) && !prope16) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 05:37:56,631 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-12 05:37:56,634 [main:302] - generating value of type = Any false depth = 5
2021-03-12 05:37:56,634 [main:95] - GENERATED = checkNotNull<Kla6>(Kla6(), { "xbbcs"})
