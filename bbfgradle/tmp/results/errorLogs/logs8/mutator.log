2021-03-11 11:39:42,893 [main:66] - Compilation checking started
2021-03-11 11:39:44,816 [main:112] - generating klass Z text = interface Z<T> {
    fun test(p: T): T {
        return p
    }
}
2021-03-11 11:39:45,933 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:39:45,934 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:39:45,935 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}
2021-03-11 11:39:46,243 [main:52] - Trying to change 31 nodes
2021-03-11 11:39:46,243 [main:56] - replacing (super.test(p), String)
2021-03-11 11:39:46,243 [main:38] - replacing super.test(p) String
2021-03-11 11:39:46,243 [main:42] - Getting value of type String
2021-03-11 11:39:46,358 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:46,361 [main:46] - GENERATED VALUE OF TYPE String = "ucrls"
2021-03-11 11:39:46,363 [main:49] - GENERATED IS CALL =false
2021-03-11 11:39:46,525 [main:55] - randomType = ZImpl?
2021-03-11 11:39:46,656 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:39:46,657 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:39:46,705 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl[SimpleFunctionDescriptorImpl@161b77d1]
2021-03-11 11:39:46,841 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:46,846 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]
2021-03-11 11:39:46,965 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:46,968 [main:66] - Generated call from random type = (ZImpl())?.test("hqhtw").takeLast(1868445150)
2021-03-11 11:39:46,987 [main:94] - GETTING String from ZImpl3
2021-03-11 11:39:47,035 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a5e750]]
2021-03-11 11:39:47,036 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:47,155 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:47,156 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a5e750]
2021-03-11 11:39:47,257 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:47,357 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:47,360 [main:105] - GENERATED CALL = (ZImpl3()).test("amazi").replaceIndentByMargin("yczku", "iyyoq")
2021-03-11 11:39:47,362 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]]
2021-03-11 11:39:47,363 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:47,471 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:47,475 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]
2021-03-11 11:39:47,569 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:39:47,569 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:39:47,573 [main:105] - GENERATED CALL = (ZImpl3()).test("hzabl").dropLastWhile({a: Char -> false})
2021-03-11 11:39:47,573 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]]
2021-03-11 11:39:47,573 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:47,694 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:47,695 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]
2021-03-11 11:39:47,806 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:47,894 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:47,897 [main:105] - GENERATED CALL = (ZImpl3()).test("iygzh").padStart(-1940639038, '﯅')
2021-03-11 11:39:47,898 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130646f9]]
2021-03-11 11:39:47,898 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:47,991 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:47,992 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130646f9]
2021-03-11 11:39:47,994 [main:105] - GENERATED CALL = (ZImpl3()).test("dskom").trimStart()
2021-03-11 11:39:47,994 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b1d60b3]]
2021-03-11 11:39:47,994 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:48,094 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:48,095 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b1d60b3]
2021-03-11 11:39:48,179 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:39:48,283 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): Iterable<Int> = TODO()
2021-03-11 11:39:48,286 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): Iterable<Int> = TODO()
2021-03-11 11:39:48,404 [main:95] - GENERATED = hashSetOf<Int>()
2021-03-11 11:39:48,405 [main:105] - GENERATED CALL = (ZImpl3()).test("yadzj").slice(hashSetOf<Int>())
2021-03-11 11:39:48,405 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]]
2021-03-11 11:39:48,405 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:48,525 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:48,526 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]
2021-03-11 11:39:48,632 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:48,634 [main:105] - GENERATED CALL = (ZImpl3()).test("ralbp").take(1458918467)
2021-03-11 11:39:48,634 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]]
2021-03-11 11:39:48,634 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:48,714 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:48,714 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]
2021-03-11 11:39:48,817 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:39:48,817 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:39:48,820 [main:105] - GENERATED CALL = (ZImpl3()).test("rgbug").replaceFirstChar({a: Char -> '視'})
2021-03-11 11:39:48,821 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]]
2021-03-11 11:39:48,821 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:48,937 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:48,938 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]
2021-03-11 11:39:49,025 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:49,035 [main:105] - GENERATED CALL = (ZImpl3()).test("tkdcn").removeSuffix("sygwy")
2021-03-11 11:39:49,036 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]]
2021-03-11 11:39:49,036 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:49,156 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:49,158 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]
2021-03-11 11:39:49,264 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:49,266 [main:105] - GENERATED CALL = (ZImpl3()).test("kargo").dropLast(-764419667)
2021-03-11 11:39:49,266 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]]
2021-03-11 11:39:49,266 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:49,371 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:49,372 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]
2021-03-11 11:39:49,456 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:49,457 [main:105] - GENERATED CALL = (ZImpl3()).test("zdidq").trimMargin("kltpo")
2021-03-11 11:39:49,457 [main:63] - replacement of super.test(p) of type String is (ZImpl3()).test("tkdcn").removeSuffix("sygwy")
2021-03-11 11:39:49,541 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:39:49,542 [main:66] - Compilation checking started
2021-03-11 11:39:50,052 [main:53] - Result = true
Text:
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return (ZImpl3()).test("tkdcn").removeSuffix("sygwy")
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}


2021-03-11 11:39:50,054 [main:56] - replacing (super, ZImpl2)
2021-03-11 11:39:50,054 [main:38] - replacing super ZImpl2
2021-03-11 11:39:50,054 [main:42] - Getting value of type ZImpl2
2021-03-11 11:39:50,182 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:39:50,182 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:39:50,183 [main:46] - GENERATED VALUE OF TYPE ZImpl2 = ZImpl2()
2021-03-11 11:39:50,183 [main:49] - GENERATED IS CALL =true
2021-03-11 11:39:50,184 [main:55] - randomType = String
2021-03-11 11:39:50,296 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:50,349 [main:94] - GETTING ZImpl2 from String
2021-03-11 11:39:50,400 [main:94] - GETTING ZImpl2 from ZImpl3
2021-03-11 11:39:50,422 [main:63] - replacement of super of type ZImpl2 is ZImpl2()
2021-03-11 11:39:50,510 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:39:50,511 [main:56] - replacing (p, String)
2021-03-11 11:39:50,511 [main:38] - replacing p String
2021-03-11 11:39:50,511 [main:42] - Getting value of type String
2021-03-11 11:39:50,598 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:50,599 [main:46] - GENERATED VALUE OF TYPE String = "viwoj"
2021-03-11 11:39:50,599 [main:49] - GENERATED IS CALL =false
2021-03-11 11:39:50,845 [main:55] - randomType = ArrayList<Z<String>>
2021-03-11 11:39:50,937 [main:302] - generating value of type = ArrayList<Z<String>> false depth = 0
2021-03-11 11:39:51,030 [main:43] - GENERATING CALL OF fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Z<String>> = TODO()
2021-03-11 11:39:51,033 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayList(initialCapacity: kotlin.Int): ArrayList<Z<String>> = TODO()
2021-03-11 11:39:51,230 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:39:51,231 [main:95] - GENERATED = ArrayList<Z<String>>(-612615279)
2021-03-11 11:39:51,526 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@227c178e]
2021-03-11 11:39:51,527 [main:137] - GENERATING call of type public fun <T> kotlin.Array<out T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@78e88bd7]
2021-03-11 11:39:51,639 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:51,754 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:51,845 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:51,939 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:52,035 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:52,151 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:39:52,153 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:39:52,379 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:39:52,380 [main:95] - GENERATED = StringBuilder(-615771922)
2021-03-11 11:39:52,469 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-11 11:39:52,470 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:39:52,477 [main:66] - Generated call from random type = (ArrayList<Z<String>>(-612615279)).toArray().joinToString("ujbou", "rbaxt", StringBuilder(), 345942350, StringBuilder(-615771922), {a: T -> StringBuilder()})
2021-03-11 11:39:52,479 [main:94] - GETTING String from ZImpl3
2021-03-11 11:39:52,513 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]]
2021-03-11 11:39:52,513 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:52,606 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:52,607 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]
2021-03-11 11:39:52,608 [main:105] - GENERATED CALL = (ZImpl3()).test("exipf").toLowerCase()
2021-03-11 11:39:52,609 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]]
2021-03-11 11:39:52,609 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:52,728 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:52,729 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]
2021-03-11 11:39:52,846 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:52,937 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:52,939 [main:105] - GENERATED CALL = (ZImpl3()).test("lysjc").padStart(1765217601, '䀵')
2021-03-11 11:39:52,939 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59176e9b]]
2021-03-11 11:39:52,939 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:53,025 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,026 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59176e9b]
2021-03-11 11:39:53,110 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,112 [main:105] - GENERATED CALL = (ZImpl3()).test("aviih").concat("ifvcm")
2021-03-11 11:39:53,113 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]]
2021-03-11 11:39:53,113 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:53,201 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,202 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]
2021-03-11 11:39:53,319 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:39:53,319 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:39:53,325 [main:105] - GENERATED CALL = (ZImpl3()).test("yrcxz").filter({a: Char -> false})
2021-03-11 11:39:53,326 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596e86e0]]
2021-03-11 11:39:53,326 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:53,418 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,419 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596e86e0]
2021-03-11 11:39:53,420 [main:105] - GENERATED CALL = (ZImpl3()).test("wmhfu").toUpperCase()
2021-03-11 11:39:53,420 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@481660f1]]
2021-03-11 11:39:53,420 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:53,514 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,516 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@481660f1]
2021-03-11 11:39:53,611 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:53,699 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,801 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,802 [main:105] - GENERATED CALL = (ZImpl3()).test("vwoep").replaceAfter('Ⲯ', "gzivy", "rlrtk")
2021-03-11 11:39:53,803 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]]
2021-03-11 11:39:53,803 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:53,907 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,908 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]
2021-03-11 11:39:53,908 [main:105] - GENERATED CALL = (ZImpl3()).test("nvrvj").trim()
2021-03-11 11:39:53,909 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]]
2021-03-11 11:39:53,909 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:53,990 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:53,991 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]
2021-03-11 11:39:54,069 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:39:54,070 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:39:54,071 [main:105] - GENERATED CALL = (ZImpl3()).test("psiur").dropLastWhile({a: Char -> false})
2021-03-11 11:39:54,071 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]]
2021-03-11 11:39:54,071 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:54,154 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:54,155 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]
2021-03-11 11:39:54,236 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:39:54,236 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:39:54,237 [main:105] - GENERATED CALL = (ZImpl3()).test("vfzcs").dropWhile({a: Char -> true})
2021-03-11 11:39:54,238 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:39:54,238 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:54,350 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:54,351 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:39:54,444 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:54,529 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:54,531 [main:105] - GENERATED CALL = (ZImpl3()).test("rntge").padEnd(1271749572, '꛱')
2021-03-11 11:39:54,531 [main:63] - replacement of p of type String is (ZImpl3()).test("wmhfu").toUpperCase()
2021-03-11 11:39:54,612 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:39:54,614 [main:56] - replacing (ZImpl3().test("OK"), String)
2021-03-11 11:39:54,614 [main:38] - replacing ZImpl3().test("OK") String
2021-03-11 11:39:54,614 [main:42] - Getting value of type String
2021-03-11 11:39:54,703 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:54,703 [main:46] - GENERATED VALUE OF TYPE String = "wlgnm"
2021-03-11 11:39:54,703 [main:49] - GENERATED IS CALL =false
2021-03-11 11:39:54,897 [main:55] - randomType = Collection<HashSet<ZImpl3>>
2021-03-11 11:39:54,899 [main:94] - GETTING String from ZImpl3
2021-03-11 11:39:54,938 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]]
2021-03-11 11:39:54,938 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:55,025 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:55,026 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]
2021-03-11 11:39:55,106 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:39:55,106 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:39:55,108 [main:105] - GENERATED CALL = (ZImpl3()).test("mlwhq").filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:39:55,108 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b1d60b3]]
2021-03-11 11:39:55,108 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:55,187 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:55,188 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b1d60b3]
2021-03-11 11:39:55,266 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-11 11:39:55,377 [main:43] - GENERATING CALL OF fun <T> setOf(): Iterable<Int> = TODO()
2021-03-11 11:39:55,379 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Iterable<Int> = TODO()
2021-03-11 11:39:55,472 [main:95] - GENERATED = setOf<Int>()
2021-03-11 11:39:55,473 [main:105] - GENERATED CALL = (ZImpl3()).test("huglk").slice(setOf<Int>())
2021-03-11 11:39:55,474 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb06d55]]
2021-03-11 11:39:55,474 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:55,555 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:55,556 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb06d55]
2021-03-11 11:39:55,557 [main:105] - GENERATED CALL = (ZImpl3()).test("hdrqh").uppercase()
2021-03-11 11:39:55,557 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]]
2021-03-11 11:39:55,557 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:55,650 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:55,651 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]
2021-03-11 11:39:55,651 [main:105] - GENERATED CALL = (ZImpl3()).test("mbakk").reversed()
2021-03-11 11:39:55,651 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]]
2021-03-11 11:39:55,651 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:55,732 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:55,733 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]
2021-03-11 11:39:55,811 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:55,957 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:55,958 [main:105] - GENERATED CALL = (ZImpl3()).test("uwjvd").padStart(698391069, '?')
2021-03-11 11:39:55,959 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]]
2021-03-11 11:39:55,959 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:56,084 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,085 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]
2021-03-11 11:39:56,168 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:56,172 [main:105] - GENERATED CALL = (ZImpl3()).test("jflwa").removePrefix("jmlgp")
2021-03-11 11:39:56,173 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]]
2021-03-11 11:39:56,173 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:56,252 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,253 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]
2021-03-11 11:39:56,334 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:56,413 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,414 [main:105] - GENERATED CALL = (ZImpl3()).test("svngb").substringBeforeLast('映', "cwjqq")
2021-03-11 11:39:56,415 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596e86e0]]
2021-03-11 11:39:56,415 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:56,518 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,518 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596e86e0]
2021-03-11 11:39:56,519 [main:105] - GENERATED CALL = (ZImpl3()).test("zsedz").toUpperCase()
2021-03-11 11:39:56,519 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-11 11:39:56,519 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:56,611 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,612 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-11 11:39:56,696 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,697 [main:105] - GENERATED CALL = (ZImpl3()).test("hmdqy").replaceIndent("vovbt")
2021-03-11 11:39:56,698 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55], public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]]
2021-03-11 11:39:56,698 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1208fe55]
2021-03-11 11:39:56,794 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:56,795 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]
2021-03-11 11:39:56,878 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:39:56,878 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:39:56,880 [main:105] - GENERATED CALL = (ZImpl3()).test("acbgq").takeWhile({a: Char -> true})
2021-03-11 11:39:56,880 [main:63] - replacement of ZImpl3().test("OK") of type String is (ZImpl3()).test("hmdqy").replaceIndent("vovbt")
2021-03-11 11:39:56,972 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:39:56,972 [main:66] - Compilation checking started
2021-03-11 11:39:57,382 [main:53] - Result = true
Text:
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return (ZImpl3()).test("tkdcn").removeSuffix("sygwy")
    }
}

fun box(): String {
    return (ZImpl3()).test("hmdqy").replaceIndent("vovbt")
}


2021-03-11 11:39:57,383 [main:56] - replacing ("OK", String)
2021-03-11 11:39:57,383 [main:38] - replacing "OK" String
2021-03-11 11:39:57,383 [main:42] - Getting value of type String
2021-03-11 11:39:57,472 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:57,472 [main:46] - GENERATED VALUE OF TYPE String = "ogulr"
2021-03-11 11:39:57,472 [main:49] - GENERATED IS CALL =false
2021-03-11 11:39:57,563 [main:55] - randomType = ZImpl3?
2021-03-11 11:39:57,657 [main:302] - generating value of type = ZImpl3 false depth = 0
2021-03-11 11:39:57,657 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return (ZImpl3()).test("tkdcn").removeSuffix("sygwy")
    }
}
2021-03-11 11:39:57,742 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@5d80ad22]
2021-03-11 11:39:57,831 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:57,833 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@155ec2ca]
2021-03-11 11:39:57,834 [main:66] - Generated call from random type = (ZImpl3())?.test("womng").trimEnd()
2021-03-11 11:39:57,835 [main:94] - GETTING String from String
2021-03-11 11:39:57,879 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]]
2021-03-11 11:39:57,879 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]
2021-03-11 11:39:58,006 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:58,127 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:58,261 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:58,263 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceBefore('', "gfurf", "bykji")
2021-03-11 11:39:58,263 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-11 11:39:58,263 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-11 11:39:58,390 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:58,391 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceIndent("nyndj")
2021-03-11 11:39:58,391 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:39:58,391 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:39:58,482 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:58,482 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:39:58,560 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:58,561 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-733088078).plus("vmtae")
2021-03-11 11:39:58,561 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:39:58,561 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:39:58,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:58,729 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:58,730 [main:105] - GENERATED CALL = (ZImpl3().test()).padEnd(2132985509, '궸')
2021-03-11 11:39:58,730 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]]
2021-03-11 11:39:58,730 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]
2021-03-11 11:39:58,877 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:58,879 [main:105] - GENERATED CALL = (ZImpl3().test()).repeat(1361394933)
2021-03-11 11:39:58,880 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e38c628]]
2021-03-11 11:39:58,880 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e38c628]
2021-03-11 11:39:58,882 [main:105] - GENERATED CALL = (ZImpl3().test()).decapitalize()
2021-03-11 11:39:58,882 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:39:58,882 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:39:58,997 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:39:59,086 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:39:59,087 [main:105] - GENERATED CALL = (ZImpl3().test()).commonPrefixWith(StringBuilder(), true)
2021-03-11 11:39:59,087 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]]
2021-03-11 11:39:59,087 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]
2021-03-11 11:39:59,088 [main:105] - GENERATED CALL = (ZImpl3().test()).reversed()
2021-03-11 11:39:59,088 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@481660f1]]
2021-03-11 11:39:59,088 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@481660f1]
2021-03-11 11:39:59,177 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:39:59,258 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:59,343 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:39:59,345 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceAfter('︳', "soict", "jqomt")
2021-03-11 11:39:59,345 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]]
2021-03-11 11:39:59,345 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]
2021-03-11 11:39:59,450 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:39:59,451 [main:105] - GENERATED CALL = (ZImpl3().test()).substring(-747837421)
2021-03-11 11:39:59,452 [main:63] - replacement of "OK" of type String is (ZImpl3().test()).repeat(1361394933)
2021-03-11 11:39:59,540 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:39:59,797 [main:46] - AFTER TRY 0 res = interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}
2021-03-11 11:39:59,946 [main:112] - generating klass Z text = interface Z<T> {
    fun test(p: T): T {
        return p
    }
}
2021-03-11 11:40:00,230 [main:302] - generating value of type = ZImpl2 false depth = 1
2021-03-11 11:40:00,231 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:40:00,232 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:40:00,232 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:40:00,232 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}
2021-03-11 11:40:00,399 [main:48] - Try №0
2021-03-11 11:40:13,743 [main:48] - Already checked
2021-03-11 11:40:18,121 [main:71] - Trying to insert override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
2021-03-11 11:40:18,355 [main:66] - Compilation checking started
2021-03-11 11:40:19,623 [main:99] - Trying to change 140 nodes
2021-03-11 11:40:19,623 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:40:19,623 [main:38] - replacing c Continuation<*>
2021-03-11 11:40:19,623 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:40:19,804 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:40:19,973 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:40:19,976 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:40:20,605 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:40:20,832 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:20,837 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:21,224 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:40:21,397 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:21,402 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:21,955 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:21,955 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:21,955 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:40:21,955 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:40:23,103 [main:55] - randomType = Z<Array<Array<Float>>>?
2021-03-11 11:40:23,105 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:40:23,148 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:40:23,188 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:40:23,188 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:40:23,188 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:40:23,188 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:40:23,188 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:40:23,352 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:40:23,358 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:40:23,368 [main:55] - randomType = ZImpl2
2021-03-11 11:40:23,526 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:40:23,529 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:40:23,559 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:23,600 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:23,601 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:40:23,638 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:40:23,638 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:40:23,638 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:40:23,638 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:40:23,788 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:40:23,795 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:40:23,976 [main:55] - randomType = ArrayDeque<ZImpl3>
2021-03-11 11:40:24,120 [main:302] - generating value of type = ArrayDeque<ZImpl3> false depth = 0
2021-03-11 11:40:24,304 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<ZImpl3>): ArrayDeque<ZImpl3> = TODO()
2021-03-11 11:40:24,308 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<ZImpl3>): ArrayDeque<ZImpl3> = TODO()
2021-03-11 11:40:24,648 [main:302] - generating value of type = Collection<ZImpl3> false depth = 3
2021-03-11 11:40:24,804 [main:43] - GENERATING CALL OF fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<ZImpl3>.()->kotlin.Unit): Collection<ZImpl3> = TODO()
2021-03-11 11:40:24,807 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(capacity: kotlin.Int, builderAction: kotlin.collections.MutableSet<ZImpl3>.()->kotlin.Unit): Collection<ZImpl3> = TODO()
2021-03-11 11:40:25,305 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:40:25,307 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<ZImpl3>, Unit> false depth = 6
2021-03-11 11:40:25,308 [main:302] - generating value of type = Unit false depth = 7
2021-03-11 11:40:25,470 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:40:25,473 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:40:25,990 [main:302] - generating value of type = Boolean true depth = 10
2021-03-11 11:40:25,993 [main:302] - generating value of type = Function0<Any> false depth = 10
2021-03-11 11:40:25,995 [main:302] - generating value of type = Any false depth = 11
2021-03-11 11:40:25,996 [main:95] - GENERATED = require(true, { "hqxgq"})
2021-03-11 11:40:26,020 [main:95] - GENERATED = buildSet<ZImpl3>(-1621511233, { require(true, { "hqxgq"})})
2021-03-11 11:40:26,020 [main:95] - GENERATED = ArrayDeque<ZImpl3>(buildSet<ZImpl3>(-1621511233, { require(true, { "hqxgq"})}))
2021-03-11 11:40:26,284 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:26,322 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:26,323 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:40:26,354 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:40:26,355 [main:103] - replacing (getOrThrow(), Ty0)
2021-03-11 11:40:26,355 [main:38] - replacing getOrThrow() Ty0
2021-03-11 11:40:26,355 [main:42] - Getting value of type Ty0
2021-03-11 11:40:26,502 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:40:26,508 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:40:26,674 [main:55] - randomType = Char
2021-03-11 11:40:26,823 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:26,867 [main:94] - GETTING Ty0 from String
2021-03-11 11:40:26,906 [main:94] - GETTING Ty0 from ZImpl3
2021-03-11 11:40:26,931 [main:94] - GETTING Ty0 from String
2021-03-11 11:40:26,931 [main:107] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-11 11:40:26,931 [main:103] - replacing (Kla3(), Kla3)
2021-03-11 11:40:26,931 [main:38] - replacing Kla3() Kla3
2021-03-11 11:40:26,931 [main:42] - Getting value of type Kla3
2021-03-11 11:40:27,085 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 11:40:27,087 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}
2021-03-11 11:40:27,088 [main:46] - GENERATED VALUE OF TYPE Kla3 = Kla3()
2021-03-11 11:40:27,088 [main:49] - GENERATED IS CALL =true
2021-03-11 11:40:27,093 [main:55] - randomType = String
2021-03-11 11:40:27,256 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:27,298 [main:94] - GETTING Kla3 from ZImpl3
2021-03-11 11:40:27,333 [main:94] - GETTING Kla3 from String
2021-03-11 11:40:27,371 [main:94] - GETTING Kla3 from String
2021-03-11 11:40:27,371 [main:110] - replacement of Kla3() of type Kla3 is Kla3()
2021-03-11 11:40:27,517 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:40:27,519 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 11:40:27,519 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 11:40:27,520 [main:42] - Getting value of type String
2021-03-11 11:40:27,662 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:27,664 [main:46] - GENERATED VALUE OF TYPE String = "kolso"
2021-03-11 11:40:27,664 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:28,504 [main:55] - randomType = MutableMap<ZImpl3, Function2<Float?, Short, Boolean>>
2021-03-11 11:40:28,506 [main:94] - GETTING String from ZImpl3
2021-03-11 11:40:28,544 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]]
2021-03-11 11:40:28,544 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:28,723 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:28,726 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]
2021-03-11 11:40:28,889 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:40:29,119 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:40:29,124 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:40:29,444 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:40:29,448 [main:95] - GENERATED = StringBuilder("phryy")
2021-03-11 11:40:29,449 [main:105] - GENERATED CALL = (ZImpl3()).test("czper").removePrefix(StringBuilder("phryy"))
2021-03-11 11:40:29,449 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cb6fedd]]
2021-03-11 11:40:29,450 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:29,578 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:29,581 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cb6fedd]
2021-03-11 11:40:29,717 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:29,855 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:30,003 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:40:30,009 [main:105] - GENERATED CALL = (ZImpl3()).test("jjfwb").replaceRange(989423861, -1327600871, "ufzev")
2021-03-11 11:40:30,009 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]]
2021-03-11 11:40:30,009 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:30,169 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:30,173 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]
2021-03-11 11:40:30,319 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:40:30,320 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:40:30,322 [main:105] - GENERATED CALL = (ZImpl3()).test("vnhvg").filter({a: Char -> false})
2021-03-11 11:40:30,322 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]]
2021-03-11 11:40:30,322 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:30,454 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:30,457 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]
2021-03-11 11:40:30,580 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:30,582 [main:105] - GENERATED CALL = (ZImpl3()).test("zbwzs").substring(-1922684767)
2021-03-11 11:40:30,583 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]]
2021-03-11 11:40:30,583 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:30,712 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:30,714 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]
2021-03-11 11:40:30,869 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:40:30,871 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:40:30,874 [main:105] - GENERATED CALL = (ZImpl3()).test("jmdhr").filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:40:30,875 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]]
2021-03-11 11:40:30,875 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:31,041 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:31,044 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]
2021-03-11 11:40:31,186 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:31,316 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:31,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:31,457 [main:105] - GENERATED CALL = (ZImpl3()).test("ciqyi").replaceBefore('諥', "byesd", "zxgel")
2021-03-11 11:40:31,457 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]]
2021-03-11 11:40:31,457 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:31,588 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:31,590 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]
2021-03-11 11:40:31,744 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:31,747 [main:105] - GENERATED CALL = (ZImpl3()).test("afeuy").trimMargin("xrqww")
2021-03-11 11:40:31,748 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]]
2021-03-11 11:40:31,748 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:31,895 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:31,897 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]
2021-03-11 11:40:32,019 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:40:32,021 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:40:32,023 [main:105] - GENERATED CALL = (ZImpl3()).test("xcomq").filterNot({a: Char -> false})
2021-03-11 11:40:32,023 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]]
2021-03-11 11:40:32,023 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:32,143 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:32,145 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]
2021-03-11 11:40:32,146 [main:105] - GENERATED CALL = (ZImpl3()).test("wvdnq").trim()
2021-03-11 11:40:32,146 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]]
2021-03-11 11:40:32,146 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:40:32,272 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:32,274 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]
2021-03-11 11:40:32,413 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:32,415 [main:105] - GENERATED CALL = (ZImpl3()).test("qiejd").takeLast(1763810204)
2021-03-11 11:40:32,416 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (ZImpl3()).test("qiejd").takeLast(1763810204)
2021-03-11 11:40:32,602 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:40:32,602 [main:66] - Compilation checking started
2021-03-11 11:40:33,313 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:33,316 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 11:40:33,316 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 11:40:33,316 [main:42] - Getting value of type Throwable?
2021-03-11 11:40:33,459 [main:46] - GENERATED VALUE OF TYPE Throwable? = null
2021-03-11 11:40:33,459 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:33,760 [main:55] - randomType = MutableMap<Kla3, HashSet<String>>
2021-03-11 11:40:33,762 [main:94] - GETTING Throwable? from String
2021-03-11 11:40:33,791 [main:94] - GETTING Throwable? from String
2021-03-11 11:40:33,791 [main:94] - GETTING Throwable? from ZImpl3
2021-03-11 11:40:33,816 [main:110] - replacement of exceptionOrNull() of type Throwable? is null
2021-03-11 11:40:33,948 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(NULL)
2021-03-11 11:40:33,949 [main:66] - Compilation checking started
2021-03-11 11:40:34,365 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.null?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:34,368 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 11:40:34,368 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 11:40:34,368 [main:42] - Getting value of type Ty0
2021-03-11 11:40:34,491 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:40:34,498 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:40:34,654 [main:55] - randomType = ULong
2021-03-11 11:40:34,783 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:40:34,824 [main:94] - GETTING Ty0 from String
2021-03-11 11:40:34,853 [main:94] - GETTING Ty0 from ZImpl3
2021-03-11 11:40:34,873 [main:94] - GETTING Ty0 from String
2021-03-11 11:40:34,874 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 11:40:34,874 [main:103] - replacing ({
        fu6(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:40:34,874 [main:38] - replacing {
        fu6(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:40:34,874 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:40:34,997 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:40:35,000 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:40:35,151 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:40:35,154 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:40:35,566 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:40:35,568 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:40:35,569 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:40:35,701 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:40:35,704 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:40:35,977 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:40:35,978 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:40:36,107 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:40:36,111 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:40:36,490 [main:302] - generating value of type = Boolean true depth = 12
2021-03-11 11:40:36,492 [main:95] - GENERATED = check(false)
2021-03-11 11:40:36,492 [main:95] - GENERATED = contract({ check(false)})
2021-03-11 11:40:36,492 [main:95] - GENERATED = repeat(406065220, {a: Int -> contract({ check(false)})})
2021-03-11 11:40:36,492 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> repeat(406065220, {a: Int -> contract({ check(false)})})}
2021-03-11 11:40:36,493 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:36,913 [main:55] - randomType = Array<Char?>
2021-03-11 11:40:37,034 [main:302] - generating value of type = Array<Char?> false depth = 0
2021-03-11 11:40:37,164 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<Char?> = TODO()
2021-03-11 11:40:37,167 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<Char?> = TODO()
2021-03-11 11:40:37,486 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:40:37,487 [main:95] - GENERATED = arrayOfNulls<Char?>(541436538)
2021-03-11 11:40:37,505 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ZImpl3
2021-03-11 11:40:37,526 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:40:37,547 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:40:37,548 [main:110] - replacement of {
        fu6(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> repeat(406065220, {a: Int -> contract({ check(false)})})}
2021-03-11 11:40:37,668 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:40:37,668 [main:66] - Compilation checking started
2021-03-11 11:40:38,052 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> repeat(406065220, {a: Int -> contract({ check(false)})})}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:38,054 [main:103] - replacing ({ error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) }, Function0<Nothing>)
2021-03-11 11:40:38,054 [main:38] - replacing { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } Function0<Nothing>
2021-03-11 11:40:38,054 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 11:40:38,177 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 11:40:38,178 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 11:40:38,298 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 11:40:38,302 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 11:40:38,573 [main:302] - generating value of type = String true depth = 4
2021-03-11 11:40:38,575 [main:95] - GENERATED = TODO("nokwr")
2021-03-11 11:40:38,575 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("nokwr")}
2021-03-11 11:40:38,575 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:38,707 [main:55] - randomType = Char
2021-03-11 11:40:38,831 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:38,855 [main:94] - GETTING Function0<Nothing> from ZImpl3
2021-03-11 11:40:38,876 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:40:38,904 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:40:38,904 [main:110] - replacement of { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope4.joinToString(separator = "\n")) } of type Function0<Nothing> is { TODO("nokwr")}
2021-03-11 11:40:39,025 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:40:39,025 [main:66] - Compilation checking started
2021-03-11 11:40:39,669 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = prope3.getOrThrow()
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:39,671 [main:103] - replacing (prope3.getOrThrow(), Any?)
2021-03-11 11:40:39,671 [main:38] - replacing prope3.getOrThrow() Any?
2021-03-11 11:40:39,671 [main:42] - Getting value of type Any?
2021-03-11 11:40:39,808 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:40:39,808 [main:46] - GENERATED VALUE OF TYPE Any? = "twbli"
2021-03-11 11:40:39,808 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:40,236 [main:55] - randomType = Function2<UShort, Kla3, UByte>
2021-03-11 11:40:40,238 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:40:40,263 [main:94] - GETTING Any? from String
2021-03-11 11:40:40,286 [main:94] - GETTING Any? from String
2021-03-11 11:40:40,286 [main:110] - replacement of prope3.getOrThrow() of type Any? is "twbli"
2021-03-11 11:40:40,406 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:40:40,406 [main:66] - Compilation checking started
2021-03-11 11:40:41,057 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:41,059 [main:103] - replacing (true, Boolean)
2021-03-11 11:40:41,059 [main:38] - replacing true Boolean
2021-03-11 11:40:41,059 [main:42] - Getting value of type Boolean
2021-03-11 11:40:41,185 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:41,187 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:40:41,187 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:41,472 [main:55] - randomType = ArrayDeque<Kla5>
2021-03-11 11:40:41,593 [main:302] - generating value of type = ArrayDeque<Kla5> false depth = 0
2021-03-11 11:40:41,720 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): ArrayDeque<Kla5> = TODO()
2021-03-11 11:40:41,723 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): ArrayDeque<Kla5> = TODO()
2021-03-11 11:40:41,848 [main:95] - GENERATED = ArrayDeque<Kla5>()
2021-03-11 11:40:42,015 [main:137] - GENERATING call of type public open fun contains(element: Kla5): kotlin.Boolean defined in kotlin.collections.AbstractCollection[DeserializedSimpleFunctionDescriptor@2f8debc0]
2021-03-11 11:40:42,141 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:40:42,143 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:40:42,144 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:40:42,270 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:42,272 [main:66] - Generated call from random type = (ArrayDeque<Kla5>()).contains(Kla5).or(false)
2021-03-11 11:40:42,273 [main:94] - GETTING Boolean from String
2021-03-11 11:40:42,308 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:40:42,308 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:42,428 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:42,554 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:42,555 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:40:42,556 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(35862150, -1199939670).isBlank()
2021-03-11 11:40:42,556 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb6dd8e]]
2021-03-11 11:40:42,556 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:42,713 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:42,859 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:42,862 [main:137] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb6dd8e]
2021-03-11 11:40:42,984 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:43,106 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:43,108 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1533822246, 1892633613).startsWith('탷', true)
2021-03-11 11:40:43,108 [main:101] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:40:43,108 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:40:43,108 [main:105] - GENERATED CALL = (ZImpl2().test()).any()
2021-03-11 11:40:43,108 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]]
2021-03-11 11:40:43,108 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:43,225 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:43,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:43,348 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]
2021-03-11 11:40:43,348 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1259146958, -1061660727).isNotBlank()
2021-03-11 11:40:43,348 [main:101] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3c82c0]]
2021-03-11 11:40:43,348 [main:137] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3c82c0]
2021-03-11 11:40:43,476 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:43,478 [main:105] - GENERATED CALL = (ZImpl2().test()).hasSurrogatePairAt(304085338)
2021-03-11 11:40:43,478 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]]
2021-03-11 11:40:43,478 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:40:43,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:43,636 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]
2021-03-11 11:40:43,636 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1832560767).isTitleCase()
2021-03-11 11:40:43,636 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]]
2021-03-11 11:40:43,636 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]
2021-03-11 11:40:43,637 [main:105] - GENERATED CALL = (ZImpl2().test()).isEmpty()
2021-03-11 11:40:43,637 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9baccb]]
2021-03-11 11:40:43,637 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:43,779 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:43,915 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:43,917 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline infix fun kotlin.CharSequence.matches(regex: kotlin.text.Regex): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6d9baccb]
2021-03-11 11:40:44,039 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:40:44,170 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:40:44,172 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:40:44,422 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:40:44,424 [main:95] - GENERATED = Regex("ddorg")
2021-03-11 11:40:44,424 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-132923278, -51126969).matches(Regex("ddorg"))
2021-03-11 11:40:44,424 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:40:44,424 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:40:44,538 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:44,706 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:44,708 [main:105] - GENERATED CALL = (ZImpl2().test()).endsWith("ynych", true)
2021-03-11 11:40:44,708 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]]
2021-03-11 11:40:44,708 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]
2021-03-11 11:40:44,840 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:40:44,841 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:40:44,843 [main:105] - GENERATED CALL = (ZImpl2().test()).all({a: Char -> true})
2021-03-11 11:40:44,844 [main:110] - replacement of true of type Boolean is (ZImpl2().test()).subSequence(-132923278, -51126969).matches(Regex("ddorg"))
2021-03-11 11:40:44,965 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:40:44,966 [main:66] - Compilation checking started
2021-03-11 11:40:45,374 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == (ZImpl2().test()).subSequence(-132923278, -51126969).matches(Regex("ddorg")) } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:45,376 [main:103] - replacing (prope6, Boolean)
2021-03-11 11:40:45,377 [main:38] - replacing prope6 Boolean
2021-03-11 11:40:45,377 [main:42] - Getting value of type Boolean
2021-03-11 11:40:45,519 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:45,520 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:40:45,521 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:45,788 [main:55] - randomType = HashSet<Float>
2021-03-11 11:40:45,911 [main:302] - generating value of type = HashSet<Float> false depth = 0
2021-03-11 11:40:46,056 [main:43] - GENERATING CALL OF fun <T> hashSetOf(): HashSet<Float> = TODO()
2021-03-11 11:40:46,059 [main:61] - WITHOUT TYPE PARAMS = fun <T> hashSetOf(): HashSet<Float> = TODO()
2021-03-11 11:40:46,187 [main:95] - GENERATED = hashSetOf<Float>()
2021-03-11 11:40:46,331 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@7b031276]
2021-03-11 11:40:46,332 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70d524d6]
2021-03-11 11:40:46,452 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 11:40:46,580 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 11:40:46,583 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<T> = TODO()
2021-03-11 11:40:46,710 [main:95] - GENERATED = emptyArray<T>()
2021-03-11 11:40:46,710 [main:66] - Generated call from random type = (hashSetOf<Float>()).toArray().contentEquals(emptyArray<T>())
2021-03-11 11:40:46,711 [main:94] - GETTING Boolean from String
2021-03-11 11:40:46,735 [main:101] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]]
2021-03-11 11:40:46,735 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]
2021-03-11 11:40:46,736 [main:105] - GENERATED CALL = (ZImpl3().test()).toBoolean()
2021-03-11 11:40:46,736 [main:101] - Case = [public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@271b0358]]
2021-03-11 11:40:46,736 [main:137] - GENERATING call of type public operator fun kotlin.CharSequence.contains(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@271b0358]
2021-03-11 11:40:46,851 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:46,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:46,971 [main:105] - GENERATED CALL = (ZImpl3().test()).contains('봡', true)
2021-03-11 11:40:46,971 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@524c6b0f]]
2021-03-11 11:40:46,971 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:40:47,089 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:47,091 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@524c6b0f]
2021-03-11 11:40:47,091 [main:105] - GENERATED CALL = (ZImpl3().test()).get(547285224).isUpperCase()
2021-03-11 11:40:47,091 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ae73bf]]
2021-03-11 11:40:47,091 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:40:47,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:47,207 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ae73bf]
2021-03-11 11:40:47,207 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-1979420985).isLetterOrDigit()
2021-03-11 11:40:47,207 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]]
2021-03-11 11:40:47,207 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:47,341 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:47,474 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:47,476 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]
2021-03-11 11:40:47,476 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1785648610, -1678636661).none()
2021-03-11 11:40:47,476 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]]
2021-03-11 11:40:47,477 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]
2021-03-11 11:40:47,477 [main:105] - GENERATED CALL = (ZImpl3().test()).isEmpty()
2021-03-11 11:40:47,477 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]]
2021-03-11 11:40:47,477 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:40:47,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:47,600 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]
2021-03-11 11:40:47,600 [main:105] - GENERATED CALL = (ZImpl3().test()).get(1623385567).isISOControl()
2021-03-11 11:40:47,600 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:40:47,600 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:40:47,740 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:40:47,740 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:40:47,869 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:40:47,870 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("cgjjc").equals("whktg")
2021-03-11 11:40:47,870 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:40:47,870 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:40:47,992 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:48,115 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:48,116 [main:105] - GENERATED CALL = (ZImpl3().test()).endsWith("umxiw", false)
2021-03-11 11:40:48,116 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:40:48,116 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:40:48,233 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:40:48,233 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("smiia")
2021-03-11 11:40:48,233 [main:110] - replacement of prope6 of type Boolean is (ZImpl3().test()).subSequence(-1785648610, -1678636661).none()
2021-03-11 11:40:48,351 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:40:48,351 [main:66] - Compilation checking started
2021-03-11 11:40:48,782 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if ((ZImpl3().test()).subSequence(-1785648610, -1678636661).none()) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:48,784 [main:103] - replacing (method, String)
2021-03-11 11:40:48,784 [main:38] - replacing method String
2021-03-11 11:40:48,784 [main:42] - Getting value of type String
2021-03-11 11:40:48,914 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:48,915 [main:46] - GENERATED VALUE OF TYPE String = "vzmxs"
2021-03-11 11:40:48,916 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:49,041 [main:55] - randomType = Double
2021-03-11 11:40:49,164 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:40:49,206 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3657cec2]
2021-03-11 11:40:49,207 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:40:49,207 [main:66] - Generated call from random type = (0.5123005434433032).toChar().lowercase()
2021-03-11 11:40:49,207 [main:110] - replacement of method of type String is (0.5123005434433032).toChar().lowercase()
2021-03-11 11:40:49,320 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:40:49,320 [main:66] - Compilation checking started
2021-03-11 11:40:49,859 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:49,862 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:40:49,862 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:40:49,862 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:40:50,004 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:40:50,009 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:40:50,017 [main:55] - randomType = Kla0
2021-03-11 11:40:50,135 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:40:50,137 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}
2021-03-11 11:40:50,280 [main:194] - Type params = []
2021-03-11 11:40:50,398 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:40:50,520 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:50,522 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:50,799 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:40:50,921 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:50,924 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:51,324 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 11:40:51,455 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:40:51,458 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:40:51,937 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:40:52,061 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:40:52,065 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:40:52,471 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:40:52,471 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:40:52,471 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:52,471 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:52,494 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:52,524 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:40:52,545 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:52,545 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:40:52,545 [main:103] - replacing (0, Int)
2021-03-11 11:40:52,545 [main:38] - replacing 0 Int
2021-03-11 11:40:52,546 [main:42] - Getting value of type Int
2021-03-11 11:40:52,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:52,668 [main:46] - GENERATED VALUE OF TYPE Int = -1659650401
2021-03-11 11:40:52,668 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:53,115 [main:55] - randomType = Map<Double?, UByte>
2021-03-11 11:40:53,116 [main:94] - GETTING Int from String
2021-03-11 11:40:53,152 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]]
2021-03-11 11:40:53,152 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]
2021-03-11 11:40:53,277 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:53,402 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:53,404 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("uupto", true)
2021-03-11 11:40:53,405 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]]
2021-03-11 11:40:53,405 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:40:53,529 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:53,531 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]
2021-03-11 11:40:53,531 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("tpwwv").countOneBits()
2021-03-11 11:40:53,531 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57800592]]
2021-03-11 11:40:53,531 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@57800592]
2021-03-11 11:40:53,650 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:40:53,652 [main:105] - GENERATED CALL = (ZImpl3().test()).length.times(68)
2021-03-11 11:40:53,652 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1ae597b2]]
2021-03-11 11:40:53,652 [main:137] - GENERATING call of type public fun kotlin.Int.coerceIn(minimumValue: kotlin.Int, maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@1ae597b2]
2021-03-11 11:40:53,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:53,886 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:53,888 [main:105] - GENERATED CALL = (ZImpl3().test()).length.coerceIn(2016234675, -1838930511)
2021-03-11 11:40:53,888 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@720aa646]]
2021-03-11 11:40:53,888 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:40:54,005 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:54,007 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@720aa646]
2021-03-11 11:40:54,123 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:54,125 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("iumms").rotateLeft(-391054495)
2021-03-11 11:40:54,126 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@2540410e]]
2021-03-11 11:40:54,126 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:40:54,275 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:54,277 [main:105] - GENERATED CALL = (ZImpl3().test()).get(1217433912).code
2021-03-11 11:40:54,277 [main:101] - Case = [public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d3ed82]]
2021-03-11 11:40:54,277 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@33d3ed82]
2021-03-11 11:40:54,417 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:54,550 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:54,673 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:54,675 [main:105] - GENERATED CALL = (ZImpl3().test()).lastIndexOf('罸', 1567389527, false)
2021-03-11 11:40:54,675 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bfc86e1]]
2021-03-11 11:40:54,675 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bfc86e1]
2021-03-11 11:40:54,675 [main:105] - GENERATED CALL = (ZImpl3().test()).length.toInt()
2021-03-11 11:40:54,675 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69b65135]]
2021-03-11 11:40:54,675 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:54,793 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:54,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:54,918 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69b65135]
2021-03-11 11:40:55,040 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:55,161 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:55,277 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:40:55,279 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(188893313, -1591407235).indexOf('篣', 1360889330, false)
2021-03-11 11:40:55,279 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ee021ff]]
2021-03-11 11:40:55,279 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateRight(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@ee021ff]
2021-03-11 11:40:55,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:55,417 [main:105] - GENERATED CALL = (ZImpl3().test()).length.rotateRight(-913721593)
2021-03-11 11:40:55,417 [main:110] - replacement of 0 of type Int is (ZImpl3().test()).compareTo("iumms").rotateLeft(-391054495)
2021-03-11 11:40:55,576 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:40:55,577 [main:66] - Compilation checking started
2021-03-11 11:40:55,954 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = (ZImpl3().test()).compareTo("iumms").rotateLeft(-391054495)
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:40:55,956 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:40:55,956 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:40:55,956 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:40:56,077 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:40:56,083 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:40:56,537 [main:55] - randomType = Function1<Double, Triple<Boolean?, ZImpl, Kla3>>
2021-03-11 11:40:56,538 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:56,572 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:40:56,573 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:40:56,602 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:40:56,602 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:40:56,603 [main:38] - replacing c Continuation<*>
2021-03-11 11:40:56,603 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:40:56,718 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:40:56,835 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:40:56,837 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:40:57,229 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:40:57,347 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:57,350 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:57,600 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:40:57,717 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:57,719 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:58,107 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:40:58,107 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:40:58,107 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:40:58,107 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:40:58,113 [main:55] - randomType = ZImpl
2021-03-11 11:40:58,249 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:40:58,251 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:40:58,270 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:40:58,304 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:40:58,367 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:40:58,367 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:40:58,367 [main:103] - replacing ("\n", String)
2021-03-11 11:40:58,367 [main:38] - replacing "\n" String
2021-03-11 11:40:58,367 [main:42] - Getting value of type String
2021-03-11 11:40:58,489 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:58,491 [main:46] - GENERATED VALUE OF TYPE String = "hnrjx"
2021-03-11 11:40:58,491 [main:49] - GENERATED IS CALL =false
2021-03-11 11:40:58,635 [main:55] - randomType = ZImpl?
2021-03-11 11:40:58,750 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:40:58,751 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:40:58,769 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl[SimpleFunctionDescriptorImpl@13a28a87]
2021-03-11 11:40:58,884 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:58,886 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]
2021-03-11 11:40:59,004 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:40:59,006 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:40:59,008 [main:66] - Generated call from random type = (ZImpl())?.test("slglg").takeLastWhile({a: Char -> true})
2021-03-11 11:40:59,008 [main:94] - GETTING String from String
2021-03-11 11:40:59,041 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-11 11:40:59,041 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-11 11:40:59,167 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:59,169 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceIndent("safaz")
2021-03-11 11:40:59,169 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]]
2021-03-11 11:40:59,169 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]
2021-03-11 11:40:59,319 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:40:59,324 [main:105] - GENERATED CALL = (ZImpl3().test()).removePrefix("wnbag")
2021-03-11 11:40:59,324 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]]
2021-03-11 11:40:59,324 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]
2021-03-11 11:40:59,460 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:40:59,601 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:59,732 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:40:59,734 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceBefore('ኛ', "jgkvp", "qqnfd")
2021-03-11 11:40:59,734 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]]
2021-03-11 11:40:59,734 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:40:59,850 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:59,969 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:40:59,970 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]
2021-03-11 11:41:00,084 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:00,221 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:00,224 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(184765040, 614926374).substring(1928115475, -1881138338)
2021-03-11 11:41:00,224 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]]
2021-03-11 11:41:00,225 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]
2021-03-11 11:41:00,364 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:00,366 [main:105] - GENERATED CALL = (ZImpl3().test()).dropLast(1985518992)
2021-03-11 11:41:00,366 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]]
2021-03-11 11:41:00,366 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]
2021-03-11 11:41:00,490 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:00,492 [main:105] - GENERATED CALL = (ZImpl3().test()).takeLast(-20532694)
2021-03-11 11:41:00,492 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]]
2021-03-11 11:41:00,492 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]
2021-03-11 11:41:00,617 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:41:00,619 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:41:00,621 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceFirstChar({a: Char -> '脣'})
2021-03-11 11:41:00,621 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:41:00,621 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:00,734 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:00,736 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:41:00,850 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:00,851 [main:105] - GENERATED CALL = (ZImpl3().test()).get(529928618).plus("ftjnm")
2021-03-11 11:41:00,852 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]]
2021-03-11 11:41:00,852 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]
2021-03-11 11:41:00,966 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:01,104 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:01,106 [main:105] - GENERATED CALL = (ZImpl3().test()).substringBefore('ﮤ', "nwivg")
2021-03-11 11:41:01,107 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]]
2021-03-11 11:41:01,107 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]
2021-03-11 11:41:01,239 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:01,241 [main:105] - GENERATED CALL = (ZImpl3().test()).trimMargin("kwyqn")
2021-03-11 11:41:01,241 [main:110] - replacement of "\n" of type String is (ZImpl3().test()).trimMargin("kwyqn")
2021-03-11 11:41:01,357 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:01,357 [main:66] - Compilation checking started
2021-03-11 11:41:01,690 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = (ZImpl3().test()).trimMargin("kwyqn")))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:01,691 [main:103] - replacing (let(x), Unit?)
2021-03-11 11:41:01,691 [main:38] - replacing let(x) Unit?
2021-03-11 11:41:01,691 [main:42] - Getting value of type Unit?
2021-03-11 11:41:01,809 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:41:01,931 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:41:01,934 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:41:02,349 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:41:02,351 [main:302] - generating value of type = Function1<Int, Unit> false depth = 3
2021-03-11 11:41:02,353 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:41:02,358 [main:95] - GENERATED = repeat(-1744571102, {a: Int -> println()})
2021-03-11 11:41:02,358 [main:46] - GENERATED VALUE OF TYPE Unit? = repeat(-1744571102, {a: Int -> println()})
2021-03-11 11:41:02,358 [main:49] - GENERATED IS CALL =true
2021-03-11 11:41:02,503 [main:55] - randomType = Long
2021-03-11 11:41:02,615 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:41:02,664 [main:94] - GETTING Unit? from String
2021-03-11 11:41:02,688 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:41:02,688 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:02,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:02,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:02,925 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:41:03,045 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:41:03,047 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:03,170 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:03,172 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:03,445 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:41:03,446 [main:95] - GENERATED = print("glflw")
2021-03-11 11:41:03,448 [main:105] - GENERATED CALL = (ZImpl3().test())?.subSequence(385598532, 1357443479).forEach({a: Char -> print("glflw")})
2021-03-11 11:41:03,448 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:41:03,448 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:41:03,581 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:41:03,583 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:03,708 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:41:03,711 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:41:04,100 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:41:04,102 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:41:04,103 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:41:04,104 [main:95] - GENERATED = check(true, { "caznf"})
2021-03-11 11:41:04,104 [main:105] - GENERATED CALL = (ZImpl3().test())?.forEachIndexed({a: Int, b: Char -> check(true, { "caznf"})})
2021-03-11 11:41:04,104 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:41:04,104 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:41:04,229 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:41:04,231 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:04,351 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:04,353 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:04,649 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:41:04,651 [main:95] - GENERATED = require(false)
2021-03-11 11:41:04,651 [main:105] - GENERATED CALL = (ZImpl3().test())?.forEach({a: Char -> require(false)})
2021-03-11 11:41:04,651 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:41:04,651 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:04,777 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:04,894 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:04,897 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:41:05,030 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:41:05,032 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:05,154 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:05,156 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:05,404 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:41:05,404 [main:95] - GENERATED = println("psvns")
2021-03-11 11:41:05,405 [main:105] - GENERATED CALL = (ZImpl3().test())?.subSequence(1354651289, -1234197308).forEachIndexed({a: Int, b: Char -> println("psvns")})
2021-03-11 11:41:05,405 [main:110] - replacement of let(x) of type Unit? is (ZImpl3().test())?.subSequence(1354651289, -1234197308).forEachIndexed({a: Int, b: Char -> println("psvns")})
2021-03-11 11:41:05,577 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:05,577 [main:66] - Compilation checking started
2021-03-11 11:41:05,935 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.(ZImpl3().test())?.subSequence(1354651289, -1234197308).forEachIndexed({a: Int, b: Char -> println("psvns")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith(method) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:05,936 [main:103] - replacing (method, String)
2021-03-11 11:41:05,936 [main:38] - replacing method String
2021-03-11 11:41:05,936 [main:42] - Getting value of type String
2021-03-11 11:41:06,051 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:06,053 [main:46] - GENERATED VALUE OF TYPE String = "gekle"
2021-03-11 11:41:06,053 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:06,474 [main:55] - randomType = MutableMap<Int, Pair<ZImpl3, Kla0>>?
2021-03-11 11:41:06,475 [main:94] - GETTING String from ZImpl3
2021-03-11 11:41:06,503 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]]
2021-03-11 11:41:06,503 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:06,616 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:06,618 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]
2021-03-11 11:41:06,742 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:41:06,744 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:06,745 [main:105] - GENERATED CALL = (ZImpl3()).test("fxfbg").filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:41:06,746 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7698bf03]]
2021-03-11 11:41:06,746 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:06,879 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:06,881 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7698bf03]
2021-03-11 11:41:06,992 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:07,103 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:07,104 [main:105] - GENERATED CALL = (ZImpl3()).test("qckzf").substringAfter('歊', "kufbs")
2021-03-11 11:41:07,105 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]]
2021-03-11 11:41:07,105 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:07,218 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:07,220 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]
2021-03-11 11:41:07,337 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:07,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:07,457 [main:105] - GENERATED CALL = (ZImpl3()).test("bcrow").substringBeforeLast('몡', "yfsdi")
2021-03-11 11:41:07,457 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]]
2021-03-11 11:41:07,457 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:07,572 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:07,574 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]
2021-03-11 11:41:07,689 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:07,691 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:07,693 [main:105] - GENERATED CALL = (ZImpl3()).test("dejuo").dropLastWhile({a: Char -> false})
2021-03-11 11:41:07,693 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]]
2021-03-11 11:41:07,693 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:07,807 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:07,809 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]
2021-03-11 11:41:07,954 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:07,956 [main:105] - GENERATED CALL = (ZImpl3()).test("phzsf").trimMargin("htyog")
2021-03-11 11:41:07,956 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]]
2021-03-11 11:41:07,956 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:08,091 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:08,094 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]
2021-03-11 11:41:08,210 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:08,212 [main:105] - GENERATED CALL = (ZImpl3()).test("ekpup").substring(-1777943204)
2021-03-11 11:41:08,212 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3137984a]]
2021-03-11 11:41:08,212 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:08,331 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:08,333 [main:137] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3137984a]
2021-03-11 11:41:08,455 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:08,456 [main:105] - GENERATED CALL = (ZImpl3()).test("vhhtm").prependIndent("gafhb")
2021-03-11 11:41:08,457 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ce04085]]
2021-03-11 11:41:08,457 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:08,569 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:08,570 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ce04085]
2021-03-11 11:41:08,687 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:08,689 [main:105] - GENERATED CALL = (ZImpl3()).test("hbxdg").drop(-882984123)
2021-03-11 11:41:08,689 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:41:08,689 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:08,803 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:08,805 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:41:08,919 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:09,073 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:09,075 [main:105] - GENERATED CALL = (ZImpl3()).test("fbcio").padEnd(1242817457, '뢩')
2021-03-11 11:41:09,075 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]]
2021-03-11 11:41:09,075 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:41:09,224 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:09,226 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]
2021-03-11 11:41:09,227 [main:105] - GENERATED CALL = (ZImpl3()).test("jxnwi").trim()
2021-03-11 11:41:09,227 [main:110] - replacement of method of type String is (ZImpl3()).test("phzsf").trimMargin("htyog")
2021-03-11 11:41:09,350 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:09,351 [main:66] - Compilation checking started
2021-03-11 11:41:09,922 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:09,924 [main:103] - replacing (prope3, Result<Any?>)
2021-03-11 11:41:09,924 [main:38] - replacing prope3 Result<Any?>
2021-03-11 11:41:09,924 [main:42] - Getting value of type Result<Any?>
2021-03-11 11:41:10,042 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:41:10,166 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:41:10,170 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:41:10,435 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:41:10,437 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:41:10,438 [main:95] - GENERATED = runCatching<Any?>({ "teotu"})
2021-03-11 11:41:10,438 [main:46] - GENERATED VALUE OF TYPE Result<Any?> = runCatching<Any?>({ "teotu"})
2021-03-11 11:41:10,438 [main:49] - GENERATED IS CALL =true
2021-03-11 11:41:10,586 [main:55] - randomType = Float
2021-03-11 11:41:10,699 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:41:10,759 [main:94] - GETTING Result<Any?> from ZImpl3
2021-03-11 11:41:10,800 [main:94] - GETTING Result<Any?> from String
2021-03-11 11:41:10,833 [main:94] - GETTING Result<Any?> from String
2021-03-11 11:41:10,833 [main:110] - replacement of prope3 of type Result<Any?> is runCatching<Any?>({ "teotu"})
2021-03-11 11:41:10,946 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:41:10,947 [main:66] - Compilation checking started
2021-03-11 11:41:11,625 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:11,626 [main:103] - replacing (prope3, Result<Ty0>)
2021-03-11 11:41:11,626 [main:38] - replacing prope3 Result<Ty0>
2021-03-11 11:41:11,626 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:41:11,756 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:41:11,882 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:41:11,884 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:41:12,138 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:41:12,138 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:41:12,300 [main:55] - randomType = Set<Double>
2021-03-11 11:41:12,302 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:41:12,339 [main:94] - GETTING Result<Ty0> from ZImpl3
2021-03-11 11:41:12,375 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:41:12,375 [main:107] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-11 11:41:12,375 [main:103] - replacing (prope3.exceptionOrNull()?.let(x), Unit?)
2021-03-11 11:41:12,376 [main:38] - replacing prope3.exceptionOrNull()?.let(x) Unit?
2021-03-11 11:41:12,376 [main:42] - Getting value of type Unit?
2021-03-11 11:41:12,499 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:41:12,625 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:12,628 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:12,887 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 11:41:12,889 [main:95] - GENERATED = check(true)
2021-03-11 11:41:12,889 [main:46] - GENERATED VALUE OF TYPE Unit? = check(true)
2021-03-11 11:41:12,889 [main:49] - GENERATED IS CALL =true
2021-03-11 11:41:12,893 [main:55] - randomType = Double
2021-03-11 11:41:13,011 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:41:13,058 [main:94] - GETTING Unit? from String
2021-03-11 11:41:13,083 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:41:13,083 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:13,202 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:13,317 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:13,319 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:41:13,437 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:41:13,439 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:13,556 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:13,559 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:13,857 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:41:13,860 [main:95] - GENERATED = check(false)
2021-03-11 11:41:13,860 [main:105] - GENERATED CALL = (ZImpl3().test())?.subSequence(-688277580, -1402250926).forEachIndexed({a: Int, b: Char -> check(false)})
2021-03-11 11:41:13,861 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:41:13,861 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:41:13,978 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:41:13,980 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:14,099 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:41:14,102 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:41:14,483 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:41:14,485 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:41:14,486 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:41:14,487 [main:95] - GENERATED = require(true, { "gtzmq"})
2021-03-11 11:41:14,487 [main:105] - GENERATED CALL = (ZImpl3().test())?.forEachIndexed({a: Int, b: Char -> require(true, { "gtzmq"})})
2021-03-11 11:41:14,487 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:41:14,487 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:14,600 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:14,717 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:14,719 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:41:14,862 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:41:14,865 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:14,871 [main:105] - GENERATED CALL = (ZImpl3().test())?.subSequence(728625085, 942974569).forEach({a: Char -> println()})
2021-03-11 11:41:14,872 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:41:14,872 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:41:15,012 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:41:15,014 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:15,139 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:15,142 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:15,395 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:41:15,395 [main:95] - GENERATED = println("ykipg")
2021-03-11 11:41:15,395 [main:105] - GENERATED CALL = (ZImpl3().test())?.forEach({a: Char -> println("ykipg")})
2021-03-11 11:41:15,395 [main:110] - replacement of prope3.exceptionOrNull()?.let(x) of type Unit? is (ZImpl3().test())?.forEach({a: Char -> println("ykipg")})
2021-03-11 11:41:15,510 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:41:15,510 [main:66] - Compilation checking started
2021-03-11 11:41:15,846 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (ZImpl3().test())?.forEach({a: Char -> println("ykipg")})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:15,847 [main:103] - replacing (prope5, Int)
2021-03-11 11:41:15,847 [main:38] - replacing prope5 Int
2021-03-11 11:41:15,847 [main:42] - Getting value of type Int
2021-03-11 11:41:15,958 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:15,960 [main:46] - GENERATED VALUE OF TYPE Int = 1094080726
2021-03-11 11:41:15,961 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:15,968 [main:55] - randomType = Kla4
2021-03-11 11:41:16,081 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:41:16,083 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:41:16,093 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:41:16,209 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:16,211 [main:66] - Generated call from random type = (Kla4()).prope6.compareTo(true)
2021-03-11 11:41:16,211 [main:110] - replacement of prope5 of type Int is (Kla4()).prope6.compareTo(true)
2021-03-11 11:41:16,351 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:16,352 [main:66] - Compilation checking started
2021-03-11 11:41:16,699 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"))
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (Kla4()).prope6.compareTo(true)++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:16,706 [main:103] - replacing ("tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n"), String)
2021-03-11 11:41:16,706 [main:38] - replacing "tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n") String
2021-03-11 11:41:16,706 [main:42] - Getting value of type String
2021-03-11 11:41:16,832 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:16,834 [main:46] - GENERATED VALUE OF TYPE String = "jjprn"
2021-03-11 11:41:16,834 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:17,354 [main:55] - randomType = MutableMap<Short?, UShort>
2021-03-11 11:41:17,354 [main:94] - GETTING String from String
2021-03-11 11:41:17,380 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]]
2021-03-11 11:41:17,380 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]
2021-03-11 11:41:17,499 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:17,501 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:17,503 [main:105] - GENERATED CALL = (ZImpl2().test()).takeWhile({a: Char -> false})
2021-03-11 11:41:17,503 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]]
2021-03-11 11:41:17,503 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:17,620 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:17,769 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:17,771 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]
2021-03-11 11:41:17,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:18,010 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:18,012 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1908853088, -3191252).substring(-503150734, 1005593590)
2021-03-11 11:41:18,012 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]]
2021-03-11 11:41:18,012 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:18,122 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:18,235 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:18,237 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]
2021-03-11 11:41:18,348 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:18,350 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1456821690, -366376008).repeat(703447586)
2021-03-11 11:41:18,350 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]]
2021-03-11 11:41:18,351 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]
2021-03-11 11:41:18,351 [main:105] - GENERATED CALL = (ZImpl2().test()).toLowerCase()
2021-03-11 11:41:18,351 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]]
2021-03-11 11:41:18,351 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]
2021-03-11 11:41:18,351 [main:105] - GENERATED CALL = (ZImpl2().test()).trim()
2021-03-11 11:41:18,351 [main:101] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@481660f1]]
2021-03-11 11:41:18,351 [main:137] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@481660f1]
2021-03-11 11:41:18,465 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:18,582 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:18,697 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:18,699 [main:105] - GENERATED CALL = (ZImpl2().test()).replaceAfter('蘥', "rdoyd", "edivu")
2021-03-11 11:41:18,699 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]]
2021-03-11 11:41:18,699 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]
2021-03-11 11:41:18,700 [main:105] - GENERATED CALL = (ZImpl2().test()).trimIndent()
2021-03-11 11:41:18,700 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]]
2021-03-11 11:41:18,700 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]
2021-03-11 11:41:18,812 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:18,814 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:18,816 [main:105] - GENERATED CALL = (ZImpl2().test()).filter({a: Char -> true})
2021-03-11 11:41:18,816 [main:101] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]]
2021-03-11 11:41:18,817 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]
2021-03-11 11:41:18,931 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:19,085 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:19,087 [main:105] - GENERATED CALL = (ZImpl2().test()).padStart(-630660401, '쳡')
2021-03-11 11:41:19,087 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]]
2021-03-11 11:41:19,087 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:19,222 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:19,347 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:19,349 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]
2021-03-11 11:41:19,476 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:41:19,593 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:41:19,596 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:41:19,965 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:41:19,967 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 11:41:19,971 [main:95] - GENERATED = Regex("pfsnz", kotlin.text.RegexOption.MULTILINE)
2021-03-11 11:41:20,082 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:41:20,084 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:41:20,199 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:41:20,201 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:41:20,501 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 11:41:20,506 [main:95] - GENERATED = StringBuilder("luzik")
2021-03-11 11:41:20,506 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(100946704, 1142715317).replace(Regex("pfsnz", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder("luzik")})
2021-03-11 11:41:20,506 [main:110] - replacement of "tail-call optimization hit: method " + method + " has no state-machine " +
                prope4.joinToString(separator = "\n") of type String is "jjprn"
2021-03-11 11:41:20,620 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:41:20,620 [main:66] - Compilation checking started
2021-03-11 11:41:21,199 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:21,201 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 11:41:21,202 [main:38] - replacing it Continuation<Unit>
2021-03-11 11:41:21,202 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:41:21,332 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:41:21,446 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:21,449 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:21,818 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:41:21,937 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:21,939 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:22,228 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:41:22,347 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:22,350 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:22,724 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 11:41:22,845 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:41:22,848 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:41:23,231 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:41:23,351 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:41:23,354 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:41:23,838 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:41:23,838 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:41:23,838 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:23,838 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:23,838 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:23,838 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:41:23,842 [main:55] - randomType = Double
2021-03-11 11:41:23,950 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:41:23,993 [main:94] - GETTING Continuation<Unit> from ZImpl3
2021-03-11 11:41:24,012 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:41:24,033 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:41:24,034 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 11:41:24,034 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:41:24,034 [main:38] - replacing c Continuation<*>
2021-03-11 11:41:24,034 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:41:24,149 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:41:24,273 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:41:24,275 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:41:24,650 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:41:24,763 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:24,765 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:25,055 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:41:25,173 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:25,177 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:25,553 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:25,553 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:25,553 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:41:25,553 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:41:25,819 [main:55] - randomType = Pair<UInt, String>
2021-03-11 11:41:25,940 [main:302] - generating value of type = Pair<UInt, String> false depth = 0
2021-03-11 11:41:26,061 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: UInt, second: String): Pair<UInt, String> = TODO()
2021-03-11 11:41:26,064 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: UInt, second: String): Pair<UInt, String> = TODO()
2021-03-11 11:41:26,194 [main:302] - generating value of type = UInt true depth = 3
2021-03-11 11:41:26,196 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:41:26,198 [main:95] - GENERATED = Pair<UInt, String>(1469028699.toUInt(), "mvpcc")
2021-03-11 11:41:26,215 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:41:26,235 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:41:26,269 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:41:26,269 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:41:26,269 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5, String)
2021-03-11 11:41:26,269 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 String
2021-03-11 11:41:26,269 [main:42] - Getting value of type String
2021-03-11 11:41:26,397 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:26,399 [main:46] - GENERATED VALUE OF TYPE String = "vobeh"
2021-03-11 11:41:26,399 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:27,221 [main:55] - randomType = Function2<Kla2<UInt>, Short, Kla2<Z<Double>>>
2021-03-11 11:41:27,221 [main:94] - GETTING String from String
2021-03-11 11:41:27,243 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]]
2021-03-11 11:41:27,243 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]
2021-03-11 11:41:27,356 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:27,358 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:27,360 [main:105] - GENERATED CALL = (ZImpl3().test()).takeWhile({a: Char -> true})
2021-03-11 11:41:27,360 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b214e34]]
2021-03-11 11:41:27,360 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b214e34]
2021-03-11 11:41:27,478 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:27,590 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:27,715 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:27,717 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceBeforeLast('㴝', "vzfuy", "lhcmy")
2021-03-11 11:41:27,718 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:41:27,718 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:41:27,838 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:41:27,966 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:41:27,969 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:41:28,211 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-11 11:41:28,217 [main:95] - GENERATED = StringBuilder("dwszm")
2021-03-11 11:41:28,355 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:28,357 [main:105] - GENERATED CALL = (ZImpl3().test()).commonPrefixWith(StringBuilder("dwszm"), false)
2021-03-11 11:41:28,357 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7876ffa7]]
2021-03-11 11:41:28,357 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:28,509 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:28,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:28,648 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7876ffa7]
2021-03-11 11:41:28,758 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:41:28,877 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:41:28,880 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:41:29,118 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:41:29,120 [main:95] - GENERATED = Regex("wfbwd")
2021-03-11 11:41:29,233 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:29,235 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1017332848, -1307453676).replaceFirst(Regex("wfbwd"), "upnnk")
2021-03-11 11:41:29,236 [main:101] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@487d40b2]]
2021-03-11 11:41:29,236 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@487d40b2]
2021-03-11 11:41:29,353 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:41:29,473 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:29,475 [main:105] - GENERATED CALL = (ZImpl3().test()).commonSuffixWith("cebhn", true)
2021-03-11 11:41:29,476 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]]
2021-03-11 11:41:29,476 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:29,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:29,588 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]
2021-03-11 11:41:29,588 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-453291850).uppercase()
2021-03-11 11:41:29,588 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a5e750]]
2021-03-11 11:41:29,588 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a5e750]
2021-03-11 11:41:29,728 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:29,865 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:29,867 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceIndentByMargin("ogdta", "ngwus")
2021-03-11 11:41:29,867 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]]
2021-03-11 11:41:29,867 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]
2021-03-11 11:41:29,988 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:29,991 [main:105] - GENERATED CALL = (ZImpl3().test()).dropLast(1301420751)
2021-03-11 11:41:29,991 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]]
2021-03-11 11:41:29,991 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]
2021-03-11 11:41:29,991 [main:105] - GENERATED CALL = (ZImpl3().test()).toLowerCase()
2021-03-11 11:41:29,991 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]]
2021-03-11 11:41:29,991 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]
2021-03-11 11:41:30,105 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:30,107 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:30,109 [main:105] - GENERATED CALL = (ZImpl3().test()).takeLastWhile({a: Char -> false})
2021-03-11 11:41:30,109 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 of type String is ZImpl3().test()
2021-03-11 11:41:30,223 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:30,223 [main:66] - Compilation checking started
2021-03-11 11:41:30,560 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return prope0
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error(ZImpl3().test())
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:30,561 [main:103] - replacing (prope0, String)
2021-03-11 11:41:30,561 [main:38] - replacing prope0 String
2021-03-11 11:41:30,561 [main:42] - Getting value of type String
2021-03-11 11:41:30,677 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:30,679 [main:46] - GENERATED VALUE OF TYPE String = "mvwzf"
2021-03-11 11:41:30,680 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:30,936 [main:55] - randomType = Byte?
2021-03-11 11:41:31,045 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:41:31,085 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:41:31,085 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:41:31,191 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:31,193 [main:66] - Generated call from random type = (25)?.toInt().toString(479978390)
2021-03-11 11:41:31,194 [main:94] - GETTING String from String
2021-03-11 11:41:31,216 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]]
2021-03-11 11:41:31,216 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]
2021-03-11 11:41:31,335 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:31,337 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:31,339 [main:105] - GENERATED CALL = (ZImpl3().test()).filterNot({a: Char -> true})
2021-03-11 11:41:31,339 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ae62e]]
2021-03-11 11:41:31,339 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ae62e]
2021-03-11 11:41:31,455 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:31,570 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:31,681 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:31,683 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceFirst('豪', '鸎', false)
2021-03-11 11:41:31,684 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]]
2021-03-11 11:41:31,684 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]
2021-03-11 11:41:31,792 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:31,794 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:31,796 [main:105] - GENERATED CALL = (ZImpl3().test()).dropWhile({a: Char -> false})
2021-03-11 11:41:31,796 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:41:31,796 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:41:31,906 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:32,018 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:32,020 [main:105] - GENERATED CALL = (ZImpl3().test()).padEnd(674377816, '纣')
2021-03-11 11:41:32,020 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]]
2021-03-11 11:41:32,020 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]
2021-03-11 11:41:32,129 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:32,131 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:32,133 [main:105] - GENERATED CALL = (ZImpl3().test()).filter({a: Char -> true})
2021-03-11 11:41:32,133 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb06d55]]
2021-03-11 11:41:32,133 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb06d55]
2021-03-11 11:41:32,134 [main:105] - GENERATED CALL = (ZImpl3().test()).uppercase()
2021-03-11 11:41:32,134 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]]
2021-03-11 11:41:32,134 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:32,243 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:32,355 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:32,357 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]
2021-03-11 11:41:32,465 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:32,577 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:32,579 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-567827707, -1316284702).substring(-1100732555, -1767476392)
2021-03-11 11:41:32,579 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32057d8e]]
2021-03-11 11:41:32,579 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32057d8e]
2021-03-11 11:41:32,579 [main:105] - GENERATED CALL = (ZImpl3().test()).lowercase()
2021-03-11 11:41:32,579 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]]
2021-03-11 11:41:32,579 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]
2021-03-11 11:41:32,713 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:41:32,847 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:32,849 [main:105] - GENERATED CALL = (ZImpl3().test()).substringBefore('ۿ', "ifnzz")
2021-03-11 11:41:32,850 [main:101] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]]
2021-03-11 11:41:32,850 [main:137] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7645a8e8]
2021-03-11 11:41:32,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:32,975 [main:105] - GENERATED CALL = (ZImpl3().test()).takeLast(360662417)
2021-03-11 11:41:32,975 [main:110] - replacement of prope0 of type String is (25)?.toInt().toString(479978390)
2021-03-11 11:41:33,107 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:33,108 [main:66] - Compilation checking started
2021-03-11 11:41:33,686 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:33,689 [main:103] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-11 11:41:33,689 [main:38] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-11 11:41:33,689 [main:42] - Getting value of type Unit?
2021-03-11 11:41:33,812 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:41:33,941 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:33,944 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:34,205 [main:302] - generating value of type = Any false depth = 3
2021-03-11 11:41:34,205 [main:95] - GENERATED = print("dpjzw")
2021-03-11 11:41:34,205 [main:46] - GENERATED VALUE OF TYPE Unit? = print("dpjzw")
2021-03-11 11:41:34,205 [main:49] - GENERATED IS CALL =true
2021-03-11 11:41:34,210 [main:55] - randomType = Int
2021-03-11 11:41:34,328 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:34,386 [main:94] - GETTING Unit? from String
2021-03-11 11:41:34,419 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:41:34,419 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:34,537 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:34,666 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:34,668 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:41:34,783 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:41:34,785 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:34,907 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:41:34,911 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:41:35,159 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:41:35,161 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:41:35,282 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:41:35,285 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:41:35,655 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:41:35,656 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:41:35,659 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:41:35,659 [main:95] - GENERATED = require(false, { "plpyk"})
2021-03-11 11:41:35,659 [main:95] - GENERATED = contract({ require(false, { "plpyk"})})
2021-03-11 11:41:35,659 [main:105] - GENERATED CALL = (ZImpl2().test())?.subSequence(-2117061075, -1509156618).forEach({a: Char -> contract({ require(false, { "plpyk"})})})
2021-03-11 11:41:35,660 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:41:35,660 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:35,771 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:35,883 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:35,885 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:41:35,996 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:41:35,998 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:36,142 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:36,146 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:41:36,433 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:41:36,433 [main:95] - GENERATED = print("fcdzw")
2021-03-11 11:41:36,433 [main:105] - GENERATED CALL = (ZImpl2().test())?.subSequence(-1077577679, -1137215452).forEachIndexed({a: Int, b: Char -> print("fcdzw")})
2021-03-11 11:41:36,433 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:41:36,434 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:41:36,542 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:41:36,544 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:36,660 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:36,662 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:41:36,899 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:41:36,901 [main:95] - GENERATED = check(true)
2021-03-11 11:41:36,901 [main:105] - GENERATED CALL = (ZImpl2().test())?.forEach({a: Char -> check(true)})
2021-03-11 11:41:36,901 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:41:36,901 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:41:37,015 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:41:37,017 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:41:37,133 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:41:37,136 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:41:37,522 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:41:37,524 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:41:37,526 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:41:37,531 [main:95] - GENERATED = repeat(-1211478417, {a: Int -> println()})
2021-03-11 11:41:37,532 [main:105] - GENERATED CALL = (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> repeat(-1211478417, {a: Int -> println()})})
2021-03-11 11:41:37,532 [main:110] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is (ZImpl2().test())?.subSequence(-1077577679, -1137215452).forEachIndexed({a: Int, b: Char -> print("fcdzw")})
2021-03-11 11:41:37,665 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:37,665 [main:66] - Compilation checking started
2021-03-11 11:41:37,671 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:41:37,671 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) (ZImpl2().test())?.subSequence(-1077577679, -1137215452).forEachIndexed({a: Int, b: Char -> print("fcdzw")})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(prope3.exceptionOrNull()!!)
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:37,673 [main:103] - replacing (prope3.exceptionOrNull()!!, Throwable)
2021-03-11 11:41:37,673 [main:38] - replacing prope3.exceptionOrNull()!! Throwable
2021-03-11 11:41:37,673 [main:42] - Getting value of type Throwable
2021-03-11 11:41:37,798 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:41:37,918 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:41:37,921 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:41:38,296 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:41:38,298 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:41:38,416 [main:43] - GENERATING CALL OF fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:41:38,418 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:41:38,676 [main:302] - generating value of type = Throwable false depth = 6
2021-03-11 11:41:38,685 [main:95] - GENERATED = IllegalArgumentException(CharacterCodingException())
2021-03-11 11:41:38,685 [main:95] - GENERATED = IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException()))
2021-03-11 11:41:38,685 [main:46] - GENERATED VALUE OF TYPE Throwable = IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException()))
2021-03-11 11:41:38,685 [main:49] - GENERATED IS CALL =true
2021-03-11 11:41:39,544 [main:55] - randomType = HashMap<Z<Int>, Map<Int?, Kla2<ZImpl2>>>
2021-03-11 11:41:39,656 [main:302] - generating value of type = HashMap<Z<Int>, Map<Int?, Kla2<ZImpl2>>> false depth = 0
2021-03-11 11:41:39,772 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): HashMap<Z<Int>, Map<Int?, Kla2<ZImpl2>>> = TODO()
2021-03-11 11:41:39,776 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): HashMap<Z<Int>, Map<Int?, Kla2<ZImpl2>>> = TODO()
2021-03-11 11:41:39,897 [main:95] - GENERATED = hashMapOf<Z<Int>, Map<Int?, Kla2<ZImpl2>>>()
2021-03-11 11:41:40,131 [main:94] - GETTING Throwable from ZImpl3
2021-03-11 11:41:40,169 [main:94] - GETTING Throwable from String
2021-03-11 11:41:40,207 [main:94] - GETTING Throwable from String
2021-03-11 11:41:40,207 [main:110] - replacement of prope3.exceptionOrNull()!! of type Throwable is IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException()))
2021-03-11 11:41:40,347 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:41:40,347 [main:66] - Compilation checking started
2021-03-11 11:41:41,014 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:41,017 [main:103] - replacing (true, Boolean)
2021-03-11 11:41:41,017 [main:38] - replacing true Boolean
2021-03-11 11:41:41,017 [main:42] - Getting value of type Boolean
2021-03-11 11:41:41,187 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:41,190 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:41:41,190 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:41,333 [main:55] - randomType = UInt
2021-03-11 11:41:41,448 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:41:41,485 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toFloat(): kotlin.Float defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@436e8e4f]
2021-03-11 11:41:41,486 [main:137] - GENERATING call of type public fun kotlin.Float.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@4b50b976]
2021-03-11 11:41:41,486 [main:66] - Generated call from random type = (1742300971.toUInt()).toFloat().isNaN()
2021-03-11 11:41:41,487 [main:94] - GETTING Boolean from String
2021-03-11 11:41:41,505 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:41:41,505 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:41,616 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:41,738 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:41,740 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:41:41,740 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1247670292, -685705823).any()
2021-03-11 11:41:41,740 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:41:41,741 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:41,854 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:41,972 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:41,974 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:41:41,974 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1848626926, -292742564).isBlank()
2021-03-11 11:41:41,974 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]]
2021-03-11 11:41:41,974 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]
2021-03-11 11:41:42,088 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:42,089 [main:105] - GENERATED CALL = (ZImpl2().test()).length.equals("mattf")
2021-03-11 11:41:42,089 [main:101] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:41:42,089 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:41:42,089 [main:105] - GENERATED CALL = (ZImpl2().test()).any()
2021-03-11 11:41:42,089 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64ca1a]]
2021-03-11 11:41:42,089 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:42,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:42,209 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64ca1a]
2021-03-11 11:41:42,209 [main:105] - GENERATED CALL = (ZImpl2().test()).get(44229555).isLowSurrogate()
2021-03-11 11:41:42,209 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]]
2021-03-11 11:41:42,209 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:42,324 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:42,437 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:42,439 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]
2021-03-11 11:41:42,439 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1739855576, 1836786591).none()
2021-03-11 11:41:42,439 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]]
2021-03-11 11:41:42,439 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:41:42,584 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:42,586 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]
2021-03-11 11:41:42,747 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:42,748 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("gykce").equals("dwycj")
2021-03-11 11:41:42,748 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ae73bf]]
2021-03-11 11:41:42,748 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:42,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:42,866 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ae73bf]
2021-03-11 11:41:42,866 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1088315534).isLetterOrDigit()
2021-03-11 11:41:42,866 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:41:42,866 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:42,978 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:42,979 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:41:42,979 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("xzbpc").not()
2021-03-11 11:41:42,979 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:41:42,979 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:43,094 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:43,094 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:41:43,211 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:43,211 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("nwjnz").equals("tnnny")
2021-03-11 11:41:43,211 [main:110] - replacement of true of type Boolean is (ZImpl2().test()).equals("nwjnz").equals("tnnny")
2021-03-11 11:41:43,326 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:43,326 [main:66] - Compilation checking started
2021-03-11 11:41:43,669 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = (ZImpl2().test()).equals("nwjnz").equals("tnnny")) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:43,670 [main:103] - replacing (it, Continuation<Unit>)
2021-03-11 11:41:43,671 [main:38] - replacing it Continuation<Unit>
2021-03-11 11:41:43,671 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:41:43,783 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:41:43,904 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:43,907 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:44,312 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:41:44,428 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:44,431 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:44,687 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:41:44,810 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:44,813 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:45,181 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 11:41:45,303 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:41:45,306 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:41:45,672 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 12
2021-03-11 11:41:45,854 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:41:45,856 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:41:46,262 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:41:46,262 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:41:46,262 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:46,262 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:46,262 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:46,262 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:41:46,266 [main:55] - randomType = Int
2021-03-11 11:41:46,375 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:46,417 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:41:46,438 [main:94] - GETTING Continuation<Unit> from ZImpl3
2021-03-11 11:41:46,461 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:41:46,461 [main:107] - Cant find and generate replacement for it type Continuation<Unit>
2021-03-11 11:41:46,461 [main:103] - replacing (it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true, Boolean)
2021-03-11 11:41:46,461 [main:38] - replacing it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true Boolean
2021-03-11 11:41:46,461 [main:42] - Getting value of type Boolean
2021-03-11 11:41:46,570 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:46,571 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:41:46,572 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:46,575 [main:55] - randomType = Boolean
2021-03-11 11:41:46,693 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:46,709 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:41:46,709 [main:66] - Generated call from random type = (false).not()
2021-03-11 11:41:46,710 [main:94] - GETTING Boolean from String
2021-03-11 11:41:46,741 [main:101] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:41:46,741 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:41:46,742 [main:105] - GENERATED CALL = (ZImpl2().test()).any()
2021-03-11 11:41:46,742 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]]
2021-03-11 11:41:46,742 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]
2021-03-11 11:41:46,742 [main:105] - GENERATED CALL = (ZImpl2().test()).isNotEmpty()
2021-03-11 11:41:46,742 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]]
2021-03-11 11:41:46,742 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:46,853 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:46,968 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:46,970 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]
2021-03-11 11:41:46,970 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1147530246, 1967455194).isNotEmpty()
2021-03-11 11:41:46,970 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:41:46,970 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:47,084 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:47,084 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("wtupm")
2021-03-11 11:41:47,084 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]]
2021-03-11 11:41:47,084 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:47,198 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:47,311 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:47,314 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]
2021-03-11 11:41:47,454 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:47,456 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:47,459 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-96184795, -1308534977).all({a: Char -> false})
2021-03-11 11:41:47,459 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:41:47,459 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:47,570 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:47,683 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:47,685 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:41:47,685 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(333529818, 1068040653).isBlank()
2021-03-11 11:41:47,685 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]]
2021-03-11 11:41:47,685 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]
2021-03-11 11:41:47,806 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:47,808 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:47,810 [main:105] - GENERATED CALL = (ZImpl2().test()).all({a: Char -> false})
2021-03-11 11:41:47,810 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]]
2021-03-11 11:41:47,810 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:47,924 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:47,927 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]
2021-03-11 11:41:47,927 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-538299721).isISOControl()
2021-03-11 11:41:47,927 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:41:47,927 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:48,043 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:48,043 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:41:48,044 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("aahxm").not()
2021-03-11 11:41:48,044 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]]
2021-03-11 11:41:48,044 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]
2021-03-11 11:41:48,155 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:48,156 [main:105] - GENERATED CALL = (ZImpl2().test()).length.equals("yhbmb")
2021-03-11 11:41:48,156 [main:110] - replacement of it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true of type Boolean is (ZImpl2().test()).any()
2021-03-11 11:41:48,269 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:48,269 [main:66] - Compilation checking started
2021-03-11 11:41:48,604 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { (ZImpl2().test()).any() }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:48,606 [main:103] - replacing (false, Boolean)
2021-03-11 11:41:48,606 [main:38] - replacing false Boolean
2021-03-11 11:41:48,606 [main:42] - Getting value of type Boolean
2021-03-11 11:41:48,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:48,728 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:41:48,728 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:49,384 [main:55] - randomType = MutableMap<UShort?, ArrayList<String>>
2021-03-11 11:41:49,385 [main:94] - GETTING Boolean from String
2021-03-11 11:41:49,406 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]]
2021-03-11 11:41:49,406 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]
2021-03-11 11:41:49,406 [main:105] - GENERATED CALL = (ZImpl2().test()).isNotBlank()
2021-03-11 11:41:49,406 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ae73bf]]
2021-03-11 11:41:49,406 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:49,516 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:49,518 [main:137] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@17ae73bf]
2021-03-11 11:41:49,518 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1354438114).isLetterOrDigit()
2021-03-11 11:41:49,518 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:41:49,518 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:49,628 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:49,628 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:41:49,738 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:49,738 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("egafg").equals("lhgqa")
2021-03-11 11:41:49,738 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]]
2021-03-11 11:41:49,738 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:41:49,850 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:49,852 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]
2021-03-11 11:41:49,965 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:49,965 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("dvlma").equals("ivmur")
2021-03-11 11:41:49,965 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6407f81d]]
2021-03-11 11:41:49,965 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:50,075 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:50,077 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6407f81d]
2021-03-11 11:41:50,078 [main:105] - GENERATED CALL = (ZImpl2().test()).get(717539109).isLetter()
2021-03-11 11:41:50,078 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]]
2021-03-11 11:41:50,078 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:50,186 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:50,298 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:50,300 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]
2021-03-11 11:41:50,300 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1108582712, -498697007).isNotEmpty()
2021-03-11 11:41:50,300 [main:101] - Case = [public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:41:50,300 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:41:50,300 [main:105] - GENERATED CALL = (ZImpl2().test()).isBlank()
2021-03-11 11:41:50,300 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]]
2021-03-11 11:41:50,300 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:50,409 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:50,525 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:50,528 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]
2021-03-11 11:41:50,528 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-939762699, -1225460703).isEmpty()
2021-03-11 11:41:50,528 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]]
2021-03-11 11:41:50,528 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:50,644 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:50,646 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]
2021-03-11 11:41:50,646 [main:105] - GENERATED CALL = (ZImpl2().test()).get(615151877).isISOControl()
2021-03-11 11:41:50,646 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:41:50,646 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:50,788 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:50,788 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("bdkqz")
2021-03-11 11:41:50,788 [main:110] - replacement of false of type Boolean is (ZImpl2().test()).get(-1354438114).isLetterOrDigit()
2021-03-11 11:41:50,921 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:50,921 [main:66] - Compilation checking started
2021-03-11 11:41:51,301 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = (ZImpl2().test()).get(-1354438114).isLetterOrDigit()
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:51,303 [main:103] - replacing (prope3, Result<Ty0>)
2021-03-11 11:41:51,303 [main:38] - replacing prope3 Result<Ty0>
2021-03-11 11:41:51,303 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:41:51,420 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:41:51,539 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:41:51,542 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:41:51,794 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:41:51,794 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:41:52,181 [main:55] - randomType = Sequence<ULong?>
2021-03-11 11:41:52,183 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:41:52,216 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:41:52,218 [main:94] - GETTING Result<Ty0> from ZImpl3
2021-03-11 11:41:52,249 [main:107] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-11 11:41:52,249 [main:103] - replacing (prope6, Boolean)
2021-03-11 11:41:52,249 [main:38] - replacing prope6 Boolean
2021-03-11 11:41:52,249 [main:42] - Getting value of type Boolean
2021-03-11 11:41:52,366 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:52,368 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:41:52,368 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:52,499 [main:55] - randomType = ZImpl2?
2021-03-11 11:41:52,615 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:41:52,617 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:41:52,632 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl2[DeserializedSimpleFunctionDescriptor@4e7dd301]
2021-03-11 11:41:52,768 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:52,769 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:41:52,882 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:52,882 [main:66] - Generated call from random type = (ZImpl2())?.equals("wfela").equals("wufdk")
2021-03-11 11:41:52,883 [main:94] - GETTING Boolean from String
2021-03-11 11:41:52,913 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d81a1dd]]
2021-03-11 11:41:52,913 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:53,030 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:53,032 [main:137] - GENERATING call of type public fun kotlin.Char.isDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5d81a1dd]
2021-03-11 11:41:53,033 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1715142379).isDigit()
2021-03-11 11:41:53,033 [main:101] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3c82c0]]
2021-03-11 11:41:53,033 [main:137] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3c82c0]
2021-03-11 11:41:53,143 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:53,146 [main:105] - GENERATED CALL = (ZImpl2().test()).hasSurrogatePairAt(-158061308)
2021-03-11 11:41:53,146 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:41:53,146 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:41:53,258 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:53,372 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:53,374 [main:105] - GENERATED CALL = (ZImpl2().test()).endsWith("hglbw", false)
2021-03-11 11:41:53,374 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]]
2021-03-11 11:41:53,374 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:53,484 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:53,598 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:53,600 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]
2021-03-11 11:41:53,600 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-911852024, 484170721).isNotBlank()
2021-03-11 11:41:53,600 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]]
2021-03-11 11:41:53,601 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]
2021-03-11 11:41:53,601 [main:105] - GENERATED CALL = (ZImpl2().test()).isNotBlank()
2021-03-11 11:41:53,601 [main:101] - Case = [public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:41:53,601 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:41:53,601 [main:105] - GENERATED CALL = (ZImpl2().test()).any()
2021-03-11 11:41:53,601 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]]
2021-03-11 11:41:53,601 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]
2021-03-11 11:41:53,712 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:53,713 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:53,715 [main:105] - GENERATED CALL = (ZImpl2().test()).all({a: Char -> false})
2021-03-11 11:41:53,716 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:41:53,716 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:53,831 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:53,831 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:41:53,947 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:53,949 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("zsfyz").or(true)
2021-03-11 11:41:53,949 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]]
2021-03-11 11:41:53,949 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:54,060 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:54,062 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]
2021-03-11 11:41:54,062 [main:105] - GENERATED CALL = (ZImpl2().test()).get(1849912685).isTitleCase()
2021-03-11 11:41:54,062 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:41:54,062 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:41:54,178 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:41:54,299 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:54,301 [main:105] - GENERATED CALL = (ZImpl2().test()).startsWith("nohii", true)
2021-03-11 11:41:54,301 [main:110] - replacement of prope6 of type Boolean is (ZImpl2().test()).equals("zsfyz").or(true)
2021-03-11 11:41:54,432 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:54,432 [main:66] - Compilation checking started
2021-03-11 11:41:54,964 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        (ZImpl2().test()).equals("zsfyz").or(true) = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:54,966 [main:103] - replacing (prope3, Any?)
2021-03-11 11:41:54,966 [main:38] - replacing prope3 Any?
2021-03-11 11:41:54,966 [main:42] - Getting value of type Any?
2021-03-11 11:41:55,083 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:55,083 [main:46] - GENERATED VALUE OF TYPE Any? = "whnpp"
2021-03-11 11:41:55,083 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:55,208 [main:55] - randomType = Short
2021-03-11 11:41:55,317 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:41:55,375 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:41:55,394 [main:94] - GETTING Any? from String
2021-03-11 11:41:55,417 [main:94] - GETTING Any? from String
2021-03-11 11:41:55,417 [main:110] - replacement of prope3 of type Any? is "whnpp"
2021-03-11 11:41:55,529 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:41:55,529 [main:66] - Compilation checking started
2021-03-11 11:41:55,871 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this."whnpp" = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:55,873 [main:103] - replacing (prope6, Boolean)
2021-03-11 11:41:55,873 [main:38] - replacing prope6 Boolean
2021-03-11 11:41:55,873 [main:42] - Getting value of type Boolean
2021-03-11 11:41:55,986 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:41:55,988 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:41:55,988 [main:49] - GENERATED IS CALL =false
2021-03-11 11:41:56,263 [main:55] - randomType = List<Float>
2021-03-11 11:41:56,264 [main:94] - GETTING Boolean from String
2021-03-11 11:41:56,285 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:41:56,285 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:56,395 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:56,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:56,510 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:41:56,510 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1254040453, -368148587).isBlank()
2021-03-11 11:41:56,511 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]]
2021-03-11 11:41:56,511 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:56,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:56,735 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:56,737 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]
2021-03-11 11:41:56,847 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:41:56,848 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:41:56,850 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1946811788, -311093183).all({a: Char -> false})
2021-03-11 11:41:56,851 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]]
2021-03-11 11:41:56,851 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:56,961 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:56,963 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]
2021-03-11 11:41:56,964 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1023168345).isDefined()
2021-03-11 11:41:56,964 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@13bfd6]]
2021-03-11 11:41:56,964 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:41:57,073 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:57,213 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:57,215 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@13bfd6]
2021-03-11 11:41:57,337 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:57,338 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(115247478, 94578697).equals("xkrps")
2021-03-11 11:41:57,338 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6407f81d]]
2021-03-11 11:41:57,338 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:57,461 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:57,463 [main:137] - GENERATING call of type public fun kotlin.Char.isLetter(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6407f81d]
2021-03-11 11:41:57,463 [main:105] - GENERATED CALL = (ZImpl2().test()).get(1259076695).isLetter()
2021-03-11 11:41:57,464 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@524c6b0f]]
2021-03-11 11:41:57,464 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:57,578 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:57,580 [main:137] - GENERATING call of type public fun kotlin.Char.isUpperCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@524c6b0f]
2021-03-11 11:41:57,581 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-397895297).isUpperCase()
2021-03-11 11:41:57,581 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:41:57,581 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:57,696 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:57,696 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("ewmlu")
2021-03-11 11:41:57,696 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]]
2021-03-11 11:41:57,696 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]
2021-03-11 11:41:57,696 [main:105] - GENERATED CALL = (ZImpl2().test()).isEmpty()
2021-03-11 11:41:57,696 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]]
2021-03-11 11:41:57,696 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:41:57,804 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:41:57,806 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]
2021-03-11 11:41:57,807 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-435821657).isTitleCase()
2021-03-11 11:41:57,807 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:41:57,807 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:41:57,916 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:57,917 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:41:58,026 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:41:58,026 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("wdmba").equals("uxsec")
2021-03-11 11:41:58,026 [main:110] - replacement of prope6 of type Boolean is (ZImpl2().test()).get(-397895297).isUpperCase()
2021-03-11 11:41:58,136 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:41:58,136 [main:66] - Compilation checking started
2021-03-11 11:41:58,480 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !(ZImpl2().test()).get(-397895297).isUpperCase()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:41:58,481 [main:103] - replacing (c, Continuation<Unit>)
2021-03-11 11:41:58,481 [main:38] - replacing c Continuation<Unit>
2021-03-11 11:41:58,481 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:41:58,617 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:41:58,760 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:58,763 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:41:59,133 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:41:59,247 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:59,249 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:41:59,486 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:41:59,648 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:41:59,651 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:00,069 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 11:42:00,192 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:00,195 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:00,565 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:00,565 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:00,565 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:00,565 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:42:00,565 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:42:00,572 [main:55] - randomType = ZImpl3
2021-03-11 11:42:00,684 [main:302] - generating value of type = ZImpl3 false depth = 0
2021-03-11 11:42:00,686 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}
2021-03-11 11:42:00,704 [main:94] - GETTING Continuation<Unit> from ZImpl3
2021-03-11 11:42:00,728 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:42:00,751 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:42:00,751 [main:107] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 11:42:00,751 [main:103] - replacing ({ it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true }, Function0<Boolean>)
2021-03-11 11:42:00,751 [main:38] - replacing { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } Function0<Boolean>
2021-03-11 11:42:00,751 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 11:42:00,894 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 11:42:00,897 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:00,900 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { false}
2021-03-11 11:42:00,900 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:01,073 [main:55] - randomType = Long
2021-03-11 11:42:01,195 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:42:01,243 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:42:01,265 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:42:01,266 [main:94] - GETTING Function0<Boolean> from ZImpl3
2021-03-11 11:42:01,288 [main:110] - replacement of { it?.methodName?.startsWith((0.5123005434433032).toChar().lowercase()) == true } of type Function0<Boolean> is { false}
2021-03-11 11:42:01,403 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:42:01,403 [main:66] - Compilation checking started
2021-03-11 11:42:01,956 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        runCatching<Any?>({ "teotu"}).getOrThrow()
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:01,958 [main:103] - replacing (runCatching<Any?>({ "teotu"}).getOrThrow(), Any?)
2021-03-11 11:42:01,958 [main:38] - replacing runCatching<Any?>({ "teotu"}).getOrThrow() Any?
2021-03-11 11:42:01,958 [main:42] - Getting value of type Any?
2021-03-11 11:42:02,087 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:02,087 [main:46] - GENERATED VALUE OF TYPE Any? = "iwgiw"
2021-03-11 11:42:02,087 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:02,217 [main:55] - randomType = Char
2021-03-11 11:42:02,329 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:02,352 [main:94] - GETTING Any? from String
2021-03-11 11:42:02,373 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:42:02,396 [main:94] - GETTING Any? from String
2021-03-11 11:42:02,396 [main:110] - replacement of runCatching<Any?>({ "teotu"}).getOrThrow() of type Any? is "iwgiw"
2021-03-11 11:42:02,521 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:42:02,522 [main:66] - Compilation checking started
2021-03-11 11:42:03,059 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:03,061 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 11:42:03,062 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 11:42:03,062 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 11:42:03,195 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 11:42:03,196 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:42:03,311 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:42:03,314 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:42:03,670 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:42:03,672 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:42:03,675 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:42:03,675 [main:95] - GENERATED = check(true, { "eifrk"})
2021-03-11 11:42:03,676 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true, { "eifrk"})}
2021-03-11 11:42:03,676 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:03,921 [main:55] - randomType = Long?
2021-03-11 11:42:04,027 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:42:04,069 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 11:42:04,092 [main:94] - GETTING SuspendFunction0<Unit> from ZImpl3
2021-03-11 11:42:04,112 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 11:42:04,112 [main:110] - replacement of c of type SuspendFunction0<Unit> is { check(true, { "eifrk"})}
2021-03-11 11:42:04,241 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:42:04,242 [main:66] - Compilation checking started
2021-03-11 11:42:04,622 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}

fun fu1(c: suspend () -> Unit) {
    { check(true, { "eifrk"})}.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:04,624 [main:103] - replacing ({
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
}, Function1<Continuation<Unit>, Any?>)
2021-03-11 11:42:04,625 [main:38] - replacing {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
} Function1<Continuation<Unit>, Any?>
2021-03-11 11:42:04,625 [main:42] - Getting value of type Function1<Continuation<Unit>, Any?>
2021-03-11 11:42:04,746 [main:302] - generating value of type = Function1<Continuation<Unit>, Any?> false depth = 0
2021-03-11 11:42:04,748 [main:302] - generating value of type = Any false depth = 1
2021-03-11 11:42:04,748 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Any?> = {a: Continuation<Unit> -> "vdxyn"}
2021-03-11 11:42:04,749 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:04,752 [main:55] - randomType = String
2021-03-11 11:42:04,865 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:04,900 [main:94] - GETTING Function1<Continuation<Unit>, Any?> from String
2021-03-11 11:42:04,932 [main:94] - GETTING Function1<Continuation<Unit>, Any?> from ZImpl3
2021-03-11 11:42:04,955 [main:94] - GETTING Function1<Continuation<Unit>, Any?> from String
2021-03-11 11:42:04,955 [main:110] - replacement of {
    prope0 = "OK"
    it.resume(Unit)
    COROUTINE_SUSPENDED
} of type Function1<Continuation<Unit>, Any?> is {a: Continuation<Unit> -> "vdxyn"}
2021-03-11 11:42:05,065 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:42:05,066 [main:66] - Compilation checking started
2021-03-11 11:42:05,582 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = {}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:05,584 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 11:42:05,584 [main:38] - replacing {} Function0<Unit>
2021-03-11 11:42:05,584 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:42:05,716 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:42:05,718 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:42:05,839 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:42:05,843 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:42:06,108 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:42:06,110 [main:95] - GENERATED = require(true)
2021-03-11 11:42:06,110 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:42:06,110 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:06,250 [main:55] - randomType = Kla3?
2021-03-11 11:42:06,362 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 11:42:06,364 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}
2021-03-11 11:42:06,371 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:42:06,406 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:42:06,438 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:42:06,438 [main:110] - replacement of {} of type Function0<Unit> is { require(true)}
2021-03-11 11:42:06,546 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:42:06,547 [main:66] - Compilation checking started
2021-03-11 11:42:07,050 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && !prope6) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:07,051 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:42:07,051 [main:38] - replacing c Continuation<*>
2021-03-11 11:42:07,051 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:42:07,163 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:42:07,275 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:42:07,278 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:42:07,640 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:42:07,781 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:07,784 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:08,032 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:42:08,149 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:08,152 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:08,519 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 11:42:08,636 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:08,639 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:09,015 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:42:09,208 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:09,212 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:09,610 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 15
2021-03-11 11:42:09,726 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:09,728 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:10,094 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:10,095 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:10,095 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:10,095 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:10,095 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:10,095 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:42:10,095 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:42:10,099 [main:55] - randomType = Int
2021-03-11 11:42:10,215 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:10,266 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:42:10,296 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:42:10,296 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:42:10,326 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:42:10,326 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:42:10,326 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:42:10,326 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:42:10,440 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:42:10,445 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:42:10,729 [main:55] - randomType = Long?
2021-03-11 11:42:10,860 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:42:10,925 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:42:10,953 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:42:10,975 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:42:10,976 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:42:10,976 [main:103] - replacing (!prope6, Boolean)
2021-03-11 11:42:10,976 [main:38] - replacing !prope6 Boolean
2021-03-11 11:42:10,976 [main:42] - Getting value of type Boolean
2021-03-11 11:42:11,083 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:11,085 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:42:11,085 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:11,204 [main:55] - randomType = UInt
2021-03-11 11:42:11,313 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:42:11,359 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@68b390ae]
2021-03-11 11:42:11,360 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@7199b0d3]
2021-03-11 11:42:11,478 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:11,478 [main:66] - Generated call from random type = (815532721.toUInt()).toUShort().equals("gyzwz")
2021-03-11 11:42:11,479 [main:94] - GETTING Boolean from ZImpl3
2021-03-11 11:42:11,512 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:42:11,512 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:11,630 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:11,632 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:42:11,746 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:11,746 [main:105] - GENERATED CALL = (ZImpl3()).test("mlfjn").equals("glzji")
2021-03-11 11:42:11,746 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]]
2021-03-11 11:42:11,746 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:11,859 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:11,861 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]
2021-03-11 11:42:11,862 [main:105] - GENERATED CALL = (ZImpl3()).test("wircy").toBoolean()
2021-03-11 11:42:11,862 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:42:11,862 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:11,996 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:11,997 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:42:12,115 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:12,115 [main:105] - GENERATED CALL = (ZImpl3()).equals("audwt").equals("bvplz")
2021-03-11 11:42:12,115 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:42:12,115 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:12,240 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:12,243 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:42:12,362 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:12,483 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:12,485 [main:105] - GENERATED CALL = (ZImpl3()).test("vzcoj").startsWith("qbcty", true)
2021-03-11 11:42:12,485 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:42:12,485 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:12,601 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:12,602 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:42:12,709 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:12,711 [main:105] - GENERATED CALL = (ZImpl3()).equals("lapqu").xor(true)
2021-03-11 11:42:12,711 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]]
2021-03-11 11:42:12,711 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:12,819 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:12,819 [main:105] - GENERATED CALL = (ZImpl3()).equals("offbf")
2021-03-11 11:42:12,819 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:42:12,819 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:12,935 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:12,936 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:42:13,044 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:13,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:13,191 [main:105] - GENERATED CALL = (ZImpl3()).test("aqerg").endsWith("cfsss", true)
2021-03-11 11:42:13,192 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]]
2021-03-11 11:42:13,192 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:13,318 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:13,320 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]
2021-03-11 11:42:13,445 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:13,447 [main:105] - GENERATED CALL = (ZImpl3()).test("qmxjx").matches("pxyab")
2021-03-11 11:42:13,447 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:42:13,447 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:13,558 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:13,558 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:42:13,666 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:13,668 [main:105] - GENERATED CALL = (ZImpl3()).equals("gacxs").and(false)
2021-03-11 11:42:13,669 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:42:13,669 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:13,776 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:13,776 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:42:13,886 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:13,888 [main:105] - GENERATED CALL = (ZImpl3()).equals("sgnuy").or(true)
2021-03-11 11:42:13,888 [main:110] - replacement of !prope6 of type Boolean is (ZImpl3()).equals("offbf")
2021-03-11 11:42:13,997 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:13,998 [main:66] - Compilation checking started
2021-03-11 11:42:14,523 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu6(it)
    }

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:14,525 [main:103] - replacing ({
        fu6(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:42:14,525 [main:38] - replacing {
        fu6(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:42:14,525 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:42:14,647 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:42:14,649 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:42:14,785 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:42:14,788 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:42:15,065 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:42:15,066 [main:95] - GENERATED = print("qabby")
2021-03-11 11:42:15,066 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> print("qabby")}
2021-03-11 11:42:15,066 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:15,801 [main:55] - randomType = LinkedHashSet<Triple<Float, UByte, UInt?>>
2021-03-11 11:42:15,907 [main:302] - generating value of type = LinkedHashSet<Triple<Float, UByte, UInt?>> false depth = 0
2021-03-11 11:42:16,041 [main:43] - GENERATING CALL OF fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Triple<Float, UByte, UInt?>> = TODO()
2021-03-11 11:42:16,044 [main:61] - WITHOUT TYPE PARAMS = fun <E> LinkedHashSet(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): LinkedHashSet<Triple<Float, UByte, UInt?>> = TODO()
2021-03-11 11:42:16,427 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:42:16,429 [main:302] - generating value of type = Float true depth = 3
2021-03-11 11:42:16,431 [main:95] - GENERATED = LinkedHashSet<Triple<Float, UByte, UInt?>>(-1475935183, 0.9916756f)
2021-03-11 11:42:16,629 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:42:16,654 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:42:16,656 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ZImpl3
2021-03-11 11:42:16,682 [main:110] - replacement of {
        fu6(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> print("qabby")}
2021-03-11 11:42:16,788 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:42:16,788 [main:66] - Compilation checking started
2021-03-11 11:42:17,286 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:17,287 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:42:17,287 [main:38] - replacing c Continuation<*>
2021-03-11 11:42:17,288 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:42:17,414 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:42:17,534 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:42:17,537 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:42:17,924 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:42:18,037 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:18,041 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:18,282 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:42:18,396 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:18,399 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:18,772 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 9
2021-03-11 11:42:18,887 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:18,890 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:19,311 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:42:19,443 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:19,446 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:19,807 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-11 11:42:19,919 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:19,922 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:20,277 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:20,277 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:42:20,277 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:42:20,277 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:20,277 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:20,277 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:42:20,277 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:42:20,971 [main:55] - randomType = Pair<Byte?, UShort>?
2021-03-11 11:42:21,079 [main:302] - generating value of type = Pair<Byte?, UShort> false depth = 0
2021-03-11 11:42:21,191 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Byte?, second: UShort): Pair<Byte?, UShort> = TODO()
2021-03-11 11:42:21,194 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Byte?, second: UShort): Pair<Byte?, UShort> = TODO()
2021-03-11 11:42:21,313 [main:302] - generating value of type = UShort true depth = 3
2021-03-11 11:42:21,315 [main:95] - GENERATED = Pair<Byte?, UShort>(null, 24213.toUShort())
2021-03-11 11:42:21,335 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:42:21,372 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:42:21,373 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:42:21,405 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:42:21,405 [main:103] - replacing (this.prope3, Any?)
2021-03-11 11:42:21,405 [main:38] - replacing this.prope3 Any?
2021-03-11 11:42:21,406 [main:42] - Getting value of type Any?
2021-03-11 11:42:21,519 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:21,519 [main:46] - GENERATED VALUE OF TYPE Any? = "dtiim"
2021-03-11 11:42:21,519 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:21,786 [main:55] - randomType = Z<Int?>
2021-03-11 11:42:21,787 [main:94] - GETTING Any? from String
2021-03-11 11:42:21,815 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:42:21,842 [main:94] - GETTING Any? from String
2021-03-11 11:42:21,842 [main:110] - replacement of this.prope3 of type Any? is "dtiim"
2021-03-11 11:42:21,958 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:42:21,958 [main:66] - Compilation checking started
2021-03-11 11:42:22,293 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        "dtiim" = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = {
            prope2.prope6 = true
        }
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:22,295 [main:103] - replacing ({
            prope2.prope6 = true
        }, Function0<Unit>)
2021-03-11 11:42:22,295 [main:38] - replacing {
            prope2.prope6 = true
        } Function0<Unit>
2021-03-11 11:42:22,295 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:42:22,429 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:42:22,431 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:42:22,557 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:42:22,562 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:42:22,950 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:42:22,953 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:42:22,955 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:42:22,955 [main:95] - GENERATED = check(false, { "yoymv"})
2021-03-11 11:42:22,955 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "yoymv"})}
2021-03-11 11:42:22,955 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:23,094 [main:55] - randomType = ZImpl?
2021-03-11 11:42:23,207 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:42:23,209 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:42:23,225 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:42:23,252 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:42:23,275 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:42:23,275 [main:110] - replacement of {
            prope2.prope6 = true
        } of type Function0<Unit> is { check(false, { "yoymv"})}
2021-03-11 11:42:23,394 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:42:23,395 [main:66] - Compilation checking started
2021-03-11 11:42:24,030 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:24,031 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:42:24,031 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:42:24,031 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:42:24,147 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:42:24,152 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:42:24,696 [main:55] - randomType = MutableMap<Long, Kla5?>
2021-03-11 11:42:24,697 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:42:24,731 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:42:24,761 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:42:24,761 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:42:24,761 [main:103] - replacing (c, Continuation<Unit>)
2021-03-11 11:42:24,761 [main:38] - replacing c Continuation<Unit>
2021-03-11 11:42:24,761 [main:42] - Getting value of type Continuation<Unit>
2021-03-11 11:42:24,874 [main:302] - generating value of type = Continuation<Unit> false depth = 0
2021-03-11 11:42:24,993 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:42:24,995 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:42:25,411 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:42:25,563 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:25,566 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:25,862 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:42:25,985 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:25,988 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:26,390 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:42:26,390 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:42:26,390 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Unit>)->kotlin.Unit): Contuation<Unit> = TODO()
2021-03-11 11:42:26,390 [main:46] - GENERATED VALUE OF TYPE Continuation<Unit> = 
2021-03-11 11:42:28,069 [main:55] - randomType = Map<Z<Byte>, Function2<ArrayDeque<HashMap<Kla2<String>, Kla3>>, Double, Set<String?>>>
2021-03-11 11:42:28,071 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:42:28,117 [main:94] - GETTING Continuation<Unit> from ZImpl3
2021-03-11 11:42:28,152 [main:94] - GETTING Continuation<Unit> from String
2021-03-11 11:42:28,152 [main:107] - Cant find and generate replacement for c type Continuation<Unit>
2021-03-11 11:42:28,152 [main:103] - replacing (prope5, Int)
2021-03-11 11:42:28,152 [main:38] - replacing prope5 Int
2021-03-11 11:42:28,152 [main:42] - Getting value of type Int
2021-03-11 11:42:28,273 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:28,275 [main:46] - GENERATED VALUE OF TYPE Int = 1240840121
2021-03-11 11:42:28,275 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:28,662 [main:55] - randomType = Double?
2021-03-11 11:42:28,834 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:42:28,911 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:42:28,911 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4007799d]
2021-03-11 11:42:29,022 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:29,025 [main:66] - Generated call from random type = (0.5909656602410764)?.toInt().minus(105)
2021-03-11 11:42:29,026 [main:94] - GETTING Int from String
2021-03-11 11:42:29,048 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bfeaa61]]
2021-03-11 11:42:29,048 [main:137] - GENERATING call of type public final operator fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@bfeaa61]
2021-03-11 11:42:29,159 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:29,162 [main:105] - GENERATED CALL = (ZImpl2().test()).length.compareTo(28)
2021-03-11 11:42:29,162 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96eed19]]
2021-03-11 11:42:29,162 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96eed19]
2021-03-11 11:42:29,282 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:29,284 [main:105] - GENERATED CALL = (ZImpl2().test()).length.plus(-81)
2021-03-11 11:42:29,284 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23e9bc96]]
2021-03-11 11:42:29,284 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:29,408 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:29,410 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23e9bc96]
2021-03-11 11:42:29,410 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("tegcz").countLeadingZeroBits()
2021-03-11 11:42:29,410 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ff67f85]]
2021-03-11 11:42:29,410 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1ff67f85]
2021-03-11 11:42:29,523 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:29,525 [main:105] - GENERATED CALL = (ZImpl2().test()).length.xor(-1283415544)
2021-03-11 11:42:29,525 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71ae3dc0]]
2021-03-11 11:42:29,525 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:42:29,634 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:29,744 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:29,746 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71ae3dc0]
2021-03-11 11:42:29,898 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 11:42:29,900 [main:302] - generating value of type = Int true depth = 1
2021-03-11 11:42:30,062 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1509021219, -147885962).sumOf({a: Char -> 1089181932})
2021-03-11 11:42:30,062 [main:101] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4808fdf1]]
2021-03-11 11:42:30,063 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4808fdf1]
2021-03-11 11:42:30,213 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 11:42:30,343 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 11:42:30,346 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 11:42:30,469 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:42:30,471 [main:95] - GENERATED = charArrayOf('')
2021-03-11 11:42:30,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:30,701 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:30,703 [main:105] - GENERATED CALL = (ZImpl2().test()).indexOfAny(charArrayOf(''), -785771707, false)
2021-03-11 11:42:30,703 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23e9bc96]]
2021-03-11 11:42:30,703 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental @kotlin.internal.InlineOnly public inline fun kotlin.Int.countLeadingZeroBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@23e9bc96]
2021-03-11 11:42:30,703 [main:105] - GENERATED CALL = (ZImpl2().test()).length.countLeadingZeroBits()
2021-03-11 11:42:30,703 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]]
2021-03-11 11:42:30,703 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:30,810 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:30,812 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]
2021-03-11 11:42:30,812 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("tqkce").unaryPlus()
2021-03-11 11:42:30,812 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bfc86e1]]
2021-03-11 11:42:30,812 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:30,933 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:30,935 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2bfc86e1]
2021-03-11 11:42:30,935 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("qxjci").toInt()
2021-03-11 11:42:30,935 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71ae3dc0]]
2021-03-11 11:42:30,935 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71ae3dc0]
2021-03-11 11:42:31,058 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 11:42:31,060 [main:302] - generating value of type = Int true depth = 1
2021-03-11 11:42:31,062 [main:105] - GENERATED CALL = (ZImpl2().test()).sumOf({a: Char -> 1063867202})
2021-03-11 11:42:31,062 [main:110] - replacement of prope5 of type Int is (ZImpl2().test()).compareTo("tqkce").unaryPlus()
2021-03-11 11:42:31,195 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:31,196 [main:66] - Compilation checking started
2021-03-11 11:42:31,519 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl2().test()).compareTo("tqkce").unaryPlus()++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope5 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:31,520 [main:103] - replacing (prope5 != i, Boolean)
2021-03-11 11:42:31,520 [main:38] - replacing prope5 != i Boolean
2021-03-11 11:42:31,520 [main:42] - Getting value of type Boolean
2021-03-11 11:42:31,621 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:31,623 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:42:31,623 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:31,740 [main:55] - randomType = Short
2021-03-11 11:42:31,841 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:42:31,879 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@37623255]
2021-03-11 11:42:31,981 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:31,981 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:42:32,081 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:32,083 [main:66] - Generated call from random type = (-31414).equals("rzolj").and(false)
2021-03-11 11:42:32,084 [main:94] - GETTING Boolean from ZImpl3
2021-03-11 11:42:32,113 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:42:32,113 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:32,232 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:32,232 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:42:32,353 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:32,353 [main:105] - GENERATED CALL = (ZImpl3()).equals("tsknm").equals("fakvp")
2021-03-11 11:42:32,353 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:42:32,353 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:32,477 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:32,479 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:42:32,592 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:32,710 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:32,712 [main:105] - GENERATED CALL = (ZImpl3()).test("vmipd").endsWith("fdoae", false)
2021-03-11 11:42:32,712 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:42:32,712 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:32,816 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:32,816 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:42:32,916 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:32,918 [main:105] - GENERATED CALL = (ZImpl3()).equals("jvaly").and(true)
2021-03-11 11:42:32,918 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:42:32,918 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:33,018 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:33,019 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:42:33,019 [main:105] - GENERATED CALL = (ZImpl3()).equals("zjphp").not()
2021-03-11 11:42:33,019 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:42:33,019 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:33,121 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:33,121 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:42:33,221 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:33,223 [main:105] - GENERATED CALL = (ZImpl3()).equals("rrafx").or(false)
2021-03-11 11:42:33,224 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:42:33,224 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:33,325 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:33,325 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:42:33,446 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:33,449 [main:105] - GENERATED CALL = (ZImpl3()).equals("fvban").xor(false)
2021-03-11 11:42:33,449 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]]
2021-03-11 11:42:33,449 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:33,560 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:33,562 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]
2021-03-11 11:42:33,563 [main:105] - GENERATED CALL = (ZImpl3()).test("wsybp").toBoolean()
2021-03-11 11:42:33,563 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]]
2021-03-11 11:42:33,563 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:42:33,678 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:33,679 [main:105] - GENERATED CALL = (ZImpl3()).equals("ethlg")
2021-03-11 11:42:33,679 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]]
2021-03-11 11:42:33,679 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:33,783 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:33,785 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]
2021-03-11 11:42:33,893 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:33,895 [main:105] - GENERATED CALL = (ZImpl3()).test("lpxjp").matches("uvugn")
2021-03-11 11:42:33,895 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:42:33,895 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:33,995 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:33,997 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:42:34,097 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:34,199 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:34,201 [main:105] - GENERATED CALL = (ZImpl3()).test("ebmpy").startsWith("flksd", true)
2021-03-11 11:42:34,201 [main:110] - replacement of prope5 != i of type Boolean is (ZImpl3()).equals("fvban").xor(false)
2021-03-11 11:42:34,323 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:34,323 [main:66] - Compilation checking started
2021-03-11 11:42:34,891 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:34,894 [main:103] - replacing ({ it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true }, Function0<Boolean>)
2021-03-11 11:42:34,894 [main:38] - replacing { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true } Function0<Boolean>
2021-03-11 11:42:34,894 [main:42] - Getting value of type Function0<Boolean>
2021-03-11 11:42:35,017 [main:302] - generating value of type = Function0<Boolean> false depth = 0
2021-03-11 11:42:35,019 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:35,020 [main:46] - GENERATED VALUE OF TYPE Function0<Boolean> = { true}
2021-03-11 11:42:35,021 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:35,249 [main:55] - randomType = Sequence<Byte>
2021-03-11 11:42:35,251 [main:94] - GETTING Function0<Boolean> from ZImpl3
2021-03-11 11:42:35,273 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:42:35,291 [main:94] - GETTING Function0<Boolean> from String
2021-03-11 11:42:35,291 [main:110] - replacement of { it?.methodName?.startsWith((ZImpl3()).test("phzsf").trimMargin("htyog")) == true } of type Function0<Boolean> is { true}
2021-03-11 11:42:35,398 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:42:35,398 [main:66] - Compilation checking started
2021-03-11 11:42:35,867 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:35,868 [main:103] - replacing (prope5, Int)
2021-03-11 11:42:35,869 [main:38] - replacing prope5 Int
2021-03-11 11:42:35,869 [main:42] - Getting value of type Int
2021-03-11 11:42:35,971 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:35,973 [main:46] - GENERATED VALUE OF TYPE Int = 1971817518
2021-03-11 11:42:35,973 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:35,976 [main:55] - randomType = Boolean
2021-03-11 11:42:36,076 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:36,087 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:42:36,203 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:36,205 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-11 11:42:36,205 [main:66] - Generated call from random type = (true).compareTo(false).takeLowestOneBit()
2021-03-11 11:42:36,206 [main:94] - GETTING Int from String
2021-03-11 11:42:36,225 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96eed19]]
2021-03-11 11:42:36,226 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:36,330 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:36,331 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96eed19]
2021-03-11 11:42:36,436 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:36,438 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("atnwv").plus(-24)
2021-03-11 11:42:36,438 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]]
2021-03-11 11:42:36,438 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]
2021-03-11 11:42:36,438 [main:105] - GENERATED CALL = (ZImpl3().test()).length.countOneBits()
2021-03-11 11:42:36,438 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1766f744]]
2021-03-11 11:42:36,438 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:42:36,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:36,543 [main:137] - GENERATING call of type public final operator fun minus(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@1766f744]
2021-03-11 11:42:36,644 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:36,645 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-1721204522).minus('ꔊ')
2021-03-11 11:42:36,645 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cd4ef]]
2021-03-11 11:42:36,645 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@63cd4ef]
2021-03-11 11:42:36,745 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:36,746 [main:105] - GENERATED CALL = (ZImpl3().test()).length.and(1914231802)
2021-03-11 11:42:36,746 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7fa5f992]]
2021-03-11 11:42:36,746 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:36,845 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:36,847 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("hfpbh").sign
2021-03-11 11:42:36,847 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69b65135]]
2021-03-11 11:42:36,847 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:42:36,959 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:37,060 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:37,062 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOf(char: kotlin.Char, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@69b65135]
2021-03-11 11:42:37,197 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:37,309 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:37,424 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:37,426 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(457286650, -873288607).indexOf('㜄', 26994250, false)
2021-03-11 11:42:37,426 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71ae3dc0]]
2021-03-11 11:42:37,426 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@71ae3dc0]
2021-03-11 11:42:37,527 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 11:42:37,529 [main:302] - generating value of type = Int true depth = 1
2021-03-11 11:42:37,530 [main:105] - GENERATED CALL = (ZImpl3().test()).sumOf({a: Char -> 538211473})
2021-03-11 11:42:37,530 [main:101] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ba795]]
2021-03-11 11:42:37,530 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ba795]
2021-03-11 11:42:37,628 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 11:42:37,630 [main:302] - generating value of type = Int true depth = 1
2021-03-11 11:42:37,631 [main:105] - GENERATED CALL = (ZImpl3().test()).sumBy({a: Char -> 1894570489})
2021-03-11 11:42:37,631 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@70e61ecb]]
2021-03-11 11:42:37,631 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:42:37,730 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:37,731 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Char): kotlin.Int defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@70e61ecb]
2021-03-11 11:42:37,830 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:37,832 [main:105] - GENERATED CALL = (ZImpl3().test()).get(808052984).compareTo('⛦')
2021-03-11 11:42:37,832 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e245a57]]
2021-03-11 11:42:37,832 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:42:37,937 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:38,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:38,041 [main:137] - GENERATING call of type public fun kotlin.CharSequence.lastIndexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e245a57]
2021-03-11 11:42:38,163 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 11:42:38,274 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 11:42:38,276 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 11:42:38,391 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:42:38,393 [main:95] - GENERATED = charArrayOf('镻')
2021-03-11 11:42:38,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:38,593 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:38,595 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(929927915, -675322259).lastIndexOfAny(charArrayOf('镻'), -1380151127, false)
2021-03-11 11:42:38,595 [main:110] - replacement of prope5 of type Int is (ZImpl3().test()).subSequence(929927915, -675322259).lastIndexOfAny(charArrayOf('镻'), -1380151127, false)
2021-03-11 11:42:38,692 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:38,693 [main:66] - Compilation checking started
2021-03-11 11:42:39,008 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3().test()).subSequence(929927915, -675322259).lastIndexOfAny(charArrayOf('镻'), -1380151127, false)++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:39,009 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:42:39,009 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:42:39,010 [main:42] - Getting value of type Int
2021-03-11 11:42:39,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:39,121 [main:46] - GENERATED VALUE OF TYPE Int = 561866052
2021-03-11 11:42:39,121 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:39,530 [main:55] - randomType = HashMap<HashSet<Kla0>, UShort>
2021-03-11 11:42:39,654 [main:302] - generating value of type = HashMap<HashSet<Kla0>, UShort> false depth = 0
2021-03-11 11:42:39,802 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<HashSet<Kla0>, UShort>): HashMap<HashSet<Kla0>, UShort> = TODO()
2021-03-11 11:42:39,805 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<HashSet<Kla0>, UShort>): HashMap<HashSet<Kla0>, UShort> = TODO()
2021-03-11 11:42:39,960 [main:302] - generating value of type = Pair<HashSet<Kla0>, UShort> false depth = 3
2021-03-11 11:42:40,073 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: HashSet<Kla0>, second: UShort): Pair<HashSet<Kla0>, UShort> = TODO()
2021-03-11 11:42:40,077 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: HashSet<Kla0>, second: UShort): Pair<HashSet<Kla0>, UShort> = TODO()
2021-03-11 11:42:40,187 [main:302] - generating value of type = HashSet<Kla0> false depth = 6
2021-03-11 11:42:40,310 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<Kla0>): HashSet<Kla0> = TODO()
2021-03-11 11:42:40,312 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<Kla0>): HashSet<Kla0> = TODO()
2021-03-11 11:42:40,565 [main:302] - generating value of type = Collection<Kla0> false depth = 9
2021-03-11 11:42:40,711 [main:43] - GENERATING CALL OF fun UIntArray(size: kotlin.Int): Collection<Kla0> = TODO()
2021-03-11 11:42:40,713 [main:61] - WITHOUT TYPE PARAMS = fun UIntArray(size: kotlin.Int): Collection<Kla0> = TODO()
2021-03-11 11:42:40,948 [main:302] - generating value of type = Int true depth = 12
2021-03-11 11:42:40,950 [main:95] - GENERATED = UIntArray(-1898262501)
2021-03-11 11:42:40,950 [main:95] - GENERATED = HashSet<Kla0>(UIntArray(-1898262501))
2021-03-11 11:42:40,950 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 11:42:40,952 [main:95] - GENERATED = Pair<HashSet<Kla0>, UShort>(HashSet<Kla0>(UIntArray(-1898262501)), 5881.toUShort())
2021-03-11 11:42:40,952 [main:95] - GENERATED = hashMapOf<HashSet<Kla0>, UShort>(Pair<HashSet<Kla0>, UShort>(HashSet<Kla0>(UIntArray(-1898262501)), 5881.toUShort()))
2021-03-11 11:42:41,091 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]
2021-03-11 11:42:41,092 [main:66] - Generated call from random type = (hashMapOf<HashSet<Kla0>, UShort>(Pair<HashSet<Kla0>, UShort>(HashSet<Kla0>(UIntArray(-1898262501)), 5881.toUShort()))).size.unaryPlus()
2021-03-11 11:42:41,093 [main:94] - GETTING Int from String
2021-03-11 11:42:41,111 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]]
2021-03-11 11:42:41,111 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:41,211 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:41,212 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]
2021-03-11 11:42:41,212 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("yjxst").unaryPlus()
2021-03-11 11:42:41,213 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Int.absoluteValue: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@47c7249f]]
2021-03-11 11:42:41,213 [main:105] - GENERATED CALL = (ZImpl2().test()).length.absoluteValue
2021-03-11 11:42:41,213 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3bb35082]]
2021-03-11 11:42:41,213 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:41,313 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:41,315 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3bb35082]
2021-03-11 11:42:41,414 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:41,416 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("kspcu").coerceAtMost(662639901)
2021-03-11 11:42:41,416 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@114f20bc]]
2021-03-11 11:42:41,416 [main:137] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@114f20bc]
2021-03-11 11:42:41,515 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:41,517 [main:105] - GENERATED CALL = (ZImpl2().test()).length.rem(16)
2021-03-11 11:42:41,517 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96eed19]]
2021-03-11 11:42:41,517 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:41,616 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:41,618 [main:137] - GENERATING call of type public final operator fun plus(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@96eed19]
2021-03-11 11:42:41,718 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:41,720 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("qaxrd").plus(3)
2021-03-11 11:42:41,720 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c84ace]]
2021-03-11 11:42:41,720 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:41,849 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:41,851 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c84ace]
2021-03-11 11:42:41,851 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("jhool").inc()
2021-03-11 11:42:41,851 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@46c9e88a]]
2021-03-11 11:42:41,851 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.takeLowestOneBit(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@46c9e88a]
2021-03-11 11:42:41,851 [main:105] - GENERATED CALL = (ZImpl2().test()).length.takeLowestOneBit()
2021-03-11 11:42:41,851 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin public val kotlin.Int.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@7fa5f992]]
2021-03-11 11:42:41,852 [main:105] - GENERATED CALL = (ZImpl2().test()).length.sign
2021-03-11 11:42:41,852 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]]
2021-03-11 11:42:41,852 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]
2021-03-11 11:42:41,959 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:42,081 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:42,082 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("aidtq", true)
2021-03-11 11:42:42,083 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31bba872]]
2021-03-11 11:42:42,083 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:42:42,188 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:42,190 [main:137] - GENERATING call of type public final infix fun shr(bitCount: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@31bba872]
2021-03-11 11:42:42,292 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:42,294 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("dgdeh").shr(899969257)
2021-03-11 11:42:42,294 [main:110] - replacement of numberOfSuspensions of type Int is (ZImpl2().test()).compareTo("kspcu").coerceAtMost(662639901)
2021-03-11 11:42:42,393 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:42,393 [main:66] - Compilation checking started
2021-03-11 11:42:42,705 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..(ZImpl2().test()).compareTo("kspcu").coerceAtMost(662639901)) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:42,707 [main:103] - replacing (prope3.isSuccess, Boolean)
2021-03-11 11:42:42,707 [main:38] - replacing prope3.isSuccess Boolean
2021-03-11 11:42:42,707 [main:42] - Getting value of type Boolean
2021-03-11 11:42:42,812 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:42,813 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:42:42,813 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:44,014 [main:55] - randomType = HashMap<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>>
2021-03-11 11:42:44,130 [main:302] - generating value of type = HashMap<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>> false depth = 0
2021-03-11 11:42:44,260 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): HashMap<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>> = TODO()
2021-03-11 11:42:44,262 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): HashMap<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>> = TODO()
2021-03-11 11:42:44,384 [main:95] - GENERATED = linkedMapOf<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>>()
2021-03-11 11:42:44,599 [main:137] - GENERATING call of type public inline fun <K, V> kotlin.collections.Map<out K, V>.all(predicate: (kotlin.collections.Map.Entry<K, V>) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@7370222b]
2021-03-11 11:42:44,744 [main:302] - generating value of type = Function1<Entry<K, V>, Boolean> false depth = 0
2021-03-11 11:42:44,746 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:44,747 [main:66] - Generated call from random type = (linkedMapOf<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>>()).all({a: Entry<K, V> -> false})
2021-03-11 11:42:44,747 [main:110] - replacement of prope3.isSuccess of type Boolean is (linkedMapOf<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>>()).all({a: Entry<K, V> -> false})
2021-03-11 11:42:44,870 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:44,870 [main:66] - Compilation checking started
2021-03-11 11:42:45,306 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if ((linkedMapOf<ArrayDeque<Double>, MutableMap<HashMap<Int?, Boolean>, Char>>()).all({a: Entry<K, V> -> false})) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:45,308 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-11 11:42:45,308 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-11 11:42:45,308 [main:42] - Getting value of type String
2021-03-11 11:42:45,439 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:45,440 [main:46] - GENERATED VALUE OF TYPE String = "mtajc"
2021-03-11 11:42:45,441 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:45,569 [main:55] - randomType = Byte
2021-03-11 11:42:45,702 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:42:45,764 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@2b42197e]
2021-03-11 11:42:45,765 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]
2021-03-11 11:42:45,885 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:45,887 [main:66] - Generated call from random type = (-122).toShort().toString(-737744657)
2021-03-11 11:42:45,888 [main:94] - GETTING String from ZImpl3
2021-03-11 11:42:45,922 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]]
2021-03-11 11:42:45,922 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:46,039 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:46,042 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f5f2a3a]
2021-03-11 11:42:46,042 [main:105] - GENERATED CALL = (ZImpl3()).test("oqiyv").trim()
2021-03-11 11:42:46,042 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32057d8e]]
2021-03-11 11:42:46,043 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:46,174 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:46,176 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32057d8e]
2021-03-11 11:42:46,176 [main:105] - GENERATED CALL = (ZImpl3()).test("dftia").lowercase()
2021-03-11 11:42:46,176 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]]
2021-03-11 11:42:46,176 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:46,370 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:46,373 [main:137] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5637ed9d]
2021-03-11 11:42:46,514 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:46,643 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:46,644 [main:105] - GENERATED CALL = (ZImpl3()).test("xrgrw").padStart(125155047, '藖')
2021-03-11 11:42:46,644 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]]
2021-03-11 11:42:46,645 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:46,781 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:46,783 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]
2021-03-11 11:42:46,900 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:46,901 [main:105] - GENERATED CALL = (ZImpl3()).test("qpkke").take(1572154237)
2021-03-11 11:42:46,902 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]]
2021-03-11 11:42:46,902 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:47,011 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:47,013 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]
2021-03-11 11:42:47,013 [main:105] - GENERATED CALL = (ZImpl3()).test("wgswa").trimIndent()
2021-03-11 11:42:47,013 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]]
2021-03-11 11:42:47,013 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:47,127 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:47,128 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]
2021-03-11 11:42:47,245 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:42:47,246 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:42:47,248 [main:105] - GENERATED CALL = (ZImpl3()).test("fmady").replaceFirstChar({a: Char -> 'ㄊ'})
2021-03-11 11:42:47,248 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]]
2021-03-11 11:42:47,248 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:47,359 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:47,361 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]
2021-03-11 11:42:47,494 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:42:47,495 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:47,497 [main:105] - GENERATED CALL = (ZImpl3()).test("usbrl").filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:42:47,497 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130646f9]]
2021-03-11 11:42:47,497 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:47,619 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:47,621 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@130646f9]
2021-03-11 11:42:47,621 [main:105] - GENERATED CALL = (ZImpl3()).test("kancp").trimStart()
2021-03-11 11:42:47,621 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]]
2021-03-11 11:42:47,621 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:47,746 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:47,748 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]
2021-03-11 11:42:47,865 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:42:47,867 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:47,868 [main:105] - GENERATED CALL = (ZImpl3()).test("rjhmq").filter({a: Char -> false})
2021-03-11 11:42:47,868 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:42:47,868 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:42:47,988 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:47,990 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:42:48,097 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:48,204 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:48,206 [main:105] - GENERATED CALL = (ZImpl3()).test("bjhtn").padEnd(1358453937, '⒘')
2021-03-11 11:42:48,207 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (-122).toShort().toString(-737744657)
2021-03-11 11:42:48,313 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:48,313 [main:66] - Compilation checking started
2021-03-11 11:42:48,869 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:48,870 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:42:48,870 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:42:48,870 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:42:49,076 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:42:49,084 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:42:49,286 [main:55] - randomType = Kla3?
2021-03-11 11:42:49,441 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 11:42:49,442 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}
2021-03-11 11:42:49,452 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:42:49,485 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:42:49,520 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:42:49,520 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:42:49,520 [main:103] - replacing (prope5, Int)
2021-03-11 11:42:49,520 [main:38] - replacing prope5 Int
2021-03-11 11:42:49,520 [main:42] - Getting value of type Int
2021-03-11 11:42:49,633 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:49,634 [main:46] - GENERATED VALUE OF TYPE Int = 818625534
2021-03-11 11:42:49,634 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:49,641 [main:55] - randomType = Kla3
2021-03-11 11:42:49,762 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 11:42:49,764 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}
2021-03-11 11:42:49,773 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@391b5d9c]
2021-03-11 11:42:49,883 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:49,883 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:42:49,989 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:49,991 [main:66] - Generated call from random type = (Kla3()).equals("ipqxt").compareTo(false)
2021-03-11 11:42:49,991 [main:110] - replacement of prope5 of type Int is (Kla3()).equals("ipqxt").compareTo(false)
2021-03-11 11:42:50,099 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:50,099 [main:66] - Compilation checking started
2021-03-11 11:42:50,421 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        (Kla3()).equals("ipqxt").compareTo(false) = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:50,423 [main:103] - replacing ("Continuation ", String)
2021-03-11 11:42:50,423 [main:38] - replacing "Continuation " String
2021-03-11 11:42:50,423 [main:42] - Getting value of type String
2021-03-11 11:42:50,531 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:50,533 [main:46] - GENERATED VALUE OF TYPE String = "ekcvv"
2021-03-11 11:42:50,533 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:50,821 [main:55] - randomType = UShort?
2021-03-11 11:42:50,942 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:42:50,987 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@1fd41bac]
2021-03-11 11:42:50,987 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]
2021-03-11 11:42:51,097 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:51,098 [main:66] - Generated call from random type = (8088.toUShort())?.toByte().toString(1678627780)
2021-03-11 11:42:51,098 [main:94] - GETTING String from String
2021-03-11 11:42:51,120 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7698bf03]]
2021-03-11 11:42:51,120 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7698bf03]
2021-03-11 11:42:51,223 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:51,330 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:51,331 [main:105] - GENERATED CALL = (ZImpl3().test()).substringAfter('', "mpwjj")
2021-03-11 11:42:51,332 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]]
2021-03-11 11:42:51,332 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@201ef0d0]
2021-03-11 11:42:51,435 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-11 11:42:51,437 [main:302] - generating value of type = Char true depth = 1
2021-03-11 11:42:51,439 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceFirstChar({a: Char -> '貋'})
2021-03-11 11:42:51,439 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]]
2021-03-11 11:42:51,439 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:42:51,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:51,680 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:51,682 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]
2021-03-11 11:42:51,805 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:42:51,930 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:42:51,932 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:42:52,296 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:42:52,297 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 11:42:52,408 [main:43] - GENERATING CALL OF fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-11 11:42:52,411 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOf(): Set<RegexOption> = TODO()
2021-03-11 11:42:52,522 [main:95] - GENERATED = setOf<RegexOption>()
2021-03-11 11:42:52,522 [main:95] - GENERATED = Regex("hvpxn", setOf<RegexOption>())
2021-03-11 11:42:52,662 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:42:52,664 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:42:52,668 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1167203848, -587256875).replace(Regex("hvpxn", setOf<RegexOption>()), {a: MatchResult -> "adlab"})
2021-03-11 11:42:52,670 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:42:52,670 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:42:52,807 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:52,809 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:42:52,927 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:52,929 [main:105] - GENERATED CALL = (ZImpl3().test()).get(536334198).plus("tnljx")
2021-03-11 11:42:52,929 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]]
2021-03-11 11:42:52,929 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:42:53,080 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:53,083 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]
2021-03-11 11:42:53,083 [main:105] - GENERATED CALL = (ZImpl3().test()).get(1880289742).uppercase()
2021-03-11 11:42:53,083 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]]
2021-03-11 11:42:53,083 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]
2021-03-11 11:42:53,083 [main:105] - GENERATED CALL = (ZImpl3().test()).capitalize()
2021-03-11 11:42:53,084 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]]
2021-03-11 11:42:53,084 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]
2021-03-11 11:42:53,084 [main:105] - GENERATED CALL = (ZImpl3().test()).reversed()
2021-03-11 11:42:53,084 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59bedc62]]
2021-03-11 11:42:53,084 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59bedc62]
2021-03-11 11:42:53,215 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:53,329 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:53,331 [main:105] - GENERATED CALL = (ZImpl3().test()).substringAfterLast('쀂', "ulhqc")
2021-03-11 11:42:53,331 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]]
2021-03-11 11:42:53,331 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]
2021-03-11 11:42:53,435 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:53,540 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:53,649 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:53,651 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceBefore('ó', "fcpwz", "qumsq")
2021-03-11 11:42:53,651 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]]
2021-03-11 11:42:53,651 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]
2021-03-11 11:42:53,791 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:42:53,793 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:53,795 [main:105] - GENERATED CALL = (ZImpl3().test()).takeLastWhile({a: Char -> true})
2021-03-11 11:42:53,795 [main:110] - replacement of "Continuation " of type String is (ZImpl3().test()).replaceBefore('ó', "fcpwz", "qumsq")
2021-03-11 11:42:53,909 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:53,909 [main:66] - Compilation checking started
2021-03-11 11:42:54,248 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((ZImpl3().test()).replaceBefore('ó', "fcpwz", "qumsq") + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:54,250 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5, String)
2021-03-11 11:42:54,250 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 String
2021-03-11 11:42:54,250 [main:42] - Getting value of type String
2021-03-11 11:42:54,359 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:54,361 [main:46] - GENERATED VALUE OF TYPE String = "hwfwd"
2021-03-11 11:42:54,361 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:55,710 [main:55] - randomType = LinkedHashMap<Kla2<Kla2<Boolean?>>?, HashMap<Boolean?, LinkedHashSet<Byte?>>>
2021-03-11 11:42:55,825 [main:302] - generating value of type = LinkedHashMap<Kla2<Kla2<Boolean?>>?, HashMap<Boolean?, LinkedHashSet<Byte?>>> false depth = 0
2021-03-11 11:42:55,944 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(): LkedHashMap<Kla2<Kla2<Boolean?>>?, HashMap<Boolean?, LkedHashSet<Byte?>>> = TODO()
2021-03-11 11:42:55,947 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(): LkedHashMap<Kla2<Kla2<Boolean?>>?, HashMap<Boolean?, LkedHashSet<Byte?>>> = TODO()
2021-03-11 11:42:56,061 [main:95] - GENERATED = linkedMapOf<Kla2<Kla2<Boolean?>>?, HashMap<Boolean?, LinkedHashSet<Byte?>>>()
2021-03-11 11:42:56,361 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:42:56,520 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:56,523 [main:66] - Generated call from random type = (linkedMapOf<Kla2<Kla2<Boolean?>>?, HashMap<Boolean?, LinkedHashSet<Byte?>>>()).size.toString(1822414431)
2021-03-11 11:42:56,523 [main:94] - GETTING String from String
2021-03-11 11:42:56,557 [main:101] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7698bf03]]
2021-03-11 11:42:56,557 [main:137] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7698bf03]
2021-03-11 11:42:56,676 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:56,807 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:56,809 [main:105] - GENERATED CALL = (ZImpl3().test()).substringAfter('', "ciwju")
2021-03-11 11:42:56,809 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]]
2021-03-11 11:42:56,809 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]
2021-03-11 11:42:56,918 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:42:56,920 [main:105] - GENERATED CALL = (ZImpl3().test()).trimMargin("wfgle")
2021-03-11 11:42:56,920 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:42:56,920 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:42:57,024 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:57,135 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:42:57,137 [main:105] - GENERATED CALL = (ZImpl3().test()).padEnd(1115710575, '㽃')
2021-03-11 11:42:57,137 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:42:57,137 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:42:57,241 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:57,354 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:57,355 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:42:57,491 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:42:57,629 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:42:57,632 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-2079210801, 132453381).commonPrefixWith("uwsoo", false)
2021-03-11 11:42:57,632 [main:101] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]]
2021-03-11 11:42:57,632 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]
2021-03-11 11:42:57,821 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:57,824 [main:105] - GENERATED CALL = (ZImpl3().test()).take(-1538893836)
2021-03-11 11:42:57,824 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]]
2021-03-11 11:42:57,825 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@16d7cfff]
2021-03-11 11:42:57,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:57,989 [main:105] - GENERATED CALL = (ZImpl3().test()).substring(1969907065)
2021-03-11 11:42:57,989 [main:101] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]]
2021-03-11 11:42:57,989 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]
2021-03-11 11:42:58,118 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:42:58,120 [main:105] - GENERATED CALL = (ZImpl3().test()).repeat(-1619861564)
2021-03-11 11:42:58,120 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]]
2021-03-11 11:42:58,120 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]
2021-03-11 11:42:58,251 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:42:58,253 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:58,255 [main:105] - GENERATED CALL = (ZImpl3().test()).dropWhile({a: Char -> false})
2021-03-11 11:42:58,255 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]]
2021-03-11 11:42:58,255 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]
2021-03-11 11:42:58,381 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:42:58,383 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:58,385 [main:105] - GENERATED CALL = (ZImpl3().test()).filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:42:58,385 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]]
2021-03-11 11:42:58,385 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]
2021-03-11 11:42:58,503 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:42:58,504 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:42:58,506 [main:105] - GENERATED CALL = (ZImpl3().test()).takeLastWhile({a: Char -> false})
2021-03-11 11:42:58,506 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5 of type String is (ZImpl3().test()).substring(1969907065)
2021-03-11 11:42:58,638 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:42:58,639 [main:66] - Compilation checking started
2021-03-11 11:42:58,985 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error((ZImpl3().test()).substring(1969907065))
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:42:58,987 [main:103] - replacing (prope3, Any?)
2021-03-11 11:42:58,987 [main:38] - replacing prope3 Any?
2021-03-11 11:42:58,987 [main:42] - Getting value of type Any?
2021-03-11 11:42:59,091 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:42:59,091 [main:46] - GENERATED VALUE OF TYPE Any? = "qxwtr"
2021-03-11 11:42:59,091 [main:49] - GENERATED IS CALL =false
2021-03-11 11:42:59,341 [main:55] - randomType = Double?
2021-03-11 11:42:59,459 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:42:59,520 [main:94] - GETTING Any? from String
2021-03-11 11:42:59,553 [main:94] - GETTING Any? from String
2021-03-11 11:42:59,554 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:42:59,591 [main:110] - replacement of prope3 of type Any? is "qxwtr"
2021-03-11 11:42:59,724 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:42:59,724 [main:66] - Compilation checking started
2021-03-11 11:43:00,182 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this."qxwtr" = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:00,184 [main:103] - replacing ("Continuation ", String)
2021-03-11 11:43:00,184 [main:38] - replacing "Continuation " String
2021-03-11 11:43:00,184 [main:42] - Getting value of type String
2021-03-11 11:43:00,310 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:00,312 [main:46] - GENERATED VALUE OF TYPE String = "eemdz"
2021-03-11 11:43:00,312 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:01,354 [main:55] - randomType = LinkedHashMap<HashMap<HashMap<UShort, UInt>, Long>, Long>
2021-03-11 11:43:01,468 [main:302] - generating value of type = LinkedHashMap<HashMap<HashMap<UShort, UInt>, Long>, Long> false depth = 0
2021-03-11 11:43:01,615 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<HashMap<HashMap<UShort, UInt>, Long>, Long>): LkedHashMap<HashMap<HashMap<UShort, UInt>, Long>, Long> = TODO()
2021-03-11 11:43:01,618 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<HashMap<HashMap<UShort, UInt>, Long>, Long>): LkedHashMap<HashMap<HashMap<UShort, UInt>, Long>, Long> = TODO()
2021-03-11 11:43:01,748 [main:302] - generating value of type = Pair<HashMap<HashMap<UShort, UInt>, Long>, Long> false depth = 3
2021-03-11 11:43:01,872 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: HashMap<HashMap<UShort, UInt>, Long>, second: Long): Pair<HashMap<HashMap<UShort, UInt>, Long>, Long> = TODO()
2021-03-11 11:43:01,874 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: HashMap<HashMap<UShort, UInt>, Long>, second: Long): Pair<HashMap<HashMap<UShort, UInt>, Long>, Long> = TODO()
2021-03-11 11:43:01,995 [main:302] - generating value of type = HashMap<HashMap<UShort, UInt>, Long> false depth = 6
2021-03-11 11:43:02,104 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<HashMap<UShort, UInt>, Long>): HashMap<HashMap<UShort, UInt>, Long> = TODO()
2021-03-11 11:43:02,106 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<HashMap<UShort, UInt>, Long>): HashMap<HashMap<UShort, UInt>, Long> = TODO()
2021-03-11 11:43:02,334 [main:302] - generating value of type = Map<HashMap<UShort, UInt>, Long> false depth = 9
2021-03-11 11:43:02,457 [main:43] - GENERATING CALL OF fun <K, V> HashMap(original: kotlin.collections.Map<HashMap<UShort, UInt>, Long>): Map<HashMap<UShort, UInt>, Long> = TODO()
2021-03-11 11:43:02,459 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(original: kotlin.collections.Map<HashMap<UShort, UInt>, Long>): Map<HashMap<UShort, UInt>, Long> = TODO()
2021-03-11 11:43:02,740 [main:302] - generating value of type = Map<HashMap<UShort, UInt>, Long> false depth = 12
2021-03-11 11:43:02,859 [main:43] - GENERATING CALL OF fun <K, V> mapOf(): Map<HashMap<UShort, UInt>, Long> = TODO()
2021-03-11 11:43:02,861 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mapOf(): Map<HashMap<UShort, UInt>, Long> = TODO()
2021-03-11 11:43:02,991 [main:95] - GENERATED = mapOf<HashMap<UShort, UInt>, Long>()
2021-03-11 11:43:02,992 [main:95] - GENERATED = HashMap<HashMap<UShort, UInt>, Long>(mapOf<HashMap<UShort, UInt>, Long>())
2021-03-11 11:43:02,992 [main:95] - GENERATED = HashMap<HashMap<UShort, UInt>, Long>(HashMap<HashMap<UShort, UInt>, Long>(mapOf<HashMap<UShort, UInt>, Long>()))
2021-03-11 11:43:02,992 [main:302] - generating value of type = Long true depth = 6
2021-03-11 11:43:02,993 [main:95] - GENERATED = Pair<HashMap<HashMap<UShort, UInt>, Long>, Long>(HashMap<HashMap<UShort, UInt>, Long>(HashMap<HashMap<UShort, UInt>, Long>(mapOf<HashMap<UShort, UInt>, Long>())), -8834848929390531828)
2021-03-11 11:43:02,994 [main:95] - GENERATED = linkedMapOf<HashMap<HashMap<UShort, UInt>, Long>, Long>(Pair<HashMap<HashMap<UShort, UInt>, Long>, Long>(HashMap<HashMap<UShort, UInt>, Long>(HashMap<HashMap<UShort, UInt>, Long>(mapOf<HashMap<UShort, UInt>, Long>())), -8834848929390531828))
2021-03-11 11:43:03,208 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:43:03,307 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:03,309 [main:66] - Generated call from random type = (linkedMapOf<HashMap<HashMap<UShort, UInt>, Long>, Long>(Pair<HashMap<HashMap<UShort, UInt>, Long>, Long>(HashMap<HashMap<UShort, UInt>, Long>(HashMap<HashMap<UShort, UInt>, Long>(mapOf<HashMap<UShort, UInt>, Long>())), -8834848929390531828))).size.toString(-1402990272)
2021-03-11 11:43:03,309 [main:94] - GETTING String from String
2021-03-11 11:43:03,333 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]]
2021-03-11 11:43:03,333 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:03,439 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:03,441 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]
2021-03-11 11:43:03,441 [main:105] - GENERATED CALL = (ZImpl3().test()).get(140245183).titlecase()
2021-03-11 11:43:03,441 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]]
2021-03-11 11:43:03,441 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]
2021-03-11 11:43:03,543 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:03,544 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:03,546 [main:105] - GENERATED CALL = (ZImpl3().test()).filterNot({a: Char -> true})
2021-03-11 11:43:03,546 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]]
2021-03-11 11:43:03,546 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@657b4b5c]
2021-03-11 11:43:03,546 [main:105] - GENERATED CALL = (ZImpl3().test()).reversed()
2021-03-11 11:43:03,546 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]]
2021-03-11 11:43:03,546 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]
2021-03-11 11:43:03,647 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:03,760 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:03,914 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:03,918 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceBefore('祳', "ycglu", "ngdoi")
2021-03-11 11:43:03,918 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]]
2021-03-11 11:43:03,919 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]
2021-03-11 11:43:04,066 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:04,067 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:04,069 [main:105] - GENERATED CALL = (ZImpl3().test()).takeWhile({a: Char -> true})
2021-03-11 11:43:04,069 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:43:04,069 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:43:04,247 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:04,250 [main:105] - GENERATED CALL = (ZImpl3().test()).length.toString(-1996990429)
2021-03-11 11:43:04,250 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:43:04,250 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:43:04,402 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:04,404 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:43:04,535 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:04,537 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("mwjik").toString(-912130452)
2021-03-11 11:43:04,537 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]]
2021-03-11 11:43:04,537 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]
2021-03-11 11:43:04,659 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:04,776 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:04,778 [main:105] - GENERATED CALL = (ZImpl3().test()).substringBeforeLast('岭', "pxner")
2021-03-11 11:43:04,778 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]]
2021-03-11 11:43:04,778 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]
2021-03-11 11:43:04,778 [main:105] - GENERATED CALL = (ZImpl3().test()).capitalize()
2021-03-11 11:43:04,778 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]]
2021-03-11 11:43:04,778 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]
2021-03-11 11:43:04,887 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:04,892 [main:105] - GENERATED CALL = (ZImpl3().test()).removeSuffix("ioogm")
2021-03-11 11:43:04,892 [main:110] - replacement of "Continuation " of type String is (ZImpl3().test()).capitalize()
2021-03-11 11:43:05,060 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:05,061 [main:66] - Compilation checking started
2021-03-11 11:43:05,545 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((ZImpl3().test()).capitalize() + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:05,547 [main:103] - replacing (prope3, Result<Ty0>)
2021-03-11 11:43:05,547 [main:38] - replacing prope3 Result<Ty0>
2021-03-11 11:43:05,548 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:43:05,667 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:43:05,785 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:43:05,788 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:43:06,044 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:43:06,044 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:43:06,281 [main:55] - randomType = Float?
2021-03-11 11:43:06,388 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:43:06,430 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:43:06,451 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:43:06,453 [main:94] - GETTING Result<Ty0> from ZImpl3
2021-03-11 11:43:06,473 [main:107] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-11 11:43:06,474 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:43:06,474 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:43:06,474 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:43:06,609 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:43:06,610 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:06,744 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:06,746 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:07,029 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:43:07,030 [main:95] - GENERATED = println("fkrzz")
2021-03-11 11:43:07,030 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("fkrzz")}
2021-03-11 11:43:07,030 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:07,033 [main:55] - randomType = Short
2021-03-11 11:43:07,165 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:43:07,237 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:07,274 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:07,275 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:43:07,306 [main:110] - replacement of prope7 of type Function0<Unit> is { println("fkrzz")}
2021-03-11 11:43:07,425 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:43:07,425 [main:66] - Compilation checking started
2021-03-11 11:43:07,807 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (prope3.isSuccess) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.{ println("fkrzz")} = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:07,808 [main:103] - replacing (prope3.isSuccess, Boolean)
2021-03-11 11:43:07,809 [main:38] - replacing prope3.isSuccess Boolean
2021-03-11 11:43:07,809 [main:42] - Getting value of type Boolean
2021-03-11 11:43:07,925 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:07,926 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:43:07,926 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:08,045 [main:55] - randomType = ZImpl2?
2021-03-11 11:43:08,198 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:43:08,200 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:43:08,233 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl2[SimpleFunctionDescriptorImpl@367968d1]
2021-03-11 11:43:08,362 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:08,364 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:43:08,510 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:08,696 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:08,699 [main:66] - Generated call from random type = (ZImpl2())?.test("cillf").startsWith("oolyl", true)
2021-03-11 11:43:08,701 [main:94] - GETTING Boolean from String
2021-03-11 11:43:08,742 [main:101] - Case = [public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]]
2021-03-11 11:43:08,742 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.all(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@435c4352]
2021-03-11 11:43:08,858 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:08,859 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:08,861 [main:105] - GENERATED CALL = (ZImpl3().test()).all({a: Char -> false})
2021-03-11 11:43:08,861 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ccc0620]]
2021-03-11 11:43:08,861 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:08,970 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:08,972 [main:137] - GENERATING call of type public fun kotlin.Char.isLowerCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ccc0620]
2021-03-11 11:43:08,972 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-656087033).isLowerCase()
2021-03-11 11:43:08,972 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:43:08,972 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:43:09,080 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:09,080 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:43:09,192 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:09,193 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("dloex").equals("cabdb")
2021-03-11 11:43:09,193 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:43:09,193 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:43:09,334 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:09,334 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:43:09,466 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:09,468 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("hcalh").or(false)
2021-03-11 11:43:09,468 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]]
2021-03-11 11:43:09,468 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:09,610 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:09,759 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:09,762 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]
2021-03-11 11:43:09,762 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(1590849949, 1028640459).isNotEmpty()
2021-03-11 11:43:09,762 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]]
2021-03-11 11:43:09,762 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:09,894 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:09,895 [main:137] - GENERATING call of type public fun kotlin.Char.isTitleCase(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@292590cf]
2021-03-11 11:43:09,895 [main:105] - GENERATED CALL = (ZImpl3().test()).get(1916546487).isTitleCase()
2021-03-11 11:43:09,895 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]]
2021-03-11 11:43:09,895 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28a81f4b]
2021-03-11 11:43:09,895 [main:105] - GENERATED CALL = (ZImpl3().test()).isNotBlank()
2021-03-11 11:43:09,895 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:43:09,895 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:43:10,008 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:10,131 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:10,132 [main:105] - GENERATED CALL = (ZImpl3().test()).startsWith("cbewu", false)
2021-03-11 11:43:10,133 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64ca1a]]
2021-03-11 11:43:10,133 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:10,247 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:10,249 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64ca1a]
2021-03-11 11:43:10,249 [main:105] - GENERATED CALL = (ZImpl3().test()).get(476129495).isLowSurrogate()
2021-03-11 11:43:10,249 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:43:10,249 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:43:10,387 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:10,388 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("vmhil")
2021-03-11 11:43:10,388 [main:110] - replacement of prope3.isSuccess of type Boolean is false
2021-03-11 11:43:10,518 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:43:10,518 [main:66] - Compilation checking started
2021-03-11 11:43:11,066 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:11,068 [main:103] - replacing ({ c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }, Function1<Continuation<Unit>, Unit>)
2021-03-11 11:43:11,068 [main:38] - replacing { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    } Function1<Continuation<Unit>, Unit>
2021-03-11 11:43:11,068 [main:42] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-11 11:43:11,193 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-11 11:43:11,195 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:11,328 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:11,330 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:11,599 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:43:11,600 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:43:11,722 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:11,724 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:12,184 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:43:12,186 [main:302] - generating value of type = Function1<Int, Unit> false depth = 8
2021-03-11 11:43:12,187 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:43:12,318 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:12,321 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:12,591 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:43:12,591 [main:95] - GENERATED = println("vylhg")
2021-03-11 11:43:12,591 [main:95] - GENERATED = repeat(1866216679, {a: Int -> println("vylhg")})
2021-03-11 11:43:12,591 [main:95] - GENERATED = contract({ repeat(1866216679, {a: Int -> println("vylhg")})})
2021-03-11 11:43:12,591 [main:46] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> contract({ repeat(1866216679, {a: Int -> println("vylhg")})})}
2021-03-11 11:43:12,592 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:12,714 [main:55] - randomType = Kla4?
2021-03-11 11:43:12,822 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:43:12,823 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:43:12,835 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from ZImpl3
2021-03-11 11:43:12,873 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:43:12,907 [main:94] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-11 11:43:12,907 [main:110] - replacement of { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> contract({ repeat(1866216679, {a: Int -> println("vylhg")})})}
2021-03-11 11:43:13,013 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:43:13,014 [main:66] - Compilation checking started
2021-03-11 11:43:13,363 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> {a: Continuation<Unit> -> contract({ repeat(1866216679, {a: Int -> println("vylhg")})})}

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:13,364 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:43:13,364 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:43:13,364 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:43:13,503 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:43:13,506 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:13,630 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:13,633 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:13,891 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:43:13,892 [main:95] - GENERATED = println("bovnv")
2021-03-11 11:43:13,892 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("bovnv")}
2021-03-11 11:43:13,892 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:14,133 [main:55] - randomType = Char?
2021-03-11 11:43:14,244 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:14,279 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:14,305 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:43:14,326 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:14,326 [main:110] - replacement of prope7 of type Function0<Unit> is { println("bovnv")}
2021-03-11 11:43:14,433 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:43:14,434 [main:66] - Compilation checking started
2021-03-11 11:43:14,739 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.{ println("bovnv")} = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:14,740 [main:103] - replacing (let(x), Unit?)
2021-03-11 11:43:14,741 [main:38] - replacing let(x) Unit?
2021-03-11 11:43:14,741 [main:42] - Getting value of type Unit?
2021-03-11 11:43:14,881 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:43:15,005 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:15,008 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:15,284 [main:302] - generating value of type = Boolean true depth = 3
2021-03-11 11:43:15,285 [main:95] - GENERATED = require(true)
2021-03-11 11:43:15,285 [main:46] - GENERATED VALUE OF TYPE Unit? = require(true)
2021-03-11 11:43:15,286 [main:49] - GENERATED IS CALL =true
2021-03-11 11:43:15,289 [main:55] - randomType = Int
2021-03-11 11:43:15,403 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:15,449 [main:94] - GETTING Unit? from String
2021-03-11 11:43:15,473 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:43:15,473 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:15,579 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:15,699 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:15,700 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:43:15,815 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:43:15,817 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:15,823 [main:105] - GENERATED CALL = (ZImpl3().test())?.subSequence(-108662019, -1835089664).forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 11:43:15,823 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:43:15,823 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:43:15,965 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:43:15,967 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:16,097 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:16,099 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:16,481 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:43:16,483 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:43:16,484 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:43:16,596 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:43:16,598 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:43:17,004 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:43:17,006 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:43:17,008 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:43:17,008 [main:95] - GENERATED = require(false, { "vlghu"})
2021-03-11 11:43:17,008 [main:95] - GENERATED = repeat(250908476, {a: Int -> require(false, { "vlghu"})})
2021-03-11 11:43:17,009 [main:105] - GENERATED CALL = (ZImpl3().test())?.forEachIndexed({a: Int, b: Char -> repeat(250908476, {a: Int -> require(false, { "vlghu"})})})
2021-03-11 11:43:17,009 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:43:17,009 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:43:17,127 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:43:17,129 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:17,290 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:17,293 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:17,596 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:43:17,599 [main:95] - GENERATED = check(true)
2021-03-11 11:43:17,600 [main:105] - GENERATED CALL = (ZImpl3().test())?.forEach({a: Char -> check(true)})
2021-03-11 11:43:17,600 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:43:17,600 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:17,723 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:17,835 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:17,837 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:43:17,945 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:43:17,947 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:17,952 [main:105] - GENERATED CALL = (ZImpl3().test())?.subSequence(-1340786355, -585732785).forEach({a: Char -> println()})
2021-03-11 11:43:17,952 [main:110] - replacement of let(x) of type Unit? is (ZImpl3().test())?.forEach({a: Char -> check(true)})
2021-03-11 11:43:18,090 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:43:18,091 [main:66] - Compilation checking started
2021-03-11 11:43:18,474 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.(ZImpl3().test())?.forEach({a: Char -> check(true)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:18,476 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:43:18,476 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:43:18,477 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:43:18,612 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:43:18,617 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:43:18,621 [main:55] - randomType = Boolean
2021-03-11 11:43:18,733 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:18,747 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:43:18,774 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:43:18,798 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:43:18,798 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:43:18,798 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:43:18,798 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:43:18,798 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:43:18,923 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:43:18,924 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:19,040 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:43:19,042 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:43:19,413 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:43:19,414 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:43:19,416 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:43:19,416 [main:95] - GENERATED = check(false, { "kuhah"})
2021-03-11 11:43:19,416 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false, { "kuhah"})}
2021-03-11 11:43:19,416 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:19,836 [main:55] - randomType = HashSet<UShort?>
2021-03-11 11:43:19,958 [main:302] - generating value of type = HashSet<UShort?> false depth = 0
2021-03-11 11:43:20,068 [main:43] - GENERATING CALL OF fun <E> HashSet(elements: kotlin.collections.Collection<UShort?>): HashSet<UShort?> = TODO()
2021-03-11 11:43:20,070 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(elements: kotlin.collections.Collection<UShort?>): HashSet<UShort?> = TODO()
2021-03-11 11:43:20,303 [main:302] - generating value of type = Collection<UShort?> false depth = 3
2021-03-11 11:43:20,417 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: UShort?): Collection<UShort?> = TODO()
2021-03-11 11:43:20,419 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: UShort?): Collection<UShort?> = TODO()
2021-03-11 11:43:20,580 [main:302] - generating value of type = UShort true depth = 6
2021-03-11 11:43:20,581 [main:95] - GENERATED = setOfNotNull<UShort?>(21911.toUShort())
2021-03-11 11:43:20,582 [main:95] - GENERATED = HashSet<UShort?>(setOfNotNull<UShort?>(21911.toUShort()))
2021-03-11 11:43:20,767 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:43:20,805 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:20,855 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:20,855 [main:110] - replacement of prope7 of type Function0<Unit> is { check(false, { "kuhah"})}
2021-03-11 11:43:20,966 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:43:20,966 [main:66] - Compilation checking started
2021-03-11 11:43:21,287 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.{ check(false, { "kuhah"})} = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:21,289 [main:103] - replacing (prope6, Boolean)
2021-03-11 11:43:21,289 [main:38] - replacing prope6 Boolean
2021-03-11 11:43:21,289 [main:42] - Getting value of type Boolean
2021-03-11 11:43:21,393 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:21,394 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:43:21,394 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:21,517 [main:55] - randomType = UInt
2021-03-11 11:43:21,623 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:43:21,661 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUShort(): kotlin.UShort defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@6ab6c201]
2021-03-11 11:43:21,661 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@6feafe70]
2021-03-11 11:43:21,766 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:21,766 [main:66] - Generated call from random type = (266231488.toUInt()).toUShort().equals("lddae")
2021-03-11 11:43:21,767 [main:94] - GETTING Boolean from String
2021-03-11 11:43:21,799 [main:101] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:43:21,799 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:43:21,903 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:22,013 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:22,014 [main:105] - GENERATED CALL = (ZImpl3().test()).startsWith("ydjpd", false)
2021-03-11 11:43:22,015 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]]
2021-03-11 11:43:22,015 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:22,156 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:22,158 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]
2021-03-11 11:43:22,158 [main:105] - GENERATED CALL = (ZImpl3().test()).get(277315190).isISOControl()
2021-03-11 11:43:22,158 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64ca1a]]
2021-03-11 11:43:22,158 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:22,278 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:22,280 [main:137] - GENERATING call of type public fun kotlin.Char.isLowSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@64ca1a]
2021-03-11 11:43:22,281 [main:105] - GENERATED CALL = (ZImpl3().test()).get(465324085).isLowSurrogate()
2021-03-11 11:43:22,281 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]]
2021-03-11 11:43:22,281 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:22,435 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:22,551 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:22,553 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]
2021-03-11 11:43:22,553 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(791992042, -148917081).none()
2021-03-11 11:43:22,553 [main:101] - Case = [public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3c82c0]]
2021-03-11 11:43:22,554 [main:137] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a3c82c0]
2021-03-11 11:43:22,664 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:22,665 [main:105] - GENERATED CALL = (ZImpl3().test()).hasSurrogatePairAt(-1295092259)
2021-03-11 11:43:22,666 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:43:22,666 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:43:22,771 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:22,771 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:43:22,879 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:22,879 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("baium").equals("hhbos")
2021-03-11 11:43:22,879 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]]
2021-03-11 11:43:22,879 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:43:22,992 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:22,994 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2fd47247]
2021-03-11 11:43:23,143 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:23,144 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("nudsh").equals("rvdjv")
2021-03-11 11:43:23,144 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:43:23,144 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:43:23,265 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:23,266 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:43:23,266 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("gtqct").not()
2021-03-11 11:43:23,266 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:43:23,266 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:23,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:23,507 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:23,508 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:43:23,509 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(1504979967, -525124421).isBlank()
2021-03-11 11:43:23,509 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]]
2021-03-11 11:43:23,509 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:23,619 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:23,621 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]
2021-03-11 11:43:23,621 [main:105] - GENERATED CALL = (ZImpl3().test()).get(121141558).isDefined()
2021-03-11 11:43:23,621 [main:110] - replacement of prope6 of type Boolean is (ZImpl3().test()).subSequence(1504979967, -525124421).isBlank()
2021-03-11 11:43:23,731 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:23,731 [main:66] - Compilation checking started
2021-03-11 11:43:24,041 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        (ZImpl3().test()).subSequence(1504979967, -525124421).isBlank() = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:24,043 [main:103] - replacing ({
        "iwgiw"
    }, Any?)
2021-03-11 11:43:24,043 [main:38] - replacing {
        "iwgiw"
    } Any?
2021-03-11 11:43:24,043 [main:42] - Getting value of type Any?
2021-03-11 11:43:24,151 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:24,151 [main:46] - GENERATED VALUE OF TYPE Any? = "kowid"
2021-03-11 11:43:24,152 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:25,630 [main:55] - randomType = ArrayList<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>>
2021-03-11 11:43:25,756 [main:302] - generating value of type = ArrayList<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>> false depth = 0
2021-03-11 11:43:25,882 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>): ArrayList<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>> = TODO()
2021-03-11 11:43:25,885 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>): ArrayList<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>> = TODO()
2021-03-11 11:43:26,001 [main:302] - generating value of type = Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0> false depth = 3
2021-03-11 11:43:26,003 [main:302] - generating value of type = Kla0 false depth = 4
2021-03-11 11:43:26,004 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}
2021-03-11 11:43:26,107 [main:194] - Type params = []
2021-03-11 11:43:26,215 [main:302] - generating value of type = CoroutineContext false depth = 6
2021-03-11 11:43:26,324 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:26,326 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:26,613 [main:302] - generating value of type = Key<*> false depth = 9
2021-03-11 11:43:26,749 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:26,751 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:27,118 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:43:27,232 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:43:27,234 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:43:27,661 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:43:27,661 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:27,661 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:27,661 [main:95] - GENERATED = arrayListOf<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>>({a: Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>> -> Kla0()})
2021-03-11 11:43:28,093 [main:137] - GENERATING call of type protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2ab1c05a]
2021-03-11 11:43:28,094 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@1b919a6a]
2021-03-11 11:43:28,199 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:28,201 [main:66] - Generated call from random type = (arrayListOf<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>>({a: Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>> -> Kla0()})).toArray().get(402126837)
2021-03-11 11:43:28,202 [main:94] - GETTING Any? from String
2021-03-11 11:43:28,227 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:43:28,248 [main:94] - GETTING Any? from String
2021-03-11 11:43:28,248 [main:110] - replacement of {
        "iwgiw"
    } of type Any? is (arrayListOf<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>>({a: Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>> -> Kla0()})).toArray().get(402126837)
2021-03-11 11:43:28,353 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:28,354 [main:66] - Compilation checking started
2021-03-11 11:43:28,357 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:43:28,357 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) (arrayListOf<Function1<Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>>, Kla0>>({a: Function1<Collection<Sequence<Z<Int>>?>?, Kla2<Float?>> -> Kla0()})).toArray().get(402126837)
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:28,359 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got ", String)
2021-03-11 11:43:28,359 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " String
2021-03-11 11:43:28,359 [main:42] - Getting value of type String
2021-03-11 11:43:28,464 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:28,465 [main:46] - GENERATED VALUE OF TYPE String = "flcbv"
2021-03-11 11:43:28,465 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:28,838 [main:55] - randomType = Z<Char?>
2021-03-11 11:43:28,838 [main:94] - GETTING String from String
2021-03-11 11:43:28,860 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:43:28,860 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:43:28,966 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:28,967 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:43:29,070 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:29,073 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("ughby").toString(-1584305398)
2021-03-11 11:43:29,073 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]]
2021-03-11 11:43:29,073 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3d055f19]
2021-03-11 11:43:29,073 [main:105] - GENERATED CALL = (ZImpl2().test()).toLowerCase()
2021-03-11 11:43:29,073 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]]
2021-03-11 11:43:29,073 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]
2021-03-11 11:43:29,181 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:29,185 [main:105] - GENERATED CALL = (ZImpl2().test()).removePrefix(StringBuilder())
2021-03-11 11:43:29,185 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@487d40b2]]
2021-03-11 11:43:29,185 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:29,290 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:29,396 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:29,397 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@487d40b2]
2021-03-11 11:43:29,506 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:29,616 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:29,618 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1526653829, -1628738786).commonSuffixWith("cuoon", false)
2021-03-11 11:43:29,618 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]]
2021-03-11 11:43:29,618 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]
2021-03-11 11:43:29,731 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:29,876 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:29,878 [main:105] - GENERATED CALL = (ZImpl2().test()).substringBeforeLast('ၥ', "gbghy")
2021-03-11 11:43:29,878 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32057d8e]]
2021-03-11 11:43:29,878 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@32057d8e]
2021-03-11 11:43:29,878 [main:105] - GENERATED CALL = (ZImpl2().test()).lowercase()
2021-03-11 11:43:29,878 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]]
2021-03-11 11:43:29,878 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]
2021-03-11 11:43:29,994 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:29,999 [main:105] - GENERATED CALL = (ZImpl2().test()).removeSuffix("ignre")
2021-03-11 11:43:29,999 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:43:29,999 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:43:30,112 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:30,114 [main:105] - GENERATED CALL = (ZImpl2().test()).length.toString(124127640)
2021-03-11 11:43:30,114 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]]
2021-03-11 11:43:30,114 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:30,232 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:30,233 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:43:30,233 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1262304026).lowercase()
2021-03-11 11:43:30,234 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:43:30,234 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:30,357 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:30,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:30,464 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:43:30,566 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:30,676 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:30,678 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(2024370951, -336940051).commonPrefixWith("oaosq", true)
2021-03-11 11:43:30,678 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " of type String is (ZImpl2().test()).compareTo("ughby").toString(-1584305398)
2021-03-11 11:43:30,798 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:30,799 [main:66] - Compilation checking started
2021-03-11 11:43:31,160 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error((ZImpl2().test()).compareTo("ughby").toString(-1584305398) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:31,162 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:43:31,162 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:43:31,162 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:43:31,276 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:43:31,278 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:31,386 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:31,388 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:31,615 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:43:31,616 [main:95] - GENERATED = require(true)
2021-03-11 11:43:31,616 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:43:31,616 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:31,858 [main:55] - randomType = Array<ZImpl3>
2021-03-11 11:43:31,962 [main:302] - generating value of type = Array<ZImpl3> false depth = 0
2021-03-11 11:43:32,091 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: ZImpl3): Array<ZImpl3> = TODO()
2021-03-11 11:43:32,095 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: ZImpl3): Array<ZImpl3> = TODO()
2021-03-11 11:43:32,219 [main:302] - generating value of type = ZImpl3 false depth = 3
2021-03-11 11:43:32,221 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}
2021-03-11 11:43:32,221 [main:95] - GENERATED = arrayOf<ZImpl3>(ZImpl3())
2021-03-11 11:43:32,238 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:32,267 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:43:32,268 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:43:32,301 [main:110] - replacement of prope7 of type Function0<Unit> is { require(true)}
2021-03-11 11:43:32,428 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:43:32,429 [main:66] - Compilation checking started
2021-03-11 11:43:32,743 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        { require(true)} = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:32,745 [main:103] - replacing (this, Kla1)
2021-03-11 11:43:32,745 [main:38] - replacing this Kla1
2021-03-11 11:43:32,745 [main:42] - Getting value of type Kla1
2021-03-11 11:43:32,849 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:43:32,851 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        this.prope3 = "twbli"
    }

    var prope3: Any? = null
}
2021-03-11 11:43:32,851 [main:46] - GENERATED VALUE OF TYPE Kla1 = Kla1()
2021-03-11 11:43:32,851 [main:49] - GENERATED IS CALL =true
2021-03-11 11:43:33,764 [main:55] - randomType = HashMap<Pair<Kla2<String?>?, UByte>, Char>
2021-03-11 11:43:33,879 [main:302] - generating value of type = HashMap<Pair<Kla2<String?>?, UByte>, Char> false depth = 0
2021-03-11 11:43:33,992 [main:43] - GENERATING CALL OF fun <K, V> LinkedHashMap(): HashMap<Pair<Kla2<String?>?, UByte>, Char> = TODO()
2021-03-11 11:43:33,995 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> LinkedHashMap(): HashMap<Pair<Kla2<String?>?, UByte>, Char> = TODO()
2021-03-11 11:43:34,108 [main:95] - GENERATED = LinkedHashMap<Pair<Kla2<String?>?, UByte>, Char>()
2021-03-11 11:43:34,273 [main:94] - GETTING Kla1 from String
2021-03-11 11:43:34,300 [main:94] - GETTING Kla1 from ZImpl3
2021-03-11 11:43:34,328 [main:94] - GETTING Kla1 from String
2021-03-11 11:43:34,328 [main:110] - replacement of this of type Kla1 is Kla1()
2021-03-11 11:43:34,443 [main:33] - Trying to replace Element(THIS_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:43:34,443 [main:66] - Compilation checking started
2021-03-11 11:43:34,945 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:34,946 [main:103] - replacing ({
        prope3.exceptionOrNull()?.let(x)
    }, Unit?)
2021-03-11 11:43:34,946 [main:38] - replacing {
        prope3.exceptionOrNull()?.let(x)
    } Unit?
2021-03-11 11:43:34,946 [main:42] - Getting value of type Unit?
2021-03-11 11:43:35,054 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:43:35,187 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:35,190 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:35,443 [main:302] - generating value of type = Any false depth = 3
2021-03-11 11:43:35,443 [main:95] - GENERATED = println("aodsa")
2021-03-11 11:43:35,444 [main:46] - GENERATED VALUE OF TYPE Unit? = println("aodsa")
2021-03-11 11:43:35,444 [main:49] - GENERATED IS CALL =true
2021-03-11 11:43:36,756 [main:55] - randomType = Triple<ZImpl, ArrayDeque<List<Kla2<String?>>>?, Map<Char, Sequence<Double>>>
2021-03-11 11:43:36,865 [main:302] - generating value of type = Triple<ZImpl, ArrayDeque<List<Kla2<String?>>>?, Map<Char, Sequence<Double>>> false depth = 0
2021-03-11 11:43:36,979 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: ZImpl, second: ArrayDeque<List<Kla2<String?>>>?, third: Map<Char, Sequence<Double>>): Triple<ZImpl, ArrayDeque<List<Kla2<String?>>>?, Map<Char, Sequence<Double>>> = TODO()
2021-03-11 11:43:36,981 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: ZImpl, second: ArrayDeque<List<Kla2<String?>>>?, third: Map<Char, Sequence<Double>>): Triple<ZImpl, ArrayDeque<List<Kla2<String?>>>?, Map<Char, Sequence<Double>>> = TODO()
2021-03-11 11:43:37,089 [main:302] - generating value of type = ZImpl false depth = 3
2021-03-11 11:43:37,091 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:43:37,091 [main:302] - generating value of type = ArrayDeque<List<Kla2<String?>>> false depth = 3
2021-03-11 11:43:37,233 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<List<Kla2<String?>>>): ArrayDeque<List<Kla2<String?>>> = TODO()
2021-03-11 11:43:37,235 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<List<Kla2<String?>>>): ArrayDeque<List<Kla2<String?>>> = TODO()
2021-03-11 11:43:37,502 [main:302] - generating value of type = Collection<List<Kla2<String?>>> false depth = 6
2021-03-11 11:43:37,622 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Collection<List<Kla2<String?>>> = TODO()
2021-03-11 11:43:37,625 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Collection<List<Kla2<String?>>> = TODO()
2021-03-11 11:43:37,861 [main:302] - generating value of type = Int true depth = 9
2021-03-11 11:43:37,863 [main:95] - GENERATED = HashSet<List<Kla2<String?>>>(40924952)
2021-03-11 11:43:37,863 [main:95] - GENERATED = ArrayDeque<List<Kla2<String?>>>(HashSet<List<Kla2<String?>>>(40924952))
2021-03-11 11:43:37,863 [main:302] - generating value of type = Map<Char, Sequence<Double>> false depth = 3
2021-03-11 11:43:37,975 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(): Map<Char, Sequence<Double>> = TODO()
2021-03-11 11:43:37,977 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(): Map<Char, Sequence<Double>> = TODO()
2021-03-11 11:43:38,086 [main:95] - GENERATED = hashMapOf<Char, Sequence<Double>>()
2021-03-11 11:43:38,086 [main:95] - GENERATED = Triple<ZImpl, ArrayDeque<List<Kla2<String?>>>?, Map<Char, Sequence<Double>>>(ZImpl(), ArrayDeque<List<Kla2<String?>>>(HashSet<List<Kla2<String?>>>(40924952)), hashMapOf<Char, Sequence<Double>>())
2021-03-11 11:43:38,123 [main:137] - GENERATING call of type public open fun add(index: kotlin.Int, element: kotlin.collections.List<Kla2<kotlin.String?>>): kotlin.Unit defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@5584e0d7]
2021-03-11 11:43:38,252 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:38,371 [main:302] - generating value of type = List<Kla2<String?>> false depth = 0
2021-03-11 11:43:38,495 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(): List<Kla2<String?>> = TODO()
2021-03-11 11:43:38,497 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(): List<Kla2<String?>> = TODO()
2021-03-11 11:43:38,625 [main:95] - GENERATED = ArrayDeque<Kla2<String?>>()
2021-03-11 11:43:38,626 [main:66] - Generated call from random type = (Triple<ZImpl, ArrayDeque<List<Kla2<String?>>>?, Map<Char, Sequence<Double>>>(ZImpl(), ArrayDeque<List<Kla2<String?>>>(HashSet<List<Kla2<String?>>>(40924952)), hashMapOf<Char, Sequence<Double>>())).second?.add(-30587189, ArrayDeque<Kla2<String?>>())
2021-03-11 11:43:38,628 [main:94] - GETTING Unit? from String
2021-03-11 11:43:38,657 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:43:38,657 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:43:38,764 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:43:38,766 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:38,874 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:38,877 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:39,106 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:43:39,106 [main:95] - GENERATED = print("vtypj")
2021-03-11 11:43:39,107 [main:105] - GENERATED CALL = (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> print("vtypj")})
2021-03-11 11:43:39,107 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:43:39,107 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:43:39,257 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:43:39,258 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:39,385 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:39,387 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:39,655 [main:95] - GENERATED = println(null)
2021-03-11 11:43:39,655 [main:105] - GENERATED CALL = (ZImpl2().test())?.forEach({a: Char -> println(null)})
2021-03-11 11:43:39,655 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:43:39,655 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:39,766 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:39,873 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:39,875 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:43:39,988 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:43:39,990 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:39,995 [main:105] - GENERATED CALL = (ZImpl2().test())?.subSequence(1045551450, -1796488242).forEach({a: Char -> println()})
2021-03-11 11:43:39,995 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:43:39,995 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:40,101 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:40,255 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:40,257 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:43:40,376 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:43:40,378 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:40,521 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:40,524 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:40,773 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:43:40,774 [main:95] - GENERATED = check(true)
2021-03-11 11:43:40,775 [main:105] - GENERATED CALL = (ZImpl2().test())?.subSequence(-1217795838, -1913311453).forEachIndexed({a: Int, b: Char -> check(true)})
2021-03-11 11:43:40,775 [main:110] - replacement of {
        prope3.exceptionOrNull()?.let(x)
    } of type Unit? is (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> print("vtypj")})
2021-03-11 11:43:40,882 [main:33] - Trying to replace BLOCK on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:43:40,882 [main:66] - Compilation checking started
2021-03-11 11:43:40,885 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:43:40,885 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> print("vtypj")})
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:40,887 [main:103] - replacing (", got ", String)
2021-03-11 11:43:40,887 [main:38] - replacing ", got " String
2021-03-11 11:43:40,887 [main:42] - Getting value of type String
2021-03-11 11:43:40,995 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:40,996 [main:46] - GENERATED VALUE OF TYPE String = "hpgvo"
2021-03-11 11:43:40,996 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:41,673 [main:55] - randomType = Map<Kla5, Kla5?>?
2021-03-11 11:43:41,673 [main:94] - GETTING String from String
2021-03-11 11:43:41,706 [main:101] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]]
2021-03-11 11:43:41,706 [main:137] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@cd7dee8]
2021-03-11 11:43:41,810 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:41,811 [main:105] - GENERATED CALL = (ZImpl3().test()).dropLast(-196800586)
2021-03-11 11:43:41,811 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]]
2021-03-11 11:43:41,812 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:41,922 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:42,036 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:42,038 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]
2021-03-11 11:43:42,144 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:43:42,284 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:43:42,288 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:43:42,673 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:43:42,675 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 11:43:42,677 [main:95] - GENERATED = Regex("dtntw", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-11 11:43:42,791 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:43:42,793 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:43:42,903 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:43:42,907 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:43:43,138 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:43:43,140 [main:95] - GENERATED = StringBuilder(-1204158444)
2021-03-11 11:43:43,141 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(2033546715, 1220379510).replace(Regex("dtntw", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> StringBuilder(-1204158444)})
2021-03-11 11:43:43,141 [main:101] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]]
2021-03-11 11:43:43,141 [main:137] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ded606]
2021-03-11 11:43:43,290 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:43,296 [main:105] - GENERATED CALL = (ZImpl3().test()).removePrefix("thrnx")
2021-03-11 11:43:43,296 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]]
2021-03-11 11:43:43,296 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]
2021-03-11 11:43:43,421 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:43,422 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:43,424 [main:105] - GENERATED CALL = (ZImpl3().test()).dropWhile({a: Char -> true})
2021-03-11 11:43:43,424 [main:101] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]]
2021-03-11 11:43:43,424 [main:137] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@258a435c]
2021-03-11 11:43:43,556 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:43,558 [main:105] - GENERATED CALL = (ZImpl3().test()).trimMargin("yfyva")
2021-03-11 11:43:43,558 [main:101] - Case = [public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]]
2021-03-11 11:43:43,558 [main:137] - GENERATING call of type public fun kotlin.String.substringBeforeLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@9ecb891]
2021-03-11 11:43:43,682 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:43,796 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:43,797 [main:105] - GENERATED CALL = (ZImpl3().test()).substringBeforeLast('襊', "thqjw")
2021-03-11 11:43:43,797 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]]
2021-03-11 11:43:43,797 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:43,903 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:43,905 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]
2021-03-11 11:43:43,906 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-1711747210).uppercase()
2021-03-11 11:43:43,906 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]]
2021-03-11 11:43:43,906 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:43:44,015 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:44,017 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]
2021-03-11 11:43:44,017 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-854234835).titlecase()
2021-03-11 11:43:44,017 [main:101] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]]
2021-03-11 11:43:44,017 [main:137] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@21b41bcf]
2021-03-11 11:43:44,125 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:44,266 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:44,267 [main:105] - GENERATED CALL = (ZImpl3().test()).padEnd(320988801, '臃')
2021-03-11 11:43:44,268 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]]
2021-03-11 11:43:44,268 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]
2021-03-11 11:43:44,392 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:44,394 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:44,395 [main:105] - GENERATED CALL = (ZImpl3().test()).dropLastWhile({a: Char -> false})
2021-03-11 11:43:44,395 [main:110] - replacement of ", got " of type String is (ZImpl3().test()).dropLastWhile({a: Char -> false})
2021-03-11 11:43:44,531 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:44,531 [main:66] - Compilation checking started
2021-03-11 11:43:44,861 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + (ZImpl3().test()).dropLastWhile({a: Char -> false}) + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:44,862 [main:103] - replacing (prope3.exceptionOrNull()?.let(x), Unit?)
2021-03-11 11:43:44,862 [main:38] - replacing prope3.exceptionOrNull()?.let(x) Unit?
2021-03-11 11:43:44,862 [main:42] - Getting value of type Unit?
2021-03-11 11:43:44,971 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:43:45,083 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:45,085 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:45,311 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-11 11:43:45,312 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:43:45,425 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:45,427 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:45,699 [main:302] - generating value of type = Any false depth = 7
2021-03-11 11:43:45,699 [main:95] - GENERATED = print("qxsur")
2021-03-11 11:43:45,699 [main:95] - GENERATED = contract({ print("qxsur")})
2021-03-11 11:43:45,699 [main:46] - GENERATED VALUE OF TYPE Unit? = contract({ print("qxsur")})
2021-03-11 11:43:45,699 [main:49] - GENERATED IS CALL =true
2021-03-11 11:43:46,232 [main:55] - randomType = HashSet<Function2<String, ULong, ULong>>
2021-03-11 11:43:46,343 [main:302] - generating value of type = HashSet<Function2<String, ULong, ULong>> false depth = 0
2021-03-11 11:43:46,519 [main:43] - GENERATING CALL OF fun <E> HashSet(): HashSet<Function2<String, ULong, ULong>> = TODO()
2021-03-11 11:43:46,523 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(): HashSet<Function2<String, ULong, ULong>> = TODO()
2021-03-11 11:43:46,680 [main:95] - GENERATED = HashSet<Function2<String, ULong, ULong>>()
2021-03-11 11:43:46,933 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.HashSet[DeserializedSimpleFunctionDescriptor@7b56617a]
2021-03-11 11:43:46,933 [main:137] - GENERATING call of type public fun <T> kotlin.Array<T>.reverse(): kotlin.Unit defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@4c8c2287]
2021-03-11 11:43:46,933 [main:66] - Generated call from random type = (HashSet<Function2<String, ULong, ULong>>()).toArray().reverse()
2021-03-11 11:43:46,935 [main:94] - GETTING Unit? from ZImpl3
2021-03-11 11:43:46,971 [main:94] - GETTING Unit? from String
2021-03-11 11:43:47,004 [main:101] - Case = [public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:43:47,005 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:43:47,118 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:43:47,120 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:47,251 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:47,254 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:43:47,498 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:43:47,499 [main:95] - GENERATED = println("obbor")
2021-03-11 11:43:47,499 [main:105] - GENERATED CALL = (ZImpl2().test())?.forEach({a: Char -> println("obbor")})
2021-03-11 11:43:47,499 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:43:47,499 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:47,639 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:47,757 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:47,759 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:43:47,904 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:43:47,907 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:47,913 [main:105] - GENERATED CALL = (ZImpl2().test())?.subSequence(-640017216, 1944996303).forEachIndexed({a: Int, b: Char -> println()})
2021-03-11 11:43:47,913 [main:101] - Case = [public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]]
2021-03-11 11:43:47,913 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEachIndexed(action: (index: kotlin.Int, kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7f8a7bc3]
2021-03-11 11:43:48,037 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Unit> false depth = 0
2021-03-11 11:43:48,038 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:48,170 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:48,172 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:43:48,429 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:43:48,430 [main:95] - GENERATED = require(false)
2021-03-11 11:43:48,430 [main:105] - GENERATED CALL = (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-11 11:43:48,431 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]]
2021-03-11 11:43:48,431 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:48,533 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:48,644 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:48,646 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.forEach(action: (kotlin.Char) -> kotlin.Unit): kotlin.Unit defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b438143]
2021-03-11 11:43:48,748 [main:302] - generating value of type = Function1<Char, Unit> false depth = 0
2021-03-11 11:43:48,750 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:43:48,886 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:48,889 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:43:49,284 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:43:49,286 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:43:49,288 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:43:49,412 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:43:49,414 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:43:49,823 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:43:49,826 [main:302] - generating value of type = Function0<Any> false depth = 8
2021-03-11 11:43:49,828 [main:302] - generating value of type = Any false depth = 9
2021-03-11 11:43:49,828 [main:95] - GENERATED = require(true, { "slfyk"})
2021-03-11 11:43:49,828 [main:95] - GENERATED = repeat(1898877289, {a: Int -> require(true, { "slfyk"})})
2021-03-11 11:43:49,829 [main:105] - GENERATED CALL = (ZImpl2().test())?.subSequence(1399032807, -772084619).forEach({a: Char -> repeat(1898877289, {a: Int -> require(true, { "slfyk"})})})
2021-03-11 11:43:49,829 [main:110] - replacement of prope3.exceptionOrNull()?.let(x) of type Unit? is (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> require(false)})
2021-03-11 11:43:49,950 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:43:49,951 [main:66] - Compilation checking started
2021-03-11 11:43:50,315 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        (ZImpl2().test())?.forEachIndexed({a: Int, b: Char -> require(false)})
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        prope5++
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:50,317 [main:103] - replacing (prope5++, Int)
2021-03-11 11:43:50,317 [main:38] - replacing prope5++ Int
2021-03-11 11:43:50,317 [main:42] - Getting value of type Int
2021-03-11 11:43:50,424 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:50,425 [main:46] - GENERATED VALUE OF TYPE Int = -1180087063
2021-03-11 11:43:50,426 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:50,668 [main:55] - randomType = Kla2<Float>
2021-03-11 11:43:50,777 [main:302] - generating value of type = Kla2<Float> false depth = 0
2021-03-11 11:43:50,779 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:43:51,159 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 11:43:51,161 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:43:51,183 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@1fca4ef2]
2021-03-11 11:43:51,296 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:51,296 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:43:51,412 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:51,413 [main:66] - Generated call from random type = (Kla5).equals("cknvl").compareTo(false)
2021-03-11 11:43:51,414 [main:94] - GETTING Int from ZImpl3
2021-03-11 11:43:51,449 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]]
2021-03-11 11:43:51,449 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:43:51,568 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:43:51,569 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:43:51,680 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:51,681 [main:105] - GENERATED CALL = (ZImpl3()).equals("izfbi").compareTo(false)
2021-03-11 11:43:51,681 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]]
2021-03-11 11:43:51,681 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:43:51,784 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:51,786 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]
2021-03-11 11:43:51,889 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:52,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:52,023 [main:105] - GENERATED CALL = (ZImpl3()).test("qapde").compareTo("nutlb", true)
2021-03-11 11:43:52,023 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a65a6d7]]
2021-03-11 11:43:52,023 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:43:52,155 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:52,156 [main:137] - GENERATING call of type public fun kotlin.String.toInt(): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a65a6d7]
2021-03-11 11:43:52,157 [main:105] - GENERATED CALL = (ZImpl3()).test("gcbqy").toInt()
2021-03-11 11:43:52,157 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf]]
2021-03-11 11:43:52,157 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:43:52,276 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:52,278 [main:105] - GENERATED CALL = (ZImpl3()).test("wbqsm").length
2021-03-11 11:43:52,278 [main:110] - replacement of prope5++ of type Int is (ZImpl3()).test("wbqsm").length
2021-03-11 11:43:52,403 [main:33] - Trying to replace Element(POSTFIX_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:52,404 [main:66] - Compilation checking started
2021-03-11 11:43:52,952 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:52,954 [main:103] - replacing ("FAIL", String)
2021-03-11 11:43:52,954 [main:38] - replacing "FAIL" String
2021-03-11 11:43:52,954 [main:42] - Getting value of type String
2021-03-11 11:43:53,074 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:53,077 [main:46] - GENERATED VALUE OF TYPE String = "eoyhx"
2021-03-11 11:43:53,077 [main:49] - GENERATED IS CALL =false
2021-03-11 11:43:53,085 [main:55] - randomType = Kla0
2021-03-11 11:43:53,200 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:43:53,201 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}
2021-03-11 11:43:53,307 [main:194] - Type params = []
2021-03-11 11:43:53,411 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:43:53,572 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:53,576 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:53,850 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:43:53,976 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:53,979 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:54,334 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:54,335 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:54,356 [main:94] - GETTING String from String
2021-03-11 11:43:54,383 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb06d55]]
2021-03-11 11:43:54,383 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6eb06d55]
2021-03-11 11:43:54,384 [main:105] - GENERATED CALL = (ZImpl2().test()).uppercase()
2021-03-11 11:43:54,384 [main:101] - Case = [public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]]
2021-03-11 11:43:54,384 [main:137] - GENERATING call of type public inline fun kotlin.String.dropLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3192c24f]
2021-03-11 11:43:54,519 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:54,521 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:54,523 [main:105] - GENERATED CALL = (ZImpl2().test()).dropLastWhile({a: Char -> true})
2021-03-11 11:43:54,523 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]]
2021-03-11 11:43:54,523 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:54,649 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:54,779 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:54,781 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]
2021-03-11 11:43:54,910 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:55,023 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:55,025 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1121160836, 690115833).substring(106352309, 1445134597)
2021-03-11 11:43:55,025 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]]
2021-03-11 11:43:55,025 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:55,135 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:55,264 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:55,266 [main:137] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@65a3fc7b]
2021-03-11 11:43:55,418 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:55,421 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1680595631, 354408101).repeat(441896401)
2021-03-11 11:43:55,421 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]]
2021-03-11 11:43:55,421 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]
2021-03-11 11:43:55,542 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:43:55,675 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:43:55,677 [main:105] - GENERATED CALL = (ZImpl2().test()).substringBefore('⬳', "xedfo")
2021-03-11 11:43:55,677 [main:101] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39aed6b5]]
2021-03-11 11:43:55,677 [main:137] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39aed6b5]
2021-03-11 11:43:55,819 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:55,826 [main:105] - GENERATED CALL = (ZImpl2().test()).removeSurrounding("punhd")
2021-03-11 11:43:55,826 [main:101] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]]
2021-03-11 11:43:55,826 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]
2021-03-11 11:43:55,958 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:43:55,960 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:43:55,963 [main:105] - GENERATED CALL = (ZImpl2().test()).filterNot({a: Char -> true})
2021-03-11 11:43:55,963 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596e86e0]]
2021-03-11 11:43:55,963 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toUpperCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@596e86e0]
2021-03-11 11:43:55,963 [main:105] - GENERATED CALL = (ZImpl2().test()).toUpperCase()
2021-03-11 11:43:55,964 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]]
2021-03-11 11:43:55,964 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]
2021-03-11 11:43:55,964 [main:105] - GENERATED CALL = (ZImpl2().test()).capitalize()
2021-03-11 11:43:55,964 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:43:55,964 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:43:56,093 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:56,206 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:43:56,207 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:43:56,309 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:43:56,449 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:43:56,451 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1182692831, 1773476928).commonPrefixWith("ougkt", false)
2021-03-11 11:43:56,451 [main:110] - replacement of "FAIL" of type String is (ZImpl2().test()).removeSurrounding("punhd")
2021-03-11 11:43:56,566 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:43:56,566 [main:66] - Compilation checking started
2021-03-11 11:43:56,902 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = (ZImpl2().test()).removeSurrounding("punhd")

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope2.prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:56,904 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:43:56,904 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:43:56,904 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:43:57,010 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:43:57,014 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:43:57,020 [main:55] - randomType = ZImpl
2021-03-11 11:43:57,124 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:43:57,126 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:43:57,136 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:43:57,153 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:43:57,171 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:43:57,171 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:43:57,171 [main:103] - replacing (prope2, Kla4)
2021-03-11 11:43:57,171 [main:38] - replacing prope2 Kla4
2021-03-11 11:43:57,172 [main:42] - Getting value of type Kla4
2021-03-11 11:43:57,310 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:43:57,312 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:43:57,312 [main:46] - GENERATED VALUE OF TYPE Kla4 = Kla4()
2021-03-11 11:43:57,312 [main:49] - GENERATED IS CALL =true
2021-03-11 11:43:57,318 [main:55] - randomType = ZImpl
2021-03-11 11:43:57,422 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:43:57,423 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:43:57,433 [main:94] - GETTING Kla4 from String
2021-03-11 11:43:57,454 [main:94] - GETTING Kla4 from ZImpl3
2021-03-11 11:43:57,477 [main:94] - GETTING Kla4 from String
2021-03-11 11:43:57,477 [main:110] - replacement of prope2 of type Kla4 is Kla4()
2021-03-11 11:43:57,580 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:43:57,581 [main:66] - Compilation checking started
2021-03-11 11:43:58,094 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        prope3.exceptionOrNull()?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:43:58,096 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:43:58,096 [main:38] - replacing c Continuation<*>
2021-03-11 11:43:58,096 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:43:58,240 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:43:58,355 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:43:58,357 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:43:58,714 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:43:58,816 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:58,819 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:43:59,035 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:43:59,198 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:59,201 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:43:59,566 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 11:43:59,675 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:43:59,677 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:44:00,001 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:44:00,001 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:44:00,001 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:44:00,001 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:44:00,001 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:44:00,258 [main:55] - randomType = Function1<Boolean, Double>
2021-03-11 11:44:00,259 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:44:00,284 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:44:00,306 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:44:00,306 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:44:00,306 [main:103] - replacing (prope3.exceptionOrNull(), Throwable?)
2021-03-11 11:44:00,306 [main:38] - replacing prope3.exceptionOrNull() Throwable?
2021-03-11 11:44:00,307 [main:42] - Getting value of type Throwable?
2021-03-11 11:44:00,422 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:44:00,528 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:44:00,531 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:44:00,743 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:44:00,747 [main:95] - GENERATED = UninitializedPropertyAccessException(CharacterCodingException())
2021-03-11 11:44:00,747 [main:46] - GENERATED VALUE OF TYPE Throwable? = UninitializedPropertyAccessException(CharacterCodingException())
2021-03-11 11:44:00,747 [main:49] - GENERATED IS CALL =true
2021-03-11 11:44:00,861 [main:55] - randomType = UShort
2021-03-11 11:44:00,986 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:44:01,030 [main:94] - GETTING Throwable? from String
2021-03-11 11:44:01,057 [main:94] - GETTING Throwable? from String
2021-03-11 11:44:01,058 [main:94] - GETTING Throwable? from ZImpl3
2021-03-11 11:44:01,081 [main:110] - replacement of prope3.exceptionOrNull() of type Throwable? is UninitializedPropertyAccessException(CharacterCodingException())
2021-03-11 11:44:01,191 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:44:01,191 [main:66] - Compilation checking started
2021-03-11 11:44:01,637 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:01,639 [main:103] - replacing (prope3.getOrThrow(), Ty0)
2021-03-11 11:44:01,639 [main:38] - replacing prope3.getOrThrow() Ty0
2021-03-11 11:44:01,639 [main:42] - Getting value of type Ty0
2021-03-11 11:44:01,740 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-11 11:44:01,744 [main:46] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-11 11:44:01,977 [main:55] - randomType = Pair<ZImpl?, Kla1>
2021-03-11 11:44:02,077 [main:302] - generating value of type = Pair<ZImpl?, Kla1> false depth = 0
2021-03-11 11:44:02,181 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: ZImpl?, second: Kla1): Pair<ZImpl?, Kla1> = TODO()
2021-03-11 11:44:02,183 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: ZImpl?, second: Kla1): Pair<ZImpl?, Kla1> = TODO()
2021-03-11 11:44:02,285 [main:302] - generating value of type = ZImpl false depth = 3
2021-03-11 11:44:02,286 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:44:02,287 [main:302] - generating value of type = Kla1 false depth = 3
2021-03-11 11:44:02,288 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}
2021-03-11 11:44:02,288 [main:95] - GENERATED = Pair<ZImpl?, Kla1>(ZImpl(), Kla1())
2021-03-11 11:44:02,299 [main:94] - GETTING Ty0 from ZImpl3
2021-03-11 11:44:02,316 [main:94] - GETTING Ty0 from String
2021-03-11 11:44:02,332 [main:94] - GETTING Ty0 from String
2021-03-11 11:44:02,332 [main:107] - Cant find and generate replacement for prope3.getOrThrow() type Ty0
2021-03-11 11:44:02,332 [main:103] - replacing (prope6, Boolean)
2021-03-11 11:44:02,332 [main:38] - replacing prope6 Boolean
2021-03-11 11:44:02,332 [main:42] - Getting value of type Boolean
2021-03-11 11:44:02,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:02,468 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:44:02,469 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:02,592 [main:55] - randomType = UInt
2021-03-11 11:44:02,708 [main:302] - generating value of type = UInt true depth = 0
2021-03-11 11:44:02,761 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@b21d8c2]
2021-03-11 11:44:02,762 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@418eed39]
2021-03-11 11:44:02,762 [main:66] - Generated call from random type = (364608941.toUInt()).toDouble().isNaN()
2021-03-11 11:44:02,763 [main:94] - GETTING Boolean from String
2021-03-11 11:44:02,794 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:44:02,794 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:02,905 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:03,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:03,028 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:44:03,028 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(1362499564, -1295967223).any()
2021-03-11 11:44:03,028 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]]
2021-03-11 11:44:03,028 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:44:03,127 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:03,128 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]
2021-03-11 11:44:03,129 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-1430912159).isDefined()
2021-03-11 11:44:03,129 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:44:03,129 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:44:03,227 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:03,228 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:44:03,351 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:03,353 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("nwjnu").and(true)
2021-03-11 11:44:03,353 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36bedf4]]
2021-03-11 11:44:03,353 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:03,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:03,571 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:03,573 [main:137] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36bedf4]
2021-03-11 11:44:03,692 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:03,799 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:03,800 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-310694470, -986564608).endsWith('鷧', false)
2021-03-11 11:44:03,800 [main:101] - Case = [public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]]
2021-03-11 11:44:03,800 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]
2021-03-11 11:44:03,903 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:03,905 [main:105] - GENERATED CALL = (ZImpl3().test()).matches("raclc")
2021-03-11 11:44:03,905 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]]
2021-03-11 11:44:03,905 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5028edc7]
2021-03-11 11:44:03,905 [main:105] - GENERATED CALL = (ZImpl3().test()).isNotEmpty()
2021-03-11 11:44:03,905 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb6dd8e]]
2021-03-11 11:44:03,905 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:04,016 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:04,119 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:04,120 [main:137] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4eb6dd8e]
2021-03-11 11:44:04,254 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:04,363 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:04,364 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(369897535, 318600720).startsWith('', true)
2021-03-11 11:44:04,364 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:44:04,365 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:44:04,478 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:44:04,596 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:04,596 [main:105] - GENERATED CALL = (ZImpl3().test()).equals(null).equals("lznvt")
2021-03-11 11:44:04,596 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]]
2021-03-11 11:44:04,596 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:04,705 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:04,812 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:04,814 [main:137] - GENERATING call of type public fun kotlin.CharSequence.isBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@18d857d8]
2021-03-11 11:44:04,814 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1017041600, 1807916338).isBlank()
2021-03-11 11:44:04,814 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]]
2021-03-11 11:44:04,814 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:04,923 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:05,049 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:05,051 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]
2021-03-11 11:44:05,051 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-403085061, -1181002906).isEmpty()
2021-03-11 11:44:05,051 [main:110] - replacement of prope6 of type Boolean is (ZImpl3().test()).isNotEmpty()
2021-03-11 11:44:05,168 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:05,169 [main:66] - Compilation checking started
2021-03-11 11:44:05,544 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        (ZImpl3().test()).isNotEmpty() = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:05,547 [main:103] - replacing ({
        "iwgiw"
    }, Any?)
2021-03-11 11:44:05,547 [main:38] - replacing {
        "iwgiw"
    } Any?
2021-03-11 11:44:05,547 [main:42] - Getting value of type Any?
2021-03-11 11:44:05,705 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:05,705 [main:46] - GENERATED VALUE OF TYPE Any? = "zlefl"
2021-03-11 11:44:05,705 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:05,712 [main:55] - randomType = Kla1
2021-03-11 11:44:05,866 [main:302] - generating value of type = Kla1 false depth = 0
2021-03-11 11:44:05,869 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}
2021-03-11 11:44:05,897 [main:66] - Generated call from random type = (Kla1()).prope3
2021-03-11 11:44:05,897 [main:110] - replacement of {
        "iwgiw"
    } of type Any? is (Kla1()).prope3
2021-03-11 11:44:06,018 [main:33] - Trying to replace BLOCK on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:06,018 [main:66] - Compilation checking started
2021-03-11 11:44:06,022 [main:71] - Wrong syntax or breaks conditions
2021-03-11 11:44:06,022 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) (Kla1()).prope3
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = false

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:06,024 [main:103] - replacing (false, Boolean)
2021-03-11 11:44:06,024 [main:38] - replacing false Boolean
2021-03-11 11:44:06,024 [main:42] - Getting value of type Boolean
2021-03-11 11:44:06,134 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:06,135 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:44:06,136 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:06,138 [main:55] - randomType = Boolean
2021-03-11 11:44:06,241 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:06,252 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:44:06,352 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:06,354 [main:66] - Generated call from random type = (false).xor(true)
2021-03-11 11:44:06,354 [main:94] - GETTING Boolean from String
2021-03-11 11:44:06,372 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5363a6b]]
2021-03-11 11:44:06,372 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:44:06,494 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:06,496 [main:137] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5363a6b]
2021-03-11 11:44:06,609 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:06,735 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:06,736 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-659662357).equals('篸', false)
2021-03-11 11:44:06,736 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]]
2021-03-11 11:44:06,736 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:06,889 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,003 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,004 [main:137] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d67215d]
2021-03-11 11:44:07,004 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-971109450, -741701481).any()
2021-03-11 11:44:07,004 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]]
2021-03-11 11:44:07,005 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:44:07,115 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,117 [main:137] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4f65e030]
2021-03-11 11:44:07,117 [main:105] - GENERATED CALL = (ZImpl2().test()).get(-1245430427).isISOControl()
2021-03-11 11:44:07,117 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]]
2021-03-11 11:44:07,117 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20ffc280]
2021-03-11 11:44:07,118 [main:105] - GENERATED CALL = (ZImpl2().test()).isEmpty()
2021-03-11 11:44:07,118 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36bedf4]]
2021-03-11 11:44:07,118 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:07,220 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,348 [main:137] - GENERATING call of type public fun kotlin.CharSequence.endsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@36bedf4]
2021-03-11 11:44:07,462 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:07,576 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:07,577 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1140037703, -144215452).endsWith('兰', false)
2021-03-11 11:44:07,578 [main:101] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]]
2021-03-11 11:44:07,578 [main:137] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@132f5e64]
2021-03-11 11:44:07,578 [main:105] - GENERATED CALL = (ZImpl2().test()).none()
2021-03-11 11:44:07,578 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f5f885b]]
2021-03-11 11:44:07,578 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:07,703 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,825 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:07,827 [main:137] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f5f885b]
2021-03-11 11:44:07,932 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:08,035 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:44:08,177 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:44:08,180 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:44:08,479 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:44:08,481 [main:95] - GENERATED = StringBuilder("nwpcw")
2021-03-11 11:44:08,617 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:08,733 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:08,873 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:08,875 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(1502290604, -1192873637).regionMatches(-508737649, StringBuilder("nwpcw"), -1344260918, 2074377593, false)
2021-03-11 11:44:08,875 [main:101] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:44:08,875 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:44:08,980 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:09,092 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:09,093 [main:105] - GENERATED CALL = (ZImpl2().test()).endsWith("stiyw", false)
2021-03-11 11:44:09,094 [main:101] - Case = [public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f5f885b]]
2021-03-11 11:44:09,094 [main:137] - GENERATING call of type public fun kotlin.CharSequence.regionMatches(thisOffset: kotlin.Int, other: kotlin.CharSequence, otherOffset: kotlin.Int, length: kotlin.Int, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f5f885b]
2021-03-11 11:44:09,234 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:09,373 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:44:09,498 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:44:09,501 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:44:09,811 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:44:09,813 [main:95] - GENERATED = StringBuilder("vimwm")
2021-03-11 11:44:09,932 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:10,039 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:10,191 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:10,193 [main:105] - GENERATED CALL = (ZImpl2().test()).regionMatches(747141817, StringBuilder("vimwm"), -1652769761, 1567264440, true)
2021-03-11 11:44:10,193 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:44:10,193 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:44:10,320 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:10,321 [main:105] - GENERATED CALL = (ZImpl2().test()).equals("awxyg")
2021-03-11 11:44:10,321 [main:110] - replacement of false of type Boolean is true
2021-03-11 11:44:10,461 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:44:10,461 [main:66] - Compilation checking started
2021-03-11 11:44:10,973 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:10,975 [main:103] - replacing ("Continuation " + c, String)
2021-03-11 11:44:10,975 [main:38] - replacing "Continuation " + c String
2021-03-11 11:44:10,975 [main:42] - Getting value of type String
2021-03-11 11:44:11,087 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:11,088 [main:46] - GENERATED VALUE OF TYPE String = "tmsgg"
2021-03-11 11:44:11,088 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:11,571 [main:55] - randomType = Function1<ArrayDeque<Kla5>, ArrayDeque<String>>
2021-03-11 11:44:11,572 [main:94] - GETTING String from String
2021-03-11 11:44:11,599 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:44:11,599 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:44:11,716 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:11,717 [main:105] - GENERATED CALL = (ZImpl2().test()).length.toString(533102543)
2021-03-11 11:44:11,718 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]]
2021-03-11 11:44:11,718 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]
2021-03-11 11:44:11,832 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:11,950 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:11,952 [main:105] - GENERATED CALL = (ZImpl2().test()).substringBefore('㤨', "xylvo")
2021-03-11 11:44:11,952 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]]
2021-03-11 11:44:11,953 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:12,061 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:12,174 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:12,175 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]
2021-03-11 11:44:12,279 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:44:12,414 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:44:12,416 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-11 11:44:12,805 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:44:12,807 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-11 11:44:12,809 [main:95] - GENERATED = Regex("uzles", kotlin.text.RegexOption.MULTILINE)
2021-03-11 11:44:12,924 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:44:12,926 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:44:13,045 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:44:13,047 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:44:13,295 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:44:13,297 [main:95] - GENERATED = StringBuilder(939798515)
2021-03-11 11:44:13,297 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(-1162174456, -910036672).replace(Regex("uzles", kotlin.text.RegexOption.MULTILINE), {a: MatchResult -> StringBuilder(939798515)})
2021-03-11 11:44:13,297 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:44:13,297 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:44:13,408 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:13,409 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:44:13,521 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:13,523 [main:105] - GENERATED CALL = (ZImpl2().test()).compareTo("ssktw").toString(-495807795)
2021-03-11 11:44:13,523 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:44:13,523 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:44:13,645 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:13,647 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:44:13,756 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:13,758 [main:105] - GENERATED CALL = (ZImpl2().test()).get(2101044325).plus("eimvw")
2021-03-11 11:44:13,758 [main:101] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]]
2021-03-11 11:44:13,758 [main:137] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@45ff6c5e]
2021-03-11 11:44:13,863 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:44:13,864 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:44:13,866 [main:105] - GENERATED CALL = (ZImpl2().test()).dropWhile({a: Char -> true})
2021-03-11 11:44:13,866 [main:101] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]]
2021-03-11 11:44:13,866 [main:137] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@423763f]
2021-03-11 11:44:13,967 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:44:13,969 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:44:13,970 [main:105] - GENERATED CALL = (ZImpl2().test()).takeWhile({a: Char -> true})
2021-03-11 11:44:13,970 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]]
2021-03-11 11:44:13,970 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:14,108 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:14,224 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:14,226 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]
2021-03-11 11:44:14,346 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:14,472 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:14,473 [main:105] - GENERATED CALL = (ZImpl2().test()).subSequence(113565250, 737746866).substring(-2051055198, 1203890453)
2021-03-11 11:44:14,473 [main:101] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e38c628]]
2021-03-11 11:44:14,474 [main:137] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6e38c628]
2021-03-11 11:44:14,474 [main:105] - GENERATED CALL = (ZImpl2().test()).decapitalize()
2021-03-11 11:44:14,474 [main:101] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b214e34]]
2021-03-11 11:44:14,474 [main:137] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6b214e34]
2021-03-11 11:44:14,583 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:14,690 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:14,795 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:14,796 [main:105] - GENERATED CALL = (ZImpl2().test()).replaceBeforeLast('摣', "gsowv", "qtsog")
2021-03-11 11:44:14,796 [main:110] - replacement of "Continuation " + c of type String is (ZImpl2().test()).decapitalize()
2021-03-11 11:44:14,928 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:14,928 [main:66] - Compilation checking started
2021-03-11 11:44:15,262 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        x(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error((ZImpl2().test()).decapitalize() + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:15,263 [main:103] - replacing (x, Function1<Ty0, Unit>)
2021-03-11 11:44:15,263 [main:38] - replacing x Function1<Ty0, Unit>
2021-03-11 11:44:15,263 [main:42] - Getting value of type Function1<Ty0, Unit>
2021-03-11 11:44:15,373 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-11 11:44:15,374 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:44:15,487 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:44:15,489 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:44:15,724 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:44:15,726 [main:95] - GENERATED = check(true)
2021-03-11 11:44:15,726 [main:46] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> check(true)}
2021-03-11 11:44:15,726 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:15,840 [main:55] - randomType = Float
2021-03-11 11:44:15,944 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:44:15,993 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 11:44:16,019 [main:94] - GETTING Function1<Ty0, Unit> from ZImpl3
2021-03-11 11:44:16,041 [main:94] - GETTING Function1<Ty0, Unit> from String
2021-03-11 11:44:16,042 [main:110] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> check(true)}
2021-03-11 11:44:16,199 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:44:16,200 [main:66] - Compilation checking started
2021-03-11 11:44:16,757 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (prope5 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:16,759 [main:103] - replacing (prope5, Int)
2021-03-11 11:44:16,760 [main:38] - replacing prope5 Int
2021-03-11 11:44:16,760 [main:42] - Getting value of type Int
2021-03-11 11:44:16,881 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:16,882 [main:46] - GENERATED VALUE OF TYPE Int = 477215846
2021-03-11 11:44:16,883 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:17,007 [main:55] - randomType = Byte
2021-03-11 11:44:17,133 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:44:17,185 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1a5606ec]
2021-03-11 11:44:17,290 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:44:17,292 [main:137] - GENERATING call of type public open fun toInt(): kotlin.Int defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@635dea10]
2021-03-11 11:44:17,292 [main:66] - Generated call from random type = (31).div(0.6923910558348495).toInt()
2021-03-11 11:44:17,293 [main:94] - GETTING Int from String
2021-03-11 11:44:17,318 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]]
2021-03-11 11:44:17,318 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.String.compareTo(other: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@d297585]
2021-03-11 11:44:17,422 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:17,525 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:17,526 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("bvpop", false)
2021-03-11 11:44:17,527 [main:101] - Case = [public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ba795]]
2021-03-11 11:44:17,527 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.sumBy(selector: (kotlin.Char) -> kotlin.Int): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@339ba795]
2021-03-11 11:44:17,673 [main:302] - generating value of type = Function1<Char, Int> false depth = 0
2021-03-11 11:44:17,675 [main:302] - generating value of type = Int true depth = 1
2021-03-11 11:44:17,678 [main:105] - GENERATED CALL = (ZImpl3().test()).sumBy({a: Char -> 1496370941})
2021-03-11 11:44:17,678 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d6aaf67]]
2021-03-11 11:44:17,678 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:17,799 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:17,922 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:17,923 [main:137] - GENERATING call of type public inline fun kotlin.CharSequence.indexOfFirst(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1d6aaf67]
2021-03-11 11:44:18,062 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:44:18,063 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:44:18,065 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(185547503, -1097290988).indexOfFirst({a: Char -> true})
2021-03-11 11:44:18,065 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]]
2021-03-11 11:44:18,066 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:44:18,191 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:18,192 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:44:18,312 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:18,314 [main:105] - GENERATED CALL = (ZImpl3().test()).equals("uvukg").compareTo(true)
2021-03-11 11:44:18,314 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.ExperimentalStdlibApi @kotlin.SinceKotlin @kotlin.internal.InlineOnly public val kotlin.Char.code: kotlin.Int defined in kotlin[DeserializedPropertyDescriptor@2540410e]]
2021-03-11 11:44:18,314 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:44:18,424 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:18,425 [main:105] - GENERATED CALL = (ZImpl3().test()).get(503351787).code
2021-03-11 11:44:18,426 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75211eaa]]
2021-03-11 11:44:18,426 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Int): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75211eaa]
2021-03-11 11:44:18,554 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:18,555 [main:105] - GENERATED CALL = (ZImpl3().test()).length.or(-1483447984)
2021-03-11 11:44:18,555 [main:101] - Case = [public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4808fdf1]]
2021-03-11 11:44:18,556 [main:137] - GENERATING call of type public fun kotlin.CharSequence.indexOfAny(chars: kotlin.CharArray, startIndex: kotlin.Int = ..., ignoreCase: kotlin.Boolean = ...): kotlin.Int defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4808fdf1]
2021-03-11 11:44:18,685 [main:302] - generating value of type = CharArray false depth = 0
2021-03-11 11:44:18,806 [main:43] - GENERATING CALL OF fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 11:44:18,809 [main:61] - WITHOUT TYPE PARAMS = fun charArrayOf(elements: Char): CharArray = TODO()
2021-03-11 11:44:18,931 [main:302] - generating value of type = Char true depth = 3
2021-03-11 11:44:18,932 [main:95] - GENERATED = charArrayOf('蟌')
2021-03-11 11:44:19,037 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:19,141 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:19,143 [main:105] - GENERATED CALL = (ZImpl3().test()).indexOfAny(charArrayOf('蟌'), 2139345481, true)
2021-03-11 11:44:19,143 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@497d0f58]]
2021-03-11 11:44:19,143 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@497d0f58]
2021-03-11 11:44:19,245 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:19,246 [main:105] - GENERATED CALL = (ZImpl3().test()).length.coerceAtLeast(215075091)
2021-03-11 11:44:19,246 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d770b7a]]
2021-03-11 11:44:19,246 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Byte): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2d770b7a]
2021-03-11 11:44:19,367 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:44:19,369 [main:105] - GENERATED CALL = (ZImpl3().test()).length.div(65)
2021-03-11 11:44:19,369 [main:101] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@44a6b9bf], public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c84ace]]
2021-03-11 11:44:19,369 [main:137] - GENERATING call of type public final operator fun inc(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@75c84ace]
2021-03-11 11:44:19,369 [main:105] - GENERATED CALL = (ZImpl3().test()).length.inc()
2021-03-11 11:44:19,369 [main:110] - replacement of prope5 of type Int is 477215846
2021-03-11 11:44:19,477 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-11 11:44:19,477 [main:66] - Compilation checking started
2021-03-11 11:44:20,107 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:20,109 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:44:20,109 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:44:20,109 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:44:20,263 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:44:20,269 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:44:20,395 [main:55] - randomType = Sequence<Short>
2021-03-11 11:44:20,395 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:44:20,425 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:44:20,460 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:44:20,460 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:44:20,460 [main:103] - replacing (Kla4().prope7, Function0<Unit>)
2021-03-11 11:44:20,460 [main:38] - replacing Kla4().prope7 Function0<Unit>
2021-03-11 11:44:20,460 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:44:20,580 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:44:20,581 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:44:20,705 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:44:20,708 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:44:20,975 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:44:20,976 [main:95] - GENERATED = println("gedvk")
2021-03-11 11:44:20,976 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { println("gedvk")}
2021-03-11 11:44:20,976 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:21,099 [main:55] - randomType = Char
2021-03-11 11:44:21,213 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:21,242 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:44:21,278 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:44:21,305 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:44:21,305 [main:110] - replacement of Kla4().prope7 of type Function0<Unit> is { println("gedvk")}
2021-03-11 11:44:21,415 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:44:21,416 [main:66] - Compilation checking started
2021-03-11 11:44:21,747 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        { println("gedvk")} = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:21,748 [main:103] - replacing (prope3, Result<Ty0>)
2021-03-11 11:44:21,748 [main:38] - replacing prope3 Result<Ty0>
2021-03-11 11:44:21,748 [main:42] - Getting value of type Result<Ty0>
2021-03-11 11:44:21,878 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-11 11:44:22,024 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:44:22,028 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:44:22,352 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-11 11:44:22,352 [main:46] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-11 11:44:23,024 [main:55] - randomType = Function1<Float?, ULong>
2021-03-11 11:44:23,026 [main:94] - GETTING Result<Ty0> from ZImpl3
2021-03-11 11:44:23,063 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:44:23,110 [main:94] - GETTING Result<Ty0> from String
2021-03-11 11:44:23,110 [main:107] - Cant find and generate replacement for prope3 type Result<Ty0>
2021-03-11 11:44:23,110 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected ", String)
2021-03-11 11:44:23,111 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " String
2021-03-11 11:44:23,111 [main:42] - Getting value of type String
2021-03-11 11:44:23,275 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:23,277 [main:46] - GENERATED VALUE OF TYPE String = "mykej"
2021-03-11 11:44:23,277 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:23,408 [main:55] - randomType = Kla5
2021-03-11 11:44:23,583 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-11 11:44:23,586 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:44:23,625 [main:94] - GETTING String from String
2021-03-11 11:44:23,667 [main:101] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]]
2021-03-11 11:44:23,667 [main:137] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6fe0234d]
2021-03-11 11:44:23,830 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-11 11:44:23,833 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:44:23,835 [main:105] - GENERATED CALL = (ZImpl3().test()).filterIndexed({a: Int, b: Char -> false})
2021-03-11 11:44:23,836 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37591b16]]
2021-03-11 11:44:23,836 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37591b16]
2021-03-11 11:44:24,026 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:24,175 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:24,177 [main:105] - GENERATED CALL = (ZImpl3().test()).removeRange(393005042, -1215704886)
2021-03-11 11:44:24,178 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]]
2021-03-11 11:44:24,178 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:24,309 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:24,446 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:24,448 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ab20f29]
2021-03-11 11:44:24,626 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:44:24,786 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:44:24,789 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:44:25,047 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:44:25,049 [main:95] - GENERATED = Regex("jzpcu")
2021-03-11 11:44:25,174 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-11 11:44:25,175 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-11 11:44:25,284 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:44:25,286 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:44:25,533 [main:302] - generating value of type = CharSequence false depth = 4
2021-03-11 11:44:25,653 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:44:25,656 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-11 11:44:25,891 [main:302] - generating value of type = CharSequence false depth = 7
2021-03-11 11:44:25,999 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:44:26,002 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:44:26,219 [main:302] - generating value of type = Int true depth = 10
2021-03-11 11:44:26,221 [main:95] - GENERATED = StringBuilder(1423747364)
2021-03-11 11:44:26,221 [main:95] - GENERATED = StringBuilder(StringBuilder(1423747364))
2021-03-11 11:44:26,221 [main:95] - GENERATED = StringBuilder(StringBuilder(StringBuilder(1423747364)))
2021-03-11 11:44:26,221 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1783660249, -1675061836).replace(Regex("jzpcu"), {a: MatchResult -> StringBuilder(StringBuilder(StringBuilder(1423747364)))})
2021-03-11 11:44:26,221 [main:101] - Case = [public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]]
2021-03-11 11:44:26,221 [main:137] - GENERATING call of type public inline fun kotlin.String.filter(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1df5926b]
2021-03-11 11:44:26,350 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:44:26,352 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:44:26,354 [main:105] - GENERATED CALL = (ZImpl3().test()).filter({a: Char -> false})
2021-03-11 11:44:26,354 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]]
2021-03-11 11:44:26,354 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]
2021-03-11 11:44:26,461 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:44:26,573 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:44:26,575 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:44:26,810 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:44:26,812 [main:95] - GENERATED = StringBuilder("zwron")
2021-03-11 11:44:26,812 [main:105] - GENERATED CALL = (ZImpl3().test()).removeSuffix(StringBuilder("zwron"))
2021-03-11 11:44:26,812 [main:101] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]]
2021-03-11 11:44:26,812 [main:137] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39ff2654]
2021-03-11 11:44:26,914 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:27,041 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:27,171 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:27,173 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceBefore('ﶀ', "vlhra", "elrlf")
2021-03-11 11:44:27,174 [main:101] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]]
2021-03-11 11:44:27,174 [main:137] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b1066bc]
2021-03-11 11:44:27,296 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:44:27,414 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:27,416 [main:105] - GENERATED CALL = (ZImpl3().test()).substringBefore('ஈ', "lhxrx")
2021-03-11 11:44:27,416 [main:101] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a5e750]]
2021-03-11 11:44:27,416 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27a5e750]
2021-03-11 11:44:27,519 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:27,626 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:27,628 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceIndentByMargin("apjet", "mstru")
2021-03-11 11:44:27,628 [main:101] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ce04085]]
2021-03-11 11:44:27,628 [main:137] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7ce04085]
2021-03-11 11:44:27,731 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:27,732 [main:105] - GENERATED CALL = (ZImpl3().test()).drop(-751356791)
2021-03-11 11:44:27,732 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:44:27,732 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:44:27,877 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:28,002 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:28,004 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:44:28,111 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:44:28,249 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:28,251 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(1740373813, -722976161).commonPrefixWith("dabzk", false)
2021-03-11 11:44:28,251 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " of type String is (ZImpl3().test()).removeRange(393005042, -1215704886)
2021-03-11 11:44:28,355 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:28,355 [main:66] - Compilation checking started
2021-03-11 11:44:28,649 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error((ZImpl3().test()).removeRange(393005042, -1215704886) + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if (checkFinished && (ZImpl3()).equals("offbf")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:28,651 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:44:28,651 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:44:28,651 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:44:28,751 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:44:28,756 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:44:28,886 [main:55] - randomType = Byte
2021-03-11 11:44:28,994 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:44:29,064 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:44:29,106 [main:94] - GETTING EmptyCoroutineContext from ZImpl3
2021-03-11 11:44:29,148 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:44:29,148 [main:107] - Cant find and generate replacement for EmptyCoroutineContext type EmptyCoroutineContext
2021-03-11 11:44:29,148 [main:103] - replacing (checkFinished && (ZImpl3()).equals("offbf"), Boolean)
2021-03-11 11:44:29,148 [main:38] - replacing checkFinished && (ZImpl3()).equals("offbf") Boolean
2021-03-11 11:44:29,148 [main:42] - Getting value of type Boolean
2021-03-11 11:44:29,316 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:29,319 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:44:29,319 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:29,495 [main:55] - randomType = Byte
2021-03-11 11:44:29,604 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:44:29,650 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@1a5606ec]
2021-03-11 11:44:29,773 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:44:29,775 [main:137] - GENERATING call of type public fun kotlin.Double.isInfinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@269e214]
2021-03-11 11:44:29,775 [main:66] - Generated call from random type = (-108).div(0.6455854951269059).isInfinite()
2021-03-11 11:44:29,776 [main:94] - GETTING Boolean from ZImpl3
2021-03-11 11:44:29,794 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:44:29,794 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:44:29,897 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:29,897 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:44:30,021 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:30,023 [main:105] - GENERATED CALL = (ZImpl3()).equals("jirie").or(false)
2021-03-11 11:44:30,023 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:44:30,023 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:44:30,134 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:30,134 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:44:30,245 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:30,247 [main:105] - GENERATED CALL = (ZImpl3()).equals("paify").and(true)
2021-03-11 11:44:30,247 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:44:30,247 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:44:30,364 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:30,365 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:44:30,469 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:30,470 [main:105] - GENERATED CALL = (ZImpl3()).equals("ovnlj").equals("vrtgg")
2021-03-11 11:44:30,470 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]]
2021-03-11 11:44:30,470 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:44:30,573 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:30,575 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]
2021-03-11 11:44:30,697 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:30,699 [main:105] - GENERATED CALL = (ZImpl3()).test("viiaq").matches("irvgm")
2021-03-11 11:44:30,699 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:44:30,699 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:44:30,808 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:30,810 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:44:30,920 [main:105] - GENERATED CALL = (ZImpl3()).test("xjdsn").equals(null)
2021-03-11 11:44:30,921 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]]
2021-03-11 11:44:30,921 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:44:31,042 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:31,043 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]
2021-03-11 11:44:31,043 [main:105] - GENERATED CALL = (ZImpl3()).test("wgwqm").toBoolean()
2021-03-11 11:44:31,043 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:44:31,044 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:44:31,148 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:31,149 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:44:31,261 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:31,388 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:31,390 [main:105] - GENERATED CALL = (ZImpl3()).test("thkrn").endsWith("lzlvc", false)
2021-03-11 11:44:31,390 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:44:31,390 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@b5a08ec]
2021-03-11 11:44:31,499 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:31,501 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:44:31,609 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:31,725 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:31,726 [main:105] - GENERATED CALL = (ZImpl3()).test("bgwut").startsWith("qqurh", false)
2021-03-11 11:44:31,727 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:44:31,727 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:44:31,831 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:31,831 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:44:31,831 [main:105] - GENERATED CALL = (ZImpl3()).equals("ulwuh").not()
2021-03-11 11:44:31,831 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:44:31,831 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@6c9a4e2f]
2021-03-11 11:44:31,936 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:44:31,937 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:44:32,035 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:44:32,036 [main:105] - GENERATED CALL = (ZImpl3()).equals("afuly").xor(false)
2021-03-11 11:44:32,036 [main:110] - replacement of checkFinished && (ZImpl3()).equals("offbf") of type Boolean is (ZImpl3()).test("wgwqm").toBoolean()
2021-03-11 11:44:32,157 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:32,157 [main:66] - Compilation checking started
2021-03-11 11:44:32,666 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:32,667 [main:103] - replacing (prope7, Function0<Unit>)
2021-03-11 11:44:32,667 [main:38] - replacing prope7 Function0<Unit>
2021-03-11 11:44:32,667 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:44:32,778 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:44:32,780 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:44:32,891 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:44:32,893 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:44:33,110 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:44:33,112 [main:95] - GENERATED = check(false)
2021-03-11 11:44:33,112 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { check(false)}
2021-03-11 11:44:33,112 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:33,732 [main:55] - randomType = Function2<Map<Int, Float>, Int?, Float>
2021-03-11 11:44:33,733 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:44:33,762 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:44:33,791 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:44:33,791 [main:110] - replacement of prope7 of type Function0<Unit> is { check(false)}
2021-03-11 11:44:33,895 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:44:33,896 [main:66] - Compilation checking started
2021-03-11 11:44:34,175 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        { check(false)} = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(1763810204))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:34,279 [main:137] - TRYING TO REPLACE CONSTANT 1763810204
2021-03-11 11:44:34,403 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:44:34,404 [main:66] - Compilation checking started
2021-03-11 11:44:34,872 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (25)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:34,872 [main:137] - TRYING TO REPLACE CONSTANT 25
2021-03-11 11:44:34,982 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:44:34,983 [main:66] - Compilation checking started
2021-03-11 11:44:35,432 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(479978390)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:35,432 [main:137] - TRYING TO REPLACE CONSTANT 479978390
2021-03-11 11:44:35,568 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:44:35,569 [main:66] - Compilation checking started
2021-03-11 11:44:36,000 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { false} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:36,000 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:44:36,142 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:36,142 [main:66] - Compilation checking started
2021-03-11 11:44:36,593 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require(true)}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:36,594 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:44:36,701 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:36,701 [main:66] - Compilation checking started
2021-03-11 11:44:37,138 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(false, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:37,138 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:44:37,253 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:44:37,253 [main:66] - Compilation checking started
2021-03-11 11:44:37,685 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:37,686 [main:137] - TRYING TO REPLACE CONSTANT false
2021-03-11 11:44:37,789 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BOOLEAN_CONSTANT)
2021-03-11 11:44:37,790 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:44:37,890 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:44:37,890 [main:66] - Compilation checking started
2021-03-11 11:44:38,199 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { prope6}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((-122).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:38,199 [main:137] - TRYING TO REPLACE CONSTANT 122
2021-03-11 11:44:38,308 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:44:38,308 [main:66] - Compilation checking started
2021-03-11 11:44:38,727 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(-737744657) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:38,727 [main:137] - TRYING TO REPLACE CONSTANT 737744657
2021-03-11 11:44:38,838 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-11 11:44:38,839 [main:66] - Compilation checking started
2021-03-11 11:44:39,287 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:39,288 [main:137] - TRYING TO REPLACE CONSTANT true
2021-03-11 11:44:39,394 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(BINARY_EXPRESSION)
2021-03-11 11:44:39,394 [main:66] - Compilation checking started
2021-03-11 11:44:39,681 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(477215846 != numberOfSuspensions)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:39,681 [main:46] - AFTER TRY 1 res = 
import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:44:39,912 [main:112] - generating klass Z text = interface Z<T> {
    fun test(p: T): T {
        return p
    }
}
2021-03-11 11:44:40,270 [main:302] - generating value of type = ZImpl2 false depth = 1
2021-03-11 11:44:40,271 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:44:40,271 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:44:40,271 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:44:40,271 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}
2021-03-11 11:44:40,272 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}
2021-03-11 11:44:40,374 [main:194] - Type params = []
2021-03-11 11:44:40,477 [main:302] - generating value of type = CoroutineContext false depth = 1
2021-03-11 11:44:40,604 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:44:40,606 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:44:40,850 [main:302] - generating value of type = Key<*> false depth = 4
2021-03-11 11:44:40,973 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:44:40,975 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:44:41,383 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:44:41,383 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:44:41,384 [main:112] - generating klass Kla1 text = class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}
2021-03-11 11:44:41,384 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:44:41,975 [main:302] - generating value of type = Kla5 false depth = 1
2021-03-11 11:44:41,977 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:44:41,977 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}
2021-03-11 11:44:41,977 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:44:41,977 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:44:41,977 [main:112] - generating klass null text = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}
2021-03-11 11:44:41,978 [main:112] - generating klass null text = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}
2021-03-11 11:44:41,978 [main:112] - generating klass Kla6 text = companion object Kla6 : Kla0()
2021-03-11 11:44:42,240 [main:43] - GENERATING CALL OF fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-11 11:44:42,241 [main:61] - WITHOUT TYPE PARAMS = fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}
2021-03-11 11:44:42,503 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 1
2021-03-11 11:44:42,504 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:44:42,644 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:44:42,647 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:44:42,880 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:44:42,880 [main:95] - GENERATED = println("gnvgv")
2021-03-11 11:44:42,881 [main:95] - GENERATED = fu1({ println("gnvgv")})
2021-03-11 11:44:43,033 [main:43] - GENERATING CALL OF fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}
2021-03-11 11:44:43,158 [main:61] - WITHOUT TYPE PARAMS = fun <Ty0> fu2(x: (UByte) -> Unit): Continuation<UByte> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}
2021-03-11 11:44:43,399 [main:302] - generating value of type = Function1<UByte, Unit> false depth = 1
2021-03-11 11:44:43,400 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:44:43,511 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:44:43,513 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:44:43,887 [main:302] - generating value of type = Boolean true depth = 5
2021-03-11 11:44:43,888 [main:302] - generating value of type = Function0<Any> false depth = 5
2021-03-11 11:44:43,890 [main:302] - generating value of type = Any false depth = 6
2021-03-11 11:44:43,890 [main:95] - GENERATED = check(true, { "zpdov"})
2021-03-11 11:44:43,890 [main:95] - GENERATED = fu2<UByte>({a: UByte -> check(true, { "zpdov"})})
2021-03-11 11:44:44,000 [main:43] - GENERATING CALL OF fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}
2021-03-11 11:44:44,002 [main:61] - WITHOUT TYPE PARAMS = fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}
2021-03-11 11:44:44,242 [main:302] - generating value of type = Function1<Throwable, Unit> false depth = 1
2021-03-11 11:44:44,243 [main:302] - generating value of type = Unit false depth = 2
2021-03-11 11:44:44,350 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:44:44,352 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:44:44,638 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:44:44,638 [main:95] - GENERATED = println("sdzvs")
2021-03-11 11:44:44,638 [main:95] - GENERATED = fu3({a: Throwable -> println("sdzvs")})
2021-03-11 11:44:44,766 [main:48] - Try №1
2021-03-11 11:44:53,305 [main:48] - Already checked
2021-03-11 11:44:56,035 [main:71] - Trying to insert inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }
2021-03-11 11:44:56,136 [main:66] - Compilation checking started
2021-03-11 11:44:57,197 [main:99] - Trying to change 161 nodes
2021-03-11 11:44:57,197 [main:103] - replacing ("OK", String)
2021-03-11 11:44:57,198 [main:38] - replacing "OK" String
2021-03-11 11:44:57,198 [main:42] - Getting value of type String
2021-03-11 11:44:57,355 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:57,358 [main:46] - GENERATED VALUE OF TYPE String = "ukmrd"
2021-03-11 11:44:57,358 [main:49] - GENERATED IS CALL =false
2021-03-11 11:44:57,365 [main:55] - randomType = Short
2021-03-11 11:44:57,520 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:44:57,573 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@7fb9a320]
2021-03-11 11:44:57,768 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:44:57,771 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:44:57,947 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:57,953 [main:66] - Generated call from random type = (-18897).div(-4392289758483363964).toString(-1955554165)
2021-03-11 11:44:57,954 [main:94] - GETTING String from Int
2021-03-11 11:44:57,998 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:44:57,998 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:44:58,162 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:58,165 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:44:58,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:58,337 [main:105] - GENERATED CALL = ((477215846)).compareTo(108757795).toString(875953464)
2021-03-11 11:44:58,337 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]]
2021-03-11 11:44:58,337 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:44:58,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]
2021-03-11 11:44:58,337 [main:105] - GENERATED CALL = ((477215846)).toChar().uppercase()
2021-03-11 11:44:58,337 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]]
2021-03-11 11:44:58,337 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:44:58,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]
2021-03-11 11:44:58,337 [main:105] - GENERATED CALL = ((477215846)).toChar().titlecase()
2021-03-11 11:44:58,337 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:44:58,337 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:44:58,488 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:58,492 [main:105] - GENERATED CALL = ((477215846)).toString(-1293458627)
2021-03-11 11:44:58,492 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:44:58,492 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:44:58,492 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:44:58,636 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:58,639 [main:105] - GENERATED CALL = ((477215846)).toInt().toString(1062859819)
2021-03-11 11:44:58,639 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7476a4b5], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]]
2021-03-11 11:44:58,640 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7476a4b5]
2021-03-11 11:44:58,640 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:44:58,823 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:58,827 [main:105] - GENERATED CALL = ((477215846)).toLong().toString(1119493023)
2021-03-11 11:44:58,827 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]]
2021-03-11 11:44:58,827 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:44:58,827 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:44:58,827 [main:105] - GENERATED CALL = ((477215846)).toChar().lowercase()
2021-03-11 11:44:58,827 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]]
2021-03-11 11:44:58,828 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02]
2021-03-11 11:44:58,828 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]
2021-03-11 11:44:58,986 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:58,990 [main:105] - GENERATED CALL = ((477215846)).toShort().toString(-1622934418)
2021-03-11 11:44:58,990 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]]
2021-03-11 11:44:58,990 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:44:58,990 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]
2021-03-11 11:44:59,155 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:44:59,161 [main:105] - GENERATED CALL = ((477215846)).toByte().toString(-1927426952)
2021-03-11 11:44:59,161 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:44:59,162 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:44:59,162 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:44:59,321 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:44:59,326 [main:105] - GENERATED CALL = ((477215846)).toChar().plus("nylaz")
2021-03-11 11:44:59,326 [main:110] - replacement of "OK" of type String is ((477215846)).toString(-1293458627)
2021-03-11 11:44:59,469 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:44:59,470 [main:66] - Compilation checking started
2021-03-11 11:45:00,128 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:00,131 [main:103] - replacing (fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>(), Kla7<String>)
2021-03-11 11:45:00,131 [main:38] - replacing fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>() Kla7<String>
2021-03-11 11:45:00,131 [main:42] - Getting value of type Kla7<String>
2021-03-11 11:45:00,327 [main:302] - generating value of type = Kla7<String> false depth = 0
2021-03-11 11:45:00,331 [main:112] - generating klass Kla7 text = interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}
2021-03-11 11:45:01,072 [main:46] - GENERATED VALUE OF TYPE Kla7<String> = TODO()
2021-03-11 11:45:01,072 [main:49] - GENERATED IS CALL =true
2021-03-11 11:45:01,670 [main:55] - randomType = ArrayList<LinkedHashSet<Kla11<Z<String>>>>
2021-03-11 11:45:01,838 [main:302] - generating value of type = ArrayList<LinkedHashSet<Kla11<Z<String>>>> false depth = 0
2021-03-11 11:45:01,995 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: LinkedHashSet<Kla11<Z<String>>>): ArrayList<LkedHashSet<Kla11<Z<Strg>>>> = TODO()
2021-03-11 11:45:02,000 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: LinkedHashSet<Kla11<Z<String>>>): ArrayList<LkedHashSet<Kla11<Z<Strg>>>> = TODO()
2021-03-11 11:45:02,167 [main:302] - generating value of type = LinkedHashSet<Kla11<Z<String>>> false depth = 3
2021-03-11 11:45:02,365 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Kla11<Z<String>>): LkedHashSet<Kla11<Z<Strg>>> = TODO()
2021-03-11 11:45:02,371 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Kla11<Z<String>>): LkedHashSet<Kla11<Z<Strg>>> = TODO()
2021-03-11 11:45:02,548 [main:302] - generating value of type = Kla11<Z<String>> false depth = 6
2021-03-11 11:45:02,552 [main:112] - generating klass Kla11 text = abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}
2021-03-11 11:45:04,063 [main:302] - generating value of type = Kla14 false depth = 8
2021-03-11 11:45:04,067 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:45:04,067 [main:95] - GENERATED = linkedSetOf<Kla11<Z<String>>>(Kla14)
2021-03-11 11:45:04,067 [main:95] - GENERATED = arrayListOf<LinkedHashSet<Kla11<Z<String>>>>(linkedSetOf<Kla11<Z<String>>>(Kla14))
2021-03-11 11:45:04,280 [main:94] - GETTING Kla7<String> from CoroutineContext
2021-03-11 11:45:04,288 [main:94] - GETTING Kla7<String> from ZImpl3
2021-03-11 11:45:04,304 [main:94] - GETTING Kla7<String> from Function0<Unit>
2021-03-11 11:45:04,314 [main:94] - GETTING Kla7<String> from String
2021-03-11 11:45:04,331 [main:94] - GETTING Kla7<String> from Int
2021-03-11 11:45:04,363 [main:94] - GETTING Kla7<String> from String
2021-03-11 11:45:04,364 [main:94] - GETTING Kla7<String> from Any?
2021-03-11 11:45:04,367 [main:94] - GETTING Kla7<String> from Continuation<UByte>
2021-03-11 11:45:04,377 [main:94] - GETTING Kla7<String> from CoroutineContext
2021-03-11 11:45:04,378 [main:94] - GETTING Kla7<String> from EmptyCoroutineContext
2021-03-11 11:45:04,394 [main:94] - GETTING Kla7<String> from Int
2021-03-11 11:45:04,395 [main:94] - GETTING Kla7<String> from CoroutineContext
2021-03-11 11:45:04,395 [main:94] - GETTING Kla7<String> from Continuation<Any?>
2021-03-11 11:45:04,405 [main:94] - GETTING Kla7<String> from Boolean
2021-03-11 11:45:04,412 [main:110] - replacement of fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>() of type Kla7<String> is TODO()
2021-03-11 11:45:04,560 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:45:04,560 [main:66] - Compilation checking started
2021-03-11 11:45:05,009 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        TODO().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.exceptionOrNull()?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:05,010 [main:103] - replacing (prope11.exceptionOrNull(), Throwable?)
2021-03-11 11:45:05,011 [main:38] - replacing prope11.exceptionOrNull() Throwable?
2021-03-11 11:45:05,011 [main:42] - Getting value of type Throwable?
2021-03-11 11:45:05,204 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:45:05,372 [main:43] - GENERATING CALL OF fun UninitializedPropertyAccessException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:45:05,377 [main:61] - WITHOUT TYPE PARAMS = fun UninitializedPropertyAccessException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:45:05,898 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:45:05,903 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:45:05,910 [main:95] - GENERATED = UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())
2021-03-11 11:45:05,910 [main:46] - GENERATED VALUE OF TYPE Throwable? = UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())
2021-03-11 11:45:05,910 [main:49] - GENERATED IS CALL =true
2021-03-11 11:45:06,321 [main:55] - randomType = MutableMap<Int, Int?>
2021-03-11 11:45:06,322 [main:94] - GETTING Throwable? from Continuation<UByte>
2021-03-11 11:45:06,331 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:45:06,342 [main:94] - GETTING Throwable? from Int
2021-03-11 11:45:06,379 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:06,386 [main:94] - GETTING Throwable? from Continuation<Any?>
2021-03-11 11:45:06,406 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:06,407 [main:94] - GETTING Throwable? from String
2021-03-11 11:45:06,433 [main:94] - GETTING Throwable? from Int
2021-03-11 11:45:06,433 [main:94] - GETTING Throwable? from Any?
2021-03-11 11:45:06,439 [main:94] - GETTING Throwable? from EmptyCoroutineContext
2021-03-11 11:45:06,460 [main:94] - GETTING Throwable? from Function0<Unit>
2021-03-11 11:45:06,473 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:06,474 [main:94] - GETTING Throwable? from ZImpl3
2021-03-11 11:45:06,495 [main:94] - GETTING Throwable? from String
2021-03-11 11:45:06,495 [main:110] - replacement of prope11.exceptionOrNull() of type Throwable? is UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())
2021-03-11 11:45:06,646 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:45:06,647 [main:66] - Compilation checking started
2021-03-11 11:45:07,320 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n")) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:07,322 [main:103] - replacing ("tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n"), String)
2021-03-11 11:45:07,322 [main:38] - replacing "tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n") String
2021-03-11 11:45:07,322 [main:42] - Getting value of type String
2021-03-11 11:45:07,467 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:07,471 [main:46] - GENERATED VALUE OF TYPE String = "fvkra"
2021-03-11 11:45:07,471 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:07,640 [main:55] - randomType = ULong
2021-03-11 11:45:07,784 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:45:07,816 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUInt(): kotlin.UInt defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@5ec594a9]
2021-03-11 11:45:07,816 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UInt.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5159be6c]
2021-03-11 11:45:07,990 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:07,995 [main:66] - Generated call from random type = (923118168098764237.toULong()).toUInt().toString(-289818855)
2021-03-11 11:45:07,996 [main:94] - GETTING String from Int
2021-03-11 11:45:08,032 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:45:08,032 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:45:08,032 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:08,193 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:08,197 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toInt().toString(-142703569)
2021-03-11 11:45:08,198 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]]
2021-03-11 11:45:08,198 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:08,198 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:45:08,198 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().lowercase()
2021-03-11 11:45:08,198 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]]
2021-03-11 11:45:08,198 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:45:08,198 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]
2021-03-11 11:45:08,360 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:08,364 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().toString(98754539)
2021-03-11 11:45:08,364 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:45:08,364 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:08,522 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:08,526 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toString(-1749705010)
2021-03-11 11:45:08,526 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:45:08,526 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:08,526 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:45:08,672 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:08,676 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().plus("mbtzh")
2021-03-11 11:45:08,676 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]]
2021-03-11 11:45:08,676 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:08,676 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]
2021-03-11 11:45:08,676 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().uppercase()
2021-03-11 11:45:08,676 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]]
2021-03-11 11:45:08,676 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f]
2021-03-11 11:45:08,852 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:45:08,856 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:45:09,016 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:09,020 [main:105] - GENERATED CALL = ((477215846)?.toInt()).div(-3972242457290021510).toString(1777757886)
2021-03-11 11:45:09,020 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:45:09,020 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:45:09,188 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:09,192 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:09,344 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:09,348 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(-44056397).toString(2109390198)
2021-03-11 11:45:09,348 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]]
2021-03-11 11:45:09,348 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02]
2021-03-11 11:45:09,349 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]
2021-03-11 11:45:09,492 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:09,496 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toShort().toString(304636055)
2021-03-11 11:45:09,496 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]]
2021-03-11 11:45:09,496 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:09,496 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]
2021-03-11 11:45:09,496 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().titlecase()
2021-03-11 11:45:09,496 [main:110] - replacement of "tail-call optimization miss: method at " + it + " has state-machine " +
                prope12.joinToString(separator = "\n") of type String is ((477215846)?.toInt()).toShort().toString(304636055)
2021-03-11 11:45:09,668 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:09,668 [main:66] - Compilation checking started
2021-03-11 11:45:10,445 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:10,447 [main:103] - replacing (c, Continuation<*>)
2021-03-11 11:45:10,448 [main:38] - replacing c Continuation<*>
2021-03-11 11:45:10,448 [main:42] - Getting value of type Continuation<*>
2021-03-11 11:45:10,596 [main:302] - generating value of type = Continuation<*> false depth = 0
2021-03-11 11:45:10,748 [main:43] - GENERATING CALL OF fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:45:10,753 [main:61] - WITHOUT TYPE PARAMS = fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:45:11,325 [main:302] - generating value of type = CoroutineContext false depth = 3
2021-03-11 11:45:11,494 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:45:11,499 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:45:11,871 [main:302] - generating value of type = Key<*> false depth = 6
2021-03-11 11:45:12,026 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:45:12,031 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:45:12,641 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 9
2021-03-11 11:45:12,802 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:12,807 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:13,395 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 12
2021-03-11 11:45:13,573 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:13,578 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:14,185 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 15
2021-03-11 11:45:14,358 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:14,364 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:14,978 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:14,978 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:14,979 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:45:14,979 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:45:14,979 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:45:14,979 [main:385] - Cant generate call of fun <T> Continuation(context: kotlin.coroutines.CoroutineContext, resumeWith: (kotlin.Result<Any?>)->kotlin.Unit): Contuation<*> = TODO()
2021-03-11 11:45:14,979 [main:46] - GENERATED VALUE OF TYPE Continuation<*> = 
2021-03-11 11:45:15,369 [main:55] - randomType = Kla14?
2021-03-11 11:45:15,535 [main:302] - generating value of type = Kla14 false depth = 0
2021-03-11 11:45:15,539 [main:112] - generating klass Kla14 text = object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:45:15,570 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:45:15,594 [main:94] - GETTING Continuation<*> from CoroutineContext
2021-03-11 11:45:15,601 [main:94] - GETTING Continuation<*> from EmptyCoroutineContext
2021-03-11 11:45:15,614 [main:94] - GETTING Continuation<*> from Boolean
2021-03-11 11:45:15,623 [main:94] - GETTING Continuation<*> from Continuation<Any?>
2021-03-11 11:45:15,632 [main:94] - GETTING Continuation<*> from ZImpl3
2021-03-11 11:45:15,647 [main:94] - GETTING Continuation<*> from Any?
2021-03-11 11:45:15,651 [main:94] - GETTING Continuation<*> from CoroutineContext
2021-03-11 11:45:15,651 [main:94] - GETTING Continuation<*> from CoroutineContext
2021-03-11 11:45:15,652 [main:94] - GETTING Continuation<*> from Continuation<UByte>
2021-03-11 11:45:15,661 [main:94] - GETTING Continuation<*> from String
2021-03-11 11:45:15,661 [main:94] - GETTING Continuation<*> from Function0<Unit>
2021-03-11 11:45:15,670 [main:94] - GETTING Continuation<*> from Int
2021-03-11 11:45:15,707 [main:94] - GETTING Continuation<*> from Int
2021-03-11 11:45:15,707 [main:107] - Cant find and generate replacement for c type Continuation<*>
2021-03-11 11:45:15,707 [main:103] - replacing (prope10.prope14, Boolean)
2021-03-11 11:45:15,708 [main:38] - replacing prope10.prope14 Boolean
2021-03-11 11:45:15,708 [main:42] - Getting value of type Boolean
2021-03-11 11:45:15,888 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:15,892 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:45:15,892 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:16,077 [main:55] - randomType = Long
2021-03-11 11:45:16,252 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:45:16,312 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Long[DeserializedSimpleFunctionDescriptor@2c19abb]
2021-03-11 11:45:16,465 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:16,466 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:45:16,613 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:16,617 [main:66] - Generated call from random type = (-8640998326111152639).equals("sjrrt").or(false)
2021-03-11 11:45:16,618 [main:94] - GETTING Boolean from Continuation<UByte>
2021-03-11 11:45:16,628 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]]
2021-03-11 11:45:16,628 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:16,772 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:16,772 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("yzjpc")
2021-03-11 11:45:16,772 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:45:16,772 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:16,917 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:16,918 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:45:17,064 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("lijwc").equals(null)
2021-03-11 11:45:17,064 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:45:17,064 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:17,211 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:17,211 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:45:17,212 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("uhibt").not()
2021-03-11 11:45:17,212 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@19c43cf0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]]
2021-03-11 11:45:17,212 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@19c43cf0]
2021-03-11 11:45:17,366 [main:302] - generating value of type = Result<UByte> false depth = 0
2021-03-11 11:45:17,586 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->UByte): Result<UByte> = TODO()
2021-03-11 11:45:17,592 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->UByte): Result<UByte> = TODO()
2021-03-11 11:45:17,922 [main:302] - generating value of type = Function0<UByte> false depth = 3
2021-03-11 11:45:17,926 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 11:45:17,930 [main:95] - GENERATED = runCatching<UByte>({ 9.toUByte()})
2021-03-11 11:45:17,931 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]
2021-03-11 11:45:18,074 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:18,074 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 9.toUByte()})).equals("hvfrj")
2021-03-11 11:45:18,075 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:45:18,075 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:18,219 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:18,219 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:45:18,364 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:18,369 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("erjkv").xor(true)
2021-03-11 11:45:18,369 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@3b09ce69], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]]
2021-03-11 11:45:18,369 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:45:18,523 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:18,524 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).context.equals("vguls")
2021-03-11 11:45:18,524 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:45:18,524 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:18,688 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:18,688 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:45:18,848 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:18,852 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("lagnr").or(true)
2021-03-11 11:45:18,852 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:45:18,852 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:19,019 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:19,019 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:45:19,173 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:19,178 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("muqbg").and(false)
2021-03-11 11:45:19,178 [main:110] - replacement of prope10.prope14 of type Boolean is (-8640998326111152639).equals("sjrrt").or(false)
2021-03-11 11:45:19,327 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:19,327 [main:66] - Compilation checking started
2021-03-11 11:45:19,748 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (prope13 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            (-8640998326111152639).equals("sjrrt").or(false) = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:19,750 [main:103] - replacing (prope13, Int)
2021-03-11 11:45:19,751 [main:38] - replacing prope13 Int
2021-03-11 11:45:19,751 [main:42] - Getting value of type Int
2021-03-11 11:45:19,896 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:19,900 [main:46] - GENERATED VALUE OF TYPE Int = -1092763304
2021-03-11 11:45:19,900 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:20,735 [main:55] - randomType = HashMap<Z<Short>, Function1<Kla12, ZImpl>>
2021-03-11 11:45:20,878 [main:302] - generating value of type = HashMap<Z<Short>, Function1<Kla12, ZImpl>> false depth = 0
2021-03-11 11:45:21,031 [main:43] - GENERATING CALL OF fun <K, V> hashMapOf(pairs: Pair<Z<Short>, Function1<Kla12, ZImpl>>): HashMap<Z<Short>, Function1<Kla12, ZImpl>> = TODO()
2021-03-11 11:45:21,036 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> hashMapOf(pairs: Pair<Z<Short>, Function1<Kla12, ZImpl>>): HashMap<Z<Short>, Function1<Kla12, ZImpl>> = TODO()
2021-03-11 11:45:21,190 [main:302] - generating value of type = Pair<Z<Short>, Function1<Kla12, ZImpl>> false depth = 3
2021-03-11 11:45:21,371 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Z<Short>, second: Function1<Kla12, ZImpl>): Pair<Z<Short>, Function1<Kla12, ZImpl>> = TODO()
2021-03-11 11:45:21,376 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Z<Short>, second: Function1<Kla12, ZImpl>): Pair<Z<Short>, Function1<Kla12, ZImpl>> = TODO()
2021-03-11 11:45:21,551 [main:302] - generating value of type = Z<Short> false depth = 6
2021-03-11 11:45:21,556 [main:112] - generating klass Z text = interface Z<T> {
    fun test(p: T): T {
        return p
    }
}
2021-03-11 11:45:22,252 [main:302] - generating value of type = Function1<Kla12, ZImpl> false depth = 6
2021-03-11 11:45:22,256 [main:302] - generating value of type = ZImpl false depth = 7
2021-03-11 11:45:22,260 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:45:22,260 [main:95] - GENERATED = Pair<Z<Short>, Function1<Kla12, ZImpl>>(TODO(), {a: Kla12 -> ZImpl()})
2021-03-11 11:45:22,260 [main:95] - GENERATED = hashMapOf<Z<Short>, Function1<Kla12, ZImpl>>(Pair<Z<Short>, Function1<Kla12, ZImpl>>(TODO(), {a: Kla12 -> ZImpl()}))
2021-03-11 11:45:22,412 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]
2021-03-11 11:45:22,413 [main:66] - Generated call from random type = (hashMapOf<Z<Short>, Function1<Kla12, ZImpl>>(Pair<Z<Short>, Function1<Kla12, ZImpl>>(TODO(), {a: Kla12 -> ZImpl()}))).size.countOneBits()
2021-03-11 11:45:22,413 [main:94] - GETTING Int from Continuation<Any?>
2021-03-11 11:45:22,420 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]]
2021-03-11 11:45:22,420 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:22,591 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:22,591 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:45:22,753 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:22,758 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("cnscu").compareTo(true)
2021-03-11 11:45:22,758 [main:110] - replacement of prope13 of type Int is -1092763304
2021-03-11 11:45:22,929 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 11:45:22,930 [main:66] - Compilation checking started
2021-03-11 11:45:23,624 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        prope13 = 0
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:23,626 [main:103] - replacing (0, Int)
2021-03-11 11:45:23,627 [main:38] - replacing 0 Int
2021-03-11 11:45:23,627 [main:42] - Getting value of type Int
2021-03-11 11:45:23,781 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:23,785 [main:46] - GENERATED VALUE OF TYPE Int = 776275305
2021-03-11 11:45:23,786 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:24,144 [main:55] - randomType = Array<Kla3>
2021-03-11 11:45:24,293 [main:302] - generating value of type = Array<Kla3> false depth = 0
2021-03-11 11:45:24,479 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla3): Array<Kla3> = TODO()
2021-03-11 11:45:24,484 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Kla3): Array<Kla3> = TODO()
2021-03-11 11:45:25,037 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:45:25,042 [main:302] - generating value of type = Function1<Int, Kla3> false depth = 3
2021-03-11 11:45:25,046 [main:302] - generating value of type = Kla3 false depth = 4
2021-03-11 11:45:25,050 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}
2021-03-11 11:45:25,050 [main:95] - GENERATED = Array<Kla3>(-91510335, {a: Int -> Kla3()})
2021-03-11 11:45:25,061 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtMost(maximumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3bb35082]
2021-03-11 11:45:25,205 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:25,209 [main:66] - Generated call from random type = (Array<Kla3>(-91510335, {a: Int -> Kla3()})).size.coerceAtMost(-1473612721)
2021-03-11 11:45:25,210 [main:94] - GETTING Int from Continuation<UByte>
2021-03-11 11:45:25,217 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]]
2021-03-11 11:45:25,217 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:45:25,362 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:25,362 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:45:25,531 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:25,536 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("uscvg").compareTo(false)
2021-03-11 11:45:25,536 [main:110] - replacement of 0 of type Int is 776275305
2021-03-11 11:45:25,695 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-11 11:45:25,696 [main:66] - Compilation checking started
2021-03-11 11:45:26,421 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13)
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:26,423 [main:103] - replacing ("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13, String)
2021-03-11 11:45:26,423 [main:38] - replacing "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13 String
2021-03-11 11:45:26,423 [main:42] - Getting value of type String
2021-03-11 11:45:26,587 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:26,591 [main:46] - GENERATED VALUE OF TYPE String = "hiunn"
2021-03-11 11:45:26,591 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:26,600 [main:55] - randomType = Boolean
2021-03-11 11:45:26,743 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:26,756 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:45:26,900 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:26,904 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:27,048 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:27,052 [main:66] - Generated call from random type = (true).compareTo(true).toString(-1161163573)
2021-03-11 11:45:27,053 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:45:27,068 [main:94] - GETTING String from Int
2021-03-11 11:45:27,098 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]]
2021-03-11 11:45:27,098 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:27,098 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5f3ae668]
2021-03-11 11:45:27,243 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:27,247 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().plus("cfpbi")
2021-03-11 11:45:27,247 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]]
2021-03-11 11:45:27,247 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:45:27,247 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]
2021-03-11 11:45:27,417 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:27,421 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().toString(-826729042)
2021-03-11 11:45:27,422 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:45:27,422 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:45:27,422 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:27,586 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:27,592 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toInt().toString(-1864964858)
2021-03-11 11:45:27,592 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7476a4b5], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]]
2021-03-11 11:45:27,593 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7476a4b5]
2021-03-11 11:45:27,593 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:45:27,761 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:27,765 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toLong().toString(-498893461)
2021-03-11 11:45:27,765 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]]
2021-03-11 11:45:27,765 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02]
2021-03-11 11:45:27,765 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]
2021-03-11 11:45:27,917 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:27,921 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toShort().toString(-391732156)
2021-03-11 11:45:27,921 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]]
2021-03-11 11:45:27,921 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:27,921 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]
2021-03-11 11:45:27,922 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().titlecase()
2021-03-11 11:45:27,922 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:45:27,922 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:45:28,067 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:28,071 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:28,217 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:28,222 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(-23220462).toString(1913120693)
2021-03-11 11:45:28,222 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]]
2021-03-11 11:45:28,222 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f]
2021-03-11 11:45:28,389 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:45:28,394 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:45:28,553 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:28,558 [main:105] - GENERATED CALL = ((477215846)?.toInt()).div(380837378988538529).toString(-591635967)
2021-03-11 11:45:28,558 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:45:28,558 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:45:28,727 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:28,731 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toString(-2069422585)
2021-03-11 11:45:28,732 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]]
2021-03-11 11:45:28,732 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:45:28,732 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:45:28,732 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().lowercase()
2021-03-11 11:45:28,732 [main:110] - replacement of "Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope13 of type String is ((477215846)?.toInt()).toChar().titlecase()
2021-03-11 11:45:28,889 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:28,889 [main:66] - Compilation checking started
2021-03-11 11:45:29,577 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:29,579 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:45:29,579 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:45:29,579 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:45:29,733 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:45:29,740 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:45:29,748 [main:55] - randomType = Boolean
2021-03-11 11:45:29,893 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:29,907 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 11:45:29,916 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 11:45:29,946 [main:94] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-11 11:45:29,954 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:45:29,959 [main:94] - GETTING EmptyCoroutineContext from Any?
2021-03-11 11:45:29,963 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:45:29,963 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:45:29,975 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-11 11:45:30,119 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:30,119 [main:66] - Compilation checking started
2021-03-11 11:45:30,826 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 { if (predicate(it)) fu18(it) }
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:30,828 [main:103] - replacing ({ if (predicate(it)) fu18(it) }, SuspendFunction1<Ty1, Unit>)
2021-03-11 11:45:30,828 [main:38] - replacing { if (predicate(it)) fu18(it) } SuspendFunction1<Ty1, Unit>
2021-03-11 11:45:30,828 [main:42] - Getting value of type SuspendFunction1<Ty1, Unit>
2021-03-11 11:45:30,973 [main:302] - generating value of type = SuspendFunction1<Ty1, Unit> false depth = 0
2021-03-11 11:45:30,977 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:45:31,129 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:45:31,134 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:45:31,458 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:45:31,463 [main:95] - GENERATED = require(true)
2021-03-11 11:45:31,463 [main:46] - GENERATED VALUE OF TYPE SuspendFunction1<Ty1, Unit> = {a: Ty1 -> require(true)}
2021-03-11 11:45:31,463 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:31,850 [main:55] - randomType = Map<Kla2<Kla1>, Char>
2021-03-11 11:45:31,852 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Any?
2021-03-11 11:45:31,856 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from CoroutineContext
2021-03-11 11:45:31,863 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Int
2021-03-11 11:45:31,895 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from String
2021-03-11 11:45:31,914 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Boolean
2021-03-11 11:45:31,922 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from EmptyCoroutineContext
2021-03-11 11:45:31,936 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Continuation<UByte>
2021-03-11 11:45:31,945 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Continuation<Any?>
2021-03-11 11:45:31,952 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Function0<Unit>
2021-03-11 11:45:31,961 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from CoroutineContext
2021-03-11 11:45:31,962 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from CoroutineContext
2021-03-11 11:45:31,963 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from ZImpl3
2021-03-11 11:45:31,982 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from Int
2021-03-11 11:45:31,983 [main:94] - GETTING SuspendFunction1<Ty1, Unit> from String
2021-03-11 11:45:31,983 [main:110] - replacement of { if (predicate(it)) fu18(it) } of type SuspendFunction1<Ty1, Unit> is {a: Ty1 -> require(true)}
2021-03-11 11:45:32,127 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:45:32,128 [main:66] - Compilation checking started
2021-03-11 11:45:32,790 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:32,792 [main:103] - replacing (prope16 != null, Boolean)
2021-03-11 11:45:32,793 [main:38] - replacing prope16 != null Boolean
2021-03-11 11:45:32,793 [main:42] - Getting value of type Boolean
2021-03-11 11:45:32,941 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:32,945 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:45:32,945 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:33,487 [main:55] - randomType = Array<Kla2<Boolean>>?
2021-03-11 11:45:33,631 [main:302] - generating value of type = Array<Kla2<Boolean>> false depth = 0
2021-03-11 11:45:33,785 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: Kla2<Boolean>): Array<Kla2<Boolean>> = TODO()
2021-03-11 11:45:33,790 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: Kla2<Boolean>): Array<Kla2<Boolean>> = TODO()
2021-03-11 11:45:33,943 [main:302] - generating value of type = Kla2<Boolean> false depth = 3
2021-03-11 11:45:33,947 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:45:35,506 [main:302] - generating value of type = Kla5 false depth = 5
2021-03-11 11:45:35,511 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:45:35,511 [main:95] - GENERATED = arrayOf<Kla2<Boolean>>(Kla5)
2021-03-11 11:45:35,531 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.LowPriorityInOverloadResolution public infix fun <T> kotlin.Array<out T>.contentDeepEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@44be009c]
2021-03-11 11:45:35,696 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 11:45:35,873 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 11:45:35,878 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: T): Array<T> = TODO()
2021-03-11 11:45:36,055 [main:302] - generating value of type = T false depth = 3
2021-03-11 11:45:36,217 [main:43] - GENERATING CALL OF fun <T> minOf(a: Short, other: Short): T = TODO()
2021-03-11 11:45:36,223 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Short, other: Short): T = TODO()
2021-03-11 11:45:36,376 [main:302] - generating value of type = Short true depth = 6
2021-03-11 11:45:36,381 [main:302] - generating value of type = Short true depth = 6
2021-03-11 11:45:36,385 [main:95] - GENERATED = minOf<Short>(722, -12343)
2021-03-11 11:45:36,385 [main:95] - GENERATED = arrayOf<T>(minOf<Short>(722, -12343))
2021-03-11 11:45:36,385 [main:66] - Generated call from random type = (arrayOf<Kla2<Boolean>>(Kla5))?.contentDeepEquals(arrayOf<T>(minOf<Short>(722, -12343)))
2021-03-11 11:45:36,386 [main:94] - GETTING Boolean from ZImpl3
2021-03-11 11:45:36,406 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:45:36,407 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:45:36,555 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:36,555 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:45:36,745 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:36,750 [main:105] - GENERATED CALL = (ZImpl3()).equals("uvvrp").xor(false)
2021-03-11 11:45:36,750 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:45:36,750 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:45:36,919 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:45:37,095 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:37,096 [main:105] - GENERATED CALL = (ZImpl3()).equals(null).equals("pwufe")
2021-03-11 11:45:37,096 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]]
2021-03-11 11:45:37,096 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:45:37,250 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:37,250 [main:105] - GENERATED CALL = (ZImpl3()).equals("lqlcl")
2021-03-11 11:45:37,250 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:45:37,250 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:45:37,402 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:37,402 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:45:37,551 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:37,556 [main:105] - GENERATED CALL = (ZImpl3()).equals("lllss").and(false)
2021-03-11 11:45:37,556 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:45:37,556 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:45:37,705 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:37,705 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:45:37,866 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:37,871 [main:105] - GENERATED CALL = (ZImpl3()).equals("lvnmw").or(true)
2021-03-11 11:45:37,871 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:45:37,871 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:45:38,057 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:38,061 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:45:38,229 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:38,399 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:45:38,404 [main:105] - GENERATED CALL = (ZImpl3()).test("iebuq").startsWith("ltoue", false)
2021-03-11 11:45:38,404 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]]
2021-03-11 11:45:38,404 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:45:38,559 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:38,564 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]
2021-03-11 11:45:38,564 [main:105] - GENERATED CALL = (ZImpl3()).test("ffgwt").toBoolean()
2021-03-11 11:45:38,564 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:45:38,565 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:45:38,751 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:38,756 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:45:38,902 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:38,903 [main:105] - GENERATED CALL = (ZImpl3()).test("yjqfr").equals("gwcih")
2021-03-11 11:45:38,903 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:45:38,903 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:45:39,047 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:39,048 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:45:39,048 [main:105] - GENERATED CALL = (ZImpl3()).equals("toouo").not()
2021-03-11 11:45:39,048 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]]
2021-03-11 11:45:39,048 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:45:39,227 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:39,231 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]
2021-03-11 11:45:39,393 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:39,398 [main:105] - GENERATED CALL = (ZImpl3()).test("olbnz").matches("ukoyz")
2021-03-11 11:45:39,398 [main:110] - replacement of prope16 != null of type Boolean is (ZImpl3()).equals("lqlcl")
2021-03-11 11:45:39,566 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:39,566 [main:66] - Compilation checking started
2021-03-11 11:45:40,020 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while ((ZImpl3()).equals("lqlcl")) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        throw exception
    }
}


2021-03-11 11:45:40,023 [main:103] - replacing (exception, Throwable)
2021-03-11 11:45:40,023 [main:38] - replacing exception Throwable
2021-03-11 11:45:40,023 [main:42] - Getting value of type Throwable
2021-03-11 11:45:40,171 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:45:40,329 [main:43] - GENERATING CALL OF fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:45:40,334 [main:61] - WITHOUT TYPE PARAMS = fun IllegalArgumentException(message: kotlin.String?, cause: kotlin.Throwable?): Throwable = TODO()
2021-03-11 11:45:40,873 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:45:40,878 [main:302] - generating value of type = Throwable false depth = 3
2021-03-11 11:45:41,072 [main:43] - GENERATING CALL OF fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:45:41,079 [main:61] - WITHOUT TYPE PARAMS = fun ArithmeticException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:45:41,526 [main:302] - generating value of type = String true depth = 6
2021-03-11 11:45:41,533 [main:95] - GENERATED = ArithmeticException("uycgy")
2021-03-11 11:45:41,533 [main:95] - GENERATED = IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
2021-03-11 11:45:41,533 [main:46] - GENERATED VALUE OF TYPE Throwable = IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
2021-03-11 11:45:41,533 [main:49] - GENERATED IS CALL =true
2021-03-11 11:45:41,546 [main:55] - randomType = Short
2021-03-11 11:45:41,749 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:45:41,810 [main:94] - GETTING Throwable from CoroutineContext
2021-03-11 11:45:41,819 [main:94] - GETTING Throwable from String
2021-03-11 11:45:41,839 [main:94] - GETTING Throwable from Boolean
2021-03-11 11:45:41,850 [main:94] - GETTING Throwable from CoroutineContext
2021-03-11 11:45:41,851 [main:94] - GETTING Throwable from CoroutineContext
2021-03-11 11:45:41,851 [main:94] - GETTING Throwable from Continuation<Any?>
2021-03-11 11:45:41,860 [main:94] - GETTING Throwable from ZImpl3
2021-03-11 11:45:41,886 [main:94] - GETTING Throwable from Int
2021-03-11 11:45:41,947 [main:94] - GETTING Throwable from String
2021-03-11 11:45:41,948 [main:94] - GETTING Throwable from Int
2021-03-11 11:45:41,949 [main:94] - GETTING Throwable from Function0<Unit>
2021-03-11 11:45:41,965 [main:94] - GETTING Throwable from EmptyCoroutineContext
2021-03-11 11:45:42,001 [main:94] - GETTING Throwable from Continuation<UByte>
2021-03-11 11:45:42,019 [main:94] - GETTING Throwable from Any?
2021-03-11 11:45:42,026 [main:110] - replacement of exception of type Throwable is IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
2021-03-11 11:45:42,250 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:45:42,251 [main:66] - Compilation checking started
2021-03-11 11:45:43,250 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { error(((477215846)?.toInt()).toShort().toString(304636055)) }
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:45:43,254 [main:103] - replacing ({ error(((477215846)?.toInt()).toShort().toString(304636055)) }, Function0<Nothing>)
2021-03-11 11:45:43,254 [main:38] - replacing { error(((477215846)?.toInt()).toShort().toString(304636055)) } Function0<Nothing>
2021-03-11 11:45:43,254 [main:42] - Getting value of type Function0<Nothing>
2021-03-11 11:45:43,465 [main:302] - generating value of type = Function0<Nothing> false depth = 0
2021-03-11 11:45:43,471 [main:302] - generating value of type = Nothing false depth = 1
2021-03-11 11:45:43,749 [main:43] - GENERATING CALL OF fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 11:45:43,759 [main:61] - WITHOUT TYPE PARAMS = fun TODO(reason: kotlin.String): Nothg = TODO()
2021-03-11 11:45:44,323 [main:302] - generating value of type = String true depth = 4
2021-03-11 11:45:44,330 [main:95] - GENERATED = TODO("wvdvl")
2021-03-11 11:45:44,330 [main:46] - GENERATED VALUE OF TYPE Function0<Nothing> = { TODO("wvdvl")}
2021-03-11 11:45:44,330 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:44,356 [main:55] - randomType = ZImpl
2021-03-11 11:45:44,575 [main:302] - generating value of type = ZImpl false depth = 0
2021-03-11 11:45:44,580 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:45:44,595 [main:94] - GETTING Function0<Nothing> from Function0<Unit>
2021-03-11 11:45:44,608 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:45:44,632 [main:94] - GETTING Function0<Nothing> from Continuation<UByte>
2021-03-11 11:45:44,642 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 11:45:44,688 [main:94] - GETTING Function0<Nothing> from Continuation<Any?>
2021-03-11 11:45:44,706 [main:94] - GETTING Function0<Nothing> from ZImpl3
2021-03-11 11:45:44,746 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:45:44,755 [main:94] - GETTING Function0<Nothing> from Any?
2021-03-11 11:45:44,760 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:45:44,761 [main:94] - GETTING Function0<Nothing> from EmptyCoroutineContext
2021-03-11 11:45:44,783 [main:94] - GETTING Function0<Nothing> from CoroutineContext
2021-03-11 11:45:44,784 [main:94] - GETTING Function0<Nothing> from Boolean
2021-03-11 11:45:44,799 [main:94] - GETTING Function0<Nothing> from Int
2021-03-11 11:45:44,800 [main:94] - GETTING Function0<Nothing> from String
2021-03-11 11:45:44,800 [main:110] - replacement of { error(((477215846)?.toInt()).toShort().toString(304636055)) } of type Function0<Nothing> is { TODO("wvdvl")}
2021-03-11 11:45:44,953 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:45:44,953 [main:66] - Compilation checking started
2021-03-11 11:45:45,680 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { it is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:45:45,682 [main:103] - replacing (exceptionOrNull(), Throwable?)
2021-03-11 11:45:45,683 [main:38] - replacing exceptionOrNull() Throwable?
2021-03-11 11:45:45,683 [main:42] - Getting value of type Throwable?
2021-03-11 11:45:45,830 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:45:45,989 [main:43] - GENERATING CALL OF fun RuntimeException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:45:45,995 [main:61] - WITHOUT TYPE PARAMS = fun RuntimeException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:45:46,446 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:45:46,451 [main:95] - GENERATED = RuntimeException("pebbm")
2021-03-11 11:45:46,451 [main:46] - GENERATED VALUE OF TYPE Throwable? = RuntimeException("pebbm")
2021-03-11 11:45:46,451 [main:49] - GENERATED IS CALL =true
2021-03-11 11:45:47,015 [main:55] - randomType = Kla7<ULong>
2021-03-11 11:45:47,016 [main:94] - GETTING Throwable? from Continuation<UByte>
2021-03-11 11:45:47,024 [main:94] - GETTING Throwable? from Any?
2021-03-11 11:45:47,028 [main:94] - GETTING Throwable? from String
2021-03-11 11:45:47,045 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:45:47,056 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:47,062 [main:94] - GETTING Throwable? from Function0<Unit>
2021-03-11 11:45:47,073 [main:94] - GETTING Throwable? from ZImpl3
2021-03-11 11:45:47,091 [main:94] - GETTING Throwable? from String
2021-03-11 11:45:47,091 [main:94] - GETTING Throwable? from EmptyCoroutineContext
2021-03-11 11:45:47,106 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:47,107 [main:94] - GETTING Throwable? from Continuation<Any?>
2021-03-11 11:45:47,117 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:47,118 [main:94] - GETTING Throwable? from Int
2021-03-11 11:45:47,153 [main:94] - GETTING Throwable? from Int
2021-03-11 11:45:47,153 [main:110] - replacement of exceptionOrNull() of type Throwable? is RuntimeException("pebbm")
2021-03-11 11:45:47,299 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:45:47,301 [main:103] - replacing (it, Any?)
2021-03-11 11:45:47,301 [main:38] - replacing it Any?
2021-03-11 11:45:47,301 [main:42] - Getting value of type Any?
2021-03-11 11:45:47,448 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:47,448 [main:46] - GENERATED VALUE OF TYPE Any? = "yzdda"
2021-03-11 11:45:47,448 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:47,871 [main:55] - randomType = ArrayDeque<ZImpl3?>
2021-03-11 11:45:48,053 [main:302] - generating value of type = ArrayDeque<ZImpl3?> false depth = 0
2021-03-11 11:45:48,236 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ZImpl3?> = TODO()
2021-03-11 11:45:48,242 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(initialCapacity: kotlin.Int): ArrayDeque<ZImpl3?> = TODO()
2021-03-11 11:45:48,596 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:45:48,600 [main:95] - GENERATED = ArrayDeque<ZImpl3?>(938175123)
2021-03-11 11:45:48,738 [main:137] - GENERATING call of type @kotlin.js.JsName protected open fun toArray(): kotlin.Array<kotlin.Any?> defined in kotlin.collections.ArrayDeque[DeserializedSimpleFunctionDescriptor@735a571d]
2021-03-11 11:45:48,739 [main:137] - GENERATING call of type public final operator fun get(index: kotlin.Int): kotlin.Any? defined in kotlin.Array[DeserializedSimpleFunctionDescriptor@654f329a]
2021-03-11 11:45:48,888 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:48,892 [main:66] - Generated call from random type = (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505)
2021-03-11 11:45:48,893 [main:94] - GETTING Any? from String
2021-03-11 11:45:48,913 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:45:48,921 [main:94] - GETTING Any? from Boolean
2021-03-11 11:45:48,934 [main:94] - GETTING Any? from Any?
2021-03-11 11:45:48,938 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:45:48,946 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:45:48,947 [main:94] - GETTING Any? from Int
2021-03-11 11:45:48,992 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:45:48,992 [main:94] - GETTING Any? from Continuation<UByte>
2021-03-11 11:45:49,001 [main:94] - GETTING Any? from Int
2021-03-11 11:45:49,002 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:45:49,012 [main:94] - GETTING Any? from String
2021-03-11 11:45:49,013 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:45:49,029 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:45:49,046 [main:110] - replacement of it of type Any? is (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505)
2021-03-11 11:45:49,239 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:49,240 [main:66] - Compilation checking started
2021-03-11 11:45:50,140 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:45:50,142 [main:103] - replacing (" is not subtype of CoroutineStackFrame", String)
2021-03-11 11:45:50,142 [main:38] - replacing " is not subtype of CoroutineStackFrame" String
2021-03-11 11:45:50,142 [main:42] - Getting value of type String
2021-03-11 11:45:50,329 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:50,333 [main:46] - GENERATED VALUE OF TYPE String = "prbhw"
2021-03-11 11:45:50,333 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:50,351 [main:55] - randomType = ZImpl2
2021-03-11 11:45:50,521 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:45:50,525 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:45:50,542 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl2[SimpleFunctionDescriptorImpl@79831eb5]
2021-03-11 11:45:50,705 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:50,710 [main:137] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67cb2d56]
2021-03-11 11:45:50,868 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:45:50,872 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:45:50,877 [main:66] - Generated call from random type = (ZImpl2()).test("mvebl").filterNot({a: Char -> true})
2021-03-11 11:45:50,877 [main:110] - replacement of " is not subtype of CoroutineStackFrame" of type String is (ZImpl2()).test("mvebl").filterNot({a: Char -> true})
2021-03-11 11:45:51,046 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:45:51,046 [main:66] - Compilation checking started
2021-03-11 11:45:51,874 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        this.prope11 = prope11.getOrThrow()
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:45:51,877 [main:103] - replacing (prope11.RuntimeException("pebbm"), Throwable?)
2021-03-11 11:45:51,877 [main:38] - replacing prope11.RuntimeException("pebbm") Throwable?
2021-03-11 11:45:51,877 [main:42] - Getting value of type Throwable?
2021-03-11 11:45:52,101 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:45:52,264 [main:43] - GENERATING CALL OF fun IndexOutOfBoundsException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:45:52,269 [main:61] - WITHOUT TYPE PARAMS = fun IndexOutOfBoundsException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:45:52,616 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:45:52,620 [main:95] - GENERATED = IndexOutOfBoundsException("jxxle")
2021-03-11 11:45:52,620 [main:46] - GENERATED VALUE OF TYPE Throwable? = IndexOutOfBoundsException("jxxle")
2021-03-11 11:45:52,620 [main:49] - GENERATED IS CALL =true
2021-03-11 11:45:53,203 [main:55] - randomType = Pair<Kla5, ZImpl3>
2021-03-11 11:45:53,359 [main:302] - generating value of type = Pair<Kla5, ZImpl3> false depth = 0
2021-03-11 11:45:53,552 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Kla5, second: ZImpl3): Pair<Kla5, ZImpl3> = TODO()
2021-03-11 11:45:53,558 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Kla5, second: ZImpl3): Pair<Kla5, ZImpl3> = TODO()
2021-03-11 11:45:53,766 [main:302] - generating value of type = Kla5 false depth = 3
2021-03-11 11:45:53,773 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:45:53,774 [main:302] - generating value of type = ZImpl3 false depth = 3
2021-03-11 11:45:53,781 [main:112] - generating klass ZImpl3 text = class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}
2021-03-11 11:45:53,781 [main:95] - GENERATED = Pair<Kla5, ZImpl3>(Kla5, ZImpl3())
2021-03-11 11:45:53,804 [main:94] - GETTING Throwable? from EmptyCoroutineContext
2021-03-11 11:45:53,838 [main:94] - GETTING Throwable? from Function0<Unit>
2021-03-11 11:45:53,858 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:53,871 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:53,872 [main:94] - GETTING Throwable? from CoroutineContext
2021-03-11 11:45:53,874 [main:94] - GETTING Throwable? from Continuation<Any?>
2021-03-11 11:45:53,889 [main:94] - GETTING Throwable? from String
2021-03-11 11:45:53,938 [main:94] - GETTING Throwable? from Continuation<UByte>
2021-03-11 11:45:53,953 [main:94] - GETTING Throwable? from String
2021-03-11 11:45:53,954 [main:94] - GETTING Throwable? from Any?
2021-03-11 11:45:53,961 [main:94] - GETTING Throwable? from Int
2021-03-11 11:45:54,032 [main:94] - GETTING Throwable? from ZImpl3
2021-03-11 11:45:54,080 [main:94] - GETTING Throwable? from Int
2021-03-11 11:45:54,081 [main:94] - GETTING Throwable? from Boolean
2021-03-11 11:45:54,094 [main:110] - replacement of prope11.RuntimeException("pebbm") of type Throwable? is IndexOutOfBoundsException("jxxle")
2021-03-11 11:45:54,261 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:45:54,264 [main:103] - replacing (prope11.getOrThrow(), Ty1)
2021-03-11 11:45:54,264 [main:38] - replacing prope11.getOrThrow() Ty1
2021-03-11 11:45:54,264 [main:42] - Getting value of type Ty1
2021-03-11 11:45:54,438 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:45:54,445 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:45:54,462 [main:55] - randomType = Kla4
2021-03-11 11:45:54,620 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-11 11:45:54,624 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:45:54,635 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:45:54,645 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:45:54,654 [main:94] - GETTING Ty1 from String
2021-03-11 11:45:54,673 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:45:54,679 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:45:54,680 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:45:54,699 [main:94] - GETTING Ty1 from String
2021-03-11 11:45:54,700 [main:94] - GETTING Ty1 from Int
2021-03-11 11:45:54,747 [main:94] - GETTING Ty1 from ZImpl3
2021-03-11 11:45:54,764 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:45:54,771 [main:94] - GETTING Ty1 from Continuation<UByte>
2021-03-11 11:45:54,779 [main:94] - GETTING Ty1 from Int
2021-03-11 11:45:54,780 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:45:54,784 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:45:54,784 [main:107] - Cant find and generate replacement for prope11.getOrThrow() type Ty1
2021-03-11 11:45:54,784 [main:103] - replacing (prope11.getOrThrow(), Any?)
2021-03-11 11:45:54,785 [main:38] - replacing prope11.getOrThrow() Any?
2021-03-11 11:45:54,785 [main:42] - Getting value of type Any?
2021-03-11 11:45:54,966 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:45:54,966 [main:46] - GENERATED VALUE OF TYPE Any? = "xchwx"
2021-03-11 11:45:54,967 [main:49] - GENERATED IS CALL =false
2021-03-11 11:45:55,876 [main:55] - randomType = Triple<Byte, Collection<ULong>, Kla4>
2021-03-11 11:45:56,084 [main:302] - generating value of type = Triple<Byte, Collection<ULong>, Kla4> false depth = 0
2021-03-11 11:45:56,295 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Byte, second: Collection<ULong>, third: Kla4): Triple<Byte, Collection<ULong>, Kla4> = TODO()
2021-03-11 11:45:56,300 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Byte, second: Collection<ULong>, third: Kla4): Triple<Byte, Collection<ULong>, Kla4> = TODO()
2021-03-11 11:45:56,470 [main:302] - generating value of type = Byte true depth = 3
2021-03-11 11:45:56,474 [main:302] - generating value of type = Collection<ULong> false depth = 3
2021-03-11 11:45:56,651 [main:43] - GENERATING CALL OF fun <T> setOfNotNull(elements: ULong): Collection<ULong> = TODO()
2021-03-11 11:45:56,656 [main:61] - WITHOUT TYPE PARAMS = fun <T> setOfNotNull(elements: ULong): Collection<ULong> = TODO()
2021-03-11 11:45:56,820 [main:302] - generating value of type = ULong true depth = 6
2021-03-11 11:45:56,825 [main:95] - GENERATED = setOfNotNull<ULong>(3617020351751830276.toULong())
2021-03-11 11:45:56,825 [main:302] - generating value of type = Kla4 false depth = 3
2021-03-11 11:45:56,829 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:45:56,829 [main:95] - GENERATED = Triple<Byte, Collection<ULong>, Kla4>(-126, setOfNotNull<ULong>(3617020351751830276.toULong()), Kla4())
2021-03-11 11:45:56,846 [main:94] - GETTING Any? from String
2021-03-11 11:45:56,866 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:45:56,872 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:45:56,897 [main:94] - GETTING Any? from String
2021-03-11 11:45:56,898 [main:94] - GETTING Any? from Int
2021-03-11 11:45:56,934 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:45:56,945 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:45:56,954 [main:94] - GETTING Any? from Boolean
2021-03-11 11:45:56,963 [main:94] - GETTING Any? from Any?
2021-03-11 11:45:56,967 [main:94] - GETTING Any? from Continuation<UByte>
2021-03-11 11:45:56,976 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:45:56,991 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:45:56,992 [main:94] - GETTING Any? from Int
2021-03-11 11:45:56,993 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:45:56,993 [main:110] - replacement of prope11.getOrThrow() of type Any? is "xchwx"
2021-03-11 11:45:57,180 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:45:57,181 [main:66] - Compilation checking started
2021-03-11 11:45:58,140 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in 1..numberOfSuspensions) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:45:58,143 [main:103] - replacing (1..numberOfSuspensions, IntRange)
2021-03-11 11:45:58,143 [main:38] - replacing 1..numberOfSuspensions IntRange
2021-03-11 11:45:58,144 [main:42] - Getting value of type IntRange
2021-03-11 11:45:58,315 [main:302] - generating value of type = IntRange false depth = 0
2021-03-11 11:45:58,477 [main:43] - GENERATING CALL OF fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 11:45:58,482 [main:61] - WITHOUT TYPE PARAMS = fun IntRange(start: kotlin.Int, endInclusive: kotlin.Int): IntRange = TODO()
2021-03-11 11:45:59,085 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:45:59,090 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:45:59,094 [main:95] - GENERATED = IntRange(-506259772, 1657060729)
2021-03-11 11:45:59,095 [main:46] - GENERATED VALUE OF TYPE IntRange = IntRange(-506259772, 1657060729)
2021-03-11 11:45:59,095 [main:49] - GENERATED IS CALL =true
2021-03-11 11:45:59,287 [main:55] - randomType = String?
2021-03-11 11:45:59,475 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:45:59,512 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:45:59,681 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:59,864 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:45:59,868 [main:66] - Generated call from random type = ("xjhyp")?.subSequence(-1983636039, -977806746).indices
2021-03-11 11:45:59,869 [main:94] - GETTING IntRange from Int
2021-03-11 11:45:59,927 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02], public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3be91ea0]]
2021-03-11 11:45:59,927 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02]
2021-03-11 11:45:59,927 [main:137] - GENERATING call of type public infix fun kotlin.Short.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@3be91ea0]
2021-03-11 11:46:00,091 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:00,096 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toShort().until(-2)
2021-03-11 11:46:00,096 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4aabbc80]]
2021-03-11 11:46:00,096 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:46:00,096 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@4aabbc80]
2021-03-11 11:46:00,249 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:00,254 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().rangeTo(-6)
2021-03-11 11:46:00,254 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75ad0ea9]]
2021-03-11 11:46:00,254 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:46:00,254 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75ad0ea9]
2021-03-11 11:46:00,405 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:00,410 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toInt().until(3)
2021-03-11 11:46:00,410 [main:101] - Case = [public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@242a19da]]
2021-03-11 11:46:00,410 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@242a19da]
2021-03-11 11:46:00,568 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:00,572 [main:105] - GENERATED CALL = ((477215846)?.toInt()).rangeTo(-101)
2021-03-11 11:46:00,572 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@242a19da]]
2021-03-11 11:46:00,572 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:46:00,573 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@242a19da]
2021-03-11 11:46:00,819 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:00,824 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toInt().rangeTo(96)
2021-03-11 11:46:00,824 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32054e8]]
2021-03-11 11:46:00,824 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02]
2021-03-11 11:46:00,824 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@32054e8]
2021-03-11 11:46:00,993 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:00,997 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toShort().rangeTo(-66)
2021-03-11 11:46:00,998 [main:101] - Case = [public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75ad0ea9]]
2021-03-11 11:46:00,998 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75ad0ea9]
2021-03-11 11:46:01,217 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:01,277 [main:105] - GENERATED CALL = ((477215846)?.toInt()).until(-101)
2021-03-11 11:46:01,277 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75ad0ea9]]
2021-03-11 11:46:01,277 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:46:01,448 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:46:01,453 [main:137] - GENERATING call of type public infix fun kotlin.Int.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@75ad0ea9]
2021-03-11 11:46:01,627 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:01,634 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(935232549).until(-112)
2021-03-11 11:46:01,634 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@242a19da]]
2021-03-11 11:46:01,634 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:46:01,801 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:46:01,806 [main:137] - GENERATING call of type public final operator fun rangeTo(other: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@242a19da]
2021-03-11 11:46:01,975 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:01,980 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(-409436537).rangeTo(-41)
2021-03-11 11:46:01,980 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@68861a31]]
2021-03-11 11:46:01,980 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:46:01,980 [main:137] - GENERATING call of type public infix fun kotlin.Byte.until(to: kotlin.Byte): kotlin.ranges.IntRange defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@68861a31]
2021-03-11 11:46:02,187 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:46:02,192 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().until(-81)
2021-03-11 11:46:02,192 [main:110] - replacement of 1..numberOfSuspensions of type IntRange is ((477215846)?.toInt()).toShort().rangeTo(-66)
2021-03-11 11:46:02,431 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:02,432 [main:66] - Compilation checking started
2021-03-11 11:46:03,385 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = false
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:03,388 [main:103] - replacing (getOrThrow(), Ty1)
2021-03-11 11:46:03,388 [main:38] - replacing getOrThrow() Ty1
2021-03-11 11:46:03,389 [main:42] - Getting value of type Ty1
2021-03-11 11:46:03,586 [main:302] - generating value of type = Ty1 false depth = 0
2021-03-11 11:46:03,598 [main:46] - GENERATED VALUE OF TYPE Ty1 = 
2021-03-11 11:46:03,844 [main:55] - randomType = ULong
2021-03-11 11:46:04,042 [main:302] - generating value of type = ULong true depth = 0
2021-03-11 11:46:04,102 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:46:04,112 [main:94] - GETTING Ty1 from String
2021-03-11 11:46:04,147 [main:94] - GETTING Ty1 from Continuation<Any?>
2021-03-11 11:46:04,164 [main:94] - GETTING Ty1 from String
2021-03-11 11:46:04,166 [main:94] - GETTING Ty1 from Int
2021-03-11 11:46:04,221 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:46:04,222 [main:94] - GETTING Ty1 from Continuation<UByte>
2021-03-11 11:46:04,229 [main:94] - GETTING Ty1 from EmptyCoroutineContext
2021-03-11 11:46:04,249 [main:94] - GETTING Ty1 from Function0<Unit>
2021-03-11 11:46:04,264 [main:94] - GETTING Ty1 from CoroutineContext
2021-03-11 11:46:04,265 [main:94] - GETTING Ty1 from ZImpl3
2021-03-11 11:46:04,290 [main:94] - GETTING Ty1 from Int
2021-03-11 11:46:04,290 [main:94] - GETTING Ty1 from Any?
2021-03-11 11:46:04,294 [main:94] - GETTING Ty1 from Boolean
2021-03-11 11:46:04,304 [main:107] - Cant find and generate replacement for getOrThrow() type Ty1
2021-03-11 11:46:04,304 [main:103] - replacing (false, Boolean)
2021-03-11 11:46:04,304 [main:38] - replacing false Boolean
2021-03-11 11:46:04,304 [main:42] - Getting value of type Boolean
2021-03-11 11:46:04,467 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:04,471 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:46:04,472 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:04,490 [main:55] - randomType = Kla0
2021-03-11 11:46:04,656 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:46:04,660 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}
2021-03-11 11:46:04,875 [main:194] - Type params = []
2021-03-11 11:46:05,058 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:46:05,260 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:46:05,267 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:46:05,674 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:46:05,846 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:46:05,852 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:46:06,477 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:46:06,477 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:46:06,502 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@63e795d0]
2021-03-11 11:46:06,721 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:06,722 [main:66] - Generated call from random type = (Kla0()).context.equals("gkjzv")
2021-03-11 11:46:06,723 [main:94] - GETTING Boolean from ZImpl3
2021-03-11 11:46:06,752 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:46:06,753 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:46:06,923 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:06,924 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:46:07,080 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:07,085 [main:105] - GENERATED CALL = (ZImpl3()).equals("zkzfu").xor(true)
2021-03-11 11:46:07,085 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:46:07,085 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:46:07,242 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:07,242 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:46:07,408 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:07,413 [main:105] - GENERATED CALL = (ZImpl3()).equals("tseqe").or(true)
2021-03-11 11:46:07,414 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]]
2021-03-11 11:46:07,414 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:46:07,624 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:07,629 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4b03e036]
2021-03-11 11:46:07,629 [main:105] - GENERATED CALL = (ZImpl3()).test("rmwfk").toBoolean()
2021-03-11 11:46:07,629 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]]
2021-03-11 11:46:07,629 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:46:07,810 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:07,817 [main:137] - GENERATING call of type public fun kotlin.String.matches(regex: kotlin.String): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@731bac31]
2021-03-11 11:46:08,030 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:08,034 [main:105] - GENERATED CALL = (ZImpl3()).test("tfvsi").matches("nvsou")
2021-03-11 11:46:08,035 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]]
2021-03-11 11:46:08,035 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:46:08,198 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:08,202 [main:137] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@199eb3bc]
2021-03-11 11:46:08,352 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:08,508 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:08,513 [main:105] - GENERATED CALL = (ZImpl3()).test("uibvq").startsWith("kcefu", true)
2021-03-11 11:46:08,513 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:46:08,513 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:46:08,664 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:08,664 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:46:08,847 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:08,848 [main:105] - GENERATED CALL = (ZImpl3()).equals("vgjsy").equals("zipvz")
2021-03-11 11:46:08,848 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:46:08,848 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:46:09,013 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:09,014 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:46:09,014 [main:105] - GENERATED CALL = (ZImpl3()).equals("hytna").not()
2021-03-11 11:46:09,014 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]]
2021-03-11 11:46:09,014 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:46:09,191 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:09,195 [main:137] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5e87e6fe]
2021-03-11 11:46:09,358 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:09,515 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:09,519 [main:105] - GENERATED CALL = (ZImpl3()).test("mopnw").endsWith("gskao", true)
2021-03-11 11:46:09,519 [main:101] - Case = [public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]]
2021-03-11 11:46:09,519 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl3[SimpleFunctionDescriptorImpl@1bdda9ca]
2021-03-11 11:46:09,671 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:46:09,675 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@110e9a99]
2021-03-11 11:46:09,827 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:09,827 [main:105] - GENERATED CALL = (ZImpl3()).test("npwab").equals("fedam")
2021-03-11 11:46:09,827 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]]
2021-03-11 11:46:09,827 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in ZImpl3[DeserializedSimpleFunctionDescriptor@4daafba7]
2021-03-11 11:46:10,011 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:10,012 [main:105] - GENERATED CALL = (ZImpl3()).equals("autic")
2021-03-11 11:46:10,012 [main:110] - replacement of false of type Boolean is (Kla0()).context.equals("gkjzv")
2021-03-11 11:46:10,177 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:10,178 [main:66] - Compilation checking started
2021-03-11 11:46:10,909 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:10,911 [main:103] - replacing (let(x), Unit?)
2021-03-11 11:46:10,911 [main:38] - replacing let(x) Unit?
2021-03-11 11:46:10,911 [main:42] - Getting value of type Unit?
2021-03-11 11:46:11,061 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:46:11,068 [main:46] - GENERATED VALUE OF TYPE Unit? = println()
2021-03-11 11:46:11,068 [main:49] - GENERATED IS CALL =true
2021-03-11 11:46:11,263 [main:55] - randomType = Collection<ZImpl3>
2021-03-11 11:46:11,268 [main:94] - GETTING Unit? from CoroutineContext
2021-03-11 11:46:11,275 [main:94] - GETTING Unit? from Continuation<Any?>
2021-03-11 11:46:11,281 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1367559]]
2021-03-11 11:46:11,281 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1367559]
2021-03-11 11:46:11,430 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:46:11,589 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:46:11,594 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:46:11,974 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:46:11,979 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:46:11,979 [main:95] - GENERATED = runCatching<Any?>({ "sqptc"})
2021-03-11 11:46:11,980 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")}))?.resumeWith(runCatching<Any?>({ "sqptc"}))
2021-03-11 11:46:11,980 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@7ce6c004]]
2021-03-11 11:46:11,980 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resume(value: T): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@7ce6c004]
2021-03-11 11:46:12,145 [main:302] - generating value of type = T false depth = 0
2021-03-11 11:46:12,516 [main:43] - GENERATING CALL OF fun <T> requireNotNull(value: Long): T = TODO()
2021-03-11 11:46:12,521 [main:61] - WITHOUT TYPE PARAMS = fun <T> requireNotNull(value: Long): T = TODO()
2021-03-11 11:46:12,685 [main:302] - generating value of type = Long true depth = 3
2021-03-11 11:46:12,690 [main:95] - GENERATED = requireNotNull<Long>(-4030137910951611517)
2021-03-11 11:46:12,690 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")}))?.resume(requireNotNull<Long>(-4030137910951611517))
2021-03-11 11:46:12,690 [main:101] - Case = [@kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@75293ab6]]
2021-03-11 11:46:12,690 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@75293ab6]
2021-03-11 11:46:12,841 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:46:12,849 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")}))?.resumeWithException(NumberFormatException())
2021-03-11 11:46:12,849 [main:110] - replacement of let(x) of type Unit? is (fu3({a: Throwable -> println("sdzvs")}))?.resumeWith(runCatching<Any?>({ "sqptc"}))
2021-03-11 11:46:13,000 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:46:13,000 [main:66] - Compilation checking started
2021-03-11 11:46:13,432 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.(fu3({a: Throwable -> println("sdzvs")}))?.resumeWith(runCatching<Any?>({ "sqptc"}))
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            prope10.prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:13,435 [main:103] - replacing (prope10, Kla13)
2021-03-11 11:46:13,435 [main:38] - replacing prope10 Kla13
2021-03-11 11:46:13,435 [main:42] - Getting value of type Kla13
2021-03-11 11:46:13,617 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-11 11:46:13,622 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:46:13,622 [main:46] - GENERATED VALUE OF TYPE Kla13 = Kla13()
2021-03-11 11:46:13,622 [main:49] - GENERATED IS CALL =true
2021-03-11 11:46:13,817 [main:55] - randomType = UShort
2021-03-11 11:46:13,991 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:46:14,039 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:46:14,054 [main:94] - GETTING Kla13 from Int
2021-03-11 11:46:14,108 [main:94] - GETTING Kla13 from String
2021-03-11 11:46:14,136 [main:94] - GETTING Kla13 from EmptyCoroutineContext
2021-03-11 11:46:14,158 [main:94] - GETTING Kla13 from Function0<Unit>
2021-03-11 11:46:14,171 [main:94] - GETTING Kla13 from Continuation<UByte>
2021-03-11 11:46:14,182 [main:94] - GETTING Kla13 from Continuation<Any?>
2021-03-11 11:46:14,194 [main:94] - GETTING Kla13 from ZImpl3
2021-03-11 11:46:14,210 [main:94] - GETTING Kla13 from Any?
2021-03-11 11:46:14,214 [main:94] - GETTING Kla13 from Int
2021-03-11 11:46:14,214 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:46:14,220 [main:94] - GETTING Kla13 from String
2021-03-11 11:46:14,221 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:46:14,221 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:46:14,221 [main:110] - replacement of prope10 of type Kla13 is Kla13()
2021-03-11 11:46:14,371 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:46:14,372 [main:66] - Compilation checking started
2021-03-11 11:46:15,041 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:15,044 [main:103] - replacing (-1092763304 != numberOfSuspensions, Boolean)
2021-03-11 11:46:15,044 [main:38] - replacing -1092763304 != numberOfSuspensions Boolean
2021-03-11 11:46:15,044 [main:42] - Getting value of type Boolean
2021-03-11 11:46:15,195 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:15,199 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:46:15,199 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:15,216 [main:55] - randomType = Kla9
2021-03-11 11:46:15,367 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 11:46:15,371 [main:112] - generating klass Kla9 text = open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}
2021-03-11 11:46:15,521 [main:194] - Type params = []
2021-03-11 11:46:15,705 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:46:15,882 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:46:15,888 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:46:16,276 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:46:16,440 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:46:16,446 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:46:17,056 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 11:46:17,239 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:46:17,245 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:46:17,818 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 11
2021-03-11 11:46:17,982 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:46:17,988 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:46:18,608 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:46:18,608 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:46:18,608 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:46:18,608 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:46:18,625 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@6b15a00b]
2021-03-11 11:46:18,800 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:18,800 [main:66] - Generated call from random type = (Kla9()).context.equals("hvuid")
2021-03-11 11:46:18,801 [main:94] - GETTING Boolean from Any?
2021-03-11 11:46:18,806 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]]
2021-03-11 11:46:18,806 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:18,969 [main:105] - GENERATED CALL = (Kla1().prope3).equals(null)
2021-03-11 11:46:18,969 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:46:18,969 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:19,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:19,122 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:46:19,273 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:19,277 [main:105] - GENERATED CALL = (Kla1().prope3).equals("oiucx").and(true)
2021-03-11 11:46:19,277 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:46:19,277 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:19,456 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:19,456 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:46:19,623 [main:105] - GENERATED CALL = (Kla1().prope3).equals("hndbq").equals(null)
2021-03-11 11:46:19,623 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:46:19,623 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:19,800 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:19,801 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:46:19,963 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:19,968 [main:105] - GENERATED CALL = (Kla1().prope3).equals("udrka").xor(true)
2021-03-11 11:46:19,968 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:46:19,968 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:20,122 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:20,122 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:46:20,122 [main:105] - GENERATED CALL = (Kla1().prope3).equals("jsddd").not()
2021-03-11 11:46:20,122 [main:101] - Case = [public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:46:20,122 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:20,275 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:20,275 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:46:20,454 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:20,458 [main:105] - GENERATED CALL = (Kla1().prope3).equals("pnsyt").or(false)
2021-03-11 11:46:20,458 [main:110] - replacement of -1092763304 != numberOfSuspensions of type Boolean is (Kla1().prope3).equals("pnsyt").or(false)
2021-03-11 11:46:20,627 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:20,627 [main:66] - Compilation checking started
2021-03-11 11:46:21,117 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if ((Kla1().prope3).equals("pnsyt").or(false))
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if (checkFinished && !prope14) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:21,119 [main:103] - replacing (isSuccess, Boolean)
2021-03-11 11:46:21,119 [main:38] - replacing isSuccess Boolean
2021-03-11 11:46:21,119 [main:42] - Getting value of type Boolean
2021-03-11 11:46:21,271 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:21,275 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:46:21,275 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:21,452 [main:55] - randomType = UShort
2021-03-11 11:46:21,605 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:46:21,647 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toDouble(): kotlin.Double defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4a714d65]
2021-03-11 11:46:21,647 [main:137] - GENERATING call of type public fun kotlin.Double.isFinite(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@5027e1ee]
2021-03-11 11:46:21,647 [main:66] - Generated call from random type = (5625.toUShort()).toDouble().isFinite()
2021-03-11 11:46:21,648 [main:110] - replacement of isSuccess of type Boolean is (5625.toUShort()).toDouble().isFinite()
2021-03-11 11:46:21,796 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:21,798 [main:103] - replacing (checkFinished && !prope14, Boolean)
2021-03-11 11:46:21,798 [main:38] - replacing checkFinished && !prope14 Boolean
2021-03-11 11:46:21,798 [main:42] - Getting value of type Boolean
2021-03-11 11:46:21,987 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:21,991 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:46:21,992 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:22,001 [main:55] - randomType = Short
2021-03-11 11:46:22,168 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:46:22,213 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Double): kotlin.Double defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@58e16ca9]
2021-03-11 11:46:22,392 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:46:22,397 [main:137] - GENERATING call of type public fun kotlin.Double.isNaN(): kotlin.Boolean defined in kotlin[DeserializedSimpleFunctionDescriptor@418eed39]
2021-03-11 11:46:22,397 [main:66] - Generated call from random type = (20736).div(0.0015991539974499203).isNaN()
2021-03-11 11:46:22,398 [main:94] - GETTING Boolean from Continuation<UByte>
2021-03-11 11:46:22,410 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:46:22,410 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:22,576 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:22,576 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:46:22,729 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:22,733 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("lgzxb").xor(false)
2021-03-11 11:46:22,734 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@19c43cf0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]]
2021-03-11 11:46:22,734 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@19c43cf0]
2021-03-11 11:46:22,886 [main:302] - generating value of type = Result<UByte> false depth = 0
2021-03-11 11:46:23,082 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->UByte): Result<UByte> = TODO()
2021-03-11 11:46:23,088 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->UByte): Result<UByte> = TODO()
2021-03-11 11:46:23,472 [main:302] - generating value of type = Function0<UByte> false depth = 3
2021-03-11 11:46:23,477 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 11:46:23,481 [main:95] - GENERATED = runCatching<UByte>({ 95.toUByte()})
2021-03-11 11:46:23,481 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]
2021-03-11 11:46:23,646 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:23,646 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")
2021-03-11 11:46:23,647 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@3b09ce69], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]]
2021-03-11 11:46:23,647 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:23,807 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:23,807 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).context.equals("urfkd")
2021-03-11 11:46:23,807 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:46:23,807 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:23,960 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:23,960 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:46:24,133 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:24,134 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("iimvt").equals("tftia")
2021-03-11 11:46:24,294 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:46:24,294 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:24,458 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:24,458 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:46:24,625 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:24,629 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("dpzau").or(false)
2021-03-11 11:46:24,629 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:46:24,629 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:24,789 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:24,789 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:46:24,789 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("slqfg").not()
2021-03-11 11:46:24,789 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:46:24,789 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:24,938 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:24,938 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:46:25,096 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:25,100 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("ikozh").and(false)
2021-03-11 11:46:25,100 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]]
2021-03-11 11:46:25,100 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:25,272 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:25,273 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("eqkch")
2021-03-11 11:46:25,273 [main:110] - replacement of checkFinished && !prope14 of type Boolean is (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")
2021-03-11 11:46:25,436 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:25,437 [main:66] - Compilation checking started
2021-03-11 11:46:26,221 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:26,224 [main:103] - replacing (numberOfSuspensions, Int)
2021-03-11 11:46:26,225 [main:38] - replacing numberOfSuspensions Int
2021-03-11 11:46:26,225 [main:42] - Getting value of type Int
2021-03-11 11:46:26,390 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:46:26,394 [main:46] - GENERATED VALUE OF TYPE Int = 1330204880
2021-03-11 11:46:26,394 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:26,412 [main:55] - randomType = Kla3
2021-03-11 11:46:26,563 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 11:46:26,567 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}
2021-03-11 11:46:26,572 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla3[DeserializedSimpleFunctionDescriptor@3c470204]
2021-03-11 11:46:26,725 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:26,726 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:46:26,880 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:26,884 [main:66] - Generated call from random type = (Kla3()).equals("qtgam").compareTo(true)
2021-03-11 11:46:26,885 [main:94] - GETTING Int from Function0<Unit>
2021-03-11 11:46:26,898 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10], public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]]
2021-03-11 11:46:26,898 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:46:27,079 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:27,079 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:46:27,247 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:27,252 [main:105] - GENERATED CALL = (Kla4().prope7).equals("oytqg").compareTo(true)
2021-03-11 11:46:27,252 [main:110] - replacement of numberOfSuspensions of type Int is (Kla3()).equals("qtgam").compareTo(true)
2021-03-11 11:46:27,432 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:27,433 [main:66] - Compilation checking started
2021-03-11 11:46:28,195 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if (prope14) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:28,199 [main:103] - replacing (prope14, Boolean)
2021-03-11 11:46:28,199 [main:38] - replacing prope14 Boolean
2021-03-11 11:46:28,199 [main:42] - Getting value of type Boolean
2021-03-11 11:46:28,369 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:28,373 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:46:28,373 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:28,554 [main:55] - randomType = Double
2021-03-11 11:46:28,707 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:46:28,740 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@3657cec2]
2021-03-11 11:46:28,740 [main:137] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5bef6a6a]
2021-03-11 11:46:28,740 [main:66] - Generated call from random type = (0.015807226349986325).toChar().isDefined()
2021-03-11 11:46:28,741 [main:94] - GETTING Boolean from Continuation<UByte>
2021-03-11 11:46:28,748 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@3b09ce69], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]]
2021-03-11 11:46:28,748 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:28,939 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:28,939 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).context.equals("wvddr")
2021-03-11 11:46:28,939 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:46:28,939 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:29,107 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:29,107 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:46:29,284 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:29,285 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("tonsu").equals("rxkub")
2021-03-11 11:46:29,289 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:46:29,289 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:29,448 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:29,448 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:46:29,606 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:29,611 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("furwm").xor(true)
2021-03-11 11:46:29,611 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:46:29,611 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:29,762 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:29,763 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:46:29,763 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("rpypg").not()
2021-03-11 11:46:29,763 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]]
2021-03-11 11:46:29,763 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:29,940 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:29,941 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("lgpnt")
2021-03-11 11:46:29,941 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:46:29,941 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:30,116 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:30,116 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:46:30,292 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:30,296 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("hciww").and(true)
2021-03-11 11:46:30,297 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:46:30,297 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:30,457 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:30,457 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:46:30,615 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:30,620 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).equals("zfncp").or(true)
2021-03-11 11:46:30,620 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@19c43cf0], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]]
2021-03-11 11:46:30,620 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.UByte>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@19c43cf0]
2021-03-11 11:46:30,774 [main:302] - generating value of type = Result<UByte> false depth = 0
2021-03-11 11:46:30,959 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->UByte): Result<UByte> = TODO()
2021-03-11 11:46:30,965 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->UByte): Result<UByte> = TODO()
2021-03-11 11:46:31,352 [main:302] - generating value of type = Function0<UByte> false depth = 3
2021-03-11 11:46:31,356 [main:302] - generating value of type = UByte true depth = 4
2021-03-11 11:46:31,361 [main:95] - GENERATED = runCatching<UByte>({ 50.toUByte()})
2021-03-11 11:46:31,361 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]
2021-03-11 11:46:31,521 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:31,522 [main:105] - GENERATED CALL = (fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 50.toUByte()})).equals("pkupw")
2021-03-11 11:46:31,522 [main:110] - replacement of prope14 of type Boolean is (0.015807226349986325).toChar().isDefined()
2021-03-11 11:46:31,686 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:46:31,687 [main:66] - Compilation checking started
2021-03-11 11:46:32,390 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:32,392 [main:103] - replacing (prope15, Function0<Unit>)
2021-03-11 11:46:32,392 [main:38] - replacing prope15 Function0<Unit>
2021-03-11 11:46:32,392 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:46:32,545 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:46:32,549 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:46:32,743 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:46:32,749 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:46:33,141 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:46:33,146 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:46:33,327 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:46:33,333 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:46:33,684 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:46:33,688 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:46:33,897 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:46:33,903 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:46:34,291 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:46:34,291 [main:95] - GENERATED = println("kcgfp")
2021-03-11 11:46:34,291 [main:95] - GENERATED = contract({ println("kcgfp")})
2021-03-11 11:46:34,291 [main:95] - GENERATED = contract({ contract({ println("kcgfp")})})
2021-03-11 11:46:34,291 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ contract({ println("kcgfp")})})}
2021-03-11 11:46:34,292 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:34,310 [main:55] - randomType = Kla10
2021-03-11 11:46:34,477 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 11:46:34,481 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}
2021-03-11 11:46:34,505 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:46:34,545 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:46:34,563 [main:94] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 11:46:34,578 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:46:34,585 [main:110] - replacement of prope15 of type Function0<Unit> is { contract({ contract({ println("kcgfp")})})}
2021-03-11 11:46:34,741 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:46:34,741 [main:66] - Compilation checking started
2021-03-11 11:46:35,184 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope10.{ contract({ contract({ println("kcgfp")})})} = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:35,187 [main:103] - replacing (prope10, Kla13)
2021-03-11 11:46:35,187 [main:38] - replacing prope10 Kla13
2021-03-11 11:46:35,187 [main:42] - Getting value of type Kla13
2021-03-11 11:46:35,341 [main:302] - generating value of type = Kla13 false depth = 0
2021-03-11 11:46:35,345 [main:112] - generating klass Kla13 text = class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:46:35,346 [main:46] - GENERATED VALUE OF TYPE Kla13 = Kla13()
2021-03-11 11:46:35,346 [main:49] - GENERATED IS CALL =true
2021-03-11 11:46:35,575 [main:55] - randomType = LinkedHashSet<Char>
2021-03-11 11:46:35,747 [main:302] - generating value of type = LinkedHashSet<Char> false depth = 0
2021-03-11 11:46:35,932 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Char> = TODO()
2021-03-11 11:46:35,938 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Char> = TODO()
2021-03-11 11:46:36,115 [main:95] - GENERATED = linkedSetOf<Char>()
2021-03-11 11:46:36,253 [main:94] - GETTING Kla13 from Int
2021-03-11 11:46:36,285 [main:94] - GETTING Kla13 from Continuation<Any?>
2021-03-11 11:46:36,291 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:46:36,297 [main:94] - GETTING Kla13 from Any?
2021-03-11 11:46:36,300 [main:94] - GETTING Kla13 from Continuation<UByte>
2021-03-11 11:46:36,306 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:46:36,307 [main:94] - GETTING Kla13 from Function0<Unit>
2021-03-11 11:46:36,317 [main:94] - GETTING Kla13 from Int
2021-03-11 11:46:36,318 [main:94] - GETTING Kla13 from String
2021-03-11 11:46:36,335 [main:94] - GETTING Kla13 from CoroutineContext
2021-03-11 11:46:36,336 [main:94] - GETTING Kla13 from EmptyCoroutineContext
2021-03-11 11:46:36,351 [main:94] - GETTING Kla13 from Boolean
2021-03-11 11:46:36,359 [main:94] - GETTING Kla13 from String
2021-03-11 11:46:36,360 [main:94] - GETTING Kla13 from ZImpl3
2021-03-11 11:46:36,376 [main:110] - replacement of prope10 of type Kla13 is Kla13()
2021-03-11 11:46:36,530 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:46:36,531 [main:66] - Compilation checking started
2021-03-11 11:46:37,258 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:37,262 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 11:46:37,263 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 11:46:37,263 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 11:46:37,450 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 11:46:37,456 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:46:37,655 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:46:37,661 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-11 11:46:38,247 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:46:38,252 [main:302] - generating value of type = Function0<Any> false depth = 4
2021-03-11 11:46:38,256 [main:302] - generating value of type = Any false depth = 5
2021-03-11 11:46:38,256 [main:95] - GENERATED = check(true, { "scdsm"})
2021-03-11 11:46:38,256 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { check(true, { "scdsm"})}
2021-03-11 11:46:38,256 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:41,189 [main:55] - randomType = Collection<HashMap<Kla2<Function2<Map<Short?, Int?>?, List<ArrayDeque<UShort?>>?, Boolean>>?, String>>
2021-03-11 11:46:41,191 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 11:46:41,230 [main:94] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 11:46:41,236 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 11:46:41,237 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 11:46:41,255 [main:94] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-11 11:46:41,269 [main:94] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-11 11:46:41,278 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 11:46:41,279 [main:94] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 11:46:41,280 [main:94] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-11 11:46:41,290 [main:94] - GETTING SuspendFunction0<Unit> from Any?
2021-03-11 11:46:41,293 [main:94] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-11 11:46:41,300 [main:94] - GETTING SuspendFunction0<Unit> from Continuation<UByte>
2021-03-11 11:46:41,307 [main:94] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 11:46:41,308 [main:94] - GETTING SuspendFunction0<Unit> from ZImpl3
2021-03-11 11:46:41,325 [main:110] - replacement of c of type SuspendFunction0<Unit> is { check(true, { "scdsm"})}
2021-03-11 11:46:41,509 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:46:41,510 [main:66] - Compilation checking started
2021-03-11 11:46:42,043 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
{ check(true, { "scdsm"})}.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:42,047 [main:103] - replacing (prope14, Boolean)
2021-03-11 11:46:42,047 [main:38] - replacing prope14 Boolean
2021-03-11 11:46:42,047 [main:42] - Getting value of type Boolean
2021-03-11 11:46:42,218 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:42,223 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:46:42,223 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:43,016 [main:55] - randomType = Function1<Kla9, HashMap<Float?, Kla10>>
2021-03-11 11:46:43,017 [main:94] - GETTING Boolean from CoroutineContext
2021-03-11 11:46:43,025 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:46:43,025 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:43,212 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:43,212 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:46:43,381 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:43,382 [main:105] - GENERATED CALL = (Kla5.context).equals("hxniy").equals("mrmek")
2021-03-11 11:46:43,382 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:46:43,382 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:43,564 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:43,564 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:46:43,732 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:43,737 [main:105] - GENERATED CALL = (Kla5.context).equals("nvfsc").xor(false)
2021-03-11 11:46:43,738 [main:101] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e44a73a]]
2021-03-11 11:46:43,738 [main:137] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f]
2021-03-11 11:46:43,895 [main:302] - generating value of type = R false depth = 0
2021-03-11 11:46:44,286 [main:43] - GENERATING CALL OF fun <R> run(block: ()->Kla5): R = TODO()
2021-03-11 11:46:44,292 [main:61] - WITHOUT TYPE PARAMS = fun <R> run(block: ()->Kla5): R = TODO()
2021-03-11 11:46:44,681 [main:302] - generating value of type = Function0<Kla5> false depth = 3
2021-03-11 11:46:44,685 [main:302] - generating value of type = Kla5 false depth = 4
2021-03-11 11:46:44,690 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:46:44,690 [main:95] - GENERATED = run<Kla5>({ Kla5})
2021-03-11 11:46:44,858 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 11:46:44,863 [main:302] - generating value of type = R false depth = 1
2021-03-11 11:46:45,233 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Kla8<Kla9>): R = TODO()
2021-03-11 11:46:45,242 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Kla8<Kla9>): R = TODO()
2021-03-11 11:46:45,855 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:46:45,855 [main:302] - generating value of type = Function0<Kla8<Kla9>> false depth = 4
2021-03-11 11:46:45,860 [main:302] - generating value of type = Kla8<Kla9> false depth = 5
2021-03-11 11:46:45,865 [main:112] - generating klass Kla8 text = interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}
2021-03-11 11:46:46,630 [main:95] - GENERATED = synchronized<Kla8<Kla9>>("olryo", { TODO()})
2021-03-11 11:46:46,630 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e44a73a]
2021-03-11 11:46:46,805 [main:302] - generating value of type = T false depth = 0
2021-03-11 11:46:46,999 [main:43] - GENERATING CALL OF fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Char>)->kotlin.Unit): T = TODO()
2021-03-11 11:46:47,005 [main:61] - WITHOUT TYPE PARAMS = fun <T> suspendCoroutine(block: (kotlin.coroutines.Continuation<Char>)->kotlin.Unit): T = TODO()
2021-03-11 11:46:47,392 [main:302] - generating value of type = Function1<Continuation<Char>, Unit> false depth = 3
2021-03-11 11:46:47,397 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:46:47,560 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:46:47,566 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:46:47,973 [main:302] - generating value of type = Any false depth = 7
2021-03-11 11:46:47,973 [main:95] - GENERATED = println("jpfbb")
2021-03-11 11:46:47,973 [main:95] - GENERATED = suspendCoroutine<Char>({a: Continuation<Char> -> println("jpfbb")})
2021-03-11 11:46:47,974 [main:105] - GENERATED CALL = (Kla5.context).fold(run<Kla5>({ Kla5}), {a: R, b: Element -> synchronized<Kla8<Kla9>>("olryo", { TODO()})})?.contains(suspendCoroutine<Char>({a: Continuation<Char> -> println("jpfbb")}))
2021-03-11 11:46:47,974 [main:101] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]]
2021-03-11 11:46:47,974 [main:137] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f]
2021-03-11 11:46:48,153 [main:302] - generating value of type = R false depth = 0
2021-03-11 11:46:49,575 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>): R = TODO()
2021-03-11 11:46:49,580 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>): R = TODO()
2021-03-11 11:46:50,176 [main:302] - generating value of type = Any false depth = 3
2021-03-11 11:46:50,177 [main:302] - generating value of type = Function0<MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>> false depth = 3
2021-03-11 11:46:50,182 [main:302] - generating value of type = MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>> false depth = 4
2021-03-11 11:46:50,375 [main:43] - GENERATING CALL OF fun <K, V> mutableMapOf(): MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>> = TODO()
2021-03-11 11:46:50,381 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> mutableMapOf(): MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>> = TODO()
2021-03-11 11:46:50,551 [main:95] - GENERATED = mutableMapOf<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>()
2021-03-11 11:46:50,551 [main:95] - GENERATED = synchronized<MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>>("jmtef", { mutableMapOf<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>()})
2021-03-11 11:46:50,707 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 11:46:50,711 [main:302] - generating value of type = R false depth = 1
2021-03-11 11:46:51,106 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Kla4, block: T.()->ULong): R = TODO()
2021-03-11 11:46:51,112 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Kla4, block: T.()->ULong): R = TODO()
2021-03-11 11:46:51,502 [main:302] - generating value of type = Kla4 false depth = 4
2021-03-11 11:46:51,506 [main:112] - generating klass Kla4 text = class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-11 11:46:51,507 [main:385] - Cant generate call of fun <T, R> with(receiver: Kla4, block: T.()->ULong): R = TODO()
2021-03-11 11:46:51,507 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:46:51,667 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:51,668 [main:105] - GENERATED CALL = (Kla5.context).fold(synchronized<MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>>("jmtef", { mutableMapOf<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>()}), {a: R, b: Element -> })?.equals("zxynb")
2021-03-11 11:46:51,668 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:46:51,668 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:51,824 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:51,824 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:46:51,824 [main:105] - GENERATED CALL = (Kla5.context).equals("lxgxu").not()
2021-03-11 11:46:51,824 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:46:51,825 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:51,978 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:51,978 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:46:52,163 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:52,168 [main:105] - GENERATED CALL = (Kla5.context).equals("qmmre").and(false)
2021-03-11 11:46:52,168 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:46:52,168 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:52,338 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:52,338 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:46:52,520 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:52,525 [main:105] - GENERATED CALL = (Kla5.context).equals("pqxxz").or(true)
2021-03-11 11:46:52,525 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]]
2021-03-11 11:46:52,525 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:52,693 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:52,694 [main:105] - GENERATED CALL = (Kla5.context).equals("qiatu")
2021-03-11 11:46:52,694 [main:101] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@461a4f09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@2f423cb4]]
2021-03-11 11:46:52,694 [main:137] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@461a4f09]
2021-03-11 11:46:52,854 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-11 11:46:53,052 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:46:53,059 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:46:53,658 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 3
2021-03-11 11:46:53,828 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:46:53,834 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:46:54,448 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:46:54,449 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:46:54,449 [main:144] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@461a4f09]
2021-03-11 11:46:54,449 [main:110] - replacement of prope14 of type Boolean is (Kla5.context).fold(synchronized<MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>>("jmtef", { mutableMapOf<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>()}), {a: R, b: Element -> })?.equals("zxynb")
2021-03-11 11:46:54,628 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:46:54,629 [main:66] - Compilation checking started
2021-03-11 11:46:55,156 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        prope11.getOrThrow()
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        (Kla5.context).fold(synchronized<MutableMap<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>>("jmtef", { mutableMapOf<Function1<Array<HashSet<Kla1>>, ULong>, Kla8<Kla0>>()}), {a: R, b: Element -> })?.equals("zxynb") = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:55,158 [main:103] - replacing (prope11.getOrThrow(), Any?)
2021-03-11 11:46:55,159 [main:38] - replacing prope11.getOrThrow() Any?
2021-03-11 11:46:55,159 [main:42] - Getting value of type Any?
2021-03-11 11:46:55,322 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:55,322 [main:46] - GENERATED VALUE OF TYPE Any? = "gzwdi"
2021-03-11 11:46:55,323 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:55,333 [main:55] - randomType = UByte
2021-03-11 11:46:55,492 [main:302] - generating value of type = UByte true depth = 0
2021-03-11 11:46:55,524 [main:94] - GETTING Any? from String
2021-03-11 11:46:55,542 [main:94] - GETTING Any? from Boolean
2021-03-11 11:46:55,551 [main:94] - GETTING Any? from Function0<Unit>
2021-03-11 11:46:55,561 [main:94] - GETTING Any? from Continuation<Any?>
2021-03-11 11:46:55,568 [main:94] - GETTING Any? from Int
2021-03-11 11:46:55,599 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:46:55,605 [main:94] - GETTING Any? from Continuation<UByte>
2021-03-11 11:46:55,612 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:46:55,613 [main:94] - GETTING Any? from ZImpl3
2021-03-11 11:46:55,629 [main:94] - GETTING Any? from Any?
2021-03-11 11:46:55,633 [main:94] - GETTING Any? from String
2021-03-11 11:46:55,634 [main:94] - GETTING Any? from CoroutineContext
2021-03-11 11:46:55,635 [main:94] - GETTING Any? from Int
2021-03-11 11:46:55,636 [main:94] - GETTING Any? from EmptyCoroutineContext
2021-03-11 11:46:55,651 [main:110] - replacement of prope11.getOrThrow() of type Any? is "gzwdi"
2021-03-11 11:46:55,806 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(STRING_TEMPLATE)
2021-03-11 11:46:55,806 [main:66] - Compilation checking started
2021-03-11 11:46:56,546 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = false

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:46:56,549 [main:103] - replacing (false, Boolean)
2021-03-11 11:46:56,549 [main:38] - replacing false Boolean
2021-03-11 11:46:56,549 [main:42] - Getting value of type Boolean
2021-03-11 11:46:56,705 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:56,709 [main:46] - GENERATED VALUE OF TYPE Boolean = true
2021-03-11 11:46:56,709 [main:49] - GENERATED IS CALL =false
2021-03-11 11:46:56,912 [main:55] - randomType = Kla2<Double>
2021-03-11 11:46:57,067 [main:302] - generating value of type = Kla2<Double> false depth = 0
2021-03-11 11:46:57,071 [main:112] - generating klass Kla2 text = abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-11 11:46:58,472 [main:302] - generating value of type = Kla5 false depth = 2
2021-03-11 11:46:58,477 [main:112] - generating klass Kla5 text = object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}
2021-03-11 11:46:58,490 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla2[DeserializedSimpleFunctionDescriptor@77fe2b35]
2021-03-11 11:46:58,643 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:58,643 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:46:58,829 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:58,834 [main:66] - Generated call from random type = (Kla5).equals("sqilp").and(false)
2021-03-11 11:46:58,835 [main:94] - GETTING Boolean from Continuation<Any?>
2021-03-11 11:46:58,845 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:46:58,845 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:59,016 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:59,016 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:46:59,195 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:46:59,200 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("eiivk").or(true)
2021-03-11 11:46:59,200 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:46:59,200 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:59,361 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:59,361 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:46:59,361 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("accyv").not()
2021-03-11 11:46:59,361 [main:101] - Case = [public abstract val context: kotlin.coroutines.CoroutineContext defined in kotlin.coroutines.Continuation[DeserializedPropertyDescriptor@65a30554], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]]
2021-03-11 11:46:59,361 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:46:59,521 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).context.equals(null)
2021-03-11 11:46:59,521 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]]
2021-03-11 11:46:59,521 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:46:59,703 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:46:59,704 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")
2021-03-11 11:46:59,704 [main:101] - Case = [public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1367559], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]]
2021-03-11 11:46:59,704 [main:137] - GENERATING call of type public abstract fun resumeWith(result: kotlin.Result<kotlin.Any?>): kotlin.Unit defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@1367559]
2021-03-11 11:46:59,873 [main:302] - generating value of type = Result<Any?> false depth = 0
2021-03-11 11:47:00,058 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:47:00,064 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Any?): Result<Any?> = TODO()
2021-03-11 11:47:00,424 [main:302] - generating value of type = Function0<Any?> false depth = 3
2021-03-11 11:47:00,428 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:47:00,429 [main:95] - GENERATED = runCatching<Any?>({ "flcep"})
2021-03-11 11:47:00,429 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]
2021-03-11 11:47:00,582 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:00,583 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).resumeWith(runCatching<Any?>({ "flcep"})).equals("lnffq")
2021-03-11 11:47:00,583 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:47:00,583 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:47:00,776 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:00,776 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:47:00,946 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:00,951 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("pnrbt").and(false)
2021-03-11 11:47:00,951 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:47:00,951 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:47:01,138 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:01,138 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:47:01,298 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:01,302 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("dkntr").xor(false)
2021-03-11 11:47:01,303 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:47:01,303 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.Continuation[DeserializedSimpleFunctionDescriptor@7456b555]
2021-03-11 11:47:01,471 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:01,471 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:47:01,660 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:01,660 [main:105] - GENERATED CALL = (fu3({a: Throwable -> println("sdzvs")})).equals("yqmon").equals("huvto")
2021-03-11 11:47:01,660 [main:110] - replacement of false of type Boolean is (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")
2021-03-11 11:47:01,829 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:01,830 [main:66] - Compilation checking started
2021-03-11 11:47:02,592 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:02,595 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 11:47:02,595 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 11:47:02,595 [main:42] - Getting value of type String
2021-03-11 11:47:02,750 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:02,754 [main:46] - GENERATED VALUE OF TYPE String = "tgpvl"
2021-03-11 11:47:02,754 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:02,969 [main:55] - randomType = Kla12?
2021-03-11 11:47:03,124 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-11 11:47:03,128 [main:112] - generating klass Kla12 text = class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}
2021-03-11 11:47:03,133 [main:94] - GETTING String from String
2021-03-11 11:47:03,149 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@155ec2ca]]
2021-03-11 11:47:03,149 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@155ec2ca]
2021-03-11 11:47:03,150 [main:105] - GENERATED CALL = (ZImpl3().test()).trimEnd()
2021-03-11 11:47:03,150 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7876ffa7]]
2021-03-11 11:47:03,150 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:47:03,333 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:03,508 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:03,513 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7876ffa7]
2021-03-11 11:47:03,693 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:47:03,863 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:47:03,869 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String): Regex = TODO()
2021-03-11 11:47:04,252 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:47:04,256 [main:95] - GENERATED = Regex("sokct")
2021-03-11 11:47:04,440 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:04,444 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1609395758, 461153137).replaceFirst(Regex("sokct"), "wdkwe")
2021-03-11 11:47:04,445 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37591b16]]
2021-03-11 11:47:04,445 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37591b16]
2021-03-11 11:47:04,623 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:04,805 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:04,810 [main:105] - GENERATED CALL = (ZImpl3().test()).removeRange(316232252, 526897282)
2021-03-11 11:47:04,810 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:47:04,810 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@3983235]
2021-03-11 11:47:04,971 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:04,976 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:47:05,134 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:05,139 [main:105] - GENERATED CALL = (ZImpl3().test()).compareTo("yijey").toString(1980524046)
2021-03-11 11:47:05,139 [main:101] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]]
2021-03-11 11:47:05,139 [main:137] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5cc28208]
2021-03-11 11:47:05,321 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:47:05,499 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:47:05,505 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-11 11:47:06,026 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:47:06,031 [main:95] - GENERATED = StringBuilder("xxgxa")
2021-03-11 11:47:06,197 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:06,201 [main:105] - GENERATED CALL = (ZImpl3().test()).commonPrefixWith(StringBuilder("xxgxa"), false)
2021-03-11 11:47:06,201 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]]
2021-03-11 11:47:06,201 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]
2021-03-11 11:47:06,383 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:47:06,567 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:47:06,573 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-11 11:47:06,949 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:47:06,954 [main:95] - GENERATED = StringBuilder(480101971)
2021-03-11 11:47:06,954 [main:105] - GENERATED CALL = (ZImpl3().test()).removeSuffix(StringBuilder(480101971))
2021-03-11 11:47:06,954 [main:101] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]]
2021-03-11 11:47:06,954 [main:137] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@2e01a901]
2021-03-11 11:47:07,111 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:07,116 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:47:07,116 [main:105] - GENERATED CALL = (ZImpl3().test()).get(-701630773).lowercase()
2021-03-11 11:47:07,116 [main:101] - Case = [public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59bedc62]]
2021-03-11 11:47:07,116 [main:137] - GENERATING call of type public fun kotlin.String.substringAfterLast(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59bedc62]
2021-03-11 11:47:07,299 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:47:07,474 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:07,479 [main:105] - GENERATED CALL = (ZImpl3().test()).substringAfterLast('뼘', "bihqd")
2021-03-11 11:47:07,479 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]]
2021-03-11 11:47:07,479 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]
2021-03-11 11:47:07,479 [main:105] - GENERATED CALL = (ZImpl3().test()).trimIndent()
2021-03-11 11:47:07,479 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59176e9b]]
2021-03-11 11:47:07,479 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59176e9b]
2021-03-11 11:47:07,667 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:07,672 [main:105] - GENERATED CALL = (ZImpl3().test()).concat("bjhsr")
2021-03-11 11:47:07,672 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (ZImpl3().test()).compareTo("yijey").toString(1980524046)
2021-03-11 11:47:07,834 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:07,835 [main:66] - Compilation checking started
2021-03-11 11:47:08,292 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error((ZImpl3().test()).compareTo("yijey").toString(1980524046))
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = {
            Kla13().prope14 = true
        }
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:08,295 [main:103] - replacing ({
            Kla13().prope14 = true
        }, Function0<Unit>)
2021-03-11 11:47:08,295 [main:38] - replacing {
            Kla13().prope14 = true
        } Function0<Unit>
2021-03-11 11:47:08,295 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:47:08,449 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:47:08,454 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:47:08,643 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:47:08,649 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-11 11:47:09,240 [main:302] - generating value of type = Int true depth = 4
2021-03-11 11:47:09,245 [main:302] - generating value of type = Function1<Int, Unit> false depth = 4
2021-03-11 11:47:09,250 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:47:09,257 [main:95] - GENERATED = repeat(-333282860, {a: Int -> println()})
2021-03-11 11:47:09,257 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { repeat(-333282860, {a: Int -> println()})}
2021-03-11 11:47:09,258 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:09,653 [main:55] - randomType = UShort?
2021-03-11 11:47:09,824 [main:302] - generating value of type = UShort true depth = 0
2021-03-11 11:47:09,869 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:47:09,874 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:47:09,885 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:47:09,893 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:47:09,913 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:47:09,923 [main:110] - replacement of {
            Kla13().prope14 = true
        } of type Function0<Unit> is { repeat(-333282860, {a: Int -> println()})}
2021-03-11 11:47:10,101 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-11 11:47:10,102 [main:66] - Compilation checking started
2021-03-11 11:47:10,851 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error("Continuation " + c + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:10,854 [main:103] - replacing ("Continuation " + c, String)
2021-03-11 11:47:10,854 [main:38] - replacing "Continuation " + c String
2021-03-11 11:47:10,854 [main:42] - Getting value of type String
2021-03-11 11:47:11,009 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:11,013 [main:46] - GENERATED VALUE OF TYPE String = "ppchl"
2021-03-11 11:47:11,013 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:11,216 [main:55] - randomType = ZImpl2?
2021-03-11 11:47:11,403 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:47:11,407 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:47:11,424 [main:137] - GENERATING call of type public open fun test(p: kotlin.String): kotlin.String defined in ZImpl2[SimpleFunctionDescriptorImpl@49158183]
2021-03-11 11:47:11,595 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:11,600 [main:137] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@680eee50]
2021-03-11 11:47:11,780 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:11,785 [main:66] - Generated call from random type = (ZImpl2())?.test("ijakj").take(60993096)
2021-03-11 11:47:11,786 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:47:11,796 [main:94] - GETTING String from Any?
2021-03-11 11:47:11,800 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@36885534]]
2021-03-11 11:47:11,800 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@36885534]
2021-03-11 11:47:11,801 [main:105] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-11 11:47:11,801 [main:110] - replacement of "Continuation " + c of type String is (ZImpl2())?.test("ijakj").take(60993096)
2021-03-11 11:47:11,961 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:11,961 [main:66] - Compilation checking started
2021-03-11 11:47:12,652 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = {}
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:12,655 [main:103] - replacing ({}, Function0<Unit>)
2021-03-11 11:47:12,655 [main:38] - replacing {} Function0<Unit>
2021-03-11 11:47:12,655 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:47:12,811 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:47:12,816 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:47:13,010 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:47:13,017 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:47:13,407 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:47:13,413 [main:95] - GENERATED = require(true)
2021-03-11 11:47:13,413 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:47:13,413 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:13,614 [main:55] - randomType = Char?
2021-03-11 11:47:13,774 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:47:13,805 [main:94] - GETTING Function0<Unit> from Continuation<UByte>
2021-03-11 11:47:13,814 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:47:13,817 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:47:13,848 [main:94] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 11:47:13,862 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:47:13,869 [main:94] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 11:47:13,876 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:47:13,893 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:47:13,893 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:47:13,902 [main:110] - replacement of {} of type Function0<Unit> is Kla4().prope7
2021-03-11 11:47:14,085 [main:33] - Trying to replace LAMBDA_EXPRESSION on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:14,086 [main:66] - Compilation checking started
2021-03-11 11:47:14,885 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:14,888 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:47:14,888 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:47:14,888 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:47:15,044 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:47:15,051 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:47:15,069 [main:55] - randomType = Kla12
2021-03-11 11:47:15,225 [main:302] - generating value of type = Kla12 false depth = 0
2021-03-11 11:47:15,229 [main:112] - generating klass Kla12 text = class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}
2021-03-11 11:47:15,235 [main:94] - GETTING EmptyCoroutineContext from Any?
2021-03-11 11:47:15,238 [main:94] - GETTING EmptyCoroutineContext from Continuation<Any?>
2021-03-11 11:47:15,245 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:47:15,251 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:47:15,252 [main:94] - GETTING EmptyCoroutineContext from Continuation<UByte>
2021-03-11 11:47:15,259 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:47:15,260 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:47:15,269 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:47:15,286 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 11:47:15,317 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:47:15,317 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:47:15,330 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-11 11:47:15,487 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:15,487 [main:66] - Compilation checking started
2021-03-11 11:47:16,227 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:16,230 [main:103] - replacing (fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 }, Kla7<*>)
2021-03-11 11:47:16,230 [main:38] - replacing fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } Kla7<*>
2021-03-11 11:47:16,230 [main:42] - Getting value of type Kla7<*>
2021-03-11 11:47:16,387 [main:302] - generating value of type = Kla7<*> false depth = 0
2021-03-11 11:47:16,391 [main:112] - generating klass Kla7 text = interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}
2021-03-11 11:47:17,330 [main:46] - GENERATED VALUE OF TYPE Kla7<*> = TODO()
2021-03-11 11:47:17,330 [main:49] - GENERATED IS CALL =true
2021-03-11 11:47:17,340 [main:55] - randomType = Double
2021-03-11 11:47:17,513 [main:302] - generating value of type = Double true depth = 0
2021-03-11 11:47:17,555 [main:94] - GETTING Kla7<*> from CoroutineContext
2021-03-11 11:47:17,561 [main:94] - GETTING Kla7<*> from CoroutineContext
2021-03-11 11:47:17,562 [main:94] - GETTING Kla7<*> from String
2021-03-11 11:47:17,585 [main:94] - GETTING Kla7<*> from Function0<Unit>
2021-03-11 11:47:17,596 [main:94] - GETTING Kla7<*> from Int
2021-03-11 11:47:17,634 [main:94] - GETTING Kla7<*> from Int
2021-03-11 11:47:17,635 [main:94] - GETTING Kla7<*> from EmptyCoroutineContext
2021-03-11 11:47:17,653 [main:94] - GETTING Kla7<*> from ZImpl3
2021-03-11 11:47:17,685 [main:94] - GETTING Kla7<*> from Continuation<Any?>
2021-03-11 11:47:17,697 [main:94] - GETTING Kla7<*> from Boolean
2021-03-11 11:47:17,709 [main:94] - GETTING Kla7<*> from String
2021-03-11 11:47:17,710 [main:94] - GETTING Kla7<*> from Continuation<UByte>
2021-03-11 11:47:17,720 [main:94] - GETTING Kla7<*> from Any?
2021-03-11 11:47:17,726 [main:94] - GETTING Kla7<*> from CoroutineContext
2021-03-11 11:47:17,726 [main:110] - replacement of fu13 { (ArrayDeque<ZImpl3?>(938175123)).toArray().get(-30846505) is Ty2 } of type Kla7<*> is TODO()
2021-03-11 11:47:17,893 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:47:17,894 [main:66] - Compilation checking started
2021-03-11 11:47:18,573 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:18,575 [main:103] - replacing (c, SuspendFunction0<Unit>)
2021-03-11 11:47:18,575 [main:38] - replacing c SuspendFunction0<Unit>
2021-03-11 11:47:18,575 [main:42] - Getting value of type SuspendFunction0<Unit>
2021-03-11 11:47:18,736 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-11 11:47:18,741 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:47:18,749 [main:46] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-11 11:47:18,749 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:18,767 [main:55] - randomType = ZImpl2
2021-03-11 11:47:18,928 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:47:18,932 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:47:18,953 [main:94] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 11:47:18,961 [main:94] - GETTING SuspendFunction0<Unit> from Function0<Unit>
2021-03-11 11:47:18,970 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 11:47:19,002 [main:94] - GETTING SuspendFunction0<Unit> from Continuation<UByte>
2021-03-11 11:47:19,009 [main:94] - GETTING SuspendFunction0<Unit> from Boolean
2021-03-11 11:47:19,018 [main:94] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 11:47:19,019 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 11:47:19,036 [main:94] - GETTING SuspendFunction0<Unit> from CoroutineContext
2021-03-11 11:47:19,037 [main:94] - GETTING SuspendFunction0<Unit> from Int
2021-03-11 11:47:19,038 [main:94] - GETTING SuspendFunction0<Unit> from ZImpl3
2021-03-11 11:47:19,055 [main:94] - GETTING SuspendFunction0<Unit> from Continuation<Any?>
2021-03-11 11:47:19,062 [main:94] - GETTING SuspendFunction0<Unit> from EmptyCoroutineContext
2021-03-11 11:47:19,076 [main:94] - GETTING SuspendFunction0<Unit> from Any?
2021-03-11 11:47:19,080 [main:94] - GETTING SuspendFunction0<Unit> from String
2021-03-11 11:47:19,081 [main:110] - replacement of c of type SuspendFunction0<Unit> is { println()}
2021-03-11 11:47:19,265 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:47:19,266 [main:66] - Compilation checking started
2021-03-11 11:47:19,796 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
{ println()}.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:19,798 [main:103] - replacing (prope11.(5625.toUShort()).toDouble().isFinite(), Boolean)
2021-03-11 11:47:19,798 [main:38] - replacing prope11.(5625.toUShort()).toDouble().isFinite() Boolean
2021-03-11 11:47:19,798 [main:42] - Getting value of type Boolean
2021-03-11 11:47:19,965 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:19,969 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:47:19,969 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:20,340 [main:55] - randomType = Array<Long>
2021-03-11 11:47:20,495 [main:302] - generating value of type = Array<Long> false depth = 0
2021-03-11 11:47:20,703 [main:43] - GENERATING CALL OF fun <T> emptyArray(): Array<Long> = TODO()
2021-03-11 11:47:20,709 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyArray(): Array<Long> = TODO()
2021-03-11 11:47:20,889 [main:95] - GENERATED = emptyArray<Long>()
2021-03-11 11:47:20,904 [main:137] - GENERATING call of type @kotlin.Deprecated @kotlin.SinceKotlin @kotlin.DeprecatedSinceKotlin public infix fun <T> kotlin.Array<out T>.contentEquals(other: kotlin.Array<out T>): kotlin.Boolean defined in kotlin.collections[DeserializedSimpleFunctionDescriptor@70d524d6]
2021-03-11 11:47:21,082 [main:302] - generating value of type = Array<out T> false depth = 0
2021-03-11 11:47:21,251 [main:43] - GENERATING CALL OF fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 11:47:21,256 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOfNulls(size: kotlin.Int): Array<T> = TODO()
2021-03-11 11:47:21,649 [main:302] - generating value of type = Int true depth = 3
2021-03-11 11:47:21,654 [main:95] - GENERATED = arrayOfNulls<T>(122987912)
2021-03-11 11:47:21,654 [main:66] - Generated call from random type = (emptyArray<Long>()).contentEquals(arrayOfNulls<T>(122987912))
2021-03-11 11:47:21,655 [main:94] - GETTING Boolean from Function0<Unit>
2021-03-11 11:47:21,666 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:47:21,667 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:47:21,846 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:21,846 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:47:21,846 [main:105] - GENERATED CALL = (Kla4().prope7).equals("pugtj").not()
2021-03-11 11:47:21,846 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:47:21,846 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:47:22,025 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:47:22,188 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:22,193 [main:105] - GENERATED CALL = (Kla4().prope7).equals(null).and(true)
2021-03-11 11:47:22,193 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:47:22,193 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:47:22,354 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:22,354 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:47:22,535 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:22,535 [main:105] - GENERATED CALL = (Kla4().prope7).equals("vnbst").equals("peqdf")
2021-03-11 11:47:22,535 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:47:22,536 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:47:22,706 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:22,706 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:47:22,883 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:22,898 [main:105] - GENERATED CALL = (Kla4().prope7).equals("vqpvq").or(false)
2021-03-11 11:47:22,898 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]]
2021-03-11 11:47:22,898 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:47:23,058 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:23,058 [main:105] - GENERATED CALL = (Kla4().prope7).equals("qmofc")
2021-03-11 11:47:23,058 [main:101] - Case = [public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@26437b15], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]]
2021-03-11 11:47:23,059 [main:137] - GENERATING call of type public abstract operator fun invoke(): kotlin.Unit defined in kotlin.Function0[FunctionInvokeDescriptor@26437b15]
2021-03-11 11:47:23,059 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@42bc1a72]
2021-03-11 11:47:23,221 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:23,221 [main:105] - GENERATED CALL = (Kla4().prope7).invoke().equals("voiwc")
2021-03-11 11:47:23,221 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:47:23,221 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Function0[DeserializedSimpleFunctionDescriptor@357f3a10]
2021-03-11 11:47:23,411 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:23,411 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:47:23,584 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:23,589 [main:105] - GENERATED CALL = (Kla4().prope7).equals("uhpey").xor(false)
2021-03-11 11:47:23,589 [main:110] - replacement of prope11.(5625.toUShort()).toDouble().isFinite() of type Boolean is (Kla4().prope7).equals("vqpvq").or(false)
2021-03-11 11:47:23,772 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:23,776 [main:103] - replacing ("fail", String)
2021-03-11 11:47:23,776 [main:38] - replacing "fail" String
2021-03-11 11:47:23,776 [main:42] - Getting value of type String
2021-03-11 11:47:23,947 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:23,952 [main:46] - GENERATED VALUE OF TYPE String = "htrmw"
2021-03-11 11:47:23,952 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:24,601 [main:55] - randomType = ArrayDeque<HashMap<String, Int>>?
2021-03-11 11:47:24,780 [main:302] - generating value of type = ArrayDeque<HashMap<String, Int>> false depth = 0
2021-03-11 11:47:24,955 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<HashMap<String, Int>>): ArrayDeque<HashMap<String, Int>> = TODO()
2021-03-11 11:47:24,961 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<HashMap<String, Int>>): ArrayDeque<HashMap<String, Int>> = TODO()
2021-03-11 11:47:25,367 [main:302] - generating value of type = Collection<HashMap<String, Int>> false depth = 3
2021-03-11 11:47:25,570 [main:43] - GENERATING CALL OF fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->HashMap<String, Int>): Collection<HashMap<Strg, Int>> = TODO()
2021-03-11 11:47:25,576 [main:61] - WITHOUT TYPE PARAMS = fun <T> List(size: kotlin.Int, init: (index: kotlin.Int)->HashMap<String, Int>): Collection<HashMap<Strg, Int>> = TODO()
2021-03-11 11:47:26,162 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:47:26,167 [main:302] - generating value of type = Function1<[@kotlin.ParameterName] Int, HashMap<String, Int>> false depth = 6
2021-03-11 11:47:26,171 [main:302] - generating value of type = HashMap<String, Int> false depth = 7
2021-03-11 11:47:26,377 [main:43] - GENERATING CALL OF fun <V> linkedStringMapOf(pairs: Pair<String, Int>): HashMap<Strg, Int> = TODO()
2021-03-11 11:47:26,383 [main:61] - WITHOUT TYPE PARAMS = fun <V> linkedStringMapOf(pairs: Pair<String, Int>): HashMap<Strg, Int> = TODO()
2021-03-11 11:47:26,563 [main:302] - generating value of type = Pair<String, Int> false depth = 10
2021-03-11 11:47:26,750 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: String, second: Int): Pair<String, Int> = TODO()
2021-03-11 11:47:26,756 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: String, second: Int): Pair<String, Int> = TODO()
2021-03-11 11:47:26,932 [main:302] - generating value of type = String true depth = 13
2021-03-11 11:47:26,937 [main:302] - generating value of type = Int true depth = 13
2021-03-11 11:47:26,941 [main:95] - GENERATED = Pair<String, Int>("qzeiv", -582688854)
2021-03-11 11:47:26,941 [main:95] - GENERATED = linkedStringMapOf<Int>(Pair<String, Int>("qzeiv", -582688854))
2021-03-11 11:47:26,942 [main:95] - GENERATED = List<HashMap<String, Int>>(-1888098741, {a: Int -> linkedStringMapOf<Int>(Pair<String, Int>("qzeiv", -582688854))})
2021-03-11 11:47:26,942 [main:95] - GENERATED = ArrayDeque<HashMap<String, Int>>(List<HashMap<String, Int>>(-1888098741, {a: Int -> linkedStringMapOf<Int>(Pair<String, Int>("qzeiv", -582688854))}))
2021-03-11 11:47:27,142 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:47:27,296 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:27,301 [main:66] - Generated call from random type = (ArrayDeque<HashMap<String, Int>>(List<HashMap<String, Int>>(-1888098741, {a: Int -> linkedStringMapOf<Int>(Pair<String, Int>("qzeiv", -582688854))})))?.modCount.toString(-419893495)
2021-03-11 11:47:27,302 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:47:27,310 [main:94] - GETTING String from Continuation<UByte>
2021-03-11 11:47:27,317 [main:94] - GETTING String from Continuation<Any?>
2021-03-11 11:47:27,323 [main:94] - GETTING String from Any?
2021-03-11 11:47:27,326 [main:101] - Case = [public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@36885534]]
2021-03-11 11:47:27,326 [main:137] - GENERATING call of type public fun kotlin.Any?.toString(): kotlin.String defined in kotlin[DeserializedSimpleFunctionDescriptor@36885534]
2021-03-11 11:47:27,327 [main:105] - GENERATED CALL = (Kla1().prope3).toString()
2021-03-11 11:47:27,327 [main:110] - replacement of "fail" of type String is (ArrayDeque<HashMap<String, Int>>(List<HashMap<String, Int>>(-1888098741, {a: Int -> linkedStringMapOf<Int>(Pair<String, Int>("qzeiv", -582688854))})))?.modCount.toString(-419893495)
2021-03-11 11:47:27,507 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:27,508 [main:66] - Compilation checking started
2021-03-11 11:47:28,060 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = (ArrayDeque<HashMap<String, Int>>(List<HashMap<String, Int>>(-1888098741, {a: Int -> linkedStringMapOf<Int>(Pair<String, Int>("qzeiv", -582688854))})))?.modCount.toString(-419893495)
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:28,064 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:47:28,064 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:47:28,064 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:47:28,244 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:47:28,251 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:47:28,877 [main:55] - randomType = LinkedHashSet<Collection<Kla10>>?
2021-03-11 11:47:29,050 [main:302] - generating value of type = LinkedHashSet<Collection<Kla10>> false depth = 0
2021-03-11 11:47:29,238 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Collection<Kla10>> = TODO()
2021-03-11 11:47:29,245 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Collection<Kla10>> = TODO()
2021-03-11 11:47:29,420 [main:95] - GENERATED = linkedSetOf<Collection<Kla10>>()
2021-03-11 11:47:29,601 [main:94] - GETTING EmptyCoroutineContext from Boolean
2021-03-11 11:47:29,609 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:47:29,615 [main:94] - GETTING EmptyCoroutineContext from Continuation<UByte>
2021-03-11 11:47:29,621 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:47:29,635 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-11 11:47:29,788 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:29,789 [main:66] - Compilation checking started
2021-03-11 11:47:30,476 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x)
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:30,479 [main:103] - replacing (UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x), Unit?)
2021-03-11 11:47:30,479 [main:38] - replacing UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x) Unit?
2021-03-11 11:47:30,479 [main:42] - Getting value of type Unit?
2021-03-11 11:47:30,665 [main:302] - generating value of type = Unit false depth = 0
2021-03-11 11:47:30,846 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:47:30,853 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:47:31,260 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 3
2021-03-11 11:47:31,264 [main:302] - generating value of type = Unit false depth = 4
2021-03-11 11:47:31,440 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:47:31,446 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:47:31,853 [main:302] - generating value of type = Boolean true depth = 7
2021-03-11 11:47:31,858 [main:95] - GENERATED = check(false)
2021-03-11 11:47:31,858 [main:95] - GENERATED = contract({ check(false)})
2021-03-11 11:47:31,858 [main:46] - GENERATED VALUE OF TYPE Unit? = contract({ check(false)})
2021-03-11 11:47:31,858 [main:49] - GENERATED IS CALL =true
2021-03-11 11:47:31,877 [main:55] - randomType = Kla9
2021-03-11 11:47:32,064 [main:302] - generating value of type = Kla9 false depth = 0
2021-03-11 11:47:32,069 [main:112] - generating klass Kla9 text = open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}
2021-03-11 11:47:32,238 [main:194] - Type params = []
2021-03-11 11:47:32,395 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:47:32,595 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:47:32,601 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:47:33,002 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:47:33,176 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:47:33,182 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:47:33,807 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 11:47:34,005 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:47:34,011 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:47:34,623 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:47:34,820 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:47:34,829 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:47:35,414 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:47:35,414 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:47:35,414 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:47:35,414 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:47:35,426 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun <T> kotlin.coroutines.Continuation<T>.resumeWithException(exception: kotlin.Throwable): kotlin.Unit defined in kotlin.coroutines[DeserializedSimpleFunctionDescriptor@75293ab6]
2021-03-11 11:47:35,620 [main:302] - generating value of type = Throwable false depth = 0
2021-03-11 11:47:35,802 [main:43] - GENERATING CALL OF fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:47:35,808 [main:61] - WITHOUT TYPE PARAMS = fun IllegalStateException(message: kotlin.String?): Throwable = TODO()
2021-03-11 11:47:36,185 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:47:36,190 [main:95] - GENERATED = IllegalStateException("zywdl")
2021-03-11 11:47:36,190 [main:66] - Generated call from random type = (Kla9()).resumeWithException(IllegalStateException("zywdl"))
2021-03-11 11:47:36,190 [main:110] - replacement of UninitializedPropertyAccessException("onpwq", UnsupportedOperationException())?.let(x) of type Unit? is (Kla9()).resumeWithException(IllegalStateException("zywdl"))
2021-03-11 11:47:36,348 [main:33] - Trying to replace Element(SAFE_ACCESS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:36,348 [main:66] - Compilation checking started
2021-03-11 11:47:37,038 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:37,041 [main:103] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true), String)
2021-03-11 11:47:37,041 [main:38] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) String
2021-03-11 11:47:37,041 [main:42] - Getting value of type String
2021-03-11 11:47:37,216 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:37,221 [main:46] - GENERATED VALUE OF TYPE String = "wovze"
2021-03-11 11:47:37,221 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:37,427 [main:55] - randomType = Short?
2021-03-11 11:47:37,604 [main:302] - generating value of type = Short true depth = 0
2021-03-11 11:47:37,661 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:47:37,661 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:47:37,822 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:37,827 [main:66] - Generated call from random type = (19317)?.toInt().toString(-930652181)
2021-03-11 11:47:37,828 [main:94] - GETTING String from Int
2021-03-11 11:47:37,877 [main:101] - Case = [public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]]
2021-03-11 11:47:37,877 [main:137] - GENERATING call of type public open fun toShort(): kotlin.Short defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5ccffc02]
2021-03-11 11:47:37,877 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3b223c50]
2021-03-11 11:47:38,055 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:38,060 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toShort().toString(1847564219)
2021-03-11 11:47:38,060 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:47:38,060 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:47:38,231 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:38,236 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:47:38,404 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:38,409 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(888966958).toString(1588453811)
2021-03-11 11:47:38,409 [main:101] - Case = [@kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:47:38,409 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:47:38,587 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:38,592 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toString(-590830846)
2021-03-11 11:47:38,592 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]]
2021-03-11 11:47:38,592 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:47:38,592 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@300d71c1]
2021-03-11 11:47:38,592 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().uppercase()
2021-03-11 11:47:38,592 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]]
2021-03-11 11:47:38,592 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f]
2021-03-11 11:47:38,755 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:47:38,760 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:47:38,937 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:38,942 [main:105] - GENERATED CALL = ((477215846)?.toInt()).div(2320932136426896395).toString(882960667)
2021-03-11 11:47:38,942 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:47:38,942 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:47:38,942 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:47:39,113 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:39,118 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toInt().toString(-1797694981)
2021-03-11 11:47:39,118 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]]
2021-03-11 11:47:39,118 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:47:39,118 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@77924099]
2021-03-11 11:47:39,118 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().titlecase()
2021-03-11 11:47:39,118 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]]
2021-03-11 11:47:39,118 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:47:39,118 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@44815a6c]
2021-03-11 11:47:39,287 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:39,292 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().toString(-1969908193)
2021-03-11 11:47:39,292 [main:101] - Case = [public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7476a4b5], @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]]
2021-03-11 11:47:39,292 [main:137] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@7476a4b5]
2021-03-11 11:47:39,292 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6dc90c76]
2021-03-11 11:47:39,463 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:39,468 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toLong().toString(-396290562)
2021-03-11 11:47:39,468 [main:101] - Case = [public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]]
2021-03-11 11:47:39,468 [main:137] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2b999312]
2021-03-11 11:47:39,468 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5499854e]
2021-03-11 11:47:39,468 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toChar().lowercase()
2021-03-11 11:47:39,468 [main:110] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + (Kla3()).equals("qtgam").compareTo(true) of type String is ((477215846)?.toInt()).toInt().toString(-1797694981)
2021-03-11 11:47:39,644 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:39,645 [main:66] - Compilation checking started
2021-03-11 11:47:40,319 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + prope13)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:40,323 [main:103] - replacing (prope13, Int)
2021-03-11 11:47:40,324 [main:38] - replacing prope13 Int
2021-03-11 11:47:40,324 [main:42] - Getting value of type Int
2021-03-11 11:47:40,542 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:40,547 [main:46] - GENERATED VALUE OF TYPE Int = -1585286372
2021-03-11 11:47:40,547 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:41,157 [main:55] - randomType = Sequence<Long>
2021-03-11 11:47:41,157 [main:94] - GETTING Int from Int
2021-03-11 11:47:41,205 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]]
2021-03-11 11:47:41,205 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:47:41,384 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:41,389 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Int.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@3b5110ff]
2021-03-11 11:47:41,389 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(1339700852).countOneBits()
2021-03-11 11:47:41,389 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3294d83e]]
2021-03-11 11:47:41,390 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:47:41,390 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@3294d83e]
2021-03-11 11:47:41,578 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:47:41,583 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().compareTo(-92)
2021-03-11 11:47:41,583 [main:101] - Case = [public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ccd6c09]]
2021-03-11 11:47:41,583 [main:137] - GENERATING call of type public final fun inv(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4ccd6c09]
2021-03-11 11:47:41,583 [main:105] - GENERATED CALL = ((477215846)?.toInt()).inv()
2021-03-11 11:47:41,584 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f], @kotlin.SinceKotlin public val kotlin.Long.sign: kotlin.Int defined in kotlin.math[DeserializedPropertyDescriptor@4781bf1a]]
2021-03-11 11:47:41,584 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f]
2021-03-11 11:47:41,754 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:47:41,759 [main:105] - GENERATED CALL = ((477215846)?.toInt()).div(-466790725633949758).sign
2021-03-11 11:47:41,759 [main:101] - Case = [public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0], public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]]
2021-03-11 11:47:41,759 [main:137] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.Int): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@7c6fc4d0]
2021-03-11 11:47:41,938 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:41,943 [main:137] - GENERATING call of type public final operator fun unaryPlus(): kotlin.Int defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1257c828]
2021-03-11 11:47:41,943 [main:105] - GENERATED CALL = ((477215846)?.toInt()).compareTo(-2068123019).unaryPlus()
2021-03-11 11:47:41,943 [main:101] - Case = [public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d28a5e3], @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2a19df5a]]
2021-03-11 11:47:41,943 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Float): kotlin.Float defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@d28a5e3]
2021-03-11 11:47:42,107 [main:302] - generating value of type = Float true depth = 0
2021-03-11 11:47:42,111 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.js.library public fun kotlin.Float.toRawBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@2a19df5a]
2021-03-11 11:47:42,111 [main:105] - GENERATED CALL = ((477215846)?.toInt()).div(0.48985904f).toRawBits()
2021-03-11 11:47:42,112 [main:101] - Case = [public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f], @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4bc261a7]]
2021-03-11 11:47:42,112 [main:137] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@5738a95f]
2021-03-11 11:47:42,293 [main:302] - generating value of type = Long true depth = 0
2021-03-11 11:47:42,298 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.WasExperimental public fun kotlin.Long.countOneBits(): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@4bc261a7]
2021-03-11 11:47:42,298 [main:105] - GENERATED CALL = ((477215846)?.toInt()).div(-710951851250814039).countOneBits()
2021-03-11 11:47:42,298 [main:101] - Case = [public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319], public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@10c68c12]]
2021-03-11 11:47:42,298 [main:137] - GENERATING call of type public open fun toByte(): kotlin.Byte defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@7c0c3319]
2021-03-11 11:47:42,298 [main:137] - GENERATING call of type public final operator fun times(other: kotlin.Byte): kotlin.Int defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@10c68c12]
2021-03-11 11:47:42,467 [main:302] - generating value of type = Byte true depth = 0
2021-03-11 11:47:42,472 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toByte().times(14)
2021-03-11 11:47:42,472 [main:101] - Case = [public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@497d0f58]]
2021-03-11 11:47:42,472 [main:137] - GENERATING call of type public fun kotlin.Int.coerceAtLeast(minimumValue: kotlin.Int): kotlin.Int defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@497d0f58]
2021-03-11 11:47:42,643 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:42,648 [main:105] - GENERATED CALL = ((477215846)?.toInt()).coerceAtLeast(-1345283179)
2021-03-11 11:47:42,658 [main:101] - Case = [public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@720aa646]]
2021-03-11 11:47:42,658 [main:137] - GENERATING call of type public abstract fun toInt(): kotlin.Int defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@2f5ebba]
2021-03-11 11:47:42,659 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Int.rotateLeft(bitCount: kotlin.Int): kotlin.Int defined in kotlin[DeserializedSimpleFunctionDescriptor@720aa646]
2021-03-11 11:47:42,826 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:42,831 [main:105] - GENERATED CALL = ((477215846)?.toInt()).toInt().rotateLeft(-1289227926)
2021-03-11 11:47:42,831 [main:110] - replacement of prope13 of type Int is -1585286372
2021-03-11 11:47:42,992 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(PREFIX_EXPRESSION)
2021-03-11 11:47:42,993 [main:66] - Compilation checking started
2021-03-11 11:47:43,705 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:43,709 [main:103] - replacing (prope15, Function0<Unit>)
2021-03-11 11:47:43,709 [main:38] - replacing prope15 Function0<Unit>
2021-03-11 11:47:43,709 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:47:43,892 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:47:43,897 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:47:44,073 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:47:44,079 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:47:44,483 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:47:44,484 [main:95] - GENERATED = print("blxqz")
2021-03-11 11:47:44,484 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { print("blxqz")}
2021-03-11 11:47:44,484 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:44,503 [main:55] - randomType = ZImpl2
2021-03-11 11:47:44,658 [main:302] - generating value of type = ZImpl2 false depth = 0
2021-03-11 11:47:44,662 [main:112] - generating klass ZImpl2 text = open class ZImpl2 : Z<String>, ZImpl()
2021-03-11 11:47:44,681 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:47:44,712 [main:94] - GETTING Function0<Unit> from Continuation<UByte>
2021-03-11 11:47:44,719 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:47:44,725 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:47:44,728 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:47:44,738 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:47:44,755 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:47:44,756 [main:94] - GETTING Function0<Unit> from ZImpl3
2021-03-11 11:47:44,772 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:47:44,773 [main:94] - GETTING Function0<Unit> from Continuation<Any?>
2021-03-11 11:47:44,781 [main:94] - GETTING Function0<Unit> from EmptyCoroutineContext
2021-03-11 11:47:44,795 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:47:44,795 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:47:44,803 [main:110] - replacement of prope15 of type Function0<Unit> is { print("blxqz")}
2021-03-11 11:47:44,984 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:47:44,985 [main:66] - Compilation checking started
2021-03-11 11:47:45,513 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            { print("blxqz")}()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:45,517 [main:103] - replacing ("Wrong state-machine generated: it is finished early", String)
2021-03-11 11:47:45,517 [main:38] - replacing "Wrong state-machine generated: it is finished early" String
2021-03-11 11:47:45,517 [main:42] - Getting value of type String
2021-03-11 11:47:45,709 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:45,714 [main:46] - GENERATED VALUE OF TYPE String = "ivkrx"
2021-03-11 11:47:45,714 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:46,506 [main:55] - randomType = Function1<ULong, Kla14?>
2021-03-11 11:47:46,507 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:47:46,518 [main:94] - GETTING String from EmptyCoroutineContext
2021-03-11 11:47:46,537 [main:94] - GETTING String from CoroutineContext
2021-03-11 11:47:46,537 [main:94] - GETTING String from String
2021-03-11 11:47:46,560 [main:101] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]]
2021-03-11 11:47:46,560 [main:137] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@689ef31d]
2021-03-11 11:47:46,742 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:46,747 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceIndent("cwbhp")
2021-03-11 11:47:46,747 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7876ffa7]]
2021-03-11 11:47:46,747 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:47:46,912 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:47,074 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:47,079 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7876ffa7]
2021-03-11 11:47:47,263 [main:302] - generating value of type = Regex false depth = 0
2021-03-11 11:47:47,440 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:47:47,446 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-11 11:47:48,041 [main:302] - generating value of type = String true depth = 3
2021-03-11 11:47:48,045 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-11 11:47:48,242 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 11:47:48,248 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Set<RegexOption> = TODO()
2021-03-11 11:47:48,637 [main:302] - generating value of type = Int true depth = 6
2021-03-11 11:47:48,642 [main:95] - GENERATED = HashSet<RegexOption>(-1241527778)
2021-03-11 11:47:48,642 [main:95] - GENERATED = Regex("fsavm", HashSet<RegexOption>(-1241527778))
2021-03-11 11:47:48,810 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:48,815 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(-1690137670, -1325023676).replaceFirst(Regex("fsavm", HashSet<RegexOption>(-1241527778)), "mmyuj")
2021-03-11 11:47:48,815 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59176e9b]]
2021-03-11 11:47:48,815 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@59176e9b]
2021-03-11 11:47:48,977 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:47:48,982 [main:105] - GENERATED CALL = (ZImpl3().test()).concat("pjnfa")
2021-03-11 11:47:48,982 [main:101] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cb6fedd]]
2021-03-11 11:47:48,982 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7cb6fedd]
2021-03-11 11:47:49,165 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:49,341 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:49,519 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:47:49,527 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceRange(1745616364, 62861881, "mxhxk")
2021-03-11 11:47:49,527 [main:101] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ae62e]]
2021-03-11 11:47:49,527 [main:137] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@396ae62e]
2021-03-11 11:47:49,705 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:47:49,875 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:47:50,064 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:50,070 [main:105] - GENERATED CALL = (ZImpl3().test()).replaceFirst('瞏', 'ﰃ', false)
2021-03-11 11:47:50,070 [main:101] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]]
2021-03-11 11:47:50,070 [main:137] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@be98ce4]
2021-03-11 11:47:50,240 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-11 11:47:50,248 [main:105] - GENERATED CALL = (ZImpl3().test()).removeSuffix("uxyrc")
2021-03-11 11:47:50,248 [main:101] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]]
2021-03-11 11:47:50,248 [main:137] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@aa9305b]
2021-03-11 11:47:50,417 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-11 11:47:50,432 [main:302] - generating value of type = Boolean true depth = 1
2021-03-11 11:47:50,437 [main:105] - GENERATED CALL = (ZImpl3().test()).takeLastWhile({a: Char -> true})
2021-03-11 11:47:50,437 [main:101] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]]
2021-03-11 11:47:50,437 [main:137] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c51532d]
2021-03-11 11:47:50,437 [main:105] - GENERATED CALL = (ZImpl3().test()).trimIndent()
2021-03-11 11:47:50,437 [main:101] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]]
2021-03-11 11:47:50,437 [main:137] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@204f4880]
2021-03-11 11:47:50,603 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:50,775 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:50,779 [main:137] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@20cd6157]
2021-03-11 11:47:50,964 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:51,140 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:47:51,144 [main:105] - GENERATED CALL = (ZImpl3().test()).subSequence(428588540, -977969394).substring(1786728351, -774590884)
2021-03-11 11:47:51,145 [main:101] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]]
2021-03-11 11:47:51,145 [main:137] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@369661c0]
2021-03-11 11:47:51,145 [main:105] - GENERATED CALL = (ZImpl3().test()).capitalize()
2021-03-11 11:47:51,145 [main:110] - replacement of "Wrong state-machine generated: it is finished early" of type String is (ZImpl3().test()).subSequence(-1690137670, -1325023676).replaceFirst(Regex("fsavm", HashSet<RegexOption>(-1241527778)), "mmyuj")
2021-03-11 11:47:51,314 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:47:51,315 [main:66] - Compilation checking started
2021-03-11 11:47:51,808 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error((ZImpl3().test()).subSequence(-1690137670, -1325023676).replaceFirst(Regex("fsavm", HashSet<RegexOption>(-1241527778)), "mmyuj"))
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:47:51,810 [main:103] - replacing (c !is CoroutineStackFrame, Boolean)
2021-03-11 11:47:51,810 [main:38] - replacing c !is CoroutineStackFrame Boolean
2021-03-11 11:47:51,810 [main:42] - Getting value of type Boolean
2021-03-11 11:47:51,969 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:51,973 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:47:51,974 [main:49] - GENERATED IS CALL =false
2021-03-11 11:47:52,204 [main:55] - randomType = Collection<UByte>
2021-03-11 11:47:52,205 [main:94] - GETTING Boolean from CoroutineContext
2021-03-11 11:47:52,213 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]]
2021-03-11 11:47:52,213 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:47:52,396 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:52,396 [main:137] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@1b17b5cb]
2021-03-11 11:47:52,564 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:47:52,579 [main:105] - GENERATED CALL = (Kla5.context).equals("mxfui").xor(false)
2021-03-11 11:47:52,579 [main:101] - Case = [public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@461a4f09], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext.Element[DeserializedSimpleFunctionDescriptor@2f423cb4]]
2021-03-11 11:47:52,579 [main:137] - GENERATING call of type public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@461a4f09]
2021-03-11 11:47:52,739 [main:302] - generating value of type = Key<E> false depth = 0
2021-03-11 11:47:52,912 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:47:52,917 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:47:53,542 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 3
2021-03-11 11:47:53,718 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:47:53,723 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:47:54,337 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:47:54,337 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->E): Key<E> = TODO()
2021-03-11 11:47:54,337 [main:144] - CANT GENERATE PARAMS FOR public abstract operator fun <E : kotlin.coroutines.CoroutineContext.Element> get(key: kotlin.coroutines.CoroutineContext.Key<E>): E? defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@461a4f09]
2021-03-11 11:47:54,337 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]]
2021-03-11 11:47:54,337 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:47:54,516 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:54,516 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@378397cf]
2021-03-11 11:47:54,678 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:54,678 [main:105] - GENERATED CALL = (Kla5.context).equals("yqbrt").equals("zcdal")
2021-03-11 11:47:54,678 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]]
2021-03-11 11:47:54,678 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:47:54,847 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:47:54,847 [main:137] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@562ab451]
2021-03-11 11:47:54,847 [main:105] - GENERATED CALL = (Kla5.context).equals("qmqhn").not()
2021-03-11 11:47:54,847 [main:101] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f], @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e44a73a]]
2021-03-11 11:47:54,847 [main:137] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f]
2021-03-11 11:47:55,028 [main:302] - generating value of type = R false depth = 0
2021-03-11 11:47:56,432 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: UInt?, block: T.()->HashMap<UShort, Byte>): R = TODO()
2021-03-11 11:47:56,439 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: UInt?, block: T.()->HashMap<UShort, Byte>): R = TODO()
2021-03-11 11:47:56,816 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, HashMap<UShort, Byte>> false depth = 3
2021-03-11 11:47:56,820 [main:302] - generating value of type = HashMap<UShort, Byte> false depth = 4
2021-03-11 11:47:57,021 [main:43] - GENERATING CALL OF fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<UShort, Byte> = TODO()
2021-03-11 11:47:57,027 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> HashMap(initialCapacity: kotlin.Int, loadFactor: kotlin.Float): HashMap<UShort, Byte> = TODO()
2021-03-11 11:47:57,607 [main:302] - generating value of type = Int true depth = 7
2021-03-11 11:47:57,611 [main:302] - generating value of type = Float true depth = 7
2021-03-11 11:47:57,616 [main:95] - GENERATED = HashMap<UShort, Byte>(1660737072, 0.5231944f)
2021-03-11 11:47:57,616 [main:95] - GENERATED = with<UInt?, HashMap<UShort, Byte>>(null, { HashMap<UShort, Byte>(1660737072, 0.5231944f)})
2021-03-11 11:47:57,777 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 11:47:57,781 [main:302] - generating value of type = R false depth = 1
2021-03-11 11:47:58,188 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Array<UByte>): R = TODO()
2021-03-11 11:47:58,194 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Array<UByte>): R = TODO()
2021-03-11 11:47:58,767 [main:302] - generating value of type = Any false depth = 4
2021-03-11 11:47:58,767 [main:302] - generating value of type = Function0<Array<UByte>> false depth = 4
2021-03-11 11:47:58,772 [main:302] - generating value of type = Array<UByte> false depth = 5
2021-03-11 11:47:58,967 [main:43] - GENERATING CALL OF fun <T> arrayOf(elements: UByte): Array<UByte> = TODO()
2021-03-11 11:47:58,973 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayOf(elements: UByte): Array<UByte> = TODO()
2021-03-11 11:47:59,153 [main:302] - generating value of type = UByte true depth = 8
2021-03-11 11:47:59,158 [main:95] - GENERATED = arrayOf<UByte>(42.toUByte())
2021-03-11 11:47:59,158 [main:95] - GENERATED = synchronized<Array<UByte>>("fccjk", { arrayOf<UByte>(42.toUByte())})
2021-03-11 11:47:59,159 [main:137] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline operator fun <T : kotlin.Any, R : kotlin.collections.Iterable<T>> R.contains(element: T?): kotlin.Boolean where R : kotlin.ranges.ClosedRange<T> defined in kotlin.ranges[DeserializedSimpleFunctionDescriptor@e44a73a]
2021-03-11 11:47:59,328 [main:302] - generating value of type = T false depth = 0
2021-03-11 11:47:59,904 [main:43] - GENERATING CALL OF fun <T> minOf(a: Float?, b: Float?, comparator: kotlin.Comparator<Float?>): T = TODO()
2021-03-11 11:47:59,910 [main:61] - WITHOUT TYPE PARAMS = fun <T> minOf(a: Float?, b: Float?, comparator: kotlin.Comparator<Float?>): T = TODO()
2021-03-11 11:48:00,305 [main:302] - generating value of type = Float true depth = 3
2021-03-11 11:48:00,310 [main:302] - generating value of type = Float true depth = 3
2021-03-11 11:48:00,315 [main:302] - generating value of type = Comparator<Float?> false depth = 3
2021-03-11 11:48:00,490 [main:43] - GENERATING CALL OF fun <T> compareBy(selectors: Function1<Float?, Comparable<*>?>): Comparator<Float?> = TODO()
2021-03-11 11:48:00,496 [main:61] - WITHOUT TYPE PARAMS = fun <T> compareBy(selectors: Function1<Float?, Comparable<*>?>): Comparator<Float?> = TODO()
2021-03-11 11:48:00,670 [main:302] - generating value of type = Function1<Float?, Comparable<*>?> false depth = 6
2021-03-11 11:48:00,674 [main:302] - generating value of type = Comparable<*> false depth = 7
2021-03-11 11:48:00,683 [main:95] - GENERATED = compareBy<Float?>({a: Float? -> 19408})
2021-03-11 11:48:00,683 [main:95] - GENERATED = minOf<Float?>(0.33414567f, 0.17995083f, compareBy<Float?>({a: Float? -> 19408}))
2021-03-11 11:48:00,683 [main:105] - GENERATED CALL = (Kla5.context).fold(with<UInt?, HashMap<UShort, Byte>>(null, { HashMap<UShort, Byte>(1660737072, 0.5231944f)}), {a: R, b: Element -> synchronized<Array<UByte>>("fccjk", { arrayOf<UByte>(42.toUByte())})})?.contains(minOf<Float?>(0.33414567f, 0.17995083f, compareBy<Float?>({a: Float? -> 19408})))
2021-03-11 11:48:00,684 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]]
2021-03-11 11:48:00,684 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:48:00,873 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:48:00,873 [main:137] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@43783788]
2021-03-11 11:48:01,044 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:48:01,049 [main:105] - GENERATED CALL = (Kla5.context).equals("ozzdm").and(false)
2021-03-11 11:48:01,049 [main:101] - Case = [public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f], public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]]
2021-03-11 11:48:01,049 [main:137] - GENERATING call of type public abstract fun <R> fold(initial: R, operation: (R, kotlin.coroutines.CoroutineContext.Element) -> R): R defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@51bc005f]
2021-03-11 11:48:01,218 [main:302] - generating value of type = R false depth = 0
2021-03-11 11:48:01,405 [main:43] - GENERATING CALL OF fun <R> synchronized(lock: kotlin.Any, block: ()->Short): R = TODO()
2021-03-11 11:48:01,411 [main:61] - WITHOUT TYPE PARAMS = fun <R> synchronized(lock: kotlin.Any, block: ()->Short): R = TODO()
2021-03-11 11:48:02,007 [main:302] - generating value of type = Any false depth = 3
2021-03-11 11:48:02,007 [main:302] - generating value of type = Function0<Short> false depth = 3
2021-03-11 11:48:02,013 [main:302] - generating value of type = Short true depth = 4
2021-03-11 11:48:02,018 [main:95] - GENERATED = synchronized<Short>("kjdng", { -11469})
2021-03-11 11:48:02,196 [main:302] - generating value of type = Function2<R, Element, R> false depth = 0
2021-03-11 11:48:02,200 [main:302] - generating value of type = R false depth = 1
2021-03-11 11:48:03,418 [main:43] - GENERATING CALL OF fun <T, R> with(receiver: Collection<Int>, block: T.()->Array<Z<Kla5>>): R = TODO()
2021-03-11 11:48:03,424 [main:61] - WITHOUT TYPE PARAMS = fun <T, R> with(receiver: Collection<Int>, block: T.()->Array<Z<Kla5>>): R = TODO()
2021-03-11 11:48:03,826 [main:302] - generating value of type = Collection<Int> false depth = 4
2021-03-11 11:48:04,004 [main:43] - GENERATING CALL OF fun <T> listOf(elements: Int): Collection<Int> = TODO()
2021-03-11 11:48:04,010 [main:61] - WITHOUT TYPE PARAMS = fun <T> listOf(elements: Int): Collection<Int> = TODO()
2021-03-11 11:48:04,190 [main:302] - generating value of type = Int true depth = 7
2021-03-11 11:48:04,205 [main:95] - GENERATED = listOf<Int>(995527559)
2021-03-11 11:48:04,205 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<T, Array<Z<Kla5>>> false depth = 4
2021-03-11 11:48:04,209 [main:302] - generating value of type = Array<Z<Kla5>> false depth = 5
2021-03-11 11:48:04,384 [main:43] - GENERATING CALL OF fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Z<Kla5>): Array<Z<Kla5>> = TODO()
2021-03-11 11:48:04,390 [main:61] - WITHOUT TYPE PARAMS = fun <T> Array(size: kotlin.Int, init: (kotlin.Int)->Z<Kla5>): Array<Z<Kla5>> = TODO()
2021-03-11 11:48:05,007 [main:302] - generating value of type = Int true depth = 8
2021-03-11 11:48:05,012 [main:302] - generating value of type = Function1<Int, Z<Kla5>> false depth = 8
2021-03-11 11:48:05,016 [main:302] - generating value of type = Z<Kla5> false depth = 9
2021-03-11 11:48:05,021 [main:112] - generating klass Z text = interface Z<T> {
    fun test(p: T): T {
        return p
    }
}
2021-03-11 11:48:05,413 [main:302] - generating value of type = ZImpl false depth = 11
2021-03-11 11:48:05,417 [main:112] - generating klass ZImpl text = open class ZImpl : Z<String>
2021-03-11 11:48:05,418 [main:95] - GENERATED = Array<Z<Kla5>>(-448858855, {a: Int -> ZImpl()})
2021-03-11 11:48:05,418 [main:95] - GENERATED = with<Collection<Int>, Array<Z<Kla5>>>(listOf<Int>(995527559), { Array<Z<Kla5>>(-448858855, {a: Int -> ZImpl()})})
2021-03-11 11:48:05,418 [main:137] - GENERATING call of type public open operator fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Any[DeserializedSimpleFunctionDescriptor@5d3658d1]
2021-03-11 11:48:05,576 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:48:05,577 [main:105] - GENERATED CALL = (Kla5.context).fold(synchronized<Short>("kjdng", { -11469}), {a: R, b: Element -> with<Collection<Int>, Array<Z<Kla5>>>(listOf<Int>(995527559), { Array<Z<Kla5>>(-448858855, {a: Int -> ZImpl()})})})?.equals("mnrul")
2021-03-11 11:48:05,577 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]]
2021-03-11 11:48:05,577 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:48:05,762 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:48:05,763 [main:137] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@4b0f2bf]
2021-03-11 11:48:05,933 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:48:05,938 [main:105] - GENERATED CALL = (Kla5.context).equals("pgppa").or(false)
2021-03-11 11:48:05,938 [main:101] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]]
2021-03-11 11:48:05,938 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.coroutines.CoroutineContext[DeserializedSimpleFunctionDescriptor@5484ea3]
2021-03-11 11:48:06,108 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:48:06,108 [main:105] - GENERATED CALL = (Kla5.context).equals("hefyc")
2021-03-11 11:48:06,108 [main:110] - replacement of c !is CoroutineStackFrame of type Boolean is (Kla5.context).equals("hefyc")
2021-03-11 11:48:06,284 [main:33] - Trying to replace Element(IS_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:48:06,285 [main:66] - Compilation checking started
2021-03-11 11:48:06,755 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if ((Kla5.context).equals("hefyc")) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:06,757 [main:103] - replacing (body, [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit>)
2021-03-11 11:48:06,758 [main:38] - replacing body [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit>
2021-03-11 11:48:06,758 [main:42] - Getting value of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit>
2021-03-11 11:48:06,943 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> false depth = 0
2021-03-11 11:48:06,948 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:48:07,126 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:48:07,132 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:48:07,522 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:48:07,528 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:48:07,696 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:48:07,702 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:48:08,108 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 8
2021-03-11 11:48:08,113 [main:302] - generating value of type = Unit false depth = 9
2021-03-11 11:48:08,300 [main:43] - GENERATING CALL OF fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:48:08,306 [main:61] - WITHOUT TYPE PARAMS = fun println(message: kotlin.Any?): Unit = TODO()
2021-03-11 11:48:08,673 [main:302] - generating value of type = Any false depth = 12
2021-03-11 11:48:08,674 [main:95] - GENERATED = println("hfxbb")
2021-03-11 11:48:08,674 [main:95] - GENERATED = contract({ println("hfxbb")})
2021-03-11 11:48:08,674 [main:95] - GENERATED = contract({ contract({ println("hfxbb")})})
2021-03-11 11:48:08,674 [main:46] - GENERATED VALUE OF TYPE [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> = {a: Kla8<Ty1> -> contract({ contract({ println("hfxbb")})})}
2021-03-11 11:48:08,674 [main:49] - GENERATED IS CALL =false
2021-03-11 11:48:09,096 [main:55] - randomType = Collection<Kla5>
2021-03-11 11:48:09,100 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Boolean
2021-03-11 11:48:09,117 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Continuation<UByte>
2021-03-11 11:48:09,133 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Any?
2021-03-11 11:48:09,142 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from EmptyCoroutineContext
2021-03-11 11:48:09,165 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Int
2021-03-11 11:48:09,210 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Function0<Unit>
2021-03-11 11:48:09,227 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from CoroutineContext
2021-03-11 11:48:09,238 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from ZImpl3
2021-03-11 11:48:09,273 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Int
2021-03-11 11:48:09,278 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from Continuation<Any?>
2021-03-11 11:48:09,293 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from String
2021-03-11 11:48:09,325 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from String
2021-03-11 11:48:09,329 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from CoroutineContext
2021-03-11 11:48:09,333 [main:94] - GETTING [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> from CoroutineContext
2021-03-11 11:48:09,333 [main:110] - replacement of body of type [@kotlin.ExtensionFunctionType] SuspendFunction1<Kla8<Ty1>, Unit> is {a: Kla8<Ty1> -> contract({ contract({ println("hfxbb")})})}
2021-03-11 11:48:09,495 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:48:09,495 [main:66] - Compilation checking started
2021-03-11 11:48:09,940 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.{a: Kla8<Ty1> -> contract({ contract({ println("hfxbb")})})}()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:09,943 [main:103] - replacing (prope15, Function0<Unit>)
2021-03-11 11:48:09,943 [main:38] - replacing prope15 Function0<Unit>
2021-03-11 11:48:09,943 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:48:10,133 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:48:10,138 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:48:10,321 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:48:10,327 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:48:10,715 [main:302] - generating value of type = Boolean true depth = 4
2021-03-11 11:48:10,720 [main:95] - GENERATED = require(true)
2021-03-11 11:48:10,720 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { require(true)}
2021-03-11 11:48:10,720 [main:49] - GENERATED IS CALL =false
2021-03-11 11:48:10,739 [main:55] - randomType = Kla3
2021-03-11 11:48:10,904 [main:302] - generating value of type = Kla3 false depth = 0
2021-03-11 11:48:10,908 [main:112] - generating klass Kla3 text = class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}
2021-03-11 11:48:10,914 [main:94] - GETTING Function0<Unit> from String
2021-03-11 11:48:10,932 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:48:10,942 [main:94] - GETTING Function0<Unit> from CoroutineContext
2021-03-11 11:48:10,948 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:48:10,978 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:48:10,985 [main:110] - replacement of prope15 of type Function0<Unit> is { require(true)}
2021-03-11 11:48:11,170 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-11 11:48:11,171 [main:66] - Compilation checking started
2021-03-11 11:48:11,670 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        { require(true)}()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:11,674 [main:103] - replacing (EmptyCoroutineContext, EmptyCoroutineContext)
2021-03-11 11:48:11,674 [main:38] - replacing EmptyCoroutineContext EmptyCoroutineContext
2021-03-11 11:48:11,674 [main:42] - Getting value of type EmptyCoroutineContext
2021-03-11 11:48:11,855 [main:302] - generating value of type = EmptyCoroutineContext false depth = 0
2021-03-11 11:48:11,862 [main:46] - GENERATED VALUE OF TYPE EmptyCoroutineContext = 
2021-03-11 11:48:12,286 [main:55] - randomType = LinkedHashSet<Short?>
2021-03-11 11:48:12,462 [main:302] - generating value of type = LinkedHashSet<Short?> false depth = 0
2021-03-11 11:48:12,641 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(): LkedHashSet<Short?> = TODO()
2021-03-11 11:48:12,647 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(): LkedHashSet<Short?> = TODO()
2021-03-11 11:48:12,838 [main:95] - GENERATED = linkedSetOf<Short?>()
2021-03-11 11:48:13,017 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 11:48:13,050 [main:94] - GETTING EmptyCoroutineContext from Continuation<UByte>
2021-03-11 11:48:13,057 [main:94] - GETTING EmptyCoroutineContext from Any?
2021-03-11 11:48:13,061 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:48:13,077 [main:94] - GETTING EmptyCoroutineContext from Function0<Unit>
2021-03-11 11:48:13,086 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:48:13,092 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:48:13,093 [main:94] - GETTING EmptyCoroutineContext from Int
2021-03-11 11:48:13,094 [main:94] - GETTING EmptyCoroutineContext from CoroutineContext
2021-03-11 11:48:13,094 [main:94] - GETTING EmptyCoroutineContext from String
2021-03-11 11:48:13,094 [main:94] - GETTING EmptyCoroutineContext from EmptyCoroutineContext
2021-03-11 11:48:13,108 [main:110] - replacement of EmptyCoroutineContext of type EmptyCoroutineContext is Kla1().context
2021-03-11 11:48:13,287 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:48:13,288 [main:66] - Compilation checking started
2021-03-11 11:48:14,105 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { it?.methodName?.startsWith(method) == true }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:14,108 [main:103] - replacing (it?.methodName?.startsWith(method) == true, Boolean)
2021-03-11 11:48:14,108 [main:38] - replacing it?.methodName?.startsWith(method) == true Boolean
2021-03-11 11:48:14,108 [main:42] - Getting value of type Boolean
2021-03-11 11:48:14,269 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:48:14,273 [main:46] - GENERATED VALUE OF TYPE Boolean = false
2021-03-11 11:48:14,273 [main:49] - GENERATED IS CALL =false
2021-03-11 11:48:14,472 [main:55] - randomType = Kla0?
2021-03-11 11:48:14,626 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-11 11:48:14,630 [main:112] - generating klass Kla0 text = open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}
2021-03-11 11:48:14,819 [main:194] - Type params = []
2021-03-11 11:48:14,990 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-11 11:48:15,169 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:48:15,175 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:48:15,560 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-11 11:48:15,766 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:48:15,772 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:48:16,381 [main:302] - generating value of type = Key<ContinuationInterceptor> false depth = 8
2021-03-11 11:48:16,555 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:48:16,561 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:48:17,240 [main:302] - generating value of type = Key<AbstractCoroutineContextElement> false depth = 11
2021-03-11 11:48:17,421 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:48:17,427 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:48:18,056 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->AbstractCoroutineContextElement): Key<AbstractCoroutineContextElement> = TODO()
2021-03-11 11:48:18,057 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<AbstractCoroutineContextElement>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->ContinuationInterceptor): Key<ContinuationInterceptor> = TODO()
2021-03-11 11:48:18,057 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<ContinuationInterceptor>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-11 11:48:18,057 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-11 11:48:18,075 [main:137] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla0[DeserializedSimpleFunctionDescriptor@9b5dd52]
2021-03-11 11:48:18,257 [main:302] - generating value of type = Any false depth = 0
2021-03-11 11:48:18,258 [main:66] - Generated call from random type = (Kla0())?.equals("mwktk")
2021-03-11 11:48:18,258 [main:110] - replacement of it?.methodName?.startsWith(method) == true of type Boolean is (Kla0())?.equals("mwktk")
2021-03-11 11:48:18,451 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(SAFE_ACCESS_EXPRESSION)
2021-03-11 11:48:18,451 [main:66] - Compilation checking started
2021-03-11 11:48:19,135 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { (Kla0())?.equals("mwktk") }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:19,138 [main:103] - replacing (prope15, Function0<Unit>)
2021-03-11 11:48:19,138 [main:38] - replacing prope15 Function0<Unit>
2021-03-11 11:48:19,138 [main:42] - Getting value of type Function0<Unit>
2021-03-11 11:48:19,324 [main:302] - generating value of type = Function0<Unit> false depth = 0
2021-03-11 11:48:19,329 [main:302] - generating value of type = Unit false depth = 1
2021-03-11 11:48:19,508 [main:43] - GENERATING CALL OF fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:48:19,514 [main:61] - WITHOUT TYPE PARAMS = fun contract(builder: kotlin.contracts.ContractBuilder.()->kotlin.Unit): Unit = TODO()
2021-03-11 11:48:19,912 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<ContractBuilder, Unit> false depth = 4
2021-03-11 11:48:19,917 [main:302] - generating value of type = Unit false depth = 5
2021-03-11 11:48:20,087 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:48:20,094 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-11 11:48:20,497 [main:302] - generating value of type = Boolean true depth = 8
2021-03-11 11:48:20,502 [main:95] - GENERATED = check(true)
2021-03-11 11:48:20,502 [main:95] - GENERATED = contract({ check(true)})
2021-03-11 11:48:20,502 [main:46] - GENERATED VALUE OF TYPE Function0<Unit> = { contract({ check(true)})}
2021-03-11 11:48:20,502 [main:49] - GENERATED IS CALL =false
2021-03-11 11:48:20,512 [main:55] - randomType = Char
2021-03-11 11:48:20,688 [main:302] - generating value of type = Char true depth = 0
2021-03-11 11:48:20,736 [main:94] - GETTING Function0<Unit> from Boolean
2021-03-11 11:48:20,751 [main:94] - GETTING Function0<Unit> from Any?
2021-03-11 11:48:20,757 [main:94] - GETTING Function0<Unit> from Int
2021-03-11 11:48:20,813 [main:94] - GETTING Function0<Unit> from Function0<Unit>
2021-03-11 11:48:20,826 [main:110] - replacement of prope15 of type Function0<Unit> is Kla4().prope7
2021-03-11 11:48:20,991 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:48:20,992 [main:66] - Compilation checking started
2021-03-11 11:48:21,445 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { (Kla0())?.equals("mwktk") }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().Kla4().prope7 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:21,448 [main:103] - replacing ((ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}), String)
2021-03-11 11:48:21,448 [main:38] - replacing (ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}) String
2021-03-11 11:48:21,448 [main:42] - Getting value of type String
2021-03-11 11:48:21,632 [main:302] - generating value of type = String true depth = 0
2021-03-11 11:48:21,637 [main:46] - GENERATED VALUE OF TYPE String = "busuw"
2021-03-11 11:48:21,637 [main:49] - GENERATED IS CALL =false
2021-03-11 11:48:22,276 [main:55] - randomType = Set<Char?>?
2021-03-11 11:48:22,277 [main:94] - GETTING String from Boolean
2021-03-11 11:48:22,290 [main:101] - Case = [public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]]
2021-03-11 11:48:22,290 [main:137] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@19a97c2f]
2021-03-11 11:48:22,447 [main:302] - generating value of type = Boolean true depth = 0
2021-03-11 11:48:22,452 [main:137] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2e316c3f]
2021-03-11 11:48:22,637 [main:302] - generating value of type = Int true depth = 0
2021-03-11 11:48:22,642 [main:105] - GENERATED CALL = (Kla4().prope6).compareTo(true).toString(-1923335307)
2021-03-11 11:48:22,642 [main:110] - replacement of (ZImpl2())?.test("ijakj").take(60993096) + (ZImpl2()).test("mvebl").filterNot({a: Char -> true}) of type String is (Kla4().prope6).compareTo(true).toString(-1923335307)
2021-03-11 11:48:22,819 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-11 11:48:22,820 [main:66] - Compilation checking started
2021-03-11 11:48:23,531 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((Kla4().prope6).compareTo(true).toString(-1923335307))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { (Kla0())?.equals("mwktk") }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:23,535 [main:103] - replacing (this, Kla10)
2021-03-11 11:48:23,535 [main:38] - replacing this Kla10
2021-03-11 11:48:23,535 [main:42] - Getting value of type Kla10
2021-03-11 11:48:23,709 [main:302] - generating value of type = Kla10 false depth = 0
2021-03-11 11:48:23,713 [main:112] - generating klass Kla10 text = class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
this.prope11 = "xchwx"
    }

    var prope11: Any? = null
}
2021-03-11 11:48:23,714 [main:46] - GENERATED VALUE OF TYPE Kla10 = Kla10()
2021-03-11 11:48:23,714 [main:49] - GENERATED IS CALL =true
2021-03-11 11:48:24,349 [main:55] - randomType = LinkedHashSet<Float>
2021-03-11 11:48:24,520 [main:302] - generating value of type = LinkedHashSet<Float> false depth = 0
2021-03-11 11:48:24,689 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-11 11:48:24,695 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Float): LkedHashSet<Float> = TODO()
2021-03-11 11:48:24,885 [main:302] - generating value of type = Float true depth = 3
2021-03-11 11:48:24,890 [main:95] - GENERATED = linkedSetOf<Float>(0.77913386f)
2021-03-11 11:48:25,050 [main:94] - GETTING Kla10 from CoroutineContext
2021-03-11 11:48:25,058 [main:94] - GETTING Kla10 from String
2021-03-11 11:48:25,084 [main:94] - GETTING Kla10 from Boolean
2021-03-11 11:48:25,095 [main:94] - GETTING Kla10 from Continuation<Any?>
2021-03-11 11:48:25,105 [main:94] - GETTING Kla10 from Function0<Unit>
2021-03-11 11:48:25,117 [main:94] - GETTING Kla10 from Continuation<UByte>
2021-03-11 11:48:25,126 [main:94] - GETTING Kla10 from CoroutineContext
2021-03-11 11:48:25,126 [main:94] - GETTING Kla10 from EmptyCoroutineContext
2021-03-11 11:48:25,143 [main:94] - GETTING Kla10 from Int
2021-03-11 11:48:25,180 [main:94] - GETTING Kla10 from ZImpl3
2021-03-11 11:48:25,198 [main:94] - GETTING Kla10 from CoroutineContext
2021-03-11 11:48:25,199 [main:94] - GETTING Kla10 from Int
2021-03-11 11:48:25,200 [main:94] - GETTING Kla10 from Any?
2021-03-11 11:48:25,205 [main:94] - GETTING Kla10 from String
2021-03-11 11:48:25,205 [main:110] - replacement of this of type Kla10 is Kla10()
2021-03-11 11:48:25,377 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-11 11:48:25,378 [main:66] - Compilation checking started
2021-03-11 11:48:26,048 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
interface Z<T> {
    fun test(p: T): T {
        return p
    }
}

open class ZImpl : Z<String>

open class ZImpl2 : Z<String>, ZImpl()

class ZImpl3 : ZImpl2() {

    override fun test(p: String): String {
        return super.test(p)
    }
}

fun box(): String {
    return ZImpl3().test("OK")
}

var prope0 = "FAIL"

suspend fun fu0() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> "vdxyn"}

fun fu1(c: suspend () -> Unit) {
    c.startCoroutine(Kla0)
}

fun box386() : String {
    fu1 {
        fu0()
    }
    return (477215846)?.toInt().toString(0)
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        {a: Ty0 -> check(true)}(prope3.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        UninitializedPropertyAccessException(CharacterCodingException())?.let(x)
    }
}

open class Kla0(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla6 : Kla0()
    override fun resumeWith(prope3: Result<Any?>) {
        "iwgiw"
    }
}

class Kla1 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Any?>) {
        Kla1().prope3 = "twbli"
    }

    var prope3: Any? = null
}

abstract class Kla2<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope3: Result<Ty0>) {
        if (false) {
            resume(prope3.getOrThrow())
        } else {
            fu4(IllegalArgumentException("ulegp", IllegalArgumentException(CharacterCodingException())))
        }
    }

    abstract fun fu4(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla3 {
    private val prope4 = arrayListOf<StackTraceElement?>()

    suspend fun fu6() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> print("qabby")}

    fun fu6(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope4.clear()
        var prope8: CoroutineStackFrame? = c
        while (prope8 != null) {
            prope4.add(prope8.getStackTraceElement())
            prope8 = prope8.callerFrame
        }
    }

    fun fu7(method: String) {
        prope4.find { true}?.let { TODO("nokwr")}
    }

    fun fu8(method: String) {
        prope4.find { (ZImpl3()).test("wgwqm").toBoolean()} ?: error("jjprn")
    }
}

val prope1 = Kla3()

class Kla4 {
    private var prope5 = 0
    var prope6 = true

    var prope7: () -> Unit = {}

    fun fu9() {
        prope5 = 0
        prope6 = false
        prope7 = { require((ZImpl3()).equals("fvban").xor(false))}
    }

    suspend fun fu0() = suspendCoroutine<Unit> { c ->
        (ZImpl3()).test("wbqsm").length
        prope7 = { c.resume(Unit) }
    }

    fun fu10(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if ((ZImpl3()).equals("fvban").xor(false)) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope5)
            prope7()
        }
        if (477215846 != numberOfSuspensions)
            error((prope5).toShort().toString(prope5) + ", got " + prope5)
        if (prope6) error((ZImpl3()).test("qiejd").takeLast(numberOfSuspensions))
        prope7()
        if ((ZImpl3()).test("wgwqm").toBoolean()) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope2 = Kla4()

object Kla5: Kla2<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        Kla4().prope7 = { check(true, { "yoymv"})}
    }

    override fun fu4(exception: Throwable) {
        throw exception
    }
}

interface Kla7<Ty1> {
    abstract suspend fun fu12(collector: Kla8<Ty1>)
}

interface Kla8<Ty1> {
    suspend fun fu18(value: Ty1)
}

inline fun <Ty1> fu11(crossinline body: suspend Kla8<Ty1>.() -> Unit): Kla7<Ty1> =
    object : Kla7<Ty1> {
        override suspend fun fu12(collector: Kla8<Ty1>) = collector.body()
    }

suspend inline fun <Ty1> Kla7<Ty1>.fu12(crossinline body: suspend (Ty1) -> Unit) =
    fu12(object : Kla8<Ty1> {
        override suspend fun fu18(value: Ty1) = body(value)
    })

inline fun <Ty1> Kla7<Ty1>.fu13(crossinline predicate: suspend (Ty1) -> Boolean): Kla7<Ty1> =
    fu11<Ty1> {
        this@fu13.fu12 {a: Ty1 -> require(true)}
    }

inline fun <reified Ty2> Kla7<*>.fu14(): Kla7<Ty2> =
    TODO() as Kla7<Ty2>

fun fu15(c: suspend () -> Unit) {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
c.startCoroutine(Kla9)
}

fun box687(): String {
    var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
var prope11 = "fail"
    fu15 {
        fu11<String> { fu18(((477215846)).toString(-1293458627)) }.fu14<String>().fu12 { prope11 = it }
    }
    return prope11
}

fun <Ty1> fu16(x: (Ty1) -> Unit): Continuation<Ty1> = object: Continuation<Ty1> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        x(prope11.getOrThrow())
    }
}

fun fu17(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
(Kla9()).resumeWithException(IllegalStateException("zywdl"))
    }
}

open class Kla9(override val context: CoroutineContext = Kla1().context) : Continuation<Any?> {
    companion object Kla15 : Kla9()
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
"gzwdi"
    }
}

class Kla10 : Continuation<Any?> {
    override val context = Kla1().context
    override fun resumeWith(prope11: Result<Any?>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla10().prope11 = "xchwx"
    }

    var prope11: Any? = null
}

abstract class Kla11<in Ty1> : Continuation<Ty1> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope11: Result<Ty1>) {
        if (prope11.isSuccess) {
            resume(prope11.getOrThrow())
        } else {
            fu19(prope11.exceptionOrNull()!!)
        }
    }

    abstract fun fu19(exception: Throwable)
    abstract fun resume(value: Ty1)
}

class Kla12 {
    private val prope12 = arrayListOf<StackTraceElement?>()

    suspend fun fu21() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu21(it)
    }

    fun fu21(c: Continuation<*>) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
if (c !is CoroutineStackFrame) error((Kla4().prope6).compareTo(true).toString(-1923335307))
        prope12.clear()
        var prope16: CoroutineStackFrame? = c
        while (prope16 != null) {
            prope12.add(prope16.getStackTraceElement())
            prope16 = prope16.callerFrame
        }
    }

    fun fu22(method: String) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope12.find { (Kla0())?.equals("mwktk") }?.let { TODO("wvdvl")}
    }

    fun fu23(method: String) {
        prope12.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope12.joinToString(separator = "\n"))
    }
}

val prope9 = Kla12()

class Kla13 {
    private var prope13 = 0
    var prope14 = (fu3({a: Throwable -> println("sdzvs")})).equals("sjwug")

    var prope15: () -> Unit = {}

    fun fu24() {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
prope13 = 776275305
        prope14 = (Kla0()).context.equals("gkjzv")
        prope15 = Kla4().prope7
    }

    suspend fun fu25() = suspendCoroutine<Unit> { c ->
        prope13++
        prope15 = { c.resume(Unit) }
    }

    fun fu26(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
for (i in ((477215846)?.toInt()).toShort().rangeTo(-66)) {
            if (prope13 != i) error(((477215846)?.toInt()).toChar().titlecase())
            prope15()
        }
        if (-1092763304 != numberOfSuspensions)
            error(((477215846)?.toInt()).toInt().toString(-1797694981) + ", got " + -1585286372)
        if ((0.015807226349986325).toChar().isDefined()) error("Wrong state-machine generated: it is finished early")
        prope15()
        if ((fu2<UByte>({a: UByte -> check(true, { "zpdov"})})).resumeWith(runCatching<UByte>({ 95.toUByte()})).equals("bqbav")) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope10 = Kla13()

object Kla14: Kla11<Unit>() {
    override val context: CoroutineContext
        get() = Kla1().context

    override fun resume(value: Unit) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
Kla13().prope15 = { repeat(-333282860, {a: Int -> println()})}
    }

    override fun fu19(exception: Throwable) {
        var prope0 = "FAIL"
val prope1 = Kla3()
val prope2 = Kla4()
throw IllegalArgumentException("kagvu", ArithmeticException("uycgy"))
    }
}


2021-03-11 11:48:26,050 [main:103] - replacing (prope11, String)
2021-03-11 11:48:26,051 [main:38] - replacing prope11 String
2021-03-11 11:48:26,051 [main:42] - Getting value of type String
