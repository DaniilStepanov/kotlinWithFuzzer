2021-03-12 00:33:09,848 [main:66] - Compilation checking started
2021-03-12 00:33:11,381 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:11,385 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:33:11,397 [main:66] - Compilation checking started
2021-03-12 00:33:12,240 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String = "ghcry") {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}
2021-03-12 00:33:12,241 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:12,243 [main:33] - Trying to replace Element(VALUE_PARAMETER) on Element(VALUE_PARAMETER)
2021-03-12 00:33:12,243 [main:66] - Compilation checking started
2021-03-12 00:33:12,849 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String = "ghcry") {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String = "wiatj") {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}
2021-03-12 00:33:13,214 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:33:13,602 [main:43] - GENERATING CALL OF fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}
2021-03-12 00:33:13,603 [main:61] - WITHOUT TYPE PARAMS = fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}
2021-03-12 00:33:13,759 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:33:13,760 [main:95] - GENERATED = overload("bvkty")
2021-03-12 00:33:13,949 [main:45] - Trying to change 28 nodes
2021-03-12 00:33:13,954 [main:53] - replacing (result, String)
2021-03-12 00:33:13,954 [main:50] - replacing result String
2021-03-12 00:33:13,954 [main:54] - Getting value of type String
2021-03-12 00:33:14,112 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:14,112 [main:58] - GENERATED VALUE OF TYPE String = "xtwfv"
2021-03-12 00:33:14,113 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:14,582 [main:67] - randomType = Char
2021-03-12 00:33:14,750 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:14,853 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a878e]
2021-03-12 00:33:14,855 [main:78] - Generated call from random type = ('').titlecase()
2021-03-12 00:33:14,855 [main:61] - replacement of result of type String is ('').titlecase()
2021-03-12 00:33:14,979 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:14,980 [main:66] - Compilation checking started
2021-03-12 00:33:15,476 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $('').titlecase()"
}
2021-03-12 00:33:15,478 [main:53] - replacing ("OK", String)
2021-03-12 00:33:15,478 [main:50] - replacing "OK" String
2021-03-12 00:33:15,478 [main:54] - Getting value of type String
2021-03-12 00:33:15,609 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:15,610 [main:58] - GENERATED VALUE OF TYPE String = "zuifm"
2021-03-12 00:33:15,610 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:16,728 [main:67] - randomType = Function2<Float, Collection<Map<Int, UByte>>, ArrayDeque<Short>>
2021-03-12 00:33:16,729 [main:106] - GETTING String from String
2021-03-12 00:33:16,776 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0f7a4f]]
2021-03-12 00:33:16,776 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:16,884 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:17,034 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:17,036 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0f7a4f]
2021-03-12 00:33:17,149 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:17,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:17,258 [main:117] - GENERATED CALL = (result).subSequence(-1445693871, 1698942248).substring(346849790, 912782592)
2021-03-12 00:33:17,258 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]]
2021-03-12 00:33:17,259 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]
2021-03-12 00:33:17,259 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 00:33:17,260 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]]
2021-03-12 00:33:17,260 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]
2021-03-12 00:33:17,420 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:17,422 [main:117] - GENERATED CALL = (result).plus("khudw")
2021-03-12 00:33:17,422 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78011251]]
2021-03-12 00:33:17,422 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78011251]
2021-03-12 00:33:17,547 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:17,548 [main:117] - GENERATED CALL = (result).dropLast(2046796181)
2021-03-12 00:33:17,548 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]]
2021-03-12 00:33:17,549 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]
2021-03-12 00:33:17,549 [main:117] - GENERATED CALL = (result).concat(result)
2021-03-12 00:33:17,550 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]]
2021-03-12 00:33:17,550 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]
2021-03-12 00:33:17,550 [main:117] - GENERATED CALL = (result).toLowerCase()
2021-03-12 00:33:17,551 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]]
2021-03-12 00:33:17,551 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]
2021-03-12 00:33:17,652 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:17,654 [main:117] - GENERATED CALL = (result).substringAfter('犲', result)
2021-03-12 00:33:17,655 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]]
2021-03-12 00:33:17,656 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]
2021-03-12 00:33:17,790 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:17,790 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:17,793 [main:117] - GENERATED CALL = (result).dropWhile({a: Char -> true})
2021-03-12 00:33:17,793 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]]
2021-03-12 00:33:17,793 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]
2021-03-12 00:33:17,897 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:18,009 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:18,011 [main:117] - GENERATED CALL = (result).padEnd(-480870418, '')
2021-03-12 00:33:18,011 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fdc4eb]]
2021-03-12 00:33:18,011 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fdc4eb]
2021-03-12 00:33:18,150 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:18,272 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:18,274 [main:117] - GENERATED CALL = (result).replaceAfterLast('蕟', result, "atplr")
2021-03-12 00:33:18,274 [main:61] - replacement of "OK" of type String is (result).dropLast(2046796181)
2021-03-12 00:33:18,375 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:18,376 [main:66] - Compilation checking started
2021-03-12 00:33:18,764 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}
2021-03-12 00:33:18,766 [main:53] - replacing (result, String)
2021-03-12 00:33:18,766 [main:50] - replacing result String
2021-03-12 00:33:18,766 [main:54] - Getting value of type String
2021-03-12 00:33:18,914 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:18,914 [main:58] - GENERATED VALUE OF TYPE String = "dkrxj"
2021-03-12 00:33:18,914 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:19,625 [main:67] - randomType = Function1<ArrayDeque<C?>?, UByte?>
2021-03-12 00:33:19,625 [main:106] - GETTING String from String
2021-03-12 00:33:19,665 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4ba512]]
2021-03-12 00:33:19,665 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4ba512]
2021-03-12 00:33:19,766 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:19,867 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:19,982 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:19,984 [main:117] - GENERATED CALL = (result).replace('钋', '籄', true)
2021-03-12 00:33:19,984 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]]
2021-03-12 00:33:19,984 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]
2021-03-12 00:33:20,095 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:20,206 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:20,207 [main:117] - GENERATED CALL = (result).padStart(-415706557, '퇩')
2021-03-12 00:33:20,208 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e7633]]
2021-03-12 00:33:20,208 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e7633]
2021-03-12 00:33:20,309 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:33:20,309 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:33:20,310 [main:117] - GENERATED CALL = (result).replaceFirstChar({a: Char -> '亵'})
2021-03-12 00:33:20,311 [main:113] - Case = [public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d35344]]
2021-03-12 00:33:20,311 [main:149] - GENERATING call of type public fun kotlin.String.drop(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@47d35344]
2021-03-12 00:33:20,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:20,458 [main:117] - GENERATED CALL = (result).drop(137947384)
2021-03-12 00:33:20,459 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]]
2021-03-12 00:33:20,459 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]
2021-03-12 00:33:20,564 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:20,678 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:20,679 [main:117] - GENERATED CALL = (result).padEnd(923177464, '')
2021-03-12 00:33:20,679 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]]
2021-03-12 00:33:20,679 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]
2021-03-12 00:33:20,782 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:20,783 [main:117] - GENERATED CALL = (result).substringBefore('퍾', result)
2021-03-12 00:33:20,784 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]]
2021-03-12 00:33:20,784 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]
2021-03-12 00:33:20,908 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:21,068 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:33:21,071 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:33:21,294 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:33:21,300 [main:95] - GENERATED = StringBuilder("zhqva")
2021-03-12 00:33:21,402 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:21,403 [main:117] - GENERATED CALL = (result).commonSuffixWith(StringBuilder("zhqva"), true)
2021-03-12 00:33:21,403 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0f7a4f]]
2021-03-12 00:33:21,403 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:21,544 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:21,647 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:21,648 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0f7a4f]
2021-03-12 00:33:21,742 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:21,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:21,838 [main:117] - GENERATED CALL = (result).subSequence(-974811474, 1438708134).substring(1284044574, 1332928476)
2021-03-12 00:33:21,838 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a610386]]
2021-03-12 00:33:21,838 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a610386]
2021-03-12 00:33:21,839 [main:117] - GENERATED CALL = (result).reversed()
2021-03-12 00:33:21,839 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:33:21,839 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:33:21,973 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:21,973 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:21,975 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> false})
2021-03-12 00:33:21,975 [main:61] - replacement of result of type String is (result).reversed()
2021-03-12 00:33:22,088 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:22,089 [main:66] - Compilation checking started
2021-03-12 00:33:22,389 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            (result).reversed() += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:22,391 [main:53] - replacing ("3", String)
2021-03-12 00:33:22,392 [main:50] - replacing "3" String
2021-03-12 00:33:22,392 [main:54] - Getting value of type String
2021-03-12 00:33:22,521 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:22,522 [main:58] - GENERATED VALUE OF TYPE String = "qknqd"
2021-03-12 00:33:22,522 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:22,524 [main:67] - randomType = C
2021-03-12 00:33:22,663 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:33:22,664 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:33:22,675 [main:106] - GETTING String from String
2021-03-12 00:33:22,717 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]]
2021-03-12 00:33:22,718 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]
2021-03-12 00:33:22,831 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:22,952 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:22,953 [main:117] - GENERATED CALL = (unused).replaceBefore('拇', "relct", result)
2021-03-12 00:33:22,953 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52aaf59a]]
2021-03-12 00:33:22,953 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:23,064 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:23,157 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:23,157 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replaceFirst(regex: kotlin.text.Regex, replacement: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52aaf59a]
2021-03-12 00:33:23,252 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:33:23,349 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:33:23,351 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:33:23,679 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:33:23,680 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:33:23,683 [main:95] - GENERATED = Regex("datqv", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:33:23,685 [main:117] - GENERATED CALL = (unused).subSequence(-1039381629, -559753310).replaceFirst(Regex("datqv", kotlin.text.RegexOption.IGNORE_CASE), unused)
2021-03-12 00:33:23,685 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]]
2021-03-12 00:33:23,685 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]
2021-03-12 00:33:23,686 [main:117] - GENERATED CALL = (unused).concat(unused)
2021-03-12 00:33:23,686 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]]
2021-03-12 00:33:23,686 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]
2021-03-12 00:33:23,792 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:23,793 [main:117] - GENERATED CALL = (unused).substringAfter('뗬', result)
2021-03-12 00:33:23,794 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@428fdf21]]
2021-03-12 00:33:23,794 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:23,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:23,995 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:23,995 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@428fdf21]
2021-03-12 00:33:24,116 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:33:24,214 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:33:24,216 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, options: kotlin.collections.Set<kotlin.text.RegexOption>): Regex = TODO()
2021-03-12 00:33:24,511 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:33:24,511 [main:302] - generating value of type = Set<RegexOption> false depth = 3
2021-03-12 00:33:24,630 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:33:24,632 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: RegexOption): Set<RegexOption> = TODO()
2021-03-12 00:33:24,750 [main:302] - generating value of type = RegexOption false depth = 6
2021-03-12 00:33:24,751 [main:95] - GENERATED = linkedSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)
2021-03-12 00:33:24,752 [main:95] - GENERATED = Regex("zvmol", linkedSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE))
2021-03-12 00:33:24,853 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:33:24,854 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:33:24,949 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:33:24,951 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:33:25,145 [main:302] - generating value of type = Int true depth = 4
2021-03-12 00:33:25,145 [main:95] - GENERATED = StringBuilder(-1214401964)
2021-03-12 00:33:25,146 [main:117] - GENERATED CALL = (unused).subSequence(261177025, 1375371947).replace(Regex("zvmol", linkedSetOf<RegexOption>(kotlin.text.RegexOption.MULTILINE)), {a: MatchResult -> StringBuilder(-1214401964)})
2021-03-12 00:33:25,147 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b407cf]]
2021-03-12 00:33:25,147 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b407cf]
2021-03-12 00:33:25,292 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:33:25,391 [main:43] - GENERATING CALL OF fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-12 00:33:25,393 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(): Iterable<Int> = TODO()
2021-03-12 00:33:25,488 [main:95] - GENERATED = arrayListOf<Int>()
2021-03-12 00:33:25,488 [main:117] - GENERATED CALL = (unused).slice(arrayListOf<Int>())
2021-03-12 00:33:25,488 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]]
2021-03-12 00:33:25,489 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]
2021-03-12 00:33:25,489 [main:117] - GENERATED CALL = (unused).decapitalize()
2021-03-12 00:33:25,489 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]]
2021-03-12 00:33:25,489 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:25,583 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:25,677 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:25,678 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]
2021-03-12 00:33:25,807 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:25,903 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:33:25,905 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:33:26,101 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:33:26,102 [main:95] - GENERATED = StringBuilder(-383765264)
2021-03-12 00:33:26,194 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:26,195 [main:117] - GENERATED CALL = (unused).subSequence(1117366598, -1541616106).commonSuffixWith(StringBuilder(-383765264), false)
2021-03-12 00:33:26,196 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]]
2021-03-12 00:33:26,196 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]
2021-03-12 00:33:26,196 [main:117] - GENERATED CALL = (unused).replaceIndentByMargin(result, unused)
2021-03-12 00:33:26,196 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d6364]]
2021-03-12 00:33:26,196 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d6364]
2021-03-12 00:33:26,300 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:26,304 [main:117] - GENERATED CALL = (unused).removeSuffix("godvq")
2021-03-12 00:33:26,304 [main:61] - replacement of "3" of type String is unused
2021-03-12 00:33:26,404 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:33:26,404 [main:66] - Compilation checking started
2021-03-12 00:33:26,753 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:26,753 [main:53] - replacing (result, String)
2021-03-12 00:33:26,754 [main:50] - replacing result String
2021-03-12 00:33:26,754 [main:54] - Getting value of type String
2021-03-12 00:33:26,849 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:26,850 [main:58] - GENERATED VALUE OF TYPE String = "mnqcm"
2021-03-12 00:33:26,850 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:26,946 [main:67] - randomType = Long
2021-03-12 00:33:27,043 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:33:27,089 [main:149] - GENERATING call of type public abstract fun toLong(): kotlin.Long defined in kotlin.Number[DeserializedSimpleFunctionDescriptor@71405ed0]
2021-03-12 00:33:27,090 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c4ba0e3]
2021-03-12 00:33:27,183 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:27,184 [main:78] - Generated call from random type = (-8159038190542773913).toLong().toString(560060388)
2021-03-12 00:33:27,184 [main:61] - replacement of result of type String is (-8159038190542773913).toLong().toString(560060388)
2021-03-12 00:33:27,279 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:27,279 [main:66] - Compilation checking started
2021-03-12 00:33:27,550 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            (-8159038190542773913).toLong().toString(560060388) += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:27,551 [main:53] - replacing (result, String)
2021-03-12 00:33:27,551 [main:50] - replacing result String
2021-03-12 00:33:27,551 [main:54] - Getting value of type String
2021-03-12 00:33:27,647 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:27,647 [main:58] - GENERATED VALUE OF TYPE String = "iuzrj"
2021-03-12 00:33:27,648 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:27,852 [main:67] - randomType = Byte?
2021-03-12 00:33:27,951 [main:302] - generating value of type = Byte true depth = 0
2021-03-12 00:33:28,025 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@795e73d0]
2021-03-12 00:33:28,025 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a878e]
2021-03-12 00:33:28,026 [main:78] - Generated call from random type = (91)?.toChar().titlecase()
2021-03-12 00:33:28,026 [main:61] - replacement of result of type String is (91)?.toChar().titlecase()
2021-03-12 00:33:28,123 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:28,124 [main:66] - Compilation checking started
2021-03-12 00:33:28,362 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        (91)?.toChar().titlecase() += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:28,362 [main:53] - replacing (result, String)
2021-03-12 00:33:28,362 [main:50] - replacing result String
2021-03-12 00:33:28,362 [main:54] - Getting value of type String
2021-03-12 00:33:28,461 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:28,461 [main:58] - GENERATED VALUE OF TYPE String = "iktxr"
2021-03-12 00:33:28,461 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:28,462 [main:67] - randomType = Boolean
2021-03-12 00:33:28,552 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:28,564 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@118c0c7e]
2021-03-12 00:33:28,661 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:28,662 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:33:28,754 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:28,754 [main:78] - Generated call from random type = (false).compareTo(true).toString(-1129676824)
2021-03-12 00:33:28,755 [main:61] - replacement of result of type String is (false).compareTo(true).toString(-1129676824)
2021-03-12 00:33:28,843 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:28,844 [main:53] - replacing (result == "123456", Boolean)
2021-03-12 00:33:28,844 [main:50] - replacing result == "123456" Boolean
2021-03-12 00:33:28,844 [main:54] - Getting value of type Boolean
2021-03-12 00:33:28,934 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:28,934 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:33:28,934 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:29,029 [main:67] - randomType = Double
2021-03-12 00:33:29,121 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:33:29,175 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1b4b7aa5]
2021-03-12 00:33:29,176 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2623dc86]
2021-03-12 00:33:29,176 [main:78] - Generated call from random type = (0.2098911103859722).toChar().isWhitespace()
2021-03-12 00:33:29,177 [main:106] - GETTING Boolean from String
2021-03-12 00:33:29,210 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d6e663]]
2021-03-12 00:33:29,210 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:29,302 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:29,303 [main:149] - GENERATING call of type public fun kotlin.Char.isISOControl(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52d6e663]
2021-03-12 00:33:29,303 [main:117] - GENERATED CALL = (result).get(-1784766653).isISOControl()
2021-03-12 00:33:29,304 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d189da0]]
2021-03-12 00:33:29,304 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:29,457 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:29,458 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d189da0]
2021-03-12 00:33:29,458 [main:117] - GENERATED CALL = (result).get(-1063303262).isDefined()
2021-03-12 00:33:29,459 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6a4872]]
2021-03-12 00:33:29,459 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:29,566 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:29,655 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:29,655 [main:149] - GENERATING call of type public fun kotlin.CharSequence.any(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7c6a4872]
2021-03-12 00:33:29,656 [main:117] - GENERATED CALL = (result).subSequence(455575378, 1481414576).any()
2021-03-12 00:33:29,656 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a05ae13]]
2021-03-12 00:33:29,656 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:29,743 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:29,837 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:29,838 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isEmpty(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3a05ae13]
2021-03-12 00:33:29,838 [main:117] - GENERATED CALL = (result).subSequence(-171334788, 16227984).isEmpty()
2021-03-12 00:33:29,838 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6efffd0b]]
2021-03-12 00:33:29,838 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]
2021-03-12 00:33:29,944 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:29,944 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6efffd0b]
2021-03-12 00:33:30,039 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:30,040 [main:117] - GENERATED CALL = (result).equals("uuhum").xor(false)
2021-03-12 00:33:30,040 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a09321]]
2021-03-12 00:33:30,040 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:30,128 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:30,129 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a09321]
2021-03-12 00:33:30,219 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:30,305 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:30,306 [main:117] - GENERATED CALL = (result).get(-377362319).equals('㣲', true)
2021-03-12 00:33:30,306 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d3655ba]]
2021-03-12 00:33:30,306 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d3655ba]
2021-03-12 00:33:30,392 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:30,393 [main:117] - GENERATED CALL = (result).startsWith(result, false)
2021-03-12 00:33:30,393 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ce6ea72]]
2021-03-12 00:33:30,393 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:30,499 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:30,499 [main:149] - GENERATING call of type public fun kotlin.Char.isHighSurrogate(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@ce6ea72]
2021-03-12 00:33:30,499 [main:117] - GENERATED CALL = (result).get(2030297973).isHighSurrogate()
2021-03-12 00:33:30,500 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5081b28e]]
2021-03-12 00:33:30,500 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:30,601 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:30,602 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5081b28e]
2021-03-12 00:33:30,602 [main:117] - GENERATED CALL = (result).get(1625769439).isLetterOrDigit()
2021-03-12 00:33:30,602 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]]
2021-03-12 00:33:30,602 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]
2021-03-12 00:33:30,694 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:30,694 [main:117] - GENERATED CALL = (result).equals("euvjw")
2021-03-12 00:33:30,694 [main:61] - replacement of result == "123456" of type Boolean is (result).subSequence(455575378, 1481414576).any()
2021-03-12 00:33:30,784 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:30,784 [main:66] - Compilation checking started
2021-03-12 00:33:31,106 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:31,107 [main:53] - replacing ("", String)
2021-03-12 00:33:31,107 [main:50] - replacing "" String
2021-03-12 00:33:31,107 [main:54] - Getting value of type String
2021-03-12 00:33:31,204 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:31,205 [main:58] - GENERATED VALUE OF TYPE String = "awsor"
2021-03-12 00:33:31,205 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:31,313 [main:67] - randomType = List<Int>
2021-03-12 00:33:31,313 [main:106] - GETTING String from String
2021-03-12 00:33:31,340 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d6364]]
2021-03-12 00:33:31,340 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d6364]
2021-03-12 00:33:31,437 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:31,530 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:33:31,531 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:33:31,713 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:33:31,713 [main:95] - GENERATED = StringBuilder("xzmpp")
2021-03-12 00:33:31,713 [main:117] - GENERATED CALL = (result).removeSuffix(StringBuilder("xzmpp"))
2021-03-12 00:33:31,714 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]]
2021-03-12 00:33:31,714 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]
2021-03-12 00:33:31,814 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:31,815 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:31,816 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> false})
2021-03-12 00:33:31,816 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]]
2021-03-12 00:33:31,816 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]
2021-03-12 00:33:31,816 [main:117] - GENERATED CALL = (result).decapitalize()
2021-03-12 00:33:31,816 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:33:31,817 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:33:31,931 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:31,932 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:33:32,083 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:32,084 [main:117] - GENERATED CALL = (result).compareTo("ijnrn").toString(-1642746308)
2021-03-12 00:33:32,084 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@648dda2f]]
2021-03-12 00:33:32,084 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:32,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:32,174 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@648dda2f]
2021-03-12 00:33:32,174 [main:117] - GENERATED CALL = (result).get(-786886121).uppercase()
2021-03-12 00:33:32,174 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e7633]]
2021-03-12 00:33:32,174 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e7633]
2021-03-12 00:33:32,265 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:33:32,265 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:33:32,266 [main:117] - GENERATED CALL = (result).replaceFirstChar({a: Char -> '?'})
2021-03-12 00:33:32,267 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:33:32,267 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:33:32,362 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:32,363 [main:117] - GENERATED CALL = (result).length.toString(-1038927702)
2021-03-12 00:33:32,363 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]]
2021-03-12 00:33:32,363 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]
2021-03-12 00:33:32,453 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:32,454 [main:117] - GENERATED CALL = (result).substring(1821552054)
2021-03-12 00:33:32,454 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]]
2021-03-12 00:33:32,454 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]
2021-03-12 00:33:32,568 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:32,569 [main:117] - GENERATED CALL = (result).concat("ltjwz")
2021-03-12 00:33:32,569 [main:113] - Case = [public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4ba512]]
2021-03-12 00:33:32,570 [main:149] - GENERATING call of type public fun kotlin.String.replace(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d4ba512]
2021-03-12 00:33:32,661 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:32,761 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:32,855 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:32,856 [main:117] - GENERATED CALL = (result).replace('쁱', '핲', false)
2021-03-12 00:33:32,856 [main:61] - replacement of "" of type String is (result).substring(1821552054)
2021-03-12 00:33:32,942 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:32,943 [main:66] - Compilation checking started
2021-03-12 00:33:33,314 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:33,315 [main:53] - replacing ("5", String)
2021-03-12 00:33:33,315 [main:50] - replacing "5" String
2021-03-12 00:33:33,315 [main:54] - Getting value of type String
2021-03-12 00:33:33,424 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:33,424 [main:58] - GENERATED VALUE OF TYPE String = "vifzq"
2021-03-12 00:33:33,424 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:33,425 [main:67] - randomType = C
2021-03-12 00:33:33,516 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:33:33,516 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:33:33,521 [main:106] - GETTING String from String
2021-03-12 00:33:33,539 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]]
2021-03-12 00:33:33,539 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]
2021-03-12 00:33:33,539 [main:117] - GENERATED CALL = (unused).toLowerCase()
2021-03-12 00:33:33,539 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b407cf]]
2021-03-12 00:33:33,539 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.slice(indices: kotlin.collections.Iterable<kotlin.Int>): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30b407cf]
2021-03-12 00:33:33,630 [main:302] - generating value of type = Iterable<Int> false depth = 0
2021-03-12 00:33:33,816 [main:43] - GENERATING CALL OF fun <E> HashSet(initialCapacity: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 00:33:33,817 [main:61] - WITHOUT TYPE PARAMS = fun <E> HashSet(initialCapacity: kotlin.Int): Iterable<Int> = TODO()
2021-03-12 00:33:34,018 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:33:34,019 [main:95] - GENERATED = HashSet<Short>(-1429105425)
2021-03-12 00:33:34,019 [main:117] - GENERATED CALL = (unused).slice(HashSet<Short>(-1429105425))
2021-03-12 00:33:34,019 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]]
2021-03-12 00:33:34,019 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]
2021-03-12 00:33:34,020 [main:117] - GENERATED CALL = (unused).replaceIndentByMargin(result, unused)
2021-03-12 00:33:34,020 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc7d6ab]]
2021-03-12 00:33:34,020 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceRange(startIndex: kotlin.Int, endIndex: kotlin.Int, replacement: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3cc7d6ab]
2021-03-12 00:33:34,129 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:34,215 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:34,301 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:34,396 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:33:34,398 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.String): CharSequence = TODO()
2021-03-12 00:33:34,602 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:33:34,603 [main:95] - GENERATED = StringBuilder("dgycx")
2021-03-12 00:33:34,604 [main:117] - GENERATED CALL = (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
2021-03-12 00:33:34,604 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:33:34,604 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:34,710 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:34,804 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:34,804 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:33:34,894 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:34,895 [main:117] - GENERATED CALL = (unused).subSequence(-314705790, 1665508193).repeat(-1701992552)
2021-03-12 00:33:34,895 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]]
2021-03-12 00:33:34,895 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]
2021-03-12 00:33:34,984 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:34,985 [main:117] - GENERATED CALL = (unused).plus("fjcja")
2021-03-12 00:33:34,985 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:33:34,985 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:33:35,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:35,075 [main:117] - GENERATED CALL = (unused).repeat(-239662570)
2021-03-12 00:33:35,075 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:33:35,075 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:33:35,178 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:35,179 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:33:35,286 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:35,287 [main:117] - GENERATED CALL = (unused).compareTo("bnocg").toString(521086242)
2021-03-12 00:33:35,288 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:33:35,288 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:33:35,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:35,388 [main:117] - GENERATED CALL = (unused).length.toString(-1296299039)
2021-03-12 00:33:35,388 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@648dda2f]]
2021-03-12 00:33:35,388 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:35,473 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:35,473 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@648dda2f]
2021-03-12 00:33:35,474 [main:117] - GENERATED CALL = (unused).get(456199914).uppercase()
2021-03-12 00:33:35,474 [main:61] - replacement of "5" of type String is (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
2021-03-12 00:33:35,562 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:35,562 [main:66] - Compilation checking started
2021-03-12 00:33:35,949 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:35,950 [main:53] - replacing (result, String)
2021-03-12 00:33:35,951 [main:50] - replacing result String
2021-03-12 00:33:35,951 [main:54] - Getting value of type String
2021-03-12 00:33:36,088 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:36,089 [main:58] - GENERATED VALUE OF TYPE String = "ezgrx"
2021-03-12 00:33:36,089 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:36,194 [main:67] - randomType = C?
2021-03-12 00:33:36,287 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:33:36,287 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:33:36,295 [main:106] - GETTING String from String
2021-03-12 00:33:36,334 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]]
2021-03-12 00:33:36,334 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]
2021-03-12 00:33:36,335 [main:117] - GENERATED CALL = (result).replaceIndentByMargin(result, unused)
2021-03-12 00:33:36,335 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]]
2021-03-12 00:33:36,335 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]
2021-03-12 00:33:36,438 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:36,438 [main:117] - GENERATED CALL = (result).plus("bynuo")
2021-03-12 00:33:36,439 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]]
2021-03-12 00:33:36,439 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]
2021-03-12 00:33:36,528 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:36,633 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:36,634 [main:117] - GENERATED CALL = (result).padEnd(-1903660945, 'ᛍ')
2021-03-12 00:33:36,634 [main:113] - Case = [public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fdc4eb]]
2021-03-12 00:33:36,634 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfterLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fdc4eb]
2021-03-12 00:33:36,739 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:36,740 [main:117] - GENERATED CALL = (result).replaceAfterLast('倽', unused, unused)
2021-03-12 00:33:36,740 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]]
2021-03-12 00:33:36,740 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]
2021-03-12 00:33:36,854 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:36,854 [main:117] - GENERATED CALL = (result).substring(1023685580)
2021-03-12 00:33:36,855 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53927133]]
2021-03-12 00:33:36,855 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53927133]
2021-03-12 00:33:36,855 [main:117] - GENERATED CALL = (result).trimEnd()
2021-03-12 00:33:36,855 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@428fdf21]]
2021-03-12 00:33:36,855 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:36,958 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:37,049 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:37,049 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.replace(regex: kotlin.text.Regex, noinline transform: (kotlin.text.MatchResult) -> kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@428fdf21]
2021-03-12 00:33:37,140 [main:302] - generating value of type = Regex false depth = 0
2021-03-12 00:33:37,237 [main:43] - GENERATING CALL OF fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:33:37,238 [main:61] - WITHOUT TYPE PARAMS = fun Regex(pattern: kotlin.String, option: kotlin.text.RegexOption): Regex = TODO()
2021-03-12 00:33:37,559 [main:302] - generating value of type = String true depth = 3
2021-03-12 00:33:37,559 [main:302] - generating value of type = RegexOption false depth = 3
2021-03-12 00:33:37,560 [main:95] - GENERATED = Regex("wuaxs", kotlin.text.RegexOption.IGNORE_CASE)
2021-03-12 00:33:37,649 [main:302] - generating value of type = Function1<MatchResult, CharSequence> false depth = 0
2021-03-12 00:33:37,649 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:33:37,654 [main:117] - GENERATED CALL = (result).subSequence(-1716974340, -1752309539).replace(Regex("wuaxs", kotlin.text.RegexOption.IGNORE_CASE), {a: MatchResult -> "aozoo"})
2021-03-12 00:33:37,654 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]]
2021-03-12 00:33:37,654 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]
2021-03-12 00:33:37,741 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:37,742 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:37,742 [main:117] - GENERATED CALL = (result).dropWhile({a: Char -> false})
2021-03-12 00:33:37,742 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]]
2021-03-12 00:33:37,742 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]
2021-03-12 00:33:37,830 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:37,919 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:37,920 [main:117] - GENERATED CALL = (result).padStart(-787339345, '䟁')
2021-03-12 00:33:37,920 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fffa4c]]
2021-03-12 00:33:37,920 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fffa4c]
2021-03-12 00:33:38,061 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:38,163 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:38,164 [main:117] - GENERATED CALL = (result).replaceBeforeLast('㥢', unused, "wlrvk")
2021-03-12 00:33:38,164 [main:61] - replacement of result of type String is (result).dropWhile({a: Char -> false})
2021-03-12 00:33:38,252 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:38,252 [main:66] - Compilation checking started
2021-03-12 00:33:38,539 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            (result).dropWhile({a: Char -> false}) += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:38,540 [main:53] - replacing (result, String)
2021-03-12 00:33:38,540 [main:50] - replacing result String
2021-03-12 00:33:38,540 [main:54] - Getting value of type String
2021-03-12 00:33:38,634 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:38,635 [main:58] - GENERATED VALUE OF TYPE String = "bwzkp"
2021-03-12 00:33:38,635 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:39,438 [main:67] - randomType = Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>>
2021-03-12 00:33:39,541 [main:302] - generating value of type = Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>> false depth = 0
2021-03-12 00:33:39,661 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Sequence<Function1<Double, Long>>, second: UInt?, third: List<C>): Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>> = TODO()
2021-03-12 00:33:39,663 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Sequence<Function1<Double, Long>>, second: UInt?, third: List<C>): Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>> = TODO()
2021-03-12 00:33:39,790 [main:302] - generating value of type = Sequence<Function1<Double, Long>> false depth = 3
2021-03-12 00:33:39,885 [main:43] - GENERATING CALL OF fun <T> sequenceOf(elements: Function1<Double, Long>): Sequence<Function1<Double, Long>> = TODO()
2021-03-12 00:33:39,886 [main:61] - WITHOUT TYPE PARAMS = fun <T> sequenceOf(elements: Function1<Double, Long>): Sequence<Function1<Double, Long>> = TODO()
2021-03-12 00:33:39,977 [main:302] - generating value of type = Function1<Double, Long> false depth = 6
2021-03-12 00:33:39,978 [main:302] - generating value of type = Long true depth = 7
2021-03-12 00:33:39,978 [main:95] - GENERATED = sequenceOf<Function1<Double, Long>>({a: Double -> -4671417813042277896})
2021-03-12 00:33:39,979 [main:302] - generating value of type = UInt true depth = 3
2021-03-12 00:33:39,979 [main:302] - generating value of type = List<C> false depth = 3
2021-03-12 00:33:40,074 [main:43] - GENERATING CALL OF fun <T> emptyList(): List<C> = TODO()
2021-03-12 00:33:40,075 [main:61] - WITHOUT TYPE PARAMS = fun <T> emptyList(): List<C> = TODO()
2021-03-12 00:33:40,214 [main:95] - GENERATED = emptyList<C>()
2021-03-12 00:33:40,215 [main:95] - GENERATED = Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>>(sequenceOf<Function1<Double, Long>>({a: Double -> -4671417813042277896}), 532513761.toUInt(), emptyList<C>())
2021-03-12 00:33:40,254 [main:149] - GENERATING call of type public fun <T> kotlin.sequences.Sequence<T>.joinToString(separator: kotlin.CharSequence = ..., prefix: kotlin.CharSequence = ..., postfix: kotlin.CharSequence = ..., limit: kotlin.Int = ..., truncated: kotlin.CharSequence = ..., transform: ((T) -> kotlin.CharSequence)? = ...): kotlin.String defined in kotlin.sequences[DeserializedSimpleFunctionDescriptor@724dc117]
2021-03-12 00:33:40,347 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:40,443 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:33:40,444 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:33:40,628 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:33:40,628 [main:95] - GENERATED = StringBuilder(1238613614)
2021-03-12 00:33:40,716 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:40,811 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:40,919 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:41,015 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:41,116 [main:302] - generating value of type = Function1<T, CharSequence> false depth = 0
2021-03-12 00:33:41,116 [main:302] - generating value of type = CharSequence false depth = 1
2021-03-12 00:33:41,123 [main:78] - Generated call from random type = (Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>>(sequenceOf<Function1<Double, Long>>({a: Double -> -4671417813042277896}), 532513761.toUInt(), emptyList<C>())).first.joinToString(StringBuilder(1238613614), "ytmls", "wwfvk", 107279421, StringBuilder(), {a: T -> StringBuilder()})
2021-03-12 00:33:41,123 [main:61] - replacement of result of type String is (Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>>(sequenceOf<Function1<Double, Long>>({a: Double -> -4671417813042277896}), 532513761.toUInt(), emptyList<C>())).first.joinToString(StringBuilder(1238613614), "ytmls", "wwfvk", 107279421, StringBuilder(), {a: T -> StringBuilder()})
2021-03-12 00:33:41,218 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:41,218 [main:66] - Compilation checking started
2021-03-12 00:33:41,585 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        (Triple<Sequence<Function1<Double, Long>>, UInt?, List<C>>(sequenceOf<Function1<Double, Long>>({a: Double -> -4671417813042277896}), 532513761.toUInt(), emptyList<C>())).first.joinToString(StringBuilder(1238613614), "ytmls", "wwfvk", 107279421, StringBuilder(), {a: T -> StringBuilder()}) += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:41,586 [main:53] - replacing ("6", String)
2021-03-12 00:33:41,586 [main:50] - replacing "6" String
2021-03-12 00:33:41,586 [main:54] - Getting value of type String
2021-03-12 00:33:41,695 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:41,696 [main:58] - GENERATED VALUE OF TYPE String = "xhwmo"
2021-03-12 00:33:41,696 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:41,817 [main:67] - randomType = C?
2021-03-12 00:33:41,917 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:33:41,918 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:33:41,926 [main:106] - GETTING String from String
2021-03-12 00:33:41,954 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]]
2021-03-12 00:33:41,955 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]
2021-03-12 00:33:42,049 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:42,050 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:42,051 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> true})
2021-03-12 00:33:42,051 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]]
2021-03-12 00:33:42,051 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]
2021-03-12 00:33:42,144 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:42,237 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:42,238 [main:117] - GENERATED CALL = (result).padEnd(-274741798, '友')
2021-03-12 00:33:42,238 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:33:42,239 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:33:42,329 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:42,330 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:42,331 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> false})
2021-03-12 00:33:42,331 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b8d2a4]]
2021-03-12 00:33:42,331 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b8d2a4]
2021-03-12 00:33:42,331 [main:117] - GENERATED CALL = (result).trim()
2021-03-12 00:33:42,331 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@648dda2f]]
2021-03-12 00:33:42,331 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:33:42,430 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:42,430 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@648dda2f]
2021-03-12 00:33:42,431 [main:117] - GENERATED CALL = (result).get(-673783211).uppercase()
2021-03-12 00:33:42,431 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]]
2021-03-12 00:33:42,431 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:42,545 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:42,657 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:42,658 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]
2021-03-12 00:33:42,771 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:42,870 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:42,871 [main:117] - GENERATED CALL = (result).subSequence(1545393655, 1879293022).commonSuffixWith("gzaol", true)
2021-03-12 00:33:42,872 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]]
2021-03-12 00:33:42,872 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]
2021-03-12 00:33:42,872 [main:117] - GENERATED CALL = (result).decapitalize()
2021-03-12 00:33:42,872 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@646a7265]]
2021-03-12 00:33:42,872 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@646a7265]
2021-03-12 00:33:42,965 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:42,966 [main:117] - GENERATED CALL = (result).takeLast(1036802954)
2021-03-12 00:33:42,970 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]]
2021-03-12 00:33:42,970 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]
2021-03-12 00:33:42,971 [main:117] - GENERATED CALL = (result).concat(unused)
2021-03-12 00:33:42,971 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161d132]]
2021-03-12 00:33:42,971 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161d132]
2021-03-12 00:33:42,971 [main:117] - GENERATED CALL = (result).capitalize()
2021-03-12 00:33:42,971 [main:61] - replacement of "6" of type String is "xhwmo"
2021-03-12 00:33:43,067 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:33:43,068 [main:66] - Compilation checking started
2021-03-12 00:33:43,423 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:43,424 [main:53] - replacing ("6", String)
2021-03-12 00:33:43,424 [main:50] - replacing "6" String
2021-03-12 00:33:43,424 [main:54] - Getting value of type String
2021-03-12 00:33:43,540 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:43,540 [main:58] - GENERATED VALUE OF TYPE String = "jptsa"
2021-03-12 00:33:43,541 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:43,641 [main:67] - randomType = Short
2021-03-12 00:33:43,738 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:33:43,798 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Short[DeserializedSimpleFunctionDescriptor@22327c82]
2021-03-12 00:33:43,799 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d90198]
2021-03-12 00:33:43,896 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:43,897 [main:78] - Generated call from random type = (29546).toChar().plus("dlmap")
2021-03-12 00:33:43,897 [main:61] - replacement of "6" of type String is (29546).toChar().plus("dlmap")
2021-03-12 00:33:43,995 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:43,996 [main:53] - replacing (result, String)
2021-03-12 00:33:43,997 [main:50] - replacing result String
2021-03-12 00:33:43,997 [main:54] - Getting value of type String
2021-03-12 00:33:44,098 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:44,098 [main:58] - GENERATED VALUE OF TYPE String = "yrwui"
2021-03-12 00:33:44,098 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:44,196 [main:67] - randomType = UShort
2021-03-12 00:33:44,285 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:33:44,327 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toShort(): kotlin.Short defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@4d286ec0]
2021-03-12 00:33:44,327 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Short.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3783c5c5]
2021-03-12 00:33:44,434 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:44,435 [main:78] - Generated call from random type = (10083.toUShort()).toShort().toString(-1842119863)
2021-03-12 00:33:44,435 [main:106] - GETTING String from String
2021-03-12 00:33:44,464 [main:113] - Case = [public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@491efd78]]
2021-03-12 00:33:44,464 [main:149] - GENERATING call of type public fun kotlin.String.replaceAfter(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@491efd78]
2021-03-12 00:33:44,567 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:44,656 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:44,656 [main:117] - GENERATED CALL = (result).replaceAfter('惄', result, "vmckr")
2021-03-12 00:33:44,656 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0f7a4f]]
2021-03-12 00:33:44,657 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:33:44,745 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:44,835 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:44,836 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.substring(startIndex: kotlin.Int, endIndex: kotlin.Int = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3f0f7a4f]
2021-03-12 00:33:44,928 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:45,022 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:45,023 [main:117] - GENERATED CALL = (result).subSequence(2019839174, -1715859703).substring(-101527264, 197032399)
2021-03-12 00:33:45,023 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]]
2021-03-12 00:33:45,023 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]
2021-03-12 00:33:45,140 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:45,141 [main:117] - GENERATED CALL = (result).plus("rbokt")
2021-03-12 00:33:45,141 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:33:45,141 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:33:45,141 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:33:45,263 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:33:45,264 [main:117] - GENERATED CALL = (result).compareTo(result).toString(177372242)
2021-03-12 00:33:45,264 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e79df6]]
2021-03-12 00:33:45,264 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e79df6]
2021-03-12 00:33:45,357 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:45,358 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:45,359 [main:117] - GENERATED CALL = (result).takeWhile({a: Char -> true})
2021-03-12 00:33:45,359 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]]
2021-03-12 00:33:45,359 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]
2021-03-12 00:33:45,450 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:33:45,545 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:45,546 [main:117] - GENERATED CALL = (result).replaceBefore('α', result, "ibtnc")
2021-03-12 00:33:45,546 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@150ef29c]]
2021-03-12 00:33:45,546 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@150ef29c]
2021-03-12 00:33:45,635 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:33:45,638 [main:117] - GENERATED CALL = (result).removePrefix("twigv")
2021-03-12 00:33:45,638 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:33:45,638 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:33:45,727 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:45,727 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:45,728 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> true})
2021-03-12 00:33:45,728 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]]
2021-03-12 00:33:45,729 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]
2021-03-12 00:33:45,834 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:33:45,835 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:33:45,835 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> false})
2021-03-12 00:33:45,836 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]]
2021-03-12 00:33:45,836 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]
2021-03-12 00:33:45,836 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 00:33:45,836 [main:61] - replacement of result of type String is (result).plus("rbokt")
2021-03-12 00:33:45,942 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:45,943 [main:66] - Compilation checking started
2021-03-12 00:33:46,167 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            (result).plus("rbokt") += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $('').titlecase()"
}


2021-03-12 00:33:46,167 [main:53] - replacing ("OK", String)
2021-03-12 00:33:46,167 [main:50] - replacing "OK" String
2021-03-12 00:33:46,168 [main:54] - Getting value of type String
2021-03-12 00:33:46,268 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:33:46,268 [main:58] - GENERATED VALUE OF TYPE String = "itxlr"
2021-03-12 00:33:46,268 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:46,270 [main:67] - randomType = C
2021-03-12 00:33:46,366 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:33:46,366 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}
2021-03-12 00:33:46,371 [main:61] - replacement of "OK" of type String is "itxlr"
2021-03-12 00:33:46,458 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(STRING_TEMPLATE)
2021-03-12 00:33:46,458 [main:53] - replacing (result == "123456", Boolean)
2021-03-12 00:33:46,458 [main:50] - replacing result == "123456" Boolean
2021-03-12 00:33:46,458 [main:54] - Getting value of type Boolean
2021-03-12 00:33:46,544 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:33:46,545 [main:58] - GENERATED VALUE OF TYPE Boolean = true
2021-03-12 00:33:46,545 [main:61] - GENERATED IS CALL =false
2021-03-12 00:33:46,546 [main:67] - randomType = C
2021-03-12 00:33:46,644 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:33:46,645 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}
2021-03-12 00:33:46,649 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@47e1aa3e]
2021-03-12 00:33:46,737 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:33:46,738 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11a309d4]
2021-03-12 00:33:46,738 [main:78] - Generated call from random type = (C()).equals("popaw").not()
2021-03-12 00:33:46,738 [main:61] - replacement of result == "123456" of type Boolean is (C()).equals("popaw").not()
2021-03-12 00:33:46,826 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:46,913 [main:119] - TRYING TO REPLACE CONSTANT ''
2021-03-12 00:33:47,000 [main:33] - Trying to replace Element(CHARACTER_CONSTANT) on Element(PARENTHESIZED)
2021-03-12 00:33:47,000 [main:66] - Compilation checking started
2021-03-12 00:33:47,339 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast(2046796181) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:47,340 [main:119] - TRYING TO REPLACE CONSTANT 2046796181
2021-03-12 00:33:47,427 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:47,427 [main:66] - Compilation checking started
2021-03-12 00:33:47,754 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(455575378, 1481414576).any()) (result).dropLast("".length) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:47,754 [main:119] - TRYING TO REPLACE CONSTANT 455575378
2021-03-12 00:33:47,842 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:33:47,843 [main:66] - Compilation checking started
2021-03-12 00:33:48,136 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(1237161327, 1481414576).any()) (result).dropLast("".length) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:48,136 [main:119] - TRYING TO REPLACE CONSTANT 1481414576
2021-03-12 00:33:48,228 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(INTEGER_CONSTANT)
2021-03-12 00:33:48,228 [main:66] - Compilation checking started
2021-03-12 00:33:48,528 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring(1821552054))
    return if ((result).subSequence(1237161327, 1).any()) (result).dropLast("".length) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:48,528 [main:119] - TRYING TO REPLACE CONSTANT 1821552054
2021-03-12 00:33:48,617 [main:33] - Trying to replace Element(INTEGER_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:33:48,617 [main:66] - Compilation checking started
2021-03-12 00:33:48,944 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring("".length))
    return if ((result).subSequence(1237161327, 1).any()) (result).dropLast("".length) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:48,945 [main:119] - TRYING TO REPLACE CONSTANT 1237161327
2021-03-12 00:33:49,039 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(REFERENCE_EXPRESSION)
2021-03-12 00:33:49,040 [main:66] - Compilation checking started
2021-03-12 00:33:49,311 [main:49] - Result = false
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(length, -1418348609, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring("".length))
    return if ((result).subSequence(1237161327, 1).any()) (result).dropLast("".length) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:49,312 [main:119] - TRYING TO REPLACE CONSTANT 1418348609
2021-03-12 00:33:49,429 [main:33] - Trying to replace Element(PREFIX_EXPRESSION) on Element(INTEGER_CONSTANT)
2021-03-12 00:33:49,430 [main:66] - Compilation checking started
2021-03-12 00:33:49,767 [main:53] - Result = true
Text:
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += unused
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += (unused).replaceRange(-1237161327, 1, StringBuilder("dgycx"))
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "xhwmo"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload((result).substring("".length))
    return if ((result).subSequence(1237161327, 1).any()) (result).dropLast("".length) else "Fail: $(('')).titlecase()"
}


2021-03-12 00:33:49,789 [main:41] - AFTER TRY 0 res = var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}
2021-03-12 00:33:49,959 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:33:50,135 [main:43] - GENERATING CALL OF fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}
2021-03-12 00:33:50,135 [main:61] - WITHOUT TYPE PARAMS = fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}
2021-03-12 00:33:50,234 [main:302] - generating value of type = String true depth = 1
2021-03-12 00:33:50,235 [main:95] - GENERATED = overload("kabyh")
2021-03-12 00:33:50,320 [main:43] - Try №0
2021-03-12 00:34:04,424 [main:48] - Already checked
2021-03-12 00:34:08,373 [main:69] - Trying to insert abstract fun resume(value: Ty0)
2021-03-12 00:34:08,498 [main:66] - Compilation checking started
2021-03-12 00:34:09,622 [main:103] - Trying to change 209 nodes
2021-03-12 00:34:09,623 [main:107] - replacing (prope2, String)
2021-03-12 00:34:09,624 [main:50] - replacing prope2 String
2021-03-12 00:34:09,624 [main:54] - Getting value of type String
2021-03-12 00:34:09,827 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:09,831 [main:58] - GENERATED VALUE OF TYPE String = "mjouf"
2021-03-12 00:34:09,831 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:10,185 [main:67] - randomType = UInt?
2021-03-12 00:34:10,354 [main:302] - generating value of type = UInt true depth = 0
2021-03-12 00:34:10,402 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toUByte(): kotlin.UByte defined in kotlin.UInt[DeserializedSimpleFunctionDescriptor@2b2b69f]
2021-03-12 00:34:10,403 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalUnsignedTypes public fun kotlin.UByte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2b728ff1]
2021-03-12 00:34:10,557 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:10,559 [main:78] - Generated call from random type = (397306678.toUInt())?.toUByte().toString(-224788696)
2021-03-12 00:34:10,560 [main:106] - GETTING String from String
2021-03-12 00:34:10,591 [main:113] - Case = [public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]]
2021-03-12 00:34:10,591 [main:149] - GENERATING call of type public fun kotlin.String.padEnd(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@718cb827]
2021-03-12 00:34:10,737 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:10,920 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:10,923 [main:117] - GENERATED CALL = (result).padEnd(1049287488, '顮')
2021-03-12 00:34:10,923 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]]
2021-03-12 00:34:10,923 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]
2021-03-12 00:34:11,074 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:11,076 [main:117] - GENERATED CALL = (result).substring(1314805657)
2021-03-12 00:34:11,076 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5878e6]]
2021-03-12 00:34:11,076 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.uppercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f5878e6]
2021-03-12 00:34:11,077 [main:117] - GENERATED CALL = (result).uppercase()
2021-03-12 00:34:11,077 [main:113] - Case = [public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161d132]]
2021-03-12 00:34:11,077 [main:149] - GENERATING call of type public fun kotlin.String.capitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@161d132]
2021-03-12 00:34:11,077 [main:117] - GENERATED CALL = (result).capitalize()
2021-03-12 00:34:11,077 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a878e]]
2021-03-12 00:34:11,077 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:11,243 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:11,245 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a878e]
2021-03-12 00:34:11,246 [main:117] - GENERATED CALL = (result).get(-2097505846).titlecase()
2021-03-12 00:34:11,246 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]]
2021-03-12 00:34:11,246 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]
2021-03-12 00:34:11,405 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:11,556 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:11,559 [main:117] - GENERATED CALL = (result).substringBefore('ຆ', "omaci")
2021-03-12 00:34:11,559 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d90198]]
2021-03-12 00:34:11,559 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:11,707 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:11,710 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline operator fun kotlin.Char.plus(other: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@72d90198]
2021-03-12 00:34:11,710 [main:117] - GENERATED CALL = (result).get(-1210222035).plus(var result =
2021-03-12 00:34:11,711 [main:113] - Case = [public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]]
2021-03-12 00:34:11,711 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]
2021-03-12 00:34:11,878 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:12,094 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:12,097 [main:117] - GENERATED CALL = (result).commonSuffixWith("ogsqd", true)
2021-03-12 00:34:12,097 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]]
2021-03-12 00:34:12,097 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]
2021-03-12 00:34:12,250 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:12,253 [main:117] - GENERATED CALL = (result).replaceBefore('?', var result =
2021-03-12 00:34:12,253 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b8d2a4]]
2021-03-12 00:34:12,253 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b8d2a4]
2021-03-12 00:34:12,254 [main:117] - GENERATED CALL = (result).trim()
2021-03-12 00:34:12,254 [main:114] - replacement of prope2 of type String is (result).substring(1314805657)
2021-03-12 00:34:12,394 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:12,394 [main:66] - Compilation checking started
2021-03-12 00:34:13,102 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:13,106 [main:107] - replacing (prope2, String)
2021-03-12 00:34:13,106 [main:50] - replacing prope2 String
2021-03-12 00:34:13,106 [main:54] - Getting value of type String
2021-03-12 00:34:13,256 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:13,259 [main:58] - GENERATED VALUE OF TYPE String = "gnutv"
2021-03-12 00:34:13,259 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:13,268 [main:67] - randomType = Kla8
2021-03-12 00:34:13,445 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 00:34:13,447 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:34:13,459 [main:106] - GETTING String from String
2021-03-12 00:34:13,493 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:34:13,493 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:13,493 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:34:13,635 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:13,638 [main:117] - GENERATED CALL = (result).compareTo(var result =.toString(-375134418)
2021-03-12 00:34:13,638 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:34:13,638 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:34:13,774 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:13,777 [main:117] - GENERATED CALL = (result).repeat(-1177126900)
2021-03-12 00:34:13,777 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:34:13,777 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:34:13,917 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:34:13,920 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:34:13,922 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> false})
2021-03-12 00:34:13,922 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b8d2a4]]
2021-03-12 00:34:13,922 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trim(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78b8d2a4]
2021-03-12 00:34:13,923 [main:117] - GENERATED CALL = (result).trim()
2021-03-12 00:34:13,923 [main:113] - Case = [public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39981e43]]
2021-03-12 00:34:13,923 [main:149] - GENERATING call of type public fun kotlin.String.prependIndent(indent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39981e43]
2021-03-12 00:34:13,923 [main:117] - GENERATED CALL = (result).prependIndent(var result =
2021-03-12 00:34:13,923 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30d8305c]]
2021-03-12 00:34:13,923 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimStart(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@30d8305c]
2021-03-12 00:34:13,923 [main:117] - GENERATED CALL = (result).trimStart()
2021-03-12 00:34:13,923 [main:113] - Case = [public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]]
2021-03-12 00:34:13,923 [main:149] - GENERATING call of type public fun kotlin.String.replaceBefore(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@27bb1276]
2021-03-12 00:34:14,056 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:14,059 [main:117] - GENERATED CALL = (result).replaceBefore('ꚋ', result, result)
2021-03-12 00:34:14,060 [main:113] - Case = [public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4337879d]]
2021-03-12 00:34:14,060 [main:149] - GENERATING call of type public fun kotlin.String.replaceFirst(oldChar: kotlin.Char, newChar: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4337879d]
2021-03-12 00:34:14,214 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:14,358 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:14,528 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:14,531 [main:117] - GENERATED CALL = (result).replaceFirst('ߖ', 'ꎉ', false)
2021-03-12 00:34:14,531 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4863fc0a]]
2021-03-12 00:34:14,531 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.removeRange(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4863fc0a]
2021-03-12 00:34:14,666 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:14,805 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:14,808 [main:117] - GENERATED CALL = (result).removeRange(-1579821958, 74473740)
2021-03-12 00:34:14,808 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]]
2021-03-12 00:34:14,808 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]
2021-03-12 00:34:14,808 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 00:34:14,808 [main:114] - replacement of prope2 of type String is (result).compareTo(var result =.toString(-375134418)
2021-03-12 00:34:14,945 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 00:34:14,946 [main:66] - Compilation checking started
2021-03-12 00:34:14,951 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:34:14,951 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        (result).compareTo(var result =.toString(-375134418) = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:14,953 [main:107] - replacing (s, Long)
2021-03-12 00:34:14,953 [main:50] - replacing s Long
2021-03-12 00:34:14,953 [main:54] - Getting value of type Long
2021-03-12 00:34:15,087 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:15,089 [main:58] - GENERATED VALUE OF TYPE Long = 6246393468562635765
2021-03-12 00:34:15,089 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:15,094 [main:67] - randomType = Int
2021-03-12 00:34:15,230 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:15,276 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 00:34:15,441 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:15,444 [main:78] - Generated call from random type = (1369259420).rem(933167026502319791)
2021-03-12 00:34:15,445 [main:106] - GETTING Long from C
2021-03-12 00:34:15,452 [main:106] - GETTING Long from String
2021-03-12 00:34:15,486 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]]
2021-03-12 00:34:15,486 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]
2021-03-12 00:34:15,486 [main:117] - GENERATED CALL = (result).length.toLong()
2021-03-12 00:34:15,486 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]]
2021-03-12 00:34:15,486 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:15,617 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:15,620 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]
2021-03-12 00:34:15,758 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:15,762 [main:117] - GENERATED CALL = (result).compareTo("sjvlg").div(5020077606732120584)
2021-03-12 00:34:15,762 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]]
2021-03-12 00:34:15,762 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]
2021-03-12 00:34:15,892 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:15,894 [main:117] - GENERATED CALL = (result).length.plus(-7890718411317233015)
2021-03-12 00:34:15,894 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]]
2021-03-12 00:34:15,894 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:15,895 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]
2021-03-12 00:34:16,022 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:16,024 [main:117] - GENERATED CALL = (result).compareTo(result).minus(5469544060181669345)
2021-03-12 00:34:16,024 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]]
2021-03-12 00:34:16,024 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:16,025 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]
2021-03-12 00:34:16,154 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:16,156 [main:117] - GENERATED CALL = (result).compareTo(result).times(-1256615708437156915)
2021-03-12 00:34:16,157 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]]
2021-03-12 00:34:16,157 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]
2021-03-12 00:34:16,314 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:16,317 [main:117] - GENERATED CALL = (result).length.div(-2420707674175664162)
2021-03-12 00:34:16,317 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]]
2021-03-12 00:34:16,317 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:16,465 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:16,606 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:16,608 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]
2021-03-12 00:34:16,739 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 00:34:16,742 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:34:16,744 [main:117] - GENERATED CALL = (result).subSequence(975131193, 1036765620).sumOf({a: Char -> -9130403878994431964})
2021-03-12 00:34:16,744 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 00:34:16,745 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 00:34:16,882 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:16,884 [main:117] - GENERATED CALL = (result).length.rem(8773664397368711618)
2021-03-12 00:34:16,885 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]]
2021-03-12 00:34:16,885 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]
2021-03-12 00:34:17,012 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:17,015 [main:117] - GENERATED CALL = (result).length.times(-3211640769179901503)
2021-03-12 00:34:17,015 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]]
2021-03-12 00:34:17,015 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]
2021-03-12 00:34:17,168 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:17,170 [main:117] - GENERATED CALL = (result).length.minus(-3284863063439048114)
2021-03-12 00:34:17,170 [main:114] - replacement of s of type Long is (1369259420).rem(933167026502319791)
2021-03-12 00:34:17,312 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:17,312 [main:66] - Compilation checking started
2021-03-12 00:34:17,717 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().(1369259420).rem(933167026502319791)
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:17,720 [main:107] - replacing (prope2, Result<Ty0>)
2021-03-12 00:34:17,720 [main:50] - replacing prope2 Result<Ty0>
2021-03-12 00:34:17,720 [main:54] - Getting value of type Result<Ty0>
2021-03-12 00:34:17,851 [main:302] - generating value of type = Result<Ty0> false depth = 0
2021-03-12 00:34:17,994 [main:43] - GENERATING CALL OF fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:34:17,998 [main:61] - WITHOUT TYPE PARAMS = fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:34:18,337 [main:385] - Cant generate call of fun <R> runCatching(block: ()->Ty0): Result<Ty0> = TODO()
2021-03-12 00:34:18,337 [main:58] - GENERATED VALUE OF TYPE Result<Ty0> = 
2021-03-12 00:34:18,490 [main:67] - randomType = Char
2021-03-12 00:34:18,631 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:18,660 [main:106] - GETTING Result<Ty0> from C
2021-03-12 00:34:18,668 [main:106] - GETTING Result<Ty0> from String
2021-03-12 00:34:18,689 [main:111] - Cant find and generate replacement for prope2 type Result<Ty0>
2021-03-12 00:34:18,689 [main:107] - replacing (t, Ty0)
2021-03-12 00:34:18,689 [main:50] - replacing t Ty0
2021-03-12 00:34:18,689 [main:54] - Getting value of type Ty0
2021-03-12 00:34:18,819 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 00:34:18,825 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 00:34:18,975 [main:67] - randomType = Short
2021-03-12 00:34:19,110 [main:302] - generating value of type = Short true depth = 0
2021-03-12 00:34:19,148 [main:106] - GETTING Ty0 from String
2021-03-12 00:34:19,167 [main:106] - GETTING Ty0 from C
2021-03-12 00:34:19,171 [main:111] - Cant find and generate replacement for t type Ty0
2021-03-12 00:34:19,171 [main:107] - replacing (prope2, String)
2021-03-12 00:34:19,171 [main:50] - replacing prope2 String
2021-03-12 00:34:19,171 [main:54] - Getting value of type String
2021-03-12 00:34:19,300 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:19,303 [main:58] - GENERATED VALUE OF TYPE String = "xpplo"
2021-03-12 00:34:19,303 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:19,475 [main:67] - randomType = Float
2021-03-12 00:34:19,602 [main:302] - generating value of type = Float true depth = 0
2021-03-12 00:34:19,632 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@2c6fc104]
2021-03-12 00:34:19,633 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a878e]
2021-03-12 00:34:19,633 [main:78] - Generated call from random type = (0.13086843f).toChar().titlecase()
2021-03-12 00:34:19,633 [main:106] - GETTING String from String
2021-03-12 00:34:19,649 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a610386]]
2021-03-12 00:34:19,649 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a610386]
2021-03-12 00:34:19,649 [main:117] - GENERATED CALL = (result).reversed()
2021-03-12 00:34:19,649 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]]
2021-03-12 00:34:19,649 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]
2021-03-12 00:34:19,779 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:19,781 [main:117] - GENERATED CALL = (result).substring(1770985913)
2021-03-12 00:34:19,782 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]]
2021-03-12 00:34:19,782 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]
2021-03-12 00:34:19,782 [main:117] - GENERATED CALL = (result).replaceIndentByMargin(result, var result =
2021-03-12 00:34:19,782 [main:113] - Case = [public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8d8c209]]
2021-03-12 00:34:19,782 [main:149] - GENERATING call of type public fun kotlin.String.trimIndent(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@8d8c209]
2021-03-12 00:34:19,782 [main:117] - GENERATED CALL = (result).trimIndent()
2021-03-12 00:34:19,782 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:34:19,782 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:19,915 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:20,046 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:20,049 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:34:20,179 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:20,182 [main:117] - GENERATED CALL = (result).subSequence(-931992596, 697331103).repeat(-704635230)
2021-03-12 00:34:20,182 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aba6d1c]]
2021-03-12 00:34:20,182 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:20,314 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:20,446 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:20,449 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aba6d1c]
2021-03-12 00:34:20,608 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:20,767 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:34:20,770 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:34:21,053 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:34:21,190 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:34:21,194 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:34:21,481 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:34:21,484 [main:95] - GENERATED = StringBuilder(1243913471)
2021-03-12 00:34:21,484 [main:95] - GENERATED = StringBuilder(StringBuilder(1243913471))
2021-03-12 00:34:21,633 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:21,636 [main:117] - GENERATED CALL = (result).subSequence(-42973456, -588039759).commonPrefixWith(StringBuilder(StringBuilder(1243913471)), true)
2021-03-12 00:34:21,636 [main:113] - Case = [public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]]
2021-03-12 00:34:21,636 [main:149] - GENERATING call of type public inline fun kotlin.String.takeLastWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@68b8bdd4]
2021-03-12 00:34:21,774 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:34:21,776 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:34:21,779 [main:117] - GENERATED CALL = (result).takeLastWhile({a: Char -> true})
2021-03-12 00:34:21,779 [main:113] - Case = [public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]]
2021-03-12 00:34:21,779 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Any?): kotlin.String defined in kotlin.String[DeserializedSimpleFunctionDescriptor@77ba34da]
2021-03-12 00:34:21,929 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:21,930 [main:117] - GENERATED CALL = (result).plus("sjmml")
2021-03-12 00:34:21,930 [main:113] - Case = [public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d6364]]
2021-03-12 00:34:21,930 [main:149] - GENERATING call of type public fun kotlin.String.removeSuffix(suffix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@304d6364]
2021-03-12 00:34:22,077 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:22,085 [main:117] - GENERATED CALL = (result).removeSuffix("jxdzu")
2021-03-12 00:34:22,085 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]]
2021-03-12 00:34:22,085 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]
2021-03-12 00:34:22,213 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:22,215 [main:117] - GENERATED CALL = (result).substringAfter('㪗', result)
2021-03-12 00:34:22,215 [main:114] - replacement of prope2 of type String is (result).plus("sjmml")
2021-03-12 00:34:22,343 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:22,343 [main:66] - Compilation checking started
2021-03-12 00:34:22,721 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0(ss.s)

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        (result).plus("sjmml") = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:22,724 [main:107] - replacing (ss.s, Long)
2021-03-12 00:34:22,724 [main:50] - replacing ss.s Long
2021-03-12 00:34:22,724 [main:54] - Getting value of type Long
2021-03-12 00:34:22,874 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:22,877 [main:58] - GENERATED VALUE OF TYPE Long = 3322963826448693625
2021-03-12 00:34:22,877 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:23,031 [main:67] - randomType = UShort
2021-03-12 00:34:23,164 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:34:23,193 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.UShort[DeserializedSimpleFunctionDescriptor@79522cf5]
2021-03-12 00:34:23,193 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Byte[DeserializedSimpleFunctionDescriptor@20a0dbfa]
2021-03-12 00:34:23,320 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:23,322 [main:78] - Generated call from random type = (6292.toUShort()).toByte().plus(-4999251203161151582)
2021-03-12 00:34:23,323 [main:106] - GETTING Long from String
2021-03-12 00:34:23,342 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 00:34:23,342 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:23,343 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 00:34:23,489 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:23,491 [main:117] - GENERATED CALL = (result).compareTo(result).rem(3771066351374021174)
2021-03-12 00:34:23,491 [main:113] - Case = [public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df57c84]]
2021-03-12 00:34:23,491 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df57c84]
2021-03-12 00:34:23,492 [main:117] - GENERATED CALL = (result).toLong()
2021-03-12 00:34:23,492 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]]
2021-03-12 00:34:23,492 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:23,492 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]
2021-03-12 00:34:23,627 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:23,630 [main:117] - GENERATED CALL = (result).compareTo(var result =.plus(-7170398649083264643)
2021-03-12 00:34:23,630 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]]
2021-03-12 00:34:23,630 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]
2021-03-12 00:34:23,763 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 00:34:23,765 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:34:23,768 [main:117] - GENERATED CALL = (result).sumOf({a: Char -> 1889490886516676602})
2021-03-12 00:34:23,768 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]]
2021-03-12 00:34:23,768 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:23,768 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]
2021-03-12 00:34:23,900 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:23,903 [main:117] - GENERATED CALL = (result).compareTo(result).minus(7289828684213160217)
2021-03-12 00:34:23,903 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]]
2021-03-12 00:34:23,903 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:23,903 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]
2021-03-12 00:34:23,903 [main:117] - GENERATED CALL = (result).compareTo(result).toLong()
2021-03-12 00:34:23,903 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]]
2021-03-12 00:34:23,903 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]
2021-03-12 00:34:24,075 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:24,078 [main:117] - GENERATED CALL = (result).length.plus(2563083553609537679)
2021-03-12 00:34:24,078 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]]
2021-03-12 00:34:24,078 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]
2021-03-12 00:34:24,078 [main:117] - GENERATED CALL = (result).length.toLong()
2021-03-12 00:34:24,078 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a2743c9]]
2021-03-12 00:34:24,078 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:24,217 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:24,220 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a2743c9]
2021-03-12 00:34:24,220 [main:117] - GENERATED CALL = (result).get(-437626865).toLong()
2021-03-12 00:34:24,220 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]]
2021-03-12 00:34:24,220 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]
2021-03-12 00:34:24,346 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:24,348 [main:117] - GENERATED CALL = (result).length.div(6033338997686944899)
2021-03-12 00:34:24,348 [main:114] - replacement of ss.s of type Long is (result).compareTo(result).minus(7289828684213160217)
2021-03-12 00:34:24,474 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:24,475 [main:66] - Compilation checking started
2021-03-12 00:34:25,136 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:25,139 [main:107] - replacing (prope5, Boolean)
2021-03-12 00:34:25,139 [main:50] - replacing prope5 Boolean
2021-03-12 00:34:25,139 [main:54] - Getting value of type Boolean
2021-03-12 00:34:25,273 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:25,275 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:34:25,275 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:25,437 [main:67] - randomType = ArrayList<Kla3>
2021-03-12 00:34:25,579 [main:302] - generating value of type = ArrayList<Kla3> false depth = 0
2021-03-12 00:34:25,712 [main:43] - GENERATING CALL OF fun <T> arrayListOf(elements: Kla3): ArrayList<Kla3> = TODO()
2021-03-12 00:34:25,715 [main:61] - WITHOUT TYPE PARAMS = fun <T> arrayListOf(elements: Kla3): ArrayList<Kla3> = TODO()
2021-03-12 00:34:25,846 [main:302] - generating value of type = Kla3 false depth = 3
2021-03-12 00:34:25,848 [main:112] - generating klass Kla3 text = class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 00:34:25,848 [main:95] - GENERATED = arrayListOf<Kla3>(Kla3())
2021-03-12 00:34:26,006 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.collections.ArrayList[DeserializedSimpleFunctionDescriptor@2fa00c4e]
2021-03-12 00:34:26,149 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:26,149 [main:78] - Generated call from random type = (arrayListOf<Kla3>(Kla3())).equals("lyxti")
2021-03-12 00:34:26,151 [main:106] - GETTING Boolean from String
2021-03-12 00:34:26,176 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d3655ba]]
2021-03-12 00:34:26,176 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d3655ba]
2021-03-12 00:34:26,313 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:26,444 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:26,447 [main:117] - GENERATED CALL = (result).startsWith("bnxsm", false)
2021-03-12 00:34:26,447 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ef6c74f]]
2021-03-12 00:34:26,447 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:26,589 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:26,756 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:26,758 [main:149] - GENERATING call of type public fun kotlin.CharSequence.startsWith(char: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4ef6c74f]
2021-03-12 00:34:26,910 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:27,041 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:27,044 [main:117] - GENERATED CALL = (result).subSequence(-1915858320, 155206379).startsWith('咐', false)
2021-03-12 00:34:27,044 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b608d0f]]
2021-03-12 00:34:27,044 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:27,173 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:27,306 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:27,309 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.isNotBlank(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1b608d0f]
2021-03-12 00:34:27,309 [main:117] - GENERATED CALL = (result).subSequence(1962592987, -125942521).isNotBlank()
2021-03-12 00:34:27,309 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f11f3e9]]
2021-03-12 00:34:27,309 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:27,440 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:27,570 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:27,573 [main:149] - GENERATING call of type public fun kotlin.CharSequence.hasSurrogatePairAt(index: kotlin.Int): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2f11f3e9]
2021-03-12 00:34:27,699 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:27,702 [main:117] - GENERATED CALL = (result).subSequence(2100411213, 2044339444).hasSurrogatePairAt(1109780056)
2021-03-12 00:34:27,702 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5081b28e]]
2021-03-12 00:34:27,702 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:27,859 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:27,861 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5081b28e]
2021-03-12 00:34:27,861 [main:117] - GENERATED CALL = (result).get(95795436).isLetterOrDigit()
2021-03-12 00:34:27,862 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156e3dce]]
2021-03-12 00:34:27,862 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156e3dce]
2021-03-12 00:34:28,004 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:28,004 [main:117] - GENERATED CALL = (result).length.equals("ywese")
2021-03-12 00:34:28,004 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a09321]]
2021-03-12 00:34:28,004 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:28,147 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:28,149 [main:149] - GENERATING call of type public fun kotlin.Char.equals(other: kotlin.Char, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@37a09321]
2021-03-12 00:34:28,278 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:28,411 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:28,414 [main:117] - GENERATED CALL = (result).get(-899010622).equals('맶', false)
2021-03-12 00:34:28,414 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28d37c1d]]
2021-03-12 00:34:28,414 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:28,541 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:28,669 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:28,672 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28d37c1d]
2021-03-12 00:34:28,672 [main:117] - GENERATED CALL = (result).subSequence(1753978575, 686001903).none()
2021-03-12 00:34:28,672 [main:113] - Case = [public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a16462]]
2021-03-12 00:34:28,672 [main:149] - GENERATING call of type public fun kotlin.String.endsWith(suffix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a16462]
2021-03-12 00:34:28,798 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:28,800 [main:117] - GENERATED CALL = (result).endsWith(result, false)
2021-03-12 00:34:28,800 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d189da0]]
2021-03-12 00:34:28,800 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:28,959 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:28,963 [main:149] - GENERATING call of type public fun kotlin.Char.isDefined(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7d189da0]
2021-03-12 00:34:28,963 [main:117] - GENERATED CALL = (result).get(-507882093).isDefined()
2021-03-12 00:34:28,972 [main:114] - replacement of prope5 of type Boolean is (result).endsWith(result, false)
2021-03-12 00:34:29,113 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:29,113 [main:66] - Compilation checking started
2021-03-12 00:34:29,651 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.(result).endsWith(result, false) = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:29,654 [main:107] - replacing (s, Long)
2021-03-12 00:34:29,654 [main:50] - replacing s Long
2021-03-12 00:34:29,654 [main:54] - Getting value of type Long
2021-03-12 00:34:29,787 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:29,790 [main:58] - GENERATED VALUE OF TYPE Long = 3784628419791411375
2021-03-12 00:34:29,790 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:29,952 [main:67] - randomType = ArrayDeque<Kla4>
2021-03-12 00:34:30,083 [main:302] - generating value of type = ArrayDeque<Kla4> false depth = 0
2021-03-12 00:34:30,219 [main:43] - GENERATING CALL OF fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla4>): ArrayDeque<Kla4> = TODO()
2021-03-12 00:34:30,222 [main:61] - WITHOUT TYPE PARAMS = fun <E> ArrayDeque(elements: kotlin.collections.Collection<Kla4>): ArrayDeque<Kla4> = TODO()
2021-03-12 00:34:30,528 [main:302] - generating value of type = Collection<Kla4> false depth = 3
2021-03-12 00:34:30,662 [main:43] - GENERATING CALL OF fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Kla4>.()->kotlin.Unit): Collection<Kla4> = TODO()
2021-03-12 00:34:30,665 [main:61] - WITHOUT TYPE PARAMS = fun <E> buildSet(builderAction: kotlin.collections.MutableSet<Kla4>.()->kotlin.Unit): Collection<Kla4> = TODO()
2021-03-12 00:34:30,951 [main:302] - generating value of type = [@kotlin.ExtensionFunctionType] Function1<MutableSet<Kla4>, Unit> false depth = 6
2021-03-12 00:34:30,953 [main:302] - generating value of type = Unit false depth = 7
2021-03-12 00:34:31,085 [main:43] - GENERATING CALL OF fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:34:31,088 [main:61] - WITHOUT TYPE PARAMS = fun repeat(times: kotlin.Int, action: (kotlin.Int)->kotlin.Unit): Unit = TODO()
2021-03-12 00:34:31,504 [main:302] - generating value of type = Int true depth = 10
2021-03-12 00:34:31,506 [main:302] - generating value of type = Function1<Int, Unit> false depth = 10
2021-03-12 00:34:31,508 [main:302] - generating value of type = Unit false depth = 11
2021-03-12 00:34:31,692 [main:43] - GENERATING CALL OF fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:34:31,696 [main:61] - WITHOUT TYPE PARAMS = fun require(value: kotlin.Boolean, lazyMessage: ()->kotlin.Any): Unit = TODO()
2021-03-12 00:34:32,129 [main:302] - generating value of type = Boolean true depth = 14
2021-03-12 00:34:32,132 [main:302] - generating value of type = Function0<Any> false depth = 14
2021-03-12 00:34:32,134 [main:302] - generating value of type = Any false depth = 15
2021-03-12 00:34:32,134 [main:95] - GENERATED = require(true, { "wlban"})
2021-03-12 00:34:32,135 [main:95] - GENERATED = repeat(-656864699, {a: Int -> require(true, { "wlban"})})
2021-03-12 00:34:32,135 [main:95] - GENERATED = buildSet<Kla4>({ repeat(-656864699, {a: Int -> require(true, { "wlban"})})})
2021-03-12 00:34:32,135 [main:95] - GENERATED = ArrayDeque<Kla4>(buildSet<Kla4>({ repeat(-656864699, {a: Int -> require(true, { "wlban"})})}))
2021-03-12 00:34:32,323 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]
2021-03-12 00:34:32,453 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:32,456 [main:78] - Generated call from random type = (ArrayDeque<Kla4>(buildSet<Kla4>({ repeat(-656864699, {a: Int -> require(true, { "wlban"})})}))).size.times(1134514363949098366)
2021-03-12 00:34:32,457 [main:106] - GETTING Long from C
2021-03-12 00:34:32,462 [main:106] - GETTING Long from String
2021-03-12 00:34:32,482 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]]
2021-03-12 00:34:32,483 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]
2021-03-12 00:34:32,609 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 00:34:32,611 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:34:32,614 [main:117] - GENERATED CALL = (result).sumOf({a: Char -> 2176776586392006212})
2021-03-12 00:34:32,614 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a2743c9]]
2021-03-12 00:34:32,614 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:32,739 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:32,741 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a2743c9]
2021-03-12 00:34:32,741 [main:117] - GENERATED CALL = (result).get(-1901123503).toLong()
2021-03-12 00:34:32,741 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 00:34:32,741 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 00:34:32,869 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:32,871 [main:117] - GENERATED CALL = (result).length.rem(7531085191943044823)
2021-03-12 00:34:32,871 [main:113] - Case = [public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df57c84]]
2021-03-12 00:34:32,871 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df57c84]
2021-03-12 00:34:32,871 [main:117] - GENERATED CALL = (result).toLong()
2021-03-12 00:34:32,871 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]]
2021-03-12 00:34:32,871 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:32,872 [main:149] - GENERATING call of type @kotlin.SinceKotlin public final operator fun rem(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@4cc5d71d]
2021-03-12 00:34:33,026 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:33,028 [main:117] - GENERATED CALL = (result).compareTo(var result =.rem(359099272813112620)
2021-03-12 00:34:33,028 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]]
2021-03-12 00:34:33,028 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]
2021-03-12 00:34:33,156 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:33,159 [main:117] - GENERATED CALL = (result).length.minus(-4934997155802497995)
2021-03-12 00:34:33,159 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]]
2021-03-12 00:34:33,159 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:33,159 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]
2021-03-12 00:34:33,288 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:33,290 [main:117] - GENERATED CALL = (result).compareTo(var result =.div(-7404228549122255538)
2021-03-12 00:34:33,290 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]]
2021-03-12 00:34:33,290 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]
2021-03-12 00:34:33,417 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:33,420 [main:117] - GENERATED CALL = (result).length.div(490565238365213032)
2021-03-12 00:34:33,420 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]]
2021-03-12 00:34:33,420 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:33,420 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]
2021-03-12 00:34:33,544 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:33,547 [main:117] - GENERATED CALL = (result).compareTo(var result =.minus(904592891134641886)
2021-03-12 00:34:33,547 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]]
2021-03-12 00:34:33,547 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:33,681 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:33,685 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]
2021-03-12 00:34:33,820 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:33,823 [main:117] - GENERATED CALL = (result).compareTo("syxad").plus(-1231002468479747034)
2021-03-12 00:34:33,823 [main:114] - replacement of s of type Long is (result).compareTo(var result =.div(-7404228549122255538)
2021-03-12 00:34:33,963 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(BINARY_EXPRESSION)
2021-03-12 00:34:33,964 [main:66] - Compilation checking started
2021-03-12 00:34:33,969 [main:71] - Wrong syntax or breaks conditions
2021-03-12 00:34:33,969 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().(result).compareTo(var result =.div(-7404228549122255538)
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:33,973 [main:107] - replacing ("Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions, String)
2021-03-12 00:34:33,973 [main:50] - replacing "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions String
2021-03-12 00:34:33,974 [main:54] - Getting value of type String
2021-03-12 00:34:34,102 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:34,105 [main:58] - GENERATED VALUE OF TYPE String = "dwuxo"
2021-03-12 00:34:34,105 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:34,258 [main:67] - randomType = Boolean?
2021-03-12 00:34:34,405 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:34,419 [main:149] - GENERATING call of type public open fun compareTo(other: kotlin.Boolean): kotlin.Int defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@118c0c7e]
2021-03-12 00:34:34,583 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:34,585 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:34:34,714 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:34,717 [main:78] - Generated call from random type = (true)?.compareTo(false).toString(66849918)
2021-03-12 00:34:34,717 [main:114] - replacement of "Wrong state-machine generated: wrong number of overall suspensions. Expected " + numberOfSuspensions of type String is (true)?.compareTo(false).toString(66849918)
2021-03-12 00:34:34,843 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:34,843 [main:66] - Compilation checking started
2021-03-12 00:34:35,492 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        x(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((true)?.compareTo(false).toString(66849918) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:35,495 [main:107] - replacing (x, Function1<Ty0, Unit>)
2021-03-12 00:34:35,496 [main:50] - replacing x Function1<Ty0, Unit>
2021-03-12 00:34:35,496 [main:54] - Getting value of type Function1<Ty0, Unit>
2021-03-12 00:34:35,667 [main:302] - generating value of type = Function1<Ty0, Unit> false depth = 0
2021-03-12 00:34:35,669 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:34:35,676 [main:58] - GENERATED VALUE OF TYPE Function1<Ty0, Unit> = {a: Ty0 -> println()}
2021-03-12 00:34:35,676 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:36,006 [main:67] - randomType = List<UShort>
2021-03-12 00:34:36,008 [main:106] - GETTING Function1<Ty0, Unit> from String
2021-03-12 00:34:36,041 [main:106] - GETTING Function1<Ty0, Unit> from C
2021-03-12 00:34:36,048 [main:114] - replacement of x of type Function1<Ty0, Unit> is {a: Ty0 -> println()}
2021-03-12 00:34:36,193 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on LAMBDA_EXPRESSION
2021-03-12 00:34:36,193 [main:66] - Compilation checking started
2021-03-12 00:34:36,873 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((true)?.compareTo(false).toString(66849918) + ", got " + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:36,876 [main:107] - replacing ((true)?.compareTo(false).toString(66849918) + ", got ", String)
2021-03-12 00:34:36,876 [main:50] - replacing (true)?.compareTo(false).toString(66849918) + ", got " String
2021-03-12 00:34:36,876 [main:54] - Getting value of type String
2021-03-12 00:34:37,028 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:37,030 [main:58] - GENERATED VALUE OF TYPE String = "ralwm"
2021-03-12 00:34:37,030 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:37,179 [main:67] - randomType = ULong
2021-03-12 00:34:37,311 [main:302] - generating value of type = ULong true depth = 0
2021-03-12 00:34:37,351 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public final inline fun toByte(): kotlin.Byte defined in kotlin.ULong[DeserializedSimpleFunctionDescriptor@31cb0ad1]
2021-03-12 00:34:37,352 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.Byte.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4e0e506d]
2021-03-12 00:34:37,493 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:37,496 [main:78] - Generated call from random type = (8728507127607957009.toULong()).toByte().toString(-1345123000)
2021-03-12 00:34:37,496 [main:106] - GETTING String from String
2021-03-12 00:34:37,516 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aba6d1c]]
2021-03-12 00:34:37,516 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:37,652 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:37,793 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:37,795 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aba6d1c]
2021-03-12 00:34:37,927 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:38,060 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:38,063 [main:117] - GENERATED CALL = (result).subSequence(-543049400, -1385433719).commonPrefixWith(StringBuilder(), true)
2021-03-12 00:34:38,063 [main:113] - Case = [public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:34:38,063 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:34:38,189 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:38,191 [main:117] - GENERATED CALL = (result).repeat(-1324240651)
2021-03-12 00:34:38,191 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52586291]]
2021-03-12 00:34:38,191 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:38,321 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:38,324 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.Char.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@52586291]
2021-03-12 00:34:38,324 [main:117] - GENERATED CALL = (result).get(1698846528).lowercase()
2021-03-12 00:34:38,324 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]]
2021-03-12 00:34:38,324 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]
2021-03-12 00:34:38,324 [main:117] - GENERATED CALL = (result).toLowerCase()
2021-03-12 00:34:38,324 [main:113] - Case = [public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e79df6]]
2021-03-12 00:34:38,324 [main:149] - GENERATING call of type public inline fun kotlin.String.takeWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e79df6]
2021-03-12 00:34:38,452 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:34:38,454 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:34:38,457 [main:117] - GENERATED CALL = (result).takeWhile({a: Char -> false})
2021-03-12 00:34:38,457 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]]
2021-03-12 00:34:38,457 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]
2021-03-12 00:34:38,599 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:38,728 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:38,731 [main:117] - GENERATED CALL = (result).padStart(-1472691528, '醨')
2021-03-12 00:34:38,731 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:34:38,731 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:34:38,858 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:34:38,860 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:34:38,863 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> true})
2021-03-12 00:34:38,863 [main:113] - Case = [public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1adfa]]
2021-03-12 00:34:38,863 [main:149] - GENERATING call of type public fun kotlin.String.take(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4aa1adfa]
2021-03-12 00:34:39,026 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:39,029 [main:117] - GENERATED CALL = (result).take(-584843758)
2021-03-12 00:34:39,029 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6abe83b1]]
2021-03-12 00:34:39,029 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6abe83b1]
2021-03-12 00:34:39,182 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:39,316 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:34:39,319 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:34:39,751 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:34:39,753 [main:95] - GENERATED = StringBuilder(1782240884)
2021-03-12 00:34:39,753 [main:117] - GENERATED CALL = (result).removeSurrounding(StringBuilder(1782240884))
2021-03-12 00:34:39,754 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78011251]]
2021-03-12 00:34:39,754 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78011251]
2021-03-12 00:34:39,883 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:39,886 [main:117] - GENERATED CALL = (result).dropLast(946597931)
2021-03-12 00:34:39,886 [main:114] - replacement of (true)?.compareTo(false).toString(66849918) + ", got " of type String is (8728507127607957009.toULong()).toByte().toString(-1345123000)
2021-03-12 00:34:40,014 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:40,015 [main:66] - Compilation checking started
2021-03-12 00:34:40,646 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:40,650 [main:107] - replacing (prope5, Boolean)
2021-03-12 00:34:40,651 [main:50] - replacing prope5 Boolean
2021-03-12 00:34:40,651 [main:54] - Getting value of type Boolean
2021-03-12 00:34:40,823 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:40,826 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:34:40,826 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:40,969 [main:67] - randomType = Char
2021-03-12 00:34:41,113 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:41,143 [main:149] - GENERATING call of type public final fun toFloat(): kotlin.Float defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@eb7e528]
2021-03-12 00:34:41,143 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Float[DeserializedSimpleFunctionDescriptor@7a37901f]
2021-03-12 00:34:41,278 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:41,278 [main:78] - Generated call from random type = ('Ⴕ').toFloat().equals("ucani")
2021-03-12 00:34:41,279 [main:106] - GETTING Boolean from String
2021-03-12 00:34:41,301 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60bd0862]]
2021-03-12 00:34:41,301 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]
2021-03-12 00:34:41,428 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:41,429 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60bd0862]
2021-03-12 00:34:41,557 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:41,559 [main:117] - GENERATED CALL = (result).equals("fcjnb").or(true)
2021-03-12 00:34:41,560 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156e3dce]]
2021-03-12 00:34:41,560 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:41,560 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@156e3dce]
2021-03-12 00:34:41,688 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:41,689 [main:117] - GENERATED CALL = (result).compareTo(var result =.equals("wowbn")
2021-03-12 00:34:41,689 [main:113] - Case = [@kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a19cb0c]]
2021-03-12 00:34:41,689 [main:149] - GENERATING call of type @kotlin.Deprecated @kotlin.DeprecatedSinceKotlin @kotlin.internal.InlineOnly public inline fun kotlin.String.toBoolean(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5a19cb0c]
2021-03-12 00:34:41,689 [main:117] - GENERATED CALL = (result).toBoolean()
2021-03-12 00:34:41,689 [main:113] - Case = [public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28d37c1d]]
2021-03-12 00:34:41,689 [main:149] - GENERATING call of type public fun kotlin.CharSequence.none(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@28d37c1d]
2021-03-12 00:34:41,689 [main:117] - GENERATED CALL = (result).none()
2021-03-12 00:34:41,689 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2623dc86]]
2021-03-12 00:34:41,690 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:41,820 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:41,823 [main:149] - GENERATING call of type public fun kotlin.Char.isWhitespace(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2623dc86]
2021-03-12 00:34:41,823 [main:117] - GENERATED CALL = (result).get(-732280140).isWhitespace()
2021-03-12 00:34:41,823 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@5398adc9]]
2021-03-12 00:34:41,823 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:41,950 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:42,082 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:42,084 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.CharSequence[DeserializedSimpleFunctionDescriptor@5398adc9]
2021-03-12 00:34:42,233 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:42,233 [main:117] - GENERATED CALL = (result).subSequence(894130446, -378718329).equals("gyoxd")
2021-03-12 00:34:42,233 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5081b28e]]
2021-03-12 00:34:42,233 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:42,384 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:42,387 [main:149] - GENERATING call of type public fun kotlin.Char.isLetterOrDigit(): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5081b28e]
2021-03-12 00:34:42,387 [main:117] - GENERATED CALL = (result).get(1230587759).isLetterOrDigit()
2021-03-12 00:34:42,387 [main:113] - Case = [public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d3655ba]]
2021-03-12 00:34:42,387 [main:149] - GENERATING call of type public fun kotlin.String.startsWith(prefix: kotlin.String, ignoreCase: kotlin.Boolean = ...): kotlin.Boolean defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2d3655ba]
2021-03-12 00:34:42,512 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:42,641 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:42,644 [main:117] - GENERATED CALL = (result).startsWith("dfjyg", false)
2021-03-12 00:34:42,644 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2282e7de]]
2021-03-12 00:34:42,644 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]
2021-03-12 00:34:42,768 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:42,769 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2282e7de]
2021-03-12 00:34:42,894 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:42,895 [main:117] - GENERATED CALL = (result).equals("pnrzj").equals("pdkux")
2021-03-12 00:34:42,895 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]]
2021-03-12 00:34:42,895 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.String[DeserializedSimpleFunctionDescriptor@47209d16]
2021-03-12 00:34:43,036 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:43,036 [main:117] - GENERATED CALL = (result).equals("ygjat")
2021-03-12 00:34:43,036 [main:114] - replacement of prope5 of type Boolean is (result).equals("ygjat")
2021-03-12 00:34:43,163 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:43,163 [main:66] - Compilation checking started
2021-03-12 00:34:43,535 [main:49] - Result = false
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = "FAIL"
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        (result).equals("ygjat") = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:43,537 [main:107] - replacing ("FAIL", String)
2021-03-12 00:34:43,537 [main:50] - replacing "FAIL" String
2021-03-12 00:34:43,537 [main:54] - Getting value of type String
2021-03-12 00:34:43,685 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:43,687 [main:58] - GENERATED VALUE OF TYPE String = "xjrvn"
2021-03-12 00:34:43,687 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:43,831 [main:67] - randomType = Double
2021-03-12 00:34:43,959 [main:302] - generating value of type = Double true depth = 0
2021-03-12 00:34:43,990 [main:149] - GENERATING call of type public open fun toChar(): kotlin.Char defined in kotlin.Double[DeserializedSimpleFunctionDescriptor@1b4b7aa5]
2021-03-12 00:34:43,990 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi public fun kotlin.Char.titlecase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@334a878e]
2021-03-12 00:34:43,990 [main:78] - Generated call from random type = (0.6050362507256138).toChar().titlecase()
2021-03-12 00:34:43,990 [main:114] - replacement of "FAIL" of type String is (0.6050362507256138).toChar().titlecase()
2021-03-12 00:34:44,118 [main:33] - Trying to replace Element(STRING_TEMPLATE) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:44,119 [main:66] - Compilation checking started
2021-03-12 00:34:44,744 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 {
        prope2 = Kla3().fu8().fu1()
    }

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:44,747 [main:107] - replacing ({
        prope2 = Kla3().fu8().fu1()
    }, SuspendFunction0<Unit>)
2021-03-12 00:34:44,747 [main:50] - replacing {
        prope2 = Kla3().fu8().fu1()
    } SuspendFunction0<Unit>
2021-03-12 00:34:44,747 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:34:44,887 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:34:44,889 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:34:45,021 [main:43] - GENERATING CALL OF fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:34:45,024 [main:61] - WITHOUT TYPE PARAMS = fun print(message: kotlin.Any?): Unit = TODO()
2021-03-12 00:34:45,336 [main:302] - generating value of type = Any false depth = 4
2021-03-12 00:34:45,337 [main:95] - GENERATED = print("vfbzf")
2021-03-12 00:34:45,337 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { print("vfbzf")}
2021-03-12 00:34:45,337 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:45,481 [main:67] - randomType = UShort
2021-03-12 00:34:45,607 [main:302] - generating value of type = UShort true depth = 0
2021-03-12 00:34:45,637 [main:106] - GETTING SuspendFunction0<Unit> from C
2021-03-12 00:34:45,642 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 00:34:45,658 [main:114] - replacement of {
        prope2 = Kla3().fu8().fu1()
    } of type SuspendFunction0<Unit> is { print("vfbzf")}
2021-03-12 00:34:45,786 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:34:45,786 [main:66] - Compilation checking started
2021-03-12 00:34:46,369 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:46,371 [main:107] - replacing (prope2, String)
2021-03-12 00:34:46,371 [main:50] - replacing prope2 String
2021-03-12 00:34:46,371 [main:54] - Getting value of type String
2021-03-12 00:34:46,516 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:46,519 [main:58] - GENERATED VALUE OF TYPE String = "kbiru"
2021-03-12 00:34:46,519 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:46,529 [main:67] - randomType = Kla4
2021-03-12 00:34:46,657 [main:302] - generating value of type = Kla4 false depth = 0
2021-03-12 00:34:46,660 [main:112] - generating klass Kla4 text = open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}
2021-03-12 00:34:46,788 [main:194] - Type params = []
2021-03-12 00:34:46,916 [main:302] - generating value of type = CoroutineContext false depth = 2
2021-03-12 00:34:47,062 [main:43] - GENERATING CALL OF fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:34:47,066 [main:61] - WITHOUT TYPE PARAMS = fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:34:47,355 [main:302] - generating value of type = Key<*> false depth = 5
2021-03-12 00:34:47,502 [main:43] - GENERATING CALL OF fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:34:47,507 [main:61] - WITHOUT TYPE PARAMS = fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:34:47,970 [main:385] - Cant generate call of fun <B, E> AbstractCoroutineContextKey(baseKey: kotlin.coroutines.CoroutineContext.Key<Element>, safeCast: (element: kotlin.coroutines.CoroutineContext.Element)->*): Key<*> = TODO()
2021-03-12 00:34:47,970 [main:385] - Cant generate call of fun AbstractCoroutineContextElement(key: kotlin.coroutines.CoroutineContext.Key<*>): CoroutineContext = TODO()
2021-03-12 00:34:47,986 [main:106] - GETTING String from String
2021-03-12 00:34:48,009 [main:113] - Case = [public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]]
2021-03-12 00:34:48,009 [main:149] - GENERATING call of type public fun kotlin.String.decapitalize(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2509d04f]
2021-03-12 00:34:48,010 [main:117] - GENERATED CALL = (result).decapitalize()
2021-03-12 00:34:48,010 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]]
2021-03-12 00:34:48,010 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]
2021-03-12 00:34:48,144 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:34:48,146 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:34:48,149 [main:117] - GENERATED CALL = (result).dropWhile({a: Char -> false})
2021-03-12 00:34:48,149 [main:113] - Case = [public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aba6d1c]]
2021-03-12 00:34:48,149 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonPrefixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@7aba6d1c]
2021-03-12 00:34:48,277 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:48,435 [main:43] - GENERATING CALL OF fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:34:48,439 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(content: kotlin.CharSequence): CharSequence = TODO()
2021-03-12 00:34:48,731 [main:302] - generating value of type = CharSequence false depth = 3
2021-03-12 00:34:48,736 [main:95] - GENERATED = StringBuilder("ixvef")
2021-03-12 00:34:48,868 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:48,870 [main:117] - GENERATED CALL = (result).commonPrefixWith(StringBuilder("ixvef"), false)
2021-03-12 00:34:48,871 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:34:48,871 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:49,001 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:49,135 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:49,138 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:34:49,268 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:49,271 [main:117] - GENERATED CALL = (result).subSequence(-1107501829, -330216104).repeat(289824768)
2021-03-12 00:34:49,271 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]]
2021-03-12 00:34:49,271 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:34:49,406 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:49,539 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:49,542 [main:149] - GENERATING call of type public fun kotlin.CharSequence.commonSuffixWith(other: kotlin.CharSequence, ignoreCase: kotlin.Boolean = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1888f36e]
2021-03-12 00:34:49,668 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:49,828 [main:43] - GENERATING CALL OF fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:34:49,832 [main:61] - WITHOUT TYPE PARAMS = fun StringBuilder(capacity: kotlin.Int): CharSequence = TODO()
2021-03-12 00:34:50,126 [main:302] - generating value of type = Int true depth = 3
2021-03-12 00:34:50,129 [main:95] - GENERATED = StringBuilder(1409110512)
2021-03-12 00:34:50,254 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:50,256 [main:117] - GENERATED CALL = (result).subSequence(-1968045652, -929773).commonSuffixWith(StringBuilder(1409110512), false)
2021-03-12 00:34:50,257 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]]
2021-03-12 00:34:50,257 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.substring(startIndex: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@29394410]
2021-03-12 00:34:50,388 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:50,391 [main:117] - GENERATED CALL = (result).substring(501228819)
2021-03-12 00:34:50,391 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]]
2021-03-12 00:34:50,391 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.concat(str: kotlin.String): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@119b3a57]
2021-03-12 00:34:50,391 [main:117] - GENERATED CALL = (result).concat(result)
2021-03-12 00:34:50,391 [main:113] - Case = [public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3a4a02]]
2021-03-12 00:34:50,391 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndent(newIndent: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@f3a4a02]
2021-03-12 00:34:50,391 [main:117] - GENERATED CALL = (result).replaceIndent(var result =
2021-03-12 00:34:50,391 [main:113] - Case = [public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]]
2021-03-12 00:34:50,391 [main:149] - GENERATING call of type public fun kotlin.String.padStart(length: kotlin.Int, padChar: kotlin.Char = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2a37ad78]
2021-03-12 00:34:50,517 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:50,649 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:34:50,652 [main:117] - GENERATED CALL = (result).padStart(804959445, '暘')
2021-03-12 00:34:50,652 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]]
2021-03-12 00:34:50,652 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.toLowerCase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@56cfd01b]
2021-03-12 00:34:50,652 [main:117] - GENERATED CALL = (result).toLowerCase()
2021-03-12 00:34:50,652 [main:114] - replacement of prope2 of type String is (result).padStart(804959445, '暘')
2021-03-12 00:34:50,786 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:50,787 [main:66] - Compilation checking started
2021-03-12 00:34:51,395 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6()))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:51,399 [main:107] - replacing (fu6(), Long)
2021-03-12 00:34:51,400 [main:50] - replacing fu6() Long
2021-03-12 00:34:51,400 [main:54] - Getting value of type Long
2021-03-12 00:34:51,589 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:51,591 [main:58] - GENERATED VALUE OF TYPE Long = -114274623341929735
2021-03-12 00:34:51,591 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:51,601 [main:67] - randomType = C
2021-03-12 00:34:51,732 [main:302] - generating value of type = C false depth = 0
2021-03-12 00:34:51,734 [main:112] - generating klass C text = class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}
2021-03-12 00:34:51,740 [main:106] - GETTING Long from C
2021-03-12 00:34:51,744 [main:106] - GETTING Long from String
2021-03-12 00:34:51,760 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]]
2021-03-12 00:34:51,760 [main:149] - GENERATING call of type public final operator fun minus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@34f70735]
2021-03-12 00:34:51,887 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:51,889 [main:117] - GENERATED CALL = (result).length.minus(5061585023023712767)
2021-03-12 00:34:51,889 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]]
2021-03-12 00:34:51,889 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:52,019 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:52,021 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]
2021-03-12 00:34:52,021 [main:117] - GENERATED CALL = (result).compareTo("eqlrr").toLong()
2021-03-12 00:34:52,022 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]]
2021-03-12 00:34:52,022 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]
2021-03-12 00:34:52,154 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:52,156 [main:117] - GENERATED CALL = (result).length.times(-6765718385378239579)
2021-03-12 00:34:52,156 [main:113] - Case = [public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df57c84]]
2021-03-12 00:34:52,156 [main:149] - GENERATING call of type public fun kotlin.String.toLong(): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@4df57c84]
2021-03-12 00:34:52,157 [main:117] - GENERATED CALL = (result).toLong()
2021-03-12 00:34:52,157 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]]
2021-03-12 00:34:52,157 [main:149] - GENERATING call of type public open fun toLong(): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@2ebe69e]
2021-03-12 00:34:52,157 [main:117] - GENERATED CALL = (result).length.toLong()
2021-03-12 00:34:52,157 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]]
2021-03-12 00:34:52,157 [main:149] - GENERATING call of type public final operator fun plus(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@1e88664d]
2021-03-12 00:34:52,284 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:52,286 [main:117] - GENERATED CALL = (result).length.plus(2355040199092772836)
2021-03-12 00:34:52,286 [main:113] - Case = [public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f], public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]]
2021-03-12 00:34:52,286 [main:149] - GENERATING call of type public abstract operator fun compareTo(other: kotlin.String): kotlin.Int defined in kotlin.Comparable[DeserializedSimpleFunctionDescriptor@16e9fc1f]
2021-03-12 00:34:52,286 [main:149] - GENERATING call of type public final operator fun times(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@6a25713b]
2021-03-12 00:34:52,415 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:52,418 [main:117] - GENERATED CALL = (result).compareTo(result).times(3158654604265647511)
2021-03-12 00:34:52,418 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]]
2021-03-12 00:34:52,418 [main:149] - GENERATING call of type public final operator fun div(other: kotlin.Long): kotlin.Long defined in kotlin.Int[DeserializedSimpleFunctionDescriptor@425fa2ea]
2021-03-12 00:34:52,550 [main:302] - generating value of type = Long true depth = 0
2021-03-12 00:34:52,552 [main:117] - GENERATED CALL = (result).length.div(-7948812540399697009)
2021-03-12 00:34:52,552 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]]
2021-03-12 00:34:52,552 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.CharSequence.sumOf(selector: (kotlin.Char) -> kotlin.Long): kotlin.Long defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3719a12a]
2021-03-12 00:34:52,682 [main:302] - generating value of type = Function1<Char, Long> false depth = 0
2021-03-12 00:34:52,685 [main:302] - generating value of type = Long true depth = 1
2021-03-12 00:34:52,687 [main:117] - GENERATED CALL = (result).sumOf({a: Char -> -5211126291862251800})
2021-03-12 00:34:52,688 [main:113] - Case = [public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11], public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a2743c9]]
2021-03-12 00:34:52,688 [main:149] - GENERATING call of type public open fun get(index: kotlin.Int): kotlin.Char defined in kotlin.String[DeserializedSimpleFunctionDescriptor@49099a11]
2021-03-12 00:34:52,819 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:52,822 [main:149] - GENERATING call of type public final fun toLong(): kotlin.Long defined in kotlin.Char[DeserializedSimpleFunctionDescriptor@3a2743c9]
2021-03-12 00:34:52,822 [main:117] - GENERATED CALL = (result).get(1730274605).toLong()
2021-03-12 00:34:52,822 [main:114] - replacement of fu6() of type Long is (result).length.div(-7948812540399697009)
2021-03-12 00:34:52,973 [main:33] - Trying to replace Element(CALL_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:52,974 [main:66] - Compilation checking started
2021-03-12 00:34:53,599 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {
        fu11(it)
    }

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:53,601 [main:107] - replacing ({
        fu11(it)
    }, Function1<Continuation<Unit>, Unit>)
2021-03-12 00:34:53,601 [main:50] - replacing {
        fu11(it)
    } Function1<Continuation<Unit>, Unit>
2021-03-12 00:34:53,601 [main:54] - Getting value of type Function1<Continuation<Unit>, Unit>
2021-03-12 00:34:53,735 [main:302] - generating value of type = Function1<Continuation<Unit>, Unit> false depth = 0
2021-03-12 00:34:53,737 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:34:53,869 [main:43] - GENERATING CALL OF fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:34:53,873 [main:61] - WITHOUT TYPE PARAMS = fun check(value: kotlin.Boolean): Unit = TODO()
2021-03-12 00:34:54,150 [main:302] - generating value of type = Boolean true depth = 4
2021-03-12 00:34:54,153 [main:95] - GENERATED = check(false)
2021-03-12 00:34:54,153 [main:58] - GENERATED VALUE OF TYPE Function1<Continuation<Unit>, Unit> = {a: Continuation<Unit> -> check(false)}
2021-03-12 00:34:54,153 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:55,101 [main:67] - randomType = Triple<Set<Int?>, Function1<Function1<Kla5, Array<Double>>, Long>, Long>
2021-03-12 00:34:55,230 [main:302] - generating value of type = Triple<Set<Int?>, Function1<Function1<Kla5, Array<Double>>, Long>, Long> false depth = 0
2021-03-12 00:34:55,369 [main:43] - GENERATING CALL OF fun <A, B, C> Triple(first: Set<Int?>, second: Function1<Function1<Kla5, Array<Double>>, Long>, third: Long): Triple<Set<Int?>, Function1<Function1<Kla5, Array<Double>>, Long>, Long> = TODO()
2021-03-12 00:34:55,372 [main:61] - WITHOUT TYPE PARAMS = fun <A, B, C> Triple(first: Set<Int?>, second: Function1<Function1<Kla5, Array<Double>>, Long>, third: Long): Triple<Set<Int?>, Function1<Function1<Kla5, Array<Double>>, Long>, Long> = TODO()
2021-03-12 00:34:55,506 [main:302] - generating value of type = Set<Int?> false depth = 3
2021-03-12 00:34:55,638 [main:43] - GENERATING CALL OF fun <T> linkedSetOf(elements: Int?): Set<Int?> = TODO()
2021-03-12 00:34:55,641 [main:61] - WITHOUT TYPE PARAMS = fun <T> linkedSetOf(elements: Int?): Set<Int?> = TODO()
2021-03-12 00:34:55,774 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:34:55,776 [main:95] - GENERATED = linkedSetOf<Int?>(2134705839)
2021-03-12 00:34:55,776 [main:302] - generating value of type = Function1<Function1<Kla5, Array<Double>>, Long> false depth = 3
2021-03-12 00:34:55,778 [main:302] - generating value of type = Long true depth = 4
2021-03-12 00:34:55,781 [main:302] - generating value of type = Long true depth = 3
2021-03-12 00:34:55,783 [main:95] - GENERATED = Triple<Set<Int?>, Function1<Function1<Kla5, Array<Double>>, Long>, Long>(linkedSetOf<Int?>(2134705839), {a: Function1<Kla5, Array<Double>> -> -5118483649109492645}, -7931736700595437708)
2021-03-12 00:34:55,809 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from String
2021-03-12 00:34:55,831 [main:106] - GETTING Function1<Continuation<Unit>, Unit> from C
2021-03-12 00:34:55,835 [main:114] - replacement of {
        fu11(it)
    } of type Function1<Continuation<Unit>, Unit> is {a: Continuation<Unit> -> check(false)}
2021-03-12 00:34:55,996 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:34:55,996 [main:66] - Compilation checking started
2021-03-12 00:34:56,609 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:56,613 [main:107] - replacing (false, Boolean)
2021-03-12 00:34:56,613 [main:50] - replacing false Boolean
2021-03-12 00:34:56,613 [main:54] - Getting value of type Boolean
2021-03-12 00:34:56,749 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:56,752 [main:58] - GENERATED VALUE OF TYPE Boolean = false
2021-03-12 00:34:56,752 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:56,761 [main:67] - randomType = Kla8
2021-03-12 00:34:56,891 [main:302] - generating value of type = Kla8 false depth = 0
2021-03-12 00:34:56,893 [main:112] - generating klass Kla8 text = class Kla8 {
    private var prope4 = 0
    var prope5 = false

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}
2021-03-12 00:34:56,900 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in Kla8[DeserializedSimpleFunctionDescriptor@54057e63]
2021-03-12 00:34:57,028 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:57,028 [main:78] - Generated call from random type = (Kla8()).equals("qalgs")
2021-03-12 00:34:57,029 [main:106] - GETTING Boolean from C
2021-03-12 00:34:57,033 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7], public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277040fb]]
2021-03-12 00:34:57,033 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]
2021-03-12 00:34:57,164 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:57,164 [main:149] - GENERATING call of type public final infix fun and(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@277040fb]
2021-03-12 00:34:57,294 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:57,297 [main:117] - GENERATED CALL = (C()).equals("dihvj").and(true)
2021-03-12 00:34:57,297 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7], public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6efffd0b]]
2021-03-12 00:34:57,297 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]
2021-03-12 00:34:57,438 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:57,438 [main:149] - GENERATING call of type public final infix fun xor(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@6efffd0b]
2021-03-12 00:34:57,584 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:57,587 [main:117] - GENERATED CALL = (C()).equals("tgwmy").xor(false)
2021-03-12 00:34:57,587 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]]
2021-03-12 00:34:57,587 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]
2021-03-12 00:34:57,716 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:57,717 [main:117] - GENERATED CALL = (C()).equals("manlr")
2021-03-12 00:34:57,717 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7], public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11a309d4]]
2021-03-12 00:34:57,717 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]
2021-03-12 00:34:57,843 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:57,843 [main:149] - GENERATING call of type public final operator fun not(): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@11a309d4]
2021-03-12 00:34:57,843 [main:117] - GENERATED CALL = (C()).equals("khsdm").not()
2021-03-12 00:34:57,843 [main:113] - Case = [public final fun overload(): kotlin.Unit defined in C[SimpleFunctionDescriptorImpl@206cfc9b], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@4f71ceb2]]
2021-03-12 00:34:57,843 [main:149] - GENERATING call of type public final fun overload(): kotlin.Unit defined in C[SimpleFunctionDescriptorImpl@206cfc9b]
2021-03-12 00:34:57,843 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Unit[DeserializedSimpleFunctionDescriptor@4f71ceb2]
2021-03-12 00:34:57,970 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:57,970 [main:117] - GENERATED CALL = (C()).overload().equals("xtnjk")
2021-03-12 00:34:57,970 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7], public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60bd0862]]
2021-03-12 00:34:57,970 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]
2021-03-12 00:34:58,098 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:58,099 [main:149] - GENERATING call of type public final infix fun or(other: kotlin.Boolean): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@60bd0862]
2021-03-12 00:34:58,231 [main:302] - generating value of type = Boolean true depth = 0
2021-03-12 00:34:58,234 [main:117] - GENERATED CALL = (C()).equals("hsgmu").or(true)
2021-03-12 00:34:58,234 [main:113] - Case = [public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7], public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2282e7de]]
2021-03-12 00:34:58,234 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in C[DeserializedSimpleFunctionDescriptor@3e7935c7]
2021-03-12 00:34:58,361 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:58,361 [main:149] - GENERATING call of type public open fun equals(other: kotlin.Any?): kotlin.Boolean defined in kotlin.Boolean[DeserializedSimpleFunctionDescriptor@2282e7de]
2021-03-12 00:34:58,489 [main:302] - generating value of type = Any false depth = 0
2021-03-12 00:34:58,489 [main:117] - GENERATED CALL = (C()).equals("sessr").equals("lkljl")
2021-03-12 00:34:58,489 [main:114] - replacement of false of type Boolean is (C()).equals("sessr").equals("lkljl")
2021-03-12 00:34:58,620 [main:33] - Trying to replace Element(BOOLEAN_CONSTANT) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:34:58,620 [main:66] - Compilation checking started
2021-03-12 00:34:59,226 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = Kla1().fu8().fu1()
    }

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = (C()).equals("sessr").equals("lkljl")

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:34:59,230 [main:107] - replacing (Kla1().fu8().fu1(), String)
2021-03-12 00:34:59,230 [main:50] - replacing Kla1().fu8().fu1() String
2021-03-12 00:34:59,230 [main:54] - Getting value of type String
2021-03-12 00:34:59,374 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:34:59,377 [main:58] - GENERATED VALUE OF TYPE String = "fwywz"
2021-03-12 00:34:59,377 [main:61] - GENERATED IS CALL =false
2021-03-12 00:34:59,386 [main:67] - randomType = Kla2
2021-03-12 00:34:59,517 [main:302] - generating value of type = Kla2 false depth = 0
2021-03-12 00:34:59,519 [main:112] - generating klass Kla2 text = class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}
2021-03-12 00:34:59,528 [main:149] - GENERATING call of type public final suspend fun fu6(): kotlin.Long defined in Kla2[SimpleFunctionDescriptorImpl@7c2e2acc]
2021-03-12 00:34:59,528 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c4ba0e3]
2021-03-12 00:34:59,662 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:34:59,664 [main:78] - Generated call from random type = (Kla2()).fu6().toString(499639430)
2021-03-12 00:34:59,665 [main:106] - GETTING String from C
2021-03-12 00:34:59,670 [main:106] - GETTING String from String
2021-03-12 00:34:59,685 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:34:59,685 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:34:59,814 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:34:59,816 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:34:59,819 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> true})
2021-03-12 00:34:59,819 [main:113] - Case = [public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@150ef29c]]
2021-03-12 00:34:59,819 [main:149] - GENERATING call of type public fun kotlin.String.removePrefix(prefix: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@150ef29c]
2021-03-12 00:34:59,947 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:34:59,953 [main:117] - GENERATED CALL = (result).removePrefix(StringBuilder())
2021-03-12 00:34:59,953 [main:113] - Case = [public open val length: kotlin.Int defined in kotlin.String[DeserializedPropertyDescriptor@9f5022c], @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]]
2021-03-12 00:34:59,953 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Int.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@3958d29f]
2021-03-12 00:35:00,085 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:00,088 [main:117] - GENERATED CALL = (result).length.toString(-297955309)
2021-03-12 00:35:00,088 [main:113] - Case = [public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fffa4c]]
2021-03-12 00:35:00,088 [main:149] - GENERATING call of type public fun kotlin.String.replaceBeforeLast(delimiter: kotlin.Char, replacement: kotlin.String, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@39fffa4c]
2021-03-12 00:35:00,216 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:35:00,344 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:35:00,347 [main:117] - GENERATED CALL = (result).replaceBeforeLast('䍂', result, "ttrnz")
2021-03-12 00:35:00,347 [main:113] - Case = [public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@592b2a6d]]
2021-03-12 00:35:00,347 [main:149] - GENERATING call of type public inline fun kotlin.String.filterIndexed(predicate: (index: kotlin.Int, kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@592b2a6d]
2021-03-12 00:35:00,475 [main:302] - generating value of type = Function2<[@kotlin.ParameterName] Int, Char, Boolean> false depth = 0
2021-03-12 00:35:00,478 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:35:00,480 [main:117] - GENERATED CALL = (result).filterIndexed({a: Int, b: Char -> false})
2021-03-12 00:35:00,480 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]]
2021-03-12 00:35:00,480 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]
2021-03-12 00:35:00,628 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:35:00,762 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:35:00,764 [main:117] - GENERATED CALL = (result).substringBefore('ㆺ', "beroj")
2021-03-12 00:35:00,764 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]]
2021-03-12 00:35:00,765 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.internal.InlineOnly public inline fun kotlin.String.lowercase(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@c0a9376]
2021-03-12 00:35:00,765 [main:117] - GENERATED CALL = (result).lowercase()
2021-03-12 00:35:00,765 [main:113] - Case = [public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]]
2021-03-12 00:35:00,765 [main:149] - GENERATING call of type public fun kotlin.String.substringAfter(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@a79e25c]
2021-03-12 00:35:00,892 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:35:00,894 [main:117] - GENERATED CALL = (result).substringAfter('혦', result)
2021-03-12 00:35:00,894 [main:113] - Case = [public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78011251]]
2021-03-12 00:35:00,894 [main:149] - GENERATING call of type public fun kotlin.String.dropLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@78011251]
2021-03-12 00:35:01,025 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:01,028 [main:117] - GENERATED CALL = (result).dropLast(-1907832918)
2021-03-12 00:35:01,028 [main:113] - Case = [public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]]
2021-03-12 00:35:01,028 [main:149] - GENERATING call of type public inline fun kotlin.String.dropWhile(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@1936f8d4]
2021-03-12 00:35:01,160 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:35:01,162 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:35:01,165 [main:117] - GENERATED CALL = (result).dropWhile({a: Char -> true})
2021-03-12 00:35:01,165 [main:114] - replacement of Kla1().fu8().fu1() of type String is (result).substringBefore('ㆺ', "beroj")
2021-03-12 00:35:01,296 [main:33] - Trying to replace Element(DOT_QUALIFIED_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:35:01,296 [main:66] - Compilation checking started
2021-03-12 00:35:01,916 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 {
        prope2 = (result).substringBefore('ㆺ', "beroj")
    }

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = (C()).equals("sessr").equals("lkljl")

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:35:01,918 [main:107] - replacing (getOrThrow(), Ty0)
2021-03-12 00:35:01,919 [main:50] - replacing getOrThrow() Ty0
2021-03-12 00:35:01,919 [main:54] - Getting value of type Ty0
2021-03-12 00:35:02,055 [main:302] - generating value of type = Ty0 false depth = 0
2021-03-12 00:35:02,061 [main:58] - GENERATED VALUE OF TYPE Ty0 = 
2021-03-12 00:35:02,213 [main:67] - randomType = Kla7?
2021-03-12 00:35:02,360 [main:302] - generating value of type = Kla7 false depth = 0
2021-03-12 00:35:02,363 [main:112] - generating klass Kla7 text = class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}
2021-03-12 00:35:02,369 [main:106] - GETTING Ty0 from String
2021-03-12 00:35:02,386 [main:106] - GETTING Ty0 from C
2021-03-12 00:35:02,390 [main:111] - Cant find and generate replacement for getOrThrow() type Ty0
2021-03-12 00:35:02,390 [main:107] - replacing ({
        prope2 = (result).substringBefore('ㆺ', "beroj")
    }, SuspendFunction0<Unit>)
2021-03-12 00:35:02,390 [main:50] - replacing {
        prope2 = (result).substringBefore('ㆺ', "beroj")
    } SuspendFunction0<Unit>
2021-03-12 00:35:02,390 [main:54] - Getting value of type SuspendFunction0<Unit>
2021-03-12 00:35:02,517 [main:302] - generating value of type = SuspendFunction0<Unit> false depth = 0
2021-03-12 00:35:02,519 [main:302] - generating value of type = Unit false depth = 1
2021-03-12 00:35:02,525 [main:58] - GENERATED VALUE OF TYPE SuspendFunction0<Unit> = { println()}
2021-03-12 00:35:02,525 [main:61] - GENERATED IS CALL =false
2021-03-12 00:35:02,831 [main:67] - randomType = LinkedHashMap<Char?, Int>
2021-03-12 00:35:02,958 [main:302] - generating value of type = LinkedHashMap<Char?, Int> false depth = 0
2021-03-12 00:35:03,091 [main:43] - GENERATING CALL OF fun <K, V> linkedMapOf(pairs: Pair<Char?, Int>): LkedHashMap<Char?, Int> = TODO()
2021-03-12 00:35:03,095 [main:61] - WITHOUT TYPE PARAMS = fun <K, V> linkedMapOf(pairs: Pair<Char?, Int>): LkedHashMap<Char?, Int> = TODO()
2021-03-12 00:35:03,228 [main:302] - generating value of type = Pair<Char?, Int> false depth = 3
2021-03-12 00:35:03,362 [main:43] - GENERATING CALL OF fun <A, B> Pair(first: Char?, second: Int): Pair<Char?, Int> = TODO()
2021-03-12 00:35:03,365 [main:61] - WITHOUT TYPE PARAMS = fun <A, B> Pair(first: Char?, second: Int): Pair<Char?, Int> = TODO()
2021-03-12 00:35:03,506 [main:302] - generating value of type = Char true depth = 6
2021-03-12 00:35:03,509 [main:302] - generating value of type = Int true depth = 6
2021-03-12 00:35:03,511 [main:95] - GENERATED = Pair<Char?, Int>('q', -1157038369)
2021-03-12 00:35:03,511 [main:95] - GENERATED = linkedMapOf<Char?, Int>(Pair<Char?, Int>('q', -1157038369))
2021-03-12 00:35:03,688 [main:106] - GETTING SuspendFunction0<Unit> from C
2021-03-12 00:35:03,694 [main:106] - GETTING SuspendFunction0<Unit> from String
2021-03-12 00:35:03,724 [main:114] - replacement of {
        prope2 = (result).substringBefore('ㆺ', "beroj")
    } of type SuspendFunction0<Unit> is { println()}
2021-03-12 00:35:03,877 [main:33] - Trying to replace LAMBDA_EXPRESSION on LAMBDA_EXPRESSION
2021-03-12 00:35:03,878 [main:66] - Compilation checking started
2021-03-12 00:35:04,561 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 { println()}

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true }?.let { error("tail-call optimization miss: method at " + it + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = (C()).equals("sessr").equals("lkljl")

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:35:04,563 [main:107] - replacing ("tail-call optimization miss: method at " + it, String)
2021-03-12 00:35:04,564 [main:50] - replacing "tail-call optimization miss: method at " + it String
2021-03-12 00:35:04,564 [main:54] - Getting value of type String
2021-03-12 00:35:04,695 [main:302] - generating value of type = String true depth = 0
2021-03-12 00:35:04,697 [main:58] - GENERATED VALUE OF TYPE String = "lxplx"
2021-03-12 00:35:04,697 [main:61] - GENERATED IS CALL =false
2021-03-12 00:35:04,707 [main:67] - randomType = Kla0
2021-03-12 00:35:04,841 [main:302] - generating value of type = Kla0 false depth = 0
2021-03-12 00:35:04,843 [main:112] - generating klass Kla0 text = @Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)
2021-03-12 00:35:04,980 [main:194] - Type params = []
2021-03-12 00:35:05,114 [main:302] - generating value of type = Long true depth = 2
2021-03-12 00:35:05,124 [main:149] - GENERATING call of type @kotlin.SinceKotlin public fun kotlin.Long.toString(radix: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@5c4ba0e3]
2021-03-12 00:35:05,256 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:05,259 [main:78] - Generated call from random type = (Kla0(-933122845502789737)).s.toString(1262801077)
2021-03-12 00:35:05,260 [main:106] - GETTING String from C
2021-03-12 00:35:05,265 [main:106] - GETTING String from String
2021-03-12 00:35:05,287 [main:113] - Case = [public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]]
2021-03-12 00:35:05,287 [main:149] - GENERATING call of type public fun kotlin.String.substringBefore(delimiter: kotlin.Char, missingDelimiterValue: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@67b5422b]
2021-03-12 00:35:05,416 [main:302] - generating value of type = Char true depth = 0
2021-03-12 00:35:05,419 [main:117] - GENERATED CALL = (result).substringBefore('㊄', result)
2021-03-12 00:35:05,419 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53927133]]
2021-03-12 00:35:05,419 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.trimEnd(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@53927133]
2021-03-12 00:35:05,419 [main:117] - GENERATED CALL = (result).trimEnd()
2021-03-12 00:35:05,419 [main:113] - Case = [public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@646a7265]]
2021-03-12 00:35:05,419 [main:149] - GENERATING call of type public fun kotlin.String.takeLast(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@646a7265]
2021-03-12 00:35:05,546 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:05,549 [main:117] - GENERATED CALL = (result).takeLast(1542528596)
2021-03-12 00:35:05,549 [main:113] - Case = [@kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e7633]]
2021-03-12 00:35:05,549 [main:149] - GENERATING call of type @kotlin.SinceKotlin @kotlin.ExperimentalStdlibApi @kotlin.OverloadResolutionByLambdaReturnType @kotlin.jvm.JvmName @kotlin.internal.InlineOnly public inline fun kotlin.String.replaceFirstChar(transform: (kotlin.Char) -> kotlin.Char): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@58e7633]
2021-03-12 00:35:05,682 [main:302] - generating value of type = Function1<Char, Char> false depth = 0
2021-03-12 00:35:05,685 [main:302] - generating value of type = Char true depth = 1
2021-03-12 00:35:05,687 [main:117] - GENERATED CALL = (result).replaceFirstChar({a: Char -> 'ꎟ'})
2021-03-12 00:35:05,687 [main:113] - Case = [@kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a610386]]
2021-03-12 00:35:05,687 [main:149] - GENERATING call of type @kotlin.internal.InlineOnly public inline fun kotlin.String.reversed(): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6a610386]
2021-03-12 00:35:05,687 [main:117] - GENERATED CALL = (result).reversed()
2021-03-12 00:35:05,687 [main:113] - Case = [public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]]
2021-03-12 00:35:05,688 [main:149] - GENERATING call of type public fun kotlin.String.replaceIndentByMargin(newIndent: kotlin.String = ..., marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6bbf0d67]
2021-03-12 00:35:05,688 [main:117] - GENERATED CALL = (result).replaceIndentByMargin(var result =
2021-03-12 00:35:05,688 [main:113] - Case = [public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2efe5f95]]
2021-03-12 00:35:05,688 [main:149] - GENERATING call of type public fun kotlin.String.trimMargin(marginPrefix: kotlin.String = ...): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2efe5f95]
2021-03-12 00:35:05,688 [main:117] - GENERATED CALL = (result).trimMargin(var result =
2021-03-12 00:35:05,688 [main:113] - Case = [public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]]
2021-03-12 00:35:05,688 [main:149] - GENERATING call of type public inline fun kotlin.String.filterNot(predicate: (kotlin.Char) -> kotlin.Boolean): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@2431cd8]
2021-03-12 00:35:05,816 [main:302] - generating value of type = Function1<Char, Boolean> false depth = 0
2021-03-12 00:35:05,818 [main:302] - generating value of type = Boolean true depth = 1
2021-03-12 00:35:05,821 [main:117] - GENERATED CALL = (result).filterNot({a: Char -> false})
2021-03-12 00:35:05,821 [main:113] - Case = [public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6abe83b1]]
2021-03-12 00:35:05,821 [main:149] - GENERATING call of type public fun kotlin.String.removeSurrounding(delimiter: kotlin.CharSequence): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@6abe83b1]
2021-03-12 00:35:05,974 [main:302] - generating value of type = CharSequence false depth = 0
2021-03-12 00:35:05,979 [main:117] - GENERATED CALL = (result).removeSurrounding("ghcbd")
2021-03-12 00:35:05,979 [main:113] - Case = [public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61], public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]]
2021-03-12 00:35:05,979 [main:149] - GENERATING call of type public open fun subSequence(startIndex: kotlin.Int, endIndex: kotlin.Int): kotlin.CharSequence defined in kotlin.String[DeserializedSimpleFunctionDescriptor@10249c61]
2021-03-12 00:35:06,112 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:06,247 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:06,250 [main:149] - GENERATING call of type public fun kotlin.CharSequence.repeat(n: kotlin.Int): kotlin.String defined in kotlin.text[DeserializedSimpleFunctionDescriptor@736172da]
2021-03-12 00:35:06,379 [main:302] - generating value of type = Int true depth = 0
2021-03-12 00:35:06,381 [main:117] - GENERATED CALL = (result).subSequence(99667944, -1334619777).repeat(1046798264)
2021-03-12 00:35:06,381 [main:114] - replacement of "tail-call optimization miss: method at " + it of type String is (result).substringBefore('㊄', result)
2021-03-12 00:35:06,510 [main:33] - Trying to replace Element(BINARY_EXPRESSION) on Element(DOT_QUALIFIED_EXPRESSION)
2021-03-12 00:35:06,510 [main:66] - Compilation checking started
2021-03-12 00:35:07,122 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 { println()}

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        var result = ""
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((result).substringBefore('㊄', result) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = (C()).equals("sessr").equals("lkljl")

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:35:07,124 [main:107] - replacing (this, Kla5)
2021-03-12 00:35:07,124 [main:50] - replacing this Kla5
2021-03-12 00:35:07,124 [main:54] - Getting value of type Kla5
2021-03-12 00:35:07,264 [main:302] - generating value of type = Kla5 false depth = 0
2021-03-12 00:35:07,267 [main:112] - generating klass Kla5 text = class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        var result = ""
this.prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}
2021-03-12 00:35:07,267 [main:58] - GENERATED VALUE OF TYPE Kla5 = Kla5()
2021-03-12 00:35:07,267 [main:61] - GENERATED IS CALL =true
2021-03-12 00:35:08,349 [main:67] - randomType = Kla6<Triple<UInt?, ULong?, UByte>>?
2021-03-12 00:35:08,479 [main:302] - generating value of type = Kla6<Triple<UInt?, ULong?, UByte>> false depth = 0
2021-03-12 00:35:08,482 [main:112] - generating klass Kla6 text = abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}
2021-03-12 00:35:08,919 [main:302] - generating value of type = Kla9 false depth = 2
2021-03-12 00:35:08,921 [main:112] - generating klass Kla9 text = object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}
2021-03-12 00:35:08,942 [main:106] - GETTING Kla5 from C
2021-03-12 00:35:08,946 [main:106] - GETTING Kla5 from String
2021-03-12 00:35:08,962 [main:114] - replacement of this of type Kla5 is Kla5()
2021-03-12 00:35:09,101 [main:33] - Trying to replace Element(REFERENCE_EXPRESSION) on Element(CALL_EXPRESSION)
2021-03-12 00:35:09,102 [main:66] - Compilation checking started
2021-03-12 00:35:09,680 [main:53] - Result = true
Text:

import kotlin.coroutines.*
import kotlin.coroutines.intrinsics.*
import kotlin.coroutines.jvm.internal.CoroutineStackFrame
var result = ""

fun overload() {
    fun local() {
        result += "1"
    }
    local()
}

fun overload(unused: String) {
    fun local() {
        result += "2"
    }
    local()
    if ("".length < 1) {
        fun local() {
            result += "3"
        }
        local()
    }
}

class C {
    fun overload() {
        fun local() {
            result += "4"
        }
        local()
    }

    fun overload(unused: String) {
        fun local() {
            result += "5"
        }
        local()
        if ("".length < 1) {
            fun local() {
                result += "6"
            }
            local()
        }
    }
}

fun box(): String {
    overload()
    overload("")
    C().overload()
    C().overload("")
    return if (result == "123456") "OK" else "Fail: $result"
}

fun fu0(c: suspend () -> Unit) {
    c.startCoroutine(Kla4)
}

@Suppress("UNSUPPORTED_FEATURE")
inline class Kla0(val s: Long)

class Kla1() {

    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu5(ss: Kla0): Kla0 = Kla0((result).compareTo(result).minus(7289828684213160217))

    suspend fun <Ty0> fu6(t: Ty0): Ty0 = t

    suspend fun fu7(): Kla0 {
        return fu4(fu5(fu6(Kla0(42L))))
    }

    suspend fun fu8() = fu7().s
}

class Kla2 {

    suspend fun fu4(value: Kla0): Kla0 = value

    suspend fun fu5(s: Long): Kla0 = Kla0(s)

    suspend fun fu6() = 42L

    suspend fun fu7(): Kla0 {
        var result = ""
return fu4(fu5((result).length.div(-7948812540399697009)))
    }

    suspend fun fu8() = fu7().s
}

class Kla3 {
    suspend fun <Ty0> fu4(value: Ty0): Ty0 = value

    suspend fun fu7(): Kla0 {
        return fu4(Kla0(42L))
    }

    suspend fun fu8() = fu7().s
}

fun Long.fu1() =
    if (this == 42L) "OK" else toString()

fun box875(): String {

    var result = ""
var prope2: String = (0.6050362507256138).toChar().titlecase()
    fu0 { println()}

    if ((result).padStart(804959445, '暘') != "OK") return "FAIL 1 $(result).substring(1314805657)"

    prope2 = "FAIL2"

    fu0 {
        prope2 = Kla2().fu8().fu1()
    }

    if (prope2 != "OK") return "FAIL 2 $prope2"

    prope2 = "FAIL 3"

    fu0 { print("vfbzf")}

    return prope2 as String
}

fun <Ty0> fu2(x: (Ty0) -> Unit): Continuation<Ty0> = object: Continuation<Ty0> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
{a: Ty0 -> println()}(prope2.getOrThrow())
    }
}

fun fu3(x: (Throwable) -> Unit): Continuation<Any?> = object: Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.exceptionOrNull()?.let(x)
    }
}

open class Kla4(override val context: CoroutineContext = EmptyCoroutineContext) : Continuation<Any?> {
    companion object Kla10 : Kla4()
    override fun resumeWith(prope2: Result<Any?>) {
        prope2.getOrThrow()
    }
}

class Kla5 : Continuation<Any?> {
    override val context = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Any?>) {
        var result = ""
Kla5().prope2 = prope2.getOrThrow()
    }

    var prope2: Any? = null
}

abstract class Kla6<in Ty0> : Continuation<Ty0> {
    override val context: CoroutineContext = EmptyCoroutineContext
    override fun resumeWith(prope2: Result<Ty0>) {
        var result = ""
if (prope2.isSuccess) {
            resume(prope2.getOrThrow())
        } else {
            fu9(prope2.exceptionOrNull()!!)
        }
    }

    abstract fun fu9(exception: Throwable)
    abstract fun resume(value: Ty0)
}

class Kla7 {
    private val prope3 = arrayListOf<StackTraceElement?>()

    suspend fun fu11() = suspendCoroutineUninterceptedOrReturn<Unit> {a: Continuation<Unit> -> check(false)}

    fun fu11(c: Continuation<*>) {
        if (c !is CoroutineStackFrame) error("Continuation " + c + " is not subtype of CoroutineStackFrame")
        prope3.clear()
        var prope7: CoroutineStackFrame? = c
        while (prope7 != null) {
            prope3.add(prope7.getStackTraceElement())
            prope7 = prope7.callerFrame
        }
    }

    fun fu12(method: String) {
        var result = ""
prope3.find { it?.methodName?.startsWith(method) == true }?.let { error((result).substringBefore('㊄', result) + " has state-machine " +
                prope3.joinToString(separator = "\n")) }
    }

    fun fu13(method: String) {
        prope3.find { it?.methodName?.startsWith(method) == true } ?: error("tail-call optimization hit: method " + method + " has no state-machine " +
                prope3.joinToString(separator = "\n"))
    }
}

val prope0 = Kla7()

class Kla8 {
    private var prope4 = 0
    var prope5 = (C()).equals("sessr").equals("lkljl")

    var prope6: () -> Unit = {}

    fun fu14() {
        var result = ""
prope4 = 0
        prope5 = false
        prope6 = {}
    }

    suspend fun fu15() = suspendCoroutine<Unit> { c ->
        prope4++
        prope6 = { c.resume(Unit) }
    }

    fun fu16(numberOfSuspensions: Int, checkFinished: Boolean = true) {
        var result = ""
for (i in 1..numberOfSuspensions) {
            if (prope4 != i) error("Wrong state-machine generated: suspendHere should be called exactly once in one state. Expected " + i + ", got " + prope4)
            prope6()
        }
        if (prope4 != numberOfSuspensions)
            error((8728507127607957009.toULong()).toByte().toString(-1345123000) + prope4)
        if (prope5) error("Wrong state-machine generated: it is finished early")
        prope6()
        if (checkFinished && !prope5) error("Wrong state-machine generated: it is not finished yet")
    }
}

val prope1 = Kla8()

object Kla9: Kla6<Unit>() {
    override val context: CoroutineContext
        get() = EmptyCoroutineContext

    override fun resume(value: Unit) {
        var result = ""
prope1.prope6 = {
            prope1.prope5 = true
        }
    }

    override fun fu9(exception: Throwable) {
        throw exception
    }
}


2021-03-12 00:35:09,682 [main:107] - replacing (prope2.exceptionOrNull()!!, Throwable)
2021-03-12 00:35:09,683 [main:50] - replacing prope2.exceptionOrNull()!! Throwable
2021-03-12 00:35:09,683 [main:54] - Getting value of type Throwable
